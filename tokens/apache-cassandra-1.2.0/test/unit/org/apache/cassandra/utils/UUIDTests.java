package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
db	TokenNameIdentifier
.	TokenNameDOT
marshal	TokenNameIdentifier
.	TokenNameDOT
TimeUUIDType	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
Test	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
math	TokenNameIdentifier
.	TokenNameDOT
BigInteger	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
net	TokenNameIdentifier
.	TokenNameDOT
InetAddress	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
net	TokenNameIdentifier
.	TokenNameDOT
UnknownHostException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
nio	TokenNameIdentifier
.	TokenNameDOT
ByteBuffer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
UUID	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
UUIDTests	TokenNameIdentifier
{	TokenNameLBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
verifyType1	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
UnknownHostException	TokenNameIdentifier
{	TokenNameLBRACE
UUID	TokenNameIdentifier
uuid	TokenNameIdentifier
=	TokenNameEQUAL
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
getTimeUUID	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
uuid	TokenNameIdentifier
.	TokenNameDOT
version	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
verifyOrdering1	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
UnknownHostException	TokenNameIdentifier
{	TokenNameLBRACE
UUID	TokenNameIdentifier
one	TokenNameIdentifier
=	TokenNameEQUAL
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
getTimeUUID	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
UUID	TokenNameIdentifier
two	TokenNameIdentifier
=	TokenNameEQUAL
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
getTimeUUID	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
one	TokenNameIdentifier
.	TokenNameDOT
timestamp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
two	TokenNameIdentifier
.	TokenNameDOT
timestamp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testDecomposeAndRaw	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
UnknownHostException	TokenNameIdentifier
{	TokenNameLBRACE
UUID	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
getTimeUUID	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
decomposed	TokenNameIdentifier
=	TokenNameEQUAL
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
decompose	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
UUID	TokenNameIdentifier
b	TokenNameIdentifier
=	TokenNameEQUAL
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
getUUID	TokenNameIdentifier
(	TokenNameLPAREN
ByteBuffer	TokenNameIdentifier
.	TokenNameDOT
wrap	TokenNameIdentifier
(	TokenNameLPAREN
decomposed	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
a	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testTimeUUIDType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
UnknownHostException	TokenNameIdentifier
{	TokenNameLBRACE
TimeUUIDType	TokenNameIdentifier
comp	TokenNameIdentifier
=	TokenNameEQUAL
TimeUUIDType	TokenNameIdentifier
.	TokenNameDOT
instance	TokenNameIdentifier
;	TokenNameSEMICOLON
ByteBuffer	TokenNameIdentifier
first	TokenNameIdentifier
=	TokenNameEQUAL
ByteBuffer	TokenNameIdentifier
.	TokenNameDOT
wrap	TokenNameIdentifier
(	TokenNameLPAREN
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
getTimeUUIDBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ByteBuffer	TokenNameIdentifier
second	TokenNameIdentifier
=	TokenNameEQUAL
ByteBuffer	TokenNameIdentifier
.	TokenNameDOT
wrap	TokenNameIdentifier
(	TokenNameLPAREN
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
getTimeUUIDBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
comp	TokenNameIdentifier
.	TokenNameDOT
compare	TokenNameIdentifier
(	TokenNameLPAREN
first	TokenNameIdentifier
,	TokenNameCOMMA
second	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assert	TokenNameassert
comp	TokenNameIdentifier
.	TokenNameDOT
compare	TokenNameIdentifier
(	TokenNameLPAREN
second	TokenNameIdentifier
,	TokenNameCOMMA
first	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ByteBuffer	TokenNameIdentifier
sameAsFirst	TokenNameIdentifier
=	TokenNameEQUAL
ByteBuffer	TokenNameIdentifier
.	TokenNameDOT
wrap	TokenNameIdentifier
(	TokenNameLPAREN
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
decompose	TokenNameIdentifier
(	TokenNameLPAREN
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
getUUID	TokenNameIdentifier
(	TokenNameLPAREN
first	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
comp	TokenNameIdentifier
.	TokenNameDOT
compare	TokenNameIdentifier
(	TokenNameLPAREN
first	TokenNameIdentifier
,	TokenNameCOMMA
sameAsFirst	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testUUIDTimestamp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
UnknownHostException	TokenNameIdentifier
{	TokenNameLBRACE
InetAddress	TokenNameIdentifier
addr	TokenNameIdentifier
=	TokenNameEQUAL
InetAddress	TokenNameIdentifier
.	TokenNameDOT
getByName	TokenNameIdentifier
(	TokenNameLPAREN
"127.0.0.1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
now	TokenNameIdentifier
=	TokenNameEQUAL
System	TokenNameIdentifier
.	TokenNameDOT
currentTimeMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
UUID	TokenNameIdentifier
uuid	TokenNameIdentifier
=	TokenNameEQUAL
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
getTimeUUID	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
tstamp	TokenNameIdentifier
=	TokenNameEQUAL
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
getAdjustedTimestamp	TokenNameIdentifier
(	TokenNameLPAREN
uuid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
now	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
tstamp	TokenNameIdentifier
&&	TokenNameAND_AND
now	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
tstamp	TokenNameIdentifier
-	TokenNameMINUS
10	TokenNameIntegerLiteral
:	TokenNameCOLON
"now = "	TokenNameStringLiteral
+	TokenNamePLUS
now	TokenNameIdentifier
+	TokenNamePLUS
", timestamp = "	TokenNameStringLiteral
+	TokenNamePLUS
tstamp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
assertNonZero	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
i	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
"1"	TokenNameStringLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
