package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
cql	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Collections	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
exceptions	TokenNameIdentifier
.	TokenNameDOT
SyntaxException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
Pair	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
db	TokenNameIdentifier
.	TokenNameDOT
ConsistencyLevel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
static	TokenNamestatic
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
cql	TokenNameIdentifier
.	TokenNameDOT
AlterTableStatement	TokenNameIdentifier
.	TokenNameDOT
OperationType	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
antlr	TokenNameIdentifier
.	TokenNameDOT
runtime	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Stack	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
CqlParser	TokenNameIdentifier
extends	TokenNameextends
Parser	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokenNames	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"<invalid>"	TokenNameStringLiteral
,	TokenNameCOMMA
"<EOR>"	TokenNameStringLiteral
,	TokenNameCOMMA
"<DOWN>"	TokenNameStringLiteral
,	TokenNameCOMMA
"<UP>"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_USE"	TokenNameStringLiteral
,	TokenNameCOMMA
"IDENT"	TokenNameStringLiteral
,	TokenNameCOMMA
"INTEGER"	TokenNameStringLiteral
,	TokenNameCOMMA
"STRING_LITERAL"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_SELECT"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_COUNT"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_FROM"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_USING"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_CONSISTENCY"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_LEVEL"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_WHERE"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_LIMIT"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_FIRST"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_REVERSED"	TokenNameStringLiteral
,	TokenNameCOMMA
"RANGEOP"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_AND"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_IN"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_INSERT"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_INTO"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_VALUES"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_TIMESTAMP"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_TTL"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_BEGIN"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_BATCH"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_APPLY"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_UPDATE"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_SET"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_DELETE"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_CREATE"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_KEYSPACE"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_WITH"	TokenNameStringLiteral
,	TokenNameCOMMA
"COMPIDENT"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_COLUMNFAMILY"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_PRIMARY"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_KEY"	TokenNameStringLiteral
,	TokenNameCOMMA
"FLOAT"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_INDEX"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_ON"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_DROP"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_ALTER"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_TYPE"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_ADD"	TokenNameStringLiteral
,	TokenNameCOMMA
"UUID"	TokenNameStringLiteral
,	TokenNameCOMMA
"QMARK"	TokenNameStringLiteral
,	TokenNameCOMMA
"K_TRUNCATE"	TokenNameStringLiteral
,	TokenNameCOMMA
"S"	TokenNameStringLiteral
,	TokenNameCOMMA
"E"	TokenNameStringLiteral
,	TokenNameCOMMA
"L"	TokenNameStringLiteral
,	TokenNameCOMMA
"C"	TokenNameStringLiteral
,	TokenNameCOMMA
"T"	TokenNameStringLiteral
,	TokenNameCOMMA
"F"	TokenNameStringLiteral
,	TokenNameCOMMA
"R"	TokenNameStringLiteral
,	TokenNameCOMMA
"O"	TokenNameStringLiteral
,	TokenNameCOMMA
"M"	TokenNameStringLiteral
,	TokenNameCOMMA
"W"	TokenNameStringLiteral
,	TokenNameCOMMA
"H"	TokenNameStringLiteral
,	TokenNameCOMMA
"A"	TokenNameStringLiteral
,	TokenNameCOMMA
"N"	TokenNameStringLiteral
,	TokenNameCOMMA
"D"	TokenNameStringLiteral
,	TokenNameCOMMA
"K"	TokenNameStringLiteral
,	TokenNameCOMMA
"Y"	TokenNameStringLiteral
,	TokenNameCOMMA
"I"	TokenNameStringLiteral
,	TokenNameCOMMA
"U"	TokenNameStringLiteral
,	TokenNameCOMMA
"P"	TokenNameStringLiteral
,	TokenNameCOMMA
"G"	TokenNameStringLiteral
,	TokenNameCOMMA
"Q"	TokenNameStringLiteral
,	TokenNameCOMMA
"V"	TokenNameStringLiteral
,	TokenNameCOMMA
"B"	TokenNameStringLiteral
,	TokenNameCOMMA
"X"	TokenNameStringLiteral
,	TokenNameCOMMA
"J"	TokenNameStringLiteral
,	TokenNameCOMMA
"Z"	TokenNameStringLiteral
,	TokenNameCOMMA
"DIGIT"	TokenNameStringLiteral
,	TokenNameCOMMA
"LETTER"	TokenNameStringLiteral
,	TokenNameCOMMA
"HEX"	TokenNameStringLiteral
,	TokenNameCOMMA
"WS"	TokenNameStringLiteral
,	TokenNameCOMMA
"COMMENT"	TokenNameStringLiteral
,	TokenNameCOMMA
"MULTILINE_COMMENT"	TokenNameStringLiteral
,	TokenNameCOMMA
"'('"	TokenNameStringLiteral
,	TokenNameCOMMA
"')'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'.'"	TokenNameStringLiteral
,	TokenNameCOMMA
"','"	TokenNameStringLiteral
,	TokenNameCOMMA
"'\*'"	TokenNameStringLiteral
,	TokenNameCOMMA
"';'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'='"	TokenNameStringLiteral
,	TokenNameCOMMA
"'blob'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'ascii'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'text'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'varchar'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'int'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'varint'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'bigint'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'uuid'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'counter'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'boolean'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'timestamp'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'float'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'double'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'decimal'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'+'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'-'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'<'"	TokenNameStringLiteral
,	TokenNameCOMMA
"'<='"	TokenNameStringLiteral
,	TokenNameCOMMA
"'>='"	TokenNameStringLiteral
,	TokenNameCOMMA
"'>'"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
LETTER	TokenNameIdentifier
=	TokenNameEQUAL
76	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_CREATE	TokenNameIdentifier
=	TokenNameEQUAL
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
EOF	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_PRIMARY	TokenNameIdentifier
=	TokenNameEQUAL
37	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__93	TokenNameIdentifier
=	TokenNameEQUAL
93	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__94	TokenNameIdentifier
=	TokenNameEQUAL
94	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__91	TokenNameIdentifier
=	TokenNameEQUAL
91	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_USE	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__92	TokenNameIdentifier
=	TokenNameEQUAL
92	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_VALUES	TokenNameIdentifier
=	TokenNameEQUAL
23	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
STRING_LITERAL	TokenNameIdentifier
=	TokenNameEQUAL
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__90	TokenNameIdentifier
=	TokenNameEQUAL
90	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_ON	TokenNameIdentifier
=	TokenNameEQUAL
41	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_USING	TokenNameIdentifier
=	TokenNameEQUAL
11	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_ADD	TokenNameIdentifier
=	TokenNameEQUAL
45	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_KEY	TokenNameIdentifier
=	TokenNameEQUAL
38	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMMENT	TokenNameIdentifier
=	TokenNameEQUAL
79	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_TRUNCATE	TokenNameIdentifier
=	TokenNameEQUAL
48	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__99	TokenNameIdentifier
=	TokenNameEQUAL
99	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__98	TokenNameIdentifier
=	TokenNameEQUAL
98	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__97	TokenNameIdentifier
=	TokenNameEQUAL
97	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__96	TokenNameIdentifier
=	TokenNameEQUAL
96	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__95	TokenNameIdentifier
=	TokenNameEQUAL
95	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
D	TokenNameIdentifier
=	TokenNameEQUAL
62	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
E	TokenNameIdentifier
=	TokenNameEQUAL
50	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
F	TokenNameIdentifier
=	TokenNameEQUAL
54	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
G	TokenNameIdentifier
=	TokenNameEQUAL
68	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_COUNT	TokenNameIdentifier
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_KEYSPACE	TokenNameIdentifier
=	TokenNameEQUAL
33	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
44	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__81	TokenNameIdentifier
=	TokenNameEQUAL
81	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
A	TokenNameIdentifier
=	TokenNameEQUAL
60	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
B	TokenNameIdentifier
=	TokenNameEQUAL
71	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__82	TokenNameIdentifier
=	TokenNameEQUAL
82	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__83	TokenNameIdentifier
=	TokenNameEQUAL
83	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
C	TokenNameIdentifier
=	TokenNameEQUAL
52	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
L	TokenNameIdentifier
=	TokenNameEQUAL
51	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
M	TokenNameIdentifier
=	TokenNameEQUAL
57	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
N	TokenNameIdentifier
=	TokenNameEQUAL
61	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
O	TokenNameIdentifier
=	TokenNameEQUAL
56	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
H	TokenNameIdentifier
=	TokenNameEQUAL
59	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
I	TokenNameIdentifier
=	TokenNameEQUAL
65	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
J	TokenNameIdentifier
=	TokenNameEQUAL
73	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_UPDATE	TokenNameIdentifier
=	TokenNameEQUAL
29	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K	TokenNameIdentifier
=	TokenNameEQUAL
63	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
U	TokenNameIdentifier
=	TokenNameEQUAL
66	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T	TokenNameIdentifier
=	TokenNameEQUAL
53	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
W	TokenNameIdentifier
=	TokenNameEQUAL
58	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
V	TokenNameIdentifier
=	TokenNameEQUAL
70	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
Q	TokenNameIdentifier
=	TokenNameEQUAL
69	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
P	TokenNameIdentifier
=	TokenNameEQUAL
67	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
S	TokenNameIdentifier
=	TokenNameEQUAL
49	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
R	TokenNameIdentifier
=	TokenNameEQUAL
55	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__85	TokenNameIdentifier
=	TokenNameEQUAL
85	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__84	TokenNameIdentifier
=	TokenNameEQUAL
84	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__87	TokenNameIdentifier
=	TokenNameEQUAL
87	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__86	TokenNameIdentifier
=	TokenNameEQUAL
86	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_TTL	TokenNameIdentifier
=	TokenNameEQUAL
25	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
Y	TokenNameIdentifier
=	TokenNameEQUAL
64	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__89	TokenNameIdentifier
=	TokenNameEQUAL
89	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
X	TokenNameIdentifier
=	TokenNameEQUAL
72	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__88	TokenNameIdentifier
=	TokenNameEQUAL
88	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
Z	TokenNameIdentifier
=	TokenNameEQUAL
74	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_INDEX	TokenNameIdentifier
=	TokenNameEQUAL
40	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_REVERSED	TokenNameIdentifier
=	TokenNameEQUAL
17	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_INSERT	TokenNameIdentifier
=	TokenNameEQUAL
21	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
WS	TokenNameIdentifier
=	TokenNameEQUAL
78	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_APPLY	TokenNameIdentifier
=	TokenNameEQUAL
28	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_TIMESTAMP	TokenNameIdentifier
=	TokenNameEQUAL
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_AND	TokenNameIdentifier
=	TokenNameEQUAL
19	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
QMARK	TokenNameIdentifier
=	TokenNameEQUAL
47	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_LEVEL	TokenNameIdentifier
=	TokenNameEQUAL
13	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_BATCH	TokenNameIdentifier
=	TokenNameEQUAL
27	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
UUID	TokenNameIdentifier
=	TokenNameEQUAL
46	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_DELETE	TokenNameIdentifier
=	TokenNameEQUAL
31	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
FLOAT	TokenNameIdentifier
=	TokenNameEQUAL
39	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_SELECT	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_LIMIT	TokenNameIdentifier
=	TokenNameEQUAL
15	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_ALTER	TokenNameIdentifier
=	TokenNameEQUAL
43	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_SET	TokenNameIdentifier
=	TokenNameEQUAL
30	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_WHERE	TokenNameIdentifier
=	TokenNameEQUAL
14	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MULTILINE_COMMENT	TokenNameIdentifier
=	TokenNameEQUAL
80	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__107	TokenNameIdentifier
=	TokenNameEQUAL
107	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
HEX	TokenNameIdentifier
=	TokenNameEQUAL
77	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_INTO	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__103	TokenNameIdentifier
=	TokenNameEQUAL
103	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__104	TokenNameIdentifier
=	TokenNameEQUAL
104	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__105	TokenNameIdentifier
=	TokenNameEQUAL
105	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__106	TokenNameIdentifier
=	TokenNameEQUAL
106	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
IDENT	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DIGIT	TokenNameIdentifier
=	TokenNameEQUAL
75	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_FIRST	TokenNameIdentifier
=	TokenNameEQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_BEGIN	TokenNameIdentifier
=	TokenNameEQUAL
26	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
INTEGER	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
RANGEOP	TokenNameIdentifier
=	TokenNameEQUAL
18	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_CONSISTENCY	TokenNameIdentifier
=	TokenNameEQUAL
12	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_WITH	TokenNameIdentifier
=	TokenNameEQUAL
34	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMPIDENT	TokenNameIdentifier
=	TokenNameEQUAL
35	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__102	TokenNameIdentifier
=	TokenNameEQUAL
102	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__101	TokenNameIdentifier
=	TokenNameEQUAL
101	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
T__100	TokenNameIdentifier
=	TokenNameEQUAL
100	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_IN	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_FROM	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_COLUMNFAMILY	TokenNameIdentifier
=	TokenNameEQUAL
36	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
K_DROP	TokenNameIdentifier
=	TokenNameEQUAL
42	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
CqlParser	TokenNameIdentifier
(	TokenNameLPAREN
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
RecognizerSharedState	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
CqlParser	TokenNameIdentifier
(	TokenNameLPAREN
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
RecognizerSharedState	TokenNameIdentifier
state	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
state	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getTokenNames	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
CqlParser	TokenNameIdentifier
.	TokenNameDOT
tokenNames	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getGrammarFileName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"/home/pschulam/data/habeascorpus-workspace/apache-cassandra-1.2.0/src/java/org/apache/cassandra/cql/Cql.g"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
recognitionErrors	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
currentBindMarkerIdx	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
displayRecognitionError	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokenNames	TokenNameIdentifier
,	TokenNameCOMMA
RecognitionException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
hdr	TokenNameIdentifier
=	TokenNameEQUAL
getErrorHeader	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
msg	TokenNameIdentifier
=	TokenNameEQUAL
getErrorMessage	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
,	TokenNameCOMMA
tokenNames	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recognitionErrors	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
hdr	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
msg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
getRecognitionErrors	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
recognitionErrors	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
throwLastRecognitionError	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
SyntaxException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
recognitionErrors	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
SyntaxException	TokenNameIdentifier
(	TokenNameLPAREN
recognitionErrors	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
recognitionErrors	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
validateMinusSupplied	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
op	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
Term	TokenNameIdentifier
value	TokenNameIdentifier
,	TokenNameCOMMA
IntStream	TokenNameIdentifier
stream	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MissingTokenException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
op	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
Long	TokenNameIdentifier
.	TokenNameDOT
parseLong	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
MissingTokenException	TokenNameIdentifier
(	TokenNameLPAREN
102	TokenNameIntegerLiteral
,	TokenNameCOMMA
stream	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
CQLStatement	TokenNameIdentifier
query	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
CQLStatement	TokenNameIdentifier
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
SelectStatement	TokenNameIdentifier
selectStatement1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
UpdateStatement	TokenNameIdentifier
insertStatement2	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
UpdateStatement	TokenNameIdentifier
updateStatement3	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
BatchStatement	TokenNameIdentifier
batchStatement4	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
useStatement5	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
truncateStatement6	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
DeleteStatement	TokenNameIdentifier
deleteStatement7	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
CreateKeyspaceStatement	TokenNameIdentifier
createKeyspaceStatement8	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
CreateColumnFamilyStatement	TokenNameIdentifier
createColumnFamilyStatement9	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
CreateIndexStatement	TokenNameIdentifier
createIndexStatement10	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
DropIndexStatement	TokenNameIdentifier
dropIndexStatement11	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
dropKeyspaceStatement12	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
dropColumnFamilyStatement13	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
AlterTableStatement	TokenNameIdentifier
alterTableStatement14	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
int	TokenNameint
alt1	TokenNameIdentifier
=	TokenNameEQUAL
14	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
alt1	TokenNameIdentifier
=	TokenNameEQUAL
dfa1	TokenNameIdentifier
.	TokenNameDOT
predict	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
alt1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_selectStatement_in_query69	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
selectStatement1	TokenNameIdentifier
=	TokenNameEQUAL
selectStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
SELECT	TokenNameIdentifier
,	TokenNameCOMMA
selectStatement1	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_insertStatement_in_query81	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertStatement2	TokenNameIdentifier
=	TokenNameEQUAL
insertStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_query83	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
INSERT	TokenNameIdentifier
,	TokenNameCOMMA
insertStatement2	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_updateStatement_in_query93	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateStatement3	TokenNameIdentifier
=	TokenNameEQUAL
updateStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_query95	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
UPDATE	TokenNameIdentifier
,	TokenNameCOMMA
updateStatement3	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_batchStatement_in_query105	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
batchStatement4	TokenNameIdentifier
=	TokenNameEQUAL
batchStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
BATCH	TokenNameIdentifier
,	TokenNameCOMMA
batchStatement4	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
5	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_useStatement_in_query115	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
useStatement5	TokenNameIdentifier
=	TokenNameEQUAL
useStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
USE	TokenNameIdentifier
,	TokenNameCOMMA
useStatement5	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
6	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_truncateStatement_in_query130	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
truncateStatement6	TokenNameIdentifier
=	TokenNameEQUAL
truncateStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
TRUNCATE	TokenNameIdentifier
,	TokenNameCOMMA
truncateStatement6	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
7	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_deleteStatement_in_query140	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
deleteStatement7	TokenNameIdentifier
=	TokenNameEQUAL
deleteStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_query142	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
DELETE	TokenNameIdentifier
,	TokenNameCOMMA
deleteStatement7	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
8	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_createKeyspaceStatement_in_query152	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
createKeyspaceStatement8	TokenNameIdentifier
=	TokenNameEQUAL
createKeyspaceStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
CREATE_KEYSPACE	TokenNameIdentifier
,	TokenNameCOMMA
createKeyspaceStatement8	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
9	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_createColumnFamilyStatement_in_query162	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
createColumnFamilyStatement9	TokenNameIdentifier
=	TokenNameEQUAL
createColumnFamilyStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
CREATE_COLUMNFAMILY	TokenNameIdentifier
,	TokenNameCOMMA
createColumnFamilyStatement9	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
10	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_createIndexStatement_in_query172	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
createIndexStatement10	TokenNameIdentifier
=	TokenNameEQUAL
createIndexStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
CREATE_INDEX	TokenNameIdentifier
,	TokenNameCOMMA
createIndexStatement10	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
11	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_dropIndexStatement_in_query182	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dropIndexStatement11	TokenNameIdentifier
=	TokenNameEQUAL
dropIndexStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
DROP_INDEX	TokenNameIdentifier
,	TokenNameCOMMA
dropIndexStatement11	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
12	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_dropKeyspaceStatement_in_query194	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dropKeyspaceStatement12	TokenNameIdentifier
=	TokenNameEQUAL
dropKeyspaceStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
DROP_KEYSPACE	TokenNameIdentifier
,	TokenNameCOMMA
dropKeyspaceStatement12	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
13	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_dropColumnFamilyStatement_in_query204	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dropColumnFamilyStatement13	TokenNameIdentifier
=	TokenNameEQUAL
dropColumnFamilyStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
DROP_COLUMNFAMILY	TokenNameIdentifier
,	TokenNameCOMMA
dropColumnFamilyStatement13	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
14	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_alterTableStatement_in_query214	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
alterTableStatement14	TokenNameIdentifier
=	TokenNameEQUAL
alterTableStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
stmnt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CQLStatement	TokenNameIdentifier
(	TokenNameLPAREN
StatementType	TokenNameIdentifier
.	TokenNameDOT
ALTER_TABLE	TokenNameIdentifier
,	TokenNameCOMMA
alterTableStatement14	TokenNameIdentifier
,	TokenNameCOMMA
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
stmnt	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
String	TokenNameIdentifier
useStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_USE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_USE_in_useStatement238	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
name	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
name	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
name	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_useStatement258	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
keyspace	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
SelectStatement	TokenNameIdentifier
selectStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
SelectStatement	TokenNameIdentifier
expr	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
columnFamily	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
rows	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
K_LEVEL15	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
SelectExpression	TokenNameIdentifier
s1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
SelectExpression	TokenNameIdentifier
s2	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
WhereClause	TokenNameIdentifier
whereClause16	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
int	TokenNameint
numRecords	TokenNameIdentifier
=	TokenNameEQUAL
10000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
SelectExpression	TokenNameIdentifier
expression	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isCountOp	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
ConsistencyLevel	TokenNameIdentifier
cLevel	TokenNameIdentifier
=	TokenNameEQUAL
ConsistencyLevel	TokenNameIdentifier
.	TokenNameDOT
ONE	TokenNameIdentifier
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_SELECT	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_SELECT_in_selectStatement289	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt2	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA2_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
LA2_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
LA2_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
LA2_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
K_FIRST	TokenNameIdentifier
&&	TokenNameAND_AND
LA2_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
K_REVERSED	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
LA2_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
K_KEY	TokenNameIdentifier
&&	TokenNameAND_AND
LA2_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
FLOAT	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
LA2_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
UUID	TokenNameIdentifier
&&	TokenNameAND_AND
LA2_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
QMARK	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
LA2_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
85	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt2	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA2_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_COUNT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt2	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
NoViableAltException	TokenNameIdentifier
nvae	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NoViableAltException	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
nvae	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_selectExpression_in_selectStatement305	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
s1	TokenNameIdentifier
=	TokenNameEQUAL
selectExpression	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
expression	TokenNameIdentifier
=	TokenNameEQUAL
s1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_COUNT	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_COUNT_in_selectStatement337	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
81	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_81_in_selectStatement339	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_selectExpression_in_selectStatement343	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
s2	TokenNameIdentifier
=	TokenNameEQUAL
selectExpression	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_82_in_selectStatement345	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expression	TokenNameIdentifier
=	TokenNameEQUAL
s2	TokenNameIdentifier
;	TokenNameSEMICOLON
isCountOp	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_FROM	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_FROM_in_selectStatement371	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt3	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA3_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
LA3_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
LA3_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
LA3_1	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA3_1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
83	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt3	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt3	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
83	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_83_in_selectStatement388	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
columnFamily	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
alt4	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA4_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA4_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_USING	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt4	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt4	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_USING	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_USING_in_selectStatement420	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_CONSISTENCY	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_CONSISTENCY_in_selectStatement422	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
K_LEVEL15	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_LEVEL	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_LEVEL_in_selectStatement424	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cLevel	TokenNameIdentifier
=	TokenNameEQUAL
ConsistencyLevel	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
K_LEVEL15	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
K_LEVEL15	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
.	TokenNameDOT
toUpperCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
alt5	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA5_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA5_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_WHERE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt5	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt5	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_WHERE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_WHERE_in_selectStatement443	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_whereClause_in_selectStatement445	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
whereClause16	TokenNameIdentifier
=	TokenNameEQUAL
whereClause	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
alt6	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA6_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA6_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_LIMIT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt6	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt6	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_LIMIT	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_LIMIT_in_selectStatement462	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
rows	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
INTEGER	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_INTEGER_in_selectStatement466	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
numRecords	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
rows	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
rows	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_selectStatement483	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
SelectStatement	TokenNameIdentifier
(	TokenNameLPAREN
expression	TokenNameIdentifier
,	TokenNameCOMMA
isCountOp	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
keyspace	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
columnFamily	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
columnFamily	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
cLevel	TokenNameIdentifier
,	TokenNameCOMMA
whereClause16	TokenNameIdentifier
,	TokenNameCOMMA
numRecords	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
expr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
SelectExpression	TokenNameIdentifier
selectExpression	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
SelectExpression	TokenNameIdentifier
expr	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
cols	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
first	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
next	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
start	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
finish	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
10000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
reversed	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
boolean	TokenNameboolean
hasFirstSet	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
alt7	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA7_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA7_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_FIRST	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt7	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt7	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_FIRST	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_FIRST_in_selectExpression524	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hasFirstSet	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
cols	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
INTEGER	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_INTEGER_in_selectExpression530	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
count	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
cols	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
cols	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
alt8	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA8_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA8_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_REVERSED	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt8	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt8	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_REVERSED	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_REVERSED_in_selectExpression545	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
reversed	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
alt10	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
alt10	TokenNameIdentifier
=	TokenNameEQUAL
dfa10	TokenNameIdentifier
.	TokenNameDOT
predict	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
alt10	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_selectExpression562	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
first	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
expr	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SelectExpression	TokenNameIdentifier
(	TokenNameLPAREN
first	TokenNameIdentifier
,	TokenNameCOMMA
count	TokenNameIdentifier
,	TokenNameCOMMA
reversed	TokenNameIdentifier
,	TokenNameCOMMA
hasFirstSet	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop9	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt9	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA9_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA9_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
84	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt9	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt9	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
84	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_84_in_selectExpression579	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_selectExpression583	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
next	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
expr	TokenNameIdentifier
.	TokenNameDOT
and	TokenNameIdentifier
(	TokenNameLPAREN
next	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop9	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_selectExpression599	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
start	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
RANGEOP	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_RANGEOP_in_selectExpression601	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_selectExpression605	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
finish	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
expr	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SelectExpression	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
finish	TokenNameIdentifier
,	TokenNameCOMMA
count	TokenNameIdentifier
,	TokenNameCOMMA
reversed	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
hasFirstSet	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
85	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_85_in_selectExpression617	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expr	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SelectExpression	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
count	TokenNameIdentifier
,	TokenNameCOMMA
reversed	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
hasFirstSet	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
expr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
WhereClause	TokenNameIdentifier
whereClause	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
WhereClause	TokenNameIdentifier
clause	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Relation	TokenNameIdentifier
first	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Relation	TokenNameIdentifier
next	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
key_alias	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
f1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
fN	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
WhereClause	TokenNameIdentifier
inClause	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
WhereClause	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
int	TokenNameint
alt13	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
alt13	TokenNameIdentifier
=	TokenNameEQUAL
dfa13	TokenNameIdentifier
.	TokenNameDOT
predict	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
alt13	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_relation_in_whereClause660	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
first	TokenNameIdentifier
=	TokenNameEQUAL
relation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
clause	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
WhereClause	TokenNameIdentifier
(	TokenNameLPAREN
first	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop11	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt11	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA11_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA11_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_AND	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt11	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt11	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_AND	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_AND_in_whereClause676	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_relation_in_whereClause680	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
next	TokenNameIdentifier
=	TokenNameEQUAL
relation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
clause	TokenNameIdentifier
.	TokenNameDOT
and	TokenNameIdentifier
(	TokenNameLPAREN
next	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop11	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_whereClause696	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key_alias	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
inClause	TokenNameIdentifier
.	TokenNameDOT
setKeyAlias	TokenNameIdentifier
(	TokenNameLPAREN
key_alias	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_IN	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_IN_in_whereClause711	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
81	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_81_in_whereClause713	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_whereClause717	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
f1	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
inClause	TokenNameIdentifier
.	TokenNameDOT
andKeyEquals	TokenNameIdentifier
(	TokenNameLPAREN
f1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop12	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt12	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA12_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA12_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
84	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt12	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt12	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
84	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_84_in_whereClause740	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_whereClause744	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fN	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
inClause	TokenNameIdentifier
.	TokenNameDOT
andKeyEquals	TokenNameIdentifier
(	TokenNameLPAREN
fN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop12	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_82_in_whereClause751	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inClause	TokenNameIdentifier
.	TokenNameDOT
setMultiKey	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
clause	TokenNameIdentifier
=	TokenNameEQUAL
inClause	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
clause	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
UpdateStatement	TokenNameIdentifier
insertStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
UpdateStatement	TokenNameIdentifier
expr	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
columnFamily	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
key_alias	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
column_name	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
column_value	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
Attributes	TokenNameIdentifier
attrs	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Attributes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
columnNames	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
columnValues	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_INSERT	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_INSERT_in_insertStatement792	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_INTO	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_INTO_in_insertStatement794	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt14	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA14_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
LA14_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
LA14_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
LA14_1	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA14_1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
83	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt14	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt14	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
83	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_83_in_insertStatement811	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
columnFamily	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
81	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_81_in_insertStatement841	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_insertStatement845	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key_alias	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
int	TokenNameint
cnt15	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
loop15	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt15	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA15_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA15_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
84	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt15	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt15	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
84	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_84_in_insertStatement849	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_insertStatement853	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
column_name	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
columnNames	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
column_name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
cnt15	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
break	TokenNamebreak
loop15	TokenNameIdentifier
;	TokenNameSEMICOLON
EarlyExitException	TokenNameIdentifier
eee	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
EarlyExitException	TokenNameIdentifier
(	TokenNameLPAREN
15	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
eee	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cnt15	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_82_in_insertStatement861	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_VALUES	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_VALUES_in_insertStatement871	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
81	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_81_in_insertStatement883	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_insertStatement887	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
int	TokenNameint
cnt16	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
loop16	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt16	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA16_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA16_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
84	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt16	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt16	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
84	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_84_in_insertStatement891	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_insertStatement895	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
column_value	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
columnValues	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
column_value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
cnt16	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
break	TokenNamebreak
loop16	TokenNameIdentifier
;	TokenNameSEMICOLON
EarlyExitException	TokenNameIdentifier
eee	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
EarlyExitException	TokenNameIdentifier
(	TokenNameLPAREN
16	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
eee	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cnt16	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_82_in_insertStatement901	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt17	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA17_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA17_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_USING	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt17	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt17	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_usingClause_in_insertStatement913	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
usingClause	TokenNameIdentifier
(	TokenNameLPAREN
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
UpdateStatement	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
keyspace	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
columnFamily	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
columnFamily	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
key_alias	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
columnNames	TokenNameIdentifier
,	TokenNameCOMMA
columnValues	TokenNameIdentifier
,	TokenNameCOMMA
Collections	TokenNameIdentifier
.	TokenNameDOT
singletonList	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
expr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
usingClause	TokenNameIdentifier
(	TokenNameLPAREN
Attributes	TokenNameIdentifier
attrs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_USING	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_USING_in_usingClause943	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_usingClauseObjective_in_usingClause945	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
usingClauseObjective	TokenNameIdentifier
(	TokenNameLPAREN
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
loop19	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt19	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA19_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA19_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_CONSISTENCY	TokenNameIdentifier
||	TokenNameOR_OR
LA19_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_AND	TokenNameIdentifier
||	TokenNameOR_OR
(	TokenNameLPAREN
LA19_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
K_TIMESTAMP	TokenNameIdentifier
&&	TokenNameAND_AND
LA19_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
K_TTL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt19	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt19	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
int	TokenNameint
alt18	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA18_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA18_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_AND	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt18	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt18	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_AND	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_AND_in_usingClause950	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_usingClauseObjective_in_usingClause953	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
usingClauseObjective	TokenNameIdentifier
(	TokenNameLPAREN
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop19	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
usingClauseDelete	TokenNameIdentifier
(	TokenNameLPAREN
Attributes	TokenNameIdentifier
attrs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_USING	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_USING_in_usingClauseDelete975	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_usingClauseDeleteObjective_in_usingClauseDelete977	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
usingClauseDeleteObjective	TokenNameIdentifier
(	TokenNameLPAREN
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
loop21	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt21	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA21_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA21_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_CONSISTENCY	TokenNameIdentifier
||	TokenNameOR_OR
LA21_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_AND	TokenNameIdentifier
||	TokenNameOR_OR
LA21_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_TIMESTAMP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt21	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt21	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
int	TokenNameint
alt20	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA20_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA20_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_AND	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt20	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt20	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_AND	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_AND_in_usingClauseDelete982	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_usingClauseDeleteObjective_in_usingClauseDelete985	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
usingClauseDeleteObjective	TokenNameIdentifier
(	TokenNameLPAREN
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop21	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
usingClauseDeleteObjective	TokenNameIdentifier
(	TokenNameLPAREN
Attributes	TokenNameIdentifier
attrs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
Token	TokenNameIdentifier
ts	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
K_LEVEL17	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
int	TokenNameint
alt22	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA22_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA22_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_CONSISTENCY	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt22	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA22_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_TIMESTAMP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt22	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
NoViableAltException	TokenNameIdentifier
nvae	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NoViableAltException	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
22	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
nvae	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt22	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_CONSISTENCY	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_CONSISTENCY_in_usingClauseDeleteObjective1007	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
K_LEVEL17	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_LEVEL	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_LEVEL_in_usingClauseDeleteObjective1009	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attrs	TokenNameIdentifier
.	TokenNameDOT
setConsistencyLevel	TokenNameIdentifier
(	TokenNameLPAREN
ConsistencyLevel	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
K_LEVEL17	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
K_LEVEL17	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
.	TokenNameDOT
toUpperCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_TIMESTAMP	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_TIMESTAMP_in_usingClauseDeleteObjective1020	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ts	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
INTEGER	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_INTEGER_in_usingClauseDeleteObjective1024	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attrs	TokenNameIdentifier
.	TokenNameDOT
setTimestamp	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
ts	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
ts	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
usingClauseObjective	TokenNameIdentifier
(	TokenNameLPAREN
Attributes	TokenNameIdentifier
attrs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
Token	TokenNameIdentifier
t	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
int	TokenNameint
alt23	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA23_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA23_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_CONSISTENCY	TokenNameIdentifier
||	TokenNameOR_OR
LA23_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_TIMESTAMP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt23	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA23_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_TTL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt23	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
NoViableAltException	TokenNameIdentifier
nvae	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NoViableAltException	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
23	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
nvae	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt23	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_usingClauseDeleteObjective_in_usingClauseObjective1044	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
usingClauseDeleteObjective	TokenNameIdentifier
(	TokenNameLPAREN
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_TTL	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_TTL_in_usingClauseObjective1053	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
INTEGER	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_INTEGER_in_usingClauseObjective1057	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attrs	TokenNameIdentifier
.	TokenNameDOT
setTimeToLive	TokenNameIdentifier
(	TokenNameLPAREN
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
t	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
t	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
BatchStatement	TokenNameIdentifier
batchStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
BatchStatement	TokenNameIdentifier
expr	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
AbstractModification	TokenNameIdentifier
s1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
AbstractModification	TokenNameIdentifier
sN	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
Attributes	TokenNameIdentifier
attrs	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Attributes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attrs	TokenNameIdentifier
.	TokenNameDOT
setConsistencyLevel	TokenNameIdentifier
(	TokenNameLPAREN
ConsistencyLevel	TokenNameIdentifier
.	TokenNameDOT
ONE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
AbstractModification	TokenNameIdentifier
>	TokenNameGREATER
statements	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
AbstractModification	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_BEGIN	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_BEGIN_in_batchStatement1097	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_BATCH	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_BATCH_in_batchStatement1099	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt24	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA24_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA24_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_USING	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt24	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt24	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_usingClause_in_batchStatement1103	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
usingClause	TokenNameIdentifier
(	TokenNameLPAREN
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_batchStatementObjective_in_batchStatement1121	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
s1	TokenNameIdentifier
=	TokenNameEQUAL
batchStatementObjective	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
int	TokenNameint
alt25	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA25_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA25_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
86	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt25	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt25	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
86	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_86_in_batchStatement1123	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
statements	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
s1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop27	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt27	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA27_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA27_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_INSERT	TokenNameIdentifier
||	TokenNameOR_OR
LA27_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_UPDATE	TokenNameIdentifier
||	TokenNameOR_OR
LA27_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_DELETE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt27	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt27	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_batchStatementObjective_in_batchStatement1132	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sN	TokenNameIdentifier
=	TokenNameEQUAL
batchStatementObjective	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
int	TokenNameint
alt26	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA26_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA26_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
86	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt26	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt26	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
86	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_86_in_batchStatement1134	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
statements	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
sN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop27	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_APPLY	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_APPLY_in_batchStatement1148	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_BATCH	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_BATCH_in_batchStatement1150	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_batchStatement1152	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
BatchStatement	TokenNameIdentifier
(	TokenNameLPAREN
statements	TokenNameIdentifier
,	TokenNameCOMMA
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
expr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
AbstractModification	TokenNameIdentifier
batchStatementObjective	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
AbstractModification	TokenNameIdentifier
statement	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
UpdateStatement	TokenNameIdentifier
i	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
UpdateStatement	TokenNameIdentifier
u	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
DeleteStatement	TokenNameIdentifier
d	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
int	TokenNameint
alt28	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
K_INSERT	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt28	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
K_UPDATE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt28	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
K_DELETE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt28	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
NoViableAltException	TokenNameIdentifier
nvae	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NoViableAltException	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
nvae	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt28	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_insertStatement_in_batchStatementObjective1183	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
insertStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
statement	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_updateStatement_in_batchStatementObjective1196	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
u	TokenNameIdentifier
=	TokenNameEQUAL
updateStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
statement	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_deleteStatement_in_batchStatementObjective1209	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
d	TokenNameIdentifier
=	TokenNameEQUAL
deleteStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
statement	TokenNameIdentifier
=	TokenNameEQUAL
d	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
statement	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
UpdateStatement	TokenNameIdentifier
updateStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
UpdateStatement	TokenNameIdentifier
expr	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
columnFamily	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
key_alias	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
keys	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
Attributes	TokenNameIdentifier
attrs	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Attributes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
,	TokenNameCOMMA
Operation	TokenNameIdentifier
>	TokenNameGREATER
columns	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
,	TokenNameCOMMA
Operation	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
keyList	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_UPDATE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_UPDATE_in_updateStatement1243	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt29	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA29_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
LA29_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
LA29_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
LA29_1	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA29_1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
83	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt29	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt29	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
83	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_83_in_updateStatement1260	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
columnFamily	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
alt30	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA30_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA30_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_USING	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt30	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt30	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_usingClause_in_updateStatement1292	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
usingClause	TokenNameIdentifier
(	TokenNameLPAREN
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_SET	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_SET_in_updateStatement1308	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_termPairWithOperation_in_updateStatement1310	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
termPairWithOperation	TokenNameIdentifier
(	TokenNameLPAREN
columns	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
loop31	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt31	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA31_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA31_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
84	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt31	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt31	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
84	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_84_in_updateStatement1314	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_termPairWithOperation_in_updateStatement1316	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
termPairWithOperation	TokenNameIdentifier
(	TokenNameLPAREN
columns	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop31	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_WHERE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_WHERE_in_updateStatement1331	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_updateStatement1337	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key_alias	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
int	TokenNameint
alt32	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA32_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA32_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
87	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt32	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA32_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_IN	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt32	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
NoViableAltException	TokenNameIdentifier
nvae	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NoViableAltException	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
nvae	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt32	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
87	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_87_in_updateStatement1340	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_updateStatement1344	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
keyList	TokenNameIdentifier
=	TokenNameEQUAL
Collections	TokenNameIdentifier
.	TokenNameDOT
singletonList	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_IN	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_IN_in_updateStatement1422	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
81	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_81_in_updateStatement1424	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_termList_in_updateStatement1428	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
keys	TokenNameIdentifier
=	TokenNameEQUAL
termList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
keyList	TokenNameIdentifier
=	TokenNameEQUAL
keys	TokenNameIdentifier
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_82_in_updateStatement1432	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
UpdateStatement	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
keyspace	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
columnFamily	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
columnFamily	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
key_alias	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
columns	TokenNameIdentifier
,	TokenNameCOMMA
keyList	TokenNameIdentifier
,	TokenNameCOMMA
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
expr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
DeleteStatement	TokenNameIdentifier
deleteStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
DeleteStatement	TokenNameIdentifier
expr	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
columnFamily	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
cols	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
key_alias	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
keys	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
Attributes	TokenNameIdentifier
attrs	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Attributes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
keyList	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
columnsList	TokenNameIdentifier
=	TokenNameEQUAL
Collections	TokenNameIdentifier
.	TokenNameDOT
emptyList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_DELETE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_DELETE_in_deleteStatement1474	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt33	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA33_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
LA33_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
LA33_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
LA33_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
K_KEY	TokenNameIdentifier
&&	TokenNameAND_AND
LA33_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
FLOAT	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
LA33_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
UUID	TokenNameIdentifier
&&	TokenNameAND_AND
LA33_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
QMARK	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt33	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt33	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_termList_in_deleteStatement1490	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cols	TokenNameIdentifier
=	TokenNameEQUAL
termList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
columnsList	TokenNameIdentifier
=	TokenNameEQUAL
cols	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_FROM	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_FROM_in_deleteStatement1506	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt34	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA34_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
LA34_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
LA34_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
LA34_1	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA34_1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
83	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt34	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt34	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
83	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_83_in_deleteStatement1523	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
columnFamily	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
alt35	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA35_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA35_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_USING	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt35	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt35	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_usingClauseDelete_in_deleteStatement1555	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
usingClauseDelete	TokenNameIdentifier
(	TokenNameLPAREN
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
alt37	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA37_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA37_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_WHERE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt37	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt37	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_WHERE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_WHERE_in_deleteStatement1573	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_deleteStatement1577	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key_alias	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
int	TokenNameint
alt36	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA36_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA36_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
87	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt36	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA36_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_IN	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt36	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
NoViableAltException	TokenNameIdentifier
nvae	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NoViableAltException	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
36	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
nvae	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt36	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
87	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_87_in_deleteStatement1580	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_deleteStatement1584	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
keyList	TokenNameIdentifier
=	TokenNameEQUAL
Collections	TokenNameIdentifier
.	TokenNameDOT
singletonList	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_IN	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_IN_in_deleteStatement1635	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
81	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_81_in_deleteStatement1637	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_termList_in_deleteStatement1641	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
keys	TokenNameIdentifier
=	TokenNameEQUAL
termList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
keyList	TokenNameIdentifier
=	TokenNameEQUAL
keys	TokenNameIdentifier
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_82_in_deleteStatement1645	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
DeleteStatement	TokenNameIdentifier
(	TokenNameLPAREN
columnsList	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
keyspace	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
columnFamily	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
columnFamily	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
key_alias	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
keyList	TokenNameIdentifier
,	TokenNameCOMMA
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
expr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
CreateKeyspaceStatement	TokenNameIdentifier
createKeyspaceStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
CreateKeyspaceStatement	TokenNameIdentifier
expr	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
a1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
v1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
aN	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
vN	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
attrs	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_CREATE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_CREATE_in_createKeyspaceStatement1708	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_KEYSPACE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_KEYSPACE_in_createKeyspaceStatement1710	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_WITH	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_WITH_in_createKeyspaceStatement1738	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
IDENT	TokenNameIdentifier
||	TokenNameOR_OR
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
COMPIDENT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
87	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_87_in_createKeyspaceStatement1753	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
v1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
attrs	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
a1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
a1	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
v1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
v1	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop38	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt38	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA38_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA38_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_AND	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt38	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt38	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_AND	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_AND_in_createKeyspaceStatement1785	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
aN	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
IDENT	TokenNameIdentifier
||	TokenNameOR_OR
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
COMPIDENT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
87	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_87_in_createKeyspaceStatement1799	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
vN	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
attrs	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
aN	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
aN	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
vN	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
vN	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop38	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_createKeyspaceStatement1832	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
CreateKeyspaceStatement	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
keyspace	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
expr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
CreateColumnFamilyStatement	TokenNameIdentifier
createColumnFamilyStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
CreateColumnFamilyStatement	TokenNameIdentifier
expr	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
prop1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
propN	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
arg1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
argN	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_CREATE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_CREATE_in_createColumnFamilyStatement1867	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_COLUMNFAMILY	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_COLUMNFAMILY_in_createColumnFamilyStatement1869	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
name	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
expr	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CreateColumnFamilyStatement	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
name	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
name	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt40	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA40_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA40_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
81	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt40	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt40	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
81	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_81_in_createColumnFamilyStatement1897	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_createCfamColumns_in_createColumnFamilyStatement1899	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
createCfamColumns	TokenNameIdentifier
(	TokenNameLPAREN
expr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
loop39	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt39	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA39_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA39_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
84	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt39	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt39	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
84	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_84_in_createColumnFamilyStatement1904	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_createCfamColumns_in_createColumnFamilyStatement1906	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
createCfamColumns	TokenNameIdentifier
(	TokenNameLPAREN
expr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop39	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_82_in_createColumnFamilyStatement1912	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
alt42	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA42_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA42_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_WITH	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt42	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt42	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_WITH	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_WITH_in_createColumnFamilyStatement1925	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
prop1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
IDENT	TokenNameIdentifier
||	TokenNameOR_OR
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
COMPIDENT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
87	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_87_in_createColumnFamilyStatement1937	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_createCfamKeywordArgument_in_createColumnFamilyStatement1941	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
arg1	TokenNameIdentifier
=	TokenNameEQUAL
createCfamKeywordArgument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
expr	TokenNameIdentifier
.	TokenNameDOT
addProperty	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
prop1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
prop1	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
arg1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop41	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt41	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA41_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA41_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_AND	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt41	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt41	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_AND	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_AND_in_createColumnFamilyStatement1957	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
propN	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
IDENT	TokenNameIdentifier
||	TokenNameOR_OR
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
COMPIDENT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
87	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_87_in_createColumnFamilyStatement1969	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_createCfamKeywordArgument_in_createColumnFamilyStatement1973	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
argN	TokenNameIdentifier
=	TokenNameEQUAL
createCfamKeywordArgument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
expr	TokenNameIdentifier
.	TokenNameDOT
addProperty	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
propN	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
propN	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
argN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop41	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_createColumnFamilyStatement1995	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
expr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
createCfamColumns	TokenNameIdentifier
(	TokenNameLPAREN
CreateColumnFamilyStatement	TokenNameIdentifier
expr	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
Term	TokenNameIdentifier
n	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
v	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
k	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
int	TokenNameint
alt43	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
alt43	TokenNameIdentifier
=	TokenNameEQUAL
dfa43	TokenNameIdentifier
.	TokenNameDOT
predict	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
alt43	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_createCfamColumns2015	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_createCfamColumnValidator_in_createCfamColumns2019	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
v	TokenNameIdentifier
=	TokenNameEQUAL
createCfamColumnValidator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
expr	TokenNameIdentifier
.	TokenNameDOT
addColumn	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
,	TokenNameCOMMA
v	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_createCfamColumns2031	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
k	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_createCfamColumnValidator_in_createCfamColumns2035	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
v	TokenNameIdentifier
=	TokenNameEQUAL
createCfamColumnValidator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_PRIMARY	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_PRIMARY_in_createCfamColumns2037	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_KEY	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_KEY_in_createCfamColumns2039	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expr	TokenNameIdentifier
.	TokenNameDOT
setKeyAlias	TokenNameIdentifier
(	TokenNameLPAREN
k	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expr	TokenNameIdentifier
.	TokenNameDOT
setKeyType	TokenNameIdentifier
(	TokenNameLPAREN
v	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
String	TokenNameIdentifier
createCfamColumnValidator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
validator	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
STRING_LITERAL19	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
CqlParser	TokenNameIdentifier
.	TokenNameDOT
comparatorType_return	TokenNameIdentifier
comparatorType18	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
int	TokenNameint
alt44	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA44_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
LA44_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
88	TokenNameIntegerLiteral
&&	TokenNameAND_AND
LA44_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
101	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt44	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA44_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt44	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
NoViableAltException	TokenNameIdentifier
nvae	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NoViableAltException	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
44	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
nvae	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt44	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_comparatorType_in_createCfamColumnValidator2062	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
comparatorType18	TokenNameIdentifier
=	TokenNameEQUAL
comparatorType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
validator	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
comparatorType18	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
input	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
comparatorType18	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
,	TokenNameCOMMA
comparatorType18	TokenNameIdentifier
.	TokenNameDOT
stop	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
STRING_LITERAL19	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
STRING_LITERAL	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_STRING_LITERAL_in_createCfamColumnValidator2072	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validator	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
STRING_LITERAL19	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
STRING_LITERAL19	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
validator	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
String	TokenNameIdentifier
createCfamKeywordArgument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
arg	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
CqlParser	TokenNameIdentifier
.	TokenNameDOT
comparatorType_return	TokenNameIdentifier
comparatorType20	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
int	TokenNameint
alt45	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA45_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
LA45_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
88	TokenNameIntegerLiteral
&&	TokenNameAND_AND
LA45_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
101	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt45	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
LA45_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
LA45_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
LA45_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
FLOAT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt45	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
NoViableAltException	TokenNameIdentifier
nvae	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NoViableAltException	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
45	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
nvae	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt45	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_comparatorType_in_createCfamKeywordArgument2095	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
comparatorType20	TokenNameIdentifier
=	TokenNameEQUAL
comparatorType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
arg	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
comparatorType20	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
input	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
comparatorType20	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
,	TokenNameCOMMA
comparatorType20	TokenNameIdentifier
.	TokenNameDOT
stop	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
value	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
FLOAT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
arg	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
value	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
value	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
arg	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
CreateIndexStatement	TokenNameIdentifier
createIndexStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
CreateIndexStatement	TokenNameIdentifier
expr	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
idxName	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
cf	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
columnName	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_CREATE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_CREATE_in_createIndexStatement2148	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_INDEX	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_INDEX_in_createIndexStatement2150	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt46	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA46_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA46_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
IDENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt46	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt46	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
idxName	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
IDENT	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_IDENT_in_createIndexStatement2155	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_ON	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_ON_in_createIndexStatement2159	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cf	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
81	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_81_in_createIndexStatement2177	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_createIndexStatement2181	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
columnName	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_82_in_createIndexStatement2183	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_createIndexStatement2185	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
expr	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CreateIndexStatement	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
idxName	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
idxName	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
cf	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
cf	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
columnName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
expr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
DropIndexStatement	TokenNameIdentifier
dropIndexStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
DropIndexStatement	TokenNameIdentifier
expr	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
index	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_DROP	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_DROP_in_dropIndexStatement2221	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_INDEX	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_INDEX_in_dropIndexStatement2223	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_dropIndexStatement2241	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
expr	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DropIndexStatement	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
index	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
expr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
String	TokenNameIdentifier
dropKeyspaceStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
ksp	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_DROP	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_DROP_in_dropKeyspaceStatement2272	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_KEYSPACE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_KEYSPACE_in_dropKeyspaceStatement2274	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
name	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_dropKeyspaceStatement2292	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
ksp	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
name	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
name	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
ksp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
AlterTableStatement	TokenNameIdentifier
alterTableStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
AlterTableStatement	TokenNameIdentifier
expr	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
col	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
prop1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
propN	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
CqlParser	TokenNameIdentifier
.	TokenNameDOT
comparatorType_return	TokenNameIdentifier
alterValidator	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
CqlParser	TokenNameIdentifier
.	TokenNameDOT
comparatorType_return	TokenNameIdentifier
addValidator	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
arg1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
argN	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
OperationType	TokenNameIdentifier
type	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
columnFamily	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
,	TokenNameCOMMA
columnName	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
,	TokenNameCOMMA
validator	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
propertyMap	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_ALTER	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_ALTER_in_alterTableStatement2326	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_COLUMNFAMILY	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_COLUMNFAMILY_in_alterTableStatement2328	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
name	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
columnFamily	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
name	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
name	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt48	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
K_ALTER	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt48	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
K_ADD	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt48	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
K_DROP	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt48	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
K_WITH	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt48	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
NoViableAltException	TokenNameIdentifier
nvae	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NoViableAltException	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
48	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
nvae	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt48	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_ALTER	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_ALTER_in_alterTableStatement2360	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
OperationType	TokenNameIdentifier
.	TokenNameDOT
ALTER	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
col	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
columnName	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
col	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
col	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_TYPE_in_alterTableStatement2414	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_comparatorType_in_alterTableStatement2418	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
alterValidator	TokenNameIdentifier
=	TokenNameEQUAL
comparatorType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
validator	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
alterValidator	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
input	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
alterValidator	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
,	TokenNameCOMMA
alterValidator	TokenNameIdentifier
.	TokenNameDOT
stop	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_ADD	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_ADD_in_alterTableStatement2434	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
OperationType	TokenNameIdentifier
.	TokenNameDOT
ADD	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
col	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
columnName	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
col	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
col	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_comparatorType_in_alterTableStatement2490	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addValidator	TokenNameIdentifier
=	TokenNameEQUAL
comparatorType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
validator	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
addValidator	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
input	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
addValidator	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
,	TokenNameCOMMA
addValidator	TokenNameIdentifier
.	TokenNameDOT
stop	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_DROP	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_DROP_in_alterTableStatement2506	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
OperationType	TokenNameIdentifier
.	TokenNameDOT
DROP	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
col	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
columnName	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
col	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
col	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_WITH	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_WITH_in_alterTableStatement2557	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
OperationType	TokenNameIdentifier
.	TokenNameDOT
OPTS	TokenNameIdentifier
;	TokenNameSEMICOLON
propertyMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
prop1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
IDENT	TokenNameIdentifier
||	TokenNameOR_OR
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
COMPIDENT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
87	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_87_in_alterTableStatement2586	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_createCfamKeywordArgument_in_alterTableStatement2590	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
arg1	TokenNameIdentifier
=	TokenNameEQUAL
createCfamKeywordArgument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
propertyMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
prop1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
prop1	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
arg1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop47	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt47	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA47_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA47_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
K_AND	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt47	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt47	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_AND	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_AND_in_alterTableStatement2611	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
propN	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
IDENT	TokenNameIdentifier
||	TokenNameOR_OR
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
COMPIDENT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
87	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_87_in_alterTableStatement2623	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_createCfamKeywordArgument_in_alterTableStatement2627	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
argN	TokenNameIdentifier
=	TokenNameEQUAL
createCfamKeywordArgument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
propertyMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
propN	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
propN	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
argN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop47	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_alterTableStatement2640	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
expr	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
AlterTableStatement	TokenNameIdentifier
(	TokenNameLPAREN
columnFamily	TokenNameIdentifier
,	TokenNameCOMMA
type	TokenNameIdentifier
,	TokenNameCOMMA
columnName	TokenNameIdentifier
,	TokenNameCOMMA
validator	TokenNameIdentifier
,	TokenNameCOMMA
propertyMap	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
expr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
String	TokenNameIdentifier
dropColumnFamilyStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
cfam	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_DROP	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_DROP_in_dropColumnFamilyStatement2671	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_COLUMNFAMILY	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_COLUMNFAMILY_in_dropColumnFamilyStatement2673	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
name	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_dropColumnFamilyStatement2691	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
cfam	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
name	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
name	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
cfam	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
comparatorType_return	TokenNameIdentifier
extends	TokenNameextends
ParserRuleReturnScope	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
CqlParser	TokenNameIdentifier
.	TokenNameDOT
comparatorType_return	TokenNameIdentifier
comparatorType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
CqlParser	TokenNameIdentifier
.	TokenNameDOT
comparatorType_return	TokenNameIdentifier
retval	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CqlParser	TokenNameIdentifier
.	TokenNameDOT
comparatorType_return	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
retval	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
88	TokenNameIntegerLiteral
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
101	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
retval	TokenNameIdentifier
.	TokenNameDOT
stop	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
retval	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
Term	TokenNameIdentifier
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
Term	TokenNameIdentifier
item	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
t	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
int	TokenNameint
alt50	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA50_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
LA50_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
LA50_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
LA50_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
K_KEY	TokenNameIdentifier
&&	TokenNameAND_AND
LA50_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
FLOAT	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
LA50_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
UUID	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt50	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA50_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
QMARK	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt50	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
NoViableAltException	TokenNameIdentifier
nvae	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NoViableAltException	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
50	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
nvae	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt50	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
int	TokenNameint
alt49	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
K_KEY	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt49	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
STRING_LITERAL	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt49	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
INTEGER	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt49	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
UUID	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt49	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
IDENT	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt49	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
FLOAT	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
alt49	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
NoViableAltException	TokenNameIdentifier
nvae	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NoViableAltException	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
49	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
nvae	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt49	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_KEY	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_KEY_in_term2788	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
STRING_LITERAL	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_STRING_LITERAL_in_term2794	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
INTEGER	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_INTEGER_in_term2800	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
UUID	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_UUID_in_term2806	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
5	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
IDENT	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_IDENT_in_term2812	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
6	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
FLOAT	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_FLOAT_in_term2818	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
item	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
t	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
t	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
t	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
t	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
QMARK	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_QMARK_in_term2835	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
item	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
t	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
t	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
t	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
t	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
++	TokenNamePLUS_PLUS
currentBindMarkerIdx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
item	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
List	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
termList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
items	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
t1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
tN	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
items	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_termList2876	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
t1	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
items	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
t1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop51	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
int	TokenNameint
alt51	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA51_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA51_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
84	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt51	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt51	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
84	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_84_in_termList2881	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_termList2885	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tN	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
items	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
tN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop51	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
items	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
termPair	TokenNameIdentifier
(	TokenNameLPAREN
Map	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
,	TokenNameCOMMA
Term	TokenNameIdentifier
>	TokenNameGREATER
columns	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
Term	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_termPair2912	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
87	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_87_in_termPair2914	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_termPair2918	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
value	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
columns	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
Term	TokenNameIdentifier
intTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
Term	TokenNameIdentifier
integer	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
t	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
INTEGER	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_INTEGER_in_intTerm2943	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
integer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
t	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
t	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
t	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
t	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
integer	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
termPairWithOperation	TokenNameIdentifier
(	TokenNameLPAREN
Map	TokenNameIdentifier
<	TokenNameLESS
Term	TokenNameIdentifier
,	TokenNameCOMMA
Operation	TokenNameIdentifier
>	TokenNameGREATER
columns	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
Token	TokenNameIdentifier
op	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
c	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
v	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_termPairWithOperation2965	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
87	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_87_in_termPairWithOperation2967	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt54	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
alt54	TokenNameIdentifier
=	TokenNameEQUAL
dfa54	TokenNameIdentifier
.	TokenNameDOT
predict	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
alt54	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_termPairWithOperation2972	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
value	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
columns	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Operation	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_termPairWithOperation2997	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
int	TokenNameint
alt53	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA53_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA53_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
102	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt53	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA53_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
INTEGER	TokenNameIdentifier
||	TokenNameOR_OR
LA53_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
103	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt53	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
NoViableAltException	TokenNameIdentifier
nvae	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NoViableAltException	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
53	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
nvae	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt53	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
102	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_102_in_termPairWithOperation3001	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_termPairWithOperation3006	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
v	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
columns	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Operation	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
,	TokenNameCOMMA
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
cql	TokenNameIdentifier
.	TokenNameDOT
Operation	TokenNameIdentifier
.	TokenNameDOT
OperationType	TokenNameIdentifier
.	TokenNameDOT
PLUS	TokenNameIdentifier
,	TokenNameCOMMA
v	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
int	TokenNameint
alt52	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA52_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA52_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
103	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt52	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt52	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
op	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
103	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_103_in_termPairWithOperation3042	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_intTerm_in_termPairWithOperation3047	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
v	TokenNameIdentifier
=	TokenNameEQUAL
intTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
validateMinusSupplied	TokenNameIdentifier
(	TokenNameLPAREN
op	TokenNameIdentifier
,	TokenNameCOMMA
v	TokenNameIdentifier
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
op	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
v	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
v	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
v	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
columns	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Operation	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
,	TokenNameCOMMA
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
cql	TokenNameIdentifier
.	TokenNameDOT
Operation	TokenNameIdentifier
.	TokenNameDOT
OperationType	TokenNameIdentifier
.	TokenNameDOT
MINUS	TokenNameIdentifier
,	TokenNameCOMMA
v	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
Relation	TokenNameIdentifier
relation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
Relation	TokenNameIdentifier
rel	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
type	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
t	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_relation3110	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
name	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
87	TokenNameIntegerLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
104	TokenNameIntegerLiteral
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
107	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_term_in_relation3136	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
t	TokenNameIdentifier
=	TokenNameEQUAL
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Relation	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
type	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
type	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
t	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
rel	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
truncateStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
cf	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
columnFamily	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
K_TRUNCATE	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_K_TRUNCATE_in_truncateStatement3166	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
alt55	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA55_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
LA55_0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
LA55_0	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
LA55_1	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA55_1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
83	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt55	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt55	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
83	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_83_in_truncateStatement3185	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
columnFamily	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
IDENT	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
STRING_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
errorRecovery	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MismatchedSetException	TokenNameIdentifier
mse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MismatchedSetException	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
mse	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cf	TokenNameIdentifier
=	TokenNameEQUAL
Pair	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
keyspace	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
columnFamily	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
columnFamily	TokenNameIdentifier
.	TokenNameDOT
getText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pushFollow	TokenNameIdentifier
(	TokenNameLPAREN
FOLLOW_endStmnt_in_truncateStatement3207	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
.	TokenNameDOT
_fsp	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
cf	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
endStmnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
RecognitionException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
{	TokenNameLBRACE
int	TokenNameint
alt56	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
LA56_0	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
LA	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
LA56_0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
86	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
alt56	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
alt56	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
86	TokenNameIntegerLiteral
,	TokenNameCOMMA
FOLLOW_86_in_endStmnt3224	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
EOF	TokenNameIdentifier
,	TokenNameCOMMA
FOLLOW_EOF_in_endStmnt3228	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
RecognitionException	TokenNameIdentifier
re	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recover	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
re	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
DFA1	TokenNameIdentifier
dfa1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DFA1	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
DFA10	TokenNameIdentifier
dfa10	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DFA10	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
DFA13	TokenNameIdentifier
dfa13	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DFA13	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
DFA43	TokenNameIdentifier
dfa43	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DFA43	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
DFA54	TokenNameIdentifier
dfa54	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DFA54	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA1_eotS	TokenNameIdentifier
=	TokenNameEQUAL
"￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA1_eofS	TokenNameIdentifier
=	TokenNameEQUAL
"￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA1_minS	TokenNameIdentifier
=	TokenNameEQUAL
"￿!￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA1_maxS	TokenNameIdentifier
=	TokenNameEQUAL
"0￿(￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA1_acceptS	TokenNameIdentifier
=	TokenNameEQUAL
"￿￿  "	TokenNameStringLiteral
+	TokenNamePLUS
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA1_specialS	TokenNameIdentifier
=	TokenNameEQUAL
"￿}>"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA1_transitionS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"￿￿￿￿￿"	TokenNameStringLiteral
+	TokenNamePLUS
" ￿  ￿"	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
"￿￿"	TokenNameStringLiteral
,	TokenNameCOMMA
"￿￿"	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA1_eot	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA1_eotS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA1_eof	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA1_eofS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA1_min	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedStringToUnsignedChars	TokenNameIdentifier
(	TokenNameLPAREN
DFA1_minS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA1_max	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedStringToUnsignedChars	TokenNameIdentifier
(	TokenNameLPAREN
DFA1_maxS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA1_accept	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA1_acceptS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA1_special	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA1_specialS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA1_transition	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
int	TokenNameint
numStates	TokenNameIdentifier
=	TokenNameEQUAL
DFA1_transitionS	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
DFA1_transition	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
numStates	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numStates	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
DFA1_transition	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA1_transitionS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
class	TokenNameclass
DFA1	TokenNameIdentifier
extends	TokenNameextends
DFA	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
DFA1	TokenNameIdentifier
(	TokenNameLPAREN
BaseRecognizer	TokenNameIdentifier
recognizer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
recognizer	TokenNameIdentifier
=	TokenNameEQUAL
recognizer	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
decisionNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
eot	TokenNameIdentifier
=	TokenNameEQUAL
DFA1_eot	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
eof	TokenNameIdentifier
=	TokenNameEQUAL
DFA1_eof	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
min	TokenNameIdentifier
=	TokenNameEQUAL
DFA1_min	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
max	TokenNameIdentifier
=	TokenNameEQUAL
DFA1_max	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
accept	TokenNameIdentifier
=	TokenNameEQUAL
DFA1_accept	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
special	TokenNameIdentifier
=	TokenNameEQUAL
DFA1_special	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
transition	TokenNameIdentifier
=	TokenNameEQUAL
DFA1_transition	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDescription	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"114:1: query returns [CQLStatement stmnt] : ( selectStatement | insertStatement endStmnt | updateStatement endStmnt | batchStatement | useStatement | truncateStatement | deleteStatement endStmnt | createKeyspaceStatement | createColumnFamilyStatement | createIndexStatement | dropIndexStatement | dropKeyspaceStatement | dropColumnFamilyStatement | alterTableStatement );"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA10_eotS	TokenNameIdentifier
=	TokenNameEQUAL
"￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA10_eofS	TokenNameIdentifier
=	TokenNameEQUAL
"￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA10_minS	TokenNameIdentifier
=	TokenNameEQUAL
" ￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA10_maxS	TokenNameIdentifier
=	TokenNameEQUAL
"UT￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA10_acceptS	TokenNameIdentifier
=	TokenNameEQUAL
"￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA10_specialS	TokenNameIdentifier
=	TokenNameEQUAL
"￿}>"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA10_transitionS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"￿￿%￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿ ?￿ ￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿ ?￿ ￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿ ?￿ ￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿ ?￿ ￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿ ?￿ ￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿ ?￿ ￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿ ?￿ ￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA10_eot	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA10_eotS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA10_eof	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA10_eofS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA10_min	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedStringToUnsignedChars	TokenNameIdentifier
(	TokenNameLPAREN
DFA10_minS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA10_max	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedStringToUnsignedChars	TokenNameIdentifier
(	TokenNameLPAREN
DFA10_maxS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA10_accept	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA10_acceptS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA10_special	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA10_specialS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA10_transition	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
int	TokenNameint
numStates	TokenNameIdentifier
=	TokenNameEQUAL
DFA10_transitionS	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
DFA10_transition	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
numStates	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numStates	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
DFA10_transition	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA10_transitionS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
class	TokenNameclass
DFA10	TokenNameIdentifier
extends	TokenNameextends
DFA	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
DFA10	TokenNameIdentifier
(	TokenNameLPAREN
BaseRecognizer	TokenNameIdentifier
recognizer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
recognizer	TokenNameIdentifier
=	TokenNameEQUAL
recognizer	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
decisionNumber	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
eot	TokenNameIdentifier
=	TokenNameEQUAL
DFA10_eot	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
eof	TokenNameIdentifier
=	TokenNameEQUAL
DFA10_eof	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
min	TokenNameIdentifier
=	TokenNameEQUAL
DFA10_min	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
max	TokenNameIdentifier
=	TokenNameEQUAL
DFA10_max	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
accept	TokenNameIdentifier
=	TokenNameEQUAL
DFA10_accept	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
special	TokenNameIdentifier
=	TokenNameEQUAL
DFA10_special	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
transition	TokenNameIdentifier
=	TokenNameEQUAL
DFA10_transition	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDescription	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"185:7: (first= term ( ',' next= term )* | start= term RANGEOP finish= term | '\*' )"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA13_eotS	TokenNameIdentifier
=	TokenNameEQUAL
" ￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA13_eofS	TokenNameIdentifier
=	TokenNameEQUAL
" ￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA13_minS	TokenNameIdentifier
=	TokenNameEQUAL
"￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA13_maxS	TokenNameIdentifier
=	TokenNameEQUAL
"/k￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA13_acceptS	TokenNameIdentifier
=	TokenNameEQUAL
"￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA13_specialS	TokenNameIdentifier
=	TokenNameEQUAL
" ￿}>"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA13_transitionS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"￿￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" B￿￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" B￿￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" B￿￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" B￿￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" B￿￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" B￿￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" B￿￿"	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA13_eot	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA13_eotS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA13_eof	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA13_eofS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA13_min	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedStringToUnsignedChars	TokenNameIdentifier
(	TokenNameLPAREN
DFA13_minS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA13_max	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedStringToUnsignedChars	TokenNameIdentifier
(	TokenNameLPAREN
DFA13_maxS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA13_accept	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA13_acceptS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA13_special	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA13_specialS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA13_transition	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
int	TokenNameint
numStates	TokenNameIdentifier
=	TokenNameEQUAL
DFA13_transitionS	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
DFA13_transition	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
numStates	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numStates	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
DFA13_transition	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA13_transitionS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
class	TokenNameclass
DFA13	TokenNameIdentifier
extends	TokenNameextends
DFA	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
DFA13	TokenNameIdentifier
(	TokenNameLPAREN
BaseRecognizer	TokenNameIdentifier
recognizer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
recognizer	TokenNameIdentifier
=	TokenNameEQUAL
recognizer	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
decisionNumber	TokenNameIdentifier
=	TokenNameEQUAL
13	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
eot	TokenNameIdentifier
=	TokenNameEQUAL
DFA13_eot	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
eof	TokenNameIdentifier
=	TokenNameEQUAL
DFA13_eof	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
min	TokenNameIdentifier
=	TokenNameEQUAL
DFA13_min	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
max	TokenNameIdentifier
=	TokenNameEQUAL
DFA13_max	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
accept	TokenNameIdentifier
=	TokenNameEQUAL
DFA13_accept	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
special	TokenNameIdentifier
=	TokenNameEQUAL
DFA13_special	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
transition	TokenNameIdentifier
=	TokenNameEQUAL
DFA13_transition	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDescription	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"193:1: whereClause returns [WhereClause clause] : (first= relation ( K_AND next= relation )* | key_alias= term K_IN '(' f1= term ( ',' fN= term )* ')' );"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA43_eotS	TokenNameIdentifier
=	TokenNameEQUAL
"￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA43_eofS	TokenNameIdentifier
=	TokenNameEQUAL
"￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA43_minS	TokenNameIdentifier
=	TokenNameEQUAL
"%￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA43_maxS	TokenNameIdentifier
=	TokenNameEQUAL
"/eT￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA43_acceptS	TokenNameIdentifier
=	TokenNameEQUAL
" ￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA43_specialS	TokenNameIdentifier
=	TokenNameEQUAL
"￿}>"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA43_transitionS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"￿￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" P￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" P￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" P￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" P￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" P￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" P￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" P￿"	TokenNameStringLiteral
,	TokenNameCOMMA
",￿ ￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
",￿ ￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA43_eot	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA43_eotS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA43_eof	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA43_eofS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA43_min	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedStringToUnsignedChars	TokenNameIdentifier
(	TokenNameLPAREN
DFA43_minS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA43_max	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedStringToUnsignedChars	TokenNameIdentifier
(	TokenNameLPAREN
DFA43_maxS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA43_accept	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA43_acceptS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA43_special	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA43_specialS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA43_transition	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
int	TokenNameint
numStates	TokenNameIdentifier
=	TokenNameEQUAL
DFA43_transitionS	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
DFA43_transition	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
numStates	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numStates	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
DFA43_transition	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA43_transitionS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
class	TokenNameclass
DFA43	TokenNameIdentifier
extends	TokenNameextends
DFA	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
DFA43	TokenNameIdentifier
(	TokenNameLPAREN
BaseRecognizer	TokenNameIdentifier
recognizer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
recognizer	TokenNameIdentifier
=	TokenNameEQUAL
recognizer	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
decisionNumber	TokenNameIdentifier
=	TokenNameEQUAL
43	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
eot	TokenNameIdentifier
=	TokenNameEQUAL
DFA43_eot	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
eof	TokenNameIdentifier
=	TokenNameEQUAL
DFA43_eof	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
min	TokenNameIdentifier
=	TokenNameEQUAL
DFA43_min	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
max	TokenNameIdentifier
=	TokenNameEQUAL
DFA43_max	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
accept	TokenNameIdentifier
=	TokenNameEQUAL
DFA43_accept	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
special	TokenNameIdentifier
=	TokenNameEQUAL
DFA43_special	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
transition	TokenNameIdentifier
=	TokenNameEQUAL
DFA43_transition	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDescription	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"388:1: createCfamColumns[CreateColumnFamilyStatement expr] : (n= term v= createCfamColumnValidator | k= term v= createCfamColumnValidator K_PRIMARY K_KEY );"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA54_eotS	TokenNameIdentifier
=	TokenNameEQUAL
" ￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA54_eofS	TokenNameIdentifier
=	TokenNameEQUAL
" ￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA54_minS	TokenNameIdentifier
=	TokenNameEQUAL
"￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA54_maxS	TokenNameIdentifier
=	TokenNameEQUAL
"/g￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA54_acceptS	TokenNameIdentifier
=	TokenNameEQUAL
"￿"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DFA54_specialS	TokenNameIdentifier
=	TokenNameEQUAL
" ￿}>"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA54_transitionS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"￿￿"	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿E￿￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿E￿￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿E￿￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿E￿￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿E￿￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿E￿￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
" ￿E￿￿ "	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA54_eot	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA54_eotS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA54_eof	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA54_eofS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA54_min	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedStringToUnsignedChars	TokenNameIdentifier
(	TokenNameLPAREN
DFA54_minS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA54_max	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedStringToUnsignedChars	TokenNameIdentifier
(	TokenNameLPAREN
DFA54_maxS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA54_accept	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA54_acceptS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA54_special	TokenNameIdentifier
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA54_specialS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DFA54_transition	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
int	TokenNameint
numStates	TokenNameIdentifier
=	TokenNameEQUAL
DFA54_transitionS	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
DFA54_transition	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
numStates	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numStates	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
DFA54_transition	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
DFA	TokenNameIdentifier
.	TokenNameDOT
unpackEncodedString	TokenNameIdentifier
(	TokenNameLPAREN
DFA54_transitionS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
class	TokenNameclass
DFA54	TokenNameIdentifier
extends	TokenNameextends
DFA	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
DFA54	TokenNameIdentifier
(	TokenNameLPAREN
BaseRecognizer	TokenNameIdentifier
recognizer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
recognizer	TokenNameIdentifier
=	TokenNameEQUAL
recognizer	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
decisionNumber	TokenNameIdentifier
=	TokenNameEQUAL
54	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
eot	TokenNameIdentifier
=	TokenNameEQUAL
DFA54_eot	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
eof	TokenNameIdentifier
=	TokenNameEQUAL
DFA54_eof	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
min	TokenNameIdentifier
=	TokenNameEQUAL
DFA54_min	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
max	TokenNameIdentifier
=	TokenNameEQUAL
DFA54_max	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
accept	TokenNameIdentifier
=	TokenNameEQUAL
DFA54_accept	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
special	TokenNameIdentifier
=	TokenNameEQUAL
DFA54_special	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
transition	TokenNameIdentifier
=	TokenNameEQUAL
DFA54_transition	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDescription	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"479:20: (value= term | c= term ( '+' v= term | (op= '-' )? v= intTerm ) )"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_selectStatement_in_query69	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_insertStatement_in_query81	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_query83	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_updateStatement_in_query93	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_query95	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_batchStatement_in_query105	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_useStatement_in_query115	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_truncateStatement_in_query130	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_deleteStatement_in_query140	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_query142	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_createKeyspaceStatement_in_query152	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_createColumnFamilyStatement_in_query162	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_createIndexStatement_in_query172	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_dropIndexStatement_in_query182	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_dropKeyspaceStatement_in_query194	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_dropColumnFamilyStatement_in_query204	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_alterTableStatement_in_query214	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_USE_in_useStatement238	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_useStatement242	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_useStatement258	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_SELECT_in_selectStatement289	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000302E0L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000200000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_selectExpression_in_selectStatement305	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000400L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_COUNT_in_selectStatement337	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000020000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_81_in_selectStatement339	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000300E0L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000200000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_selectExpression_in_selectStatement343	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000040000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_82_in_selectStatement345	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000400L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_FROM_in_selectStatement371	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_selectStatement376	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000080000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_83_in_selectStatement388	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_selectStatement394	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x000000000000C800L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_USING_in_selectStatement420	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000001000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_CONSISTENCY_in_selectStatement422	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000002000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_LEVEL_in_selectStatement424	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x000000000000C000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_WHERE_in_selectStatement443	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_whereClause_in_selectStatement445	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000008000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_LIMIT_in_selectStatement462	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000040L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_INTEGER_in_selectStatement466	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_selectStatement483	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_FIRST_in_selectExpression524	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000040L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_INTEGER_in_selectExpression530	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000200E0L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000200000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_REVERSED_in_selectExpression545	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000200000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_selectExpression562	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000100000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_84_in_selectExpression579	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_selectExpression583	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000100000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_selectExpression599	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000040000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_RANGEOP_in_selectExpression601	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_selectExpression605	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_85_in_selectExpression617	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_relation_in_whereClause660	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000080002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_AND_in_whereClause676	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_relation_in_whereClause680	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000080002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_whereClause696	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000100000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_IN_in_whereClause711	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000020000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_81_in_whereClause713	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_whereClause717	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000140000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_84_in_whereClause740	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_whereClause744	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000140000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_82_in_whereClause751	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_INSERT_in_insertStatement792	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_INTO_in_insertStatement794	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_insertStatement799	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000080000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_83_in_insertStatement811	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_insertStatement817	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000020000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_81_in_insertStatement841	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_insertStatement845	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000100000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_84_in_insertStatement849	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_insertStatement853	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000140000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_82_in_insertStatement861	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000800000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_VALUES_in_insertStatement871	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000020000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_81_in_insertStatement883	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_insertStatement887	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000100000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_84_in_insertStatement891	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_insertStatement895	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000140000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_82_in_insertStatement901	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000802L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_usingClause_in_insertStatement913	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_USING_in_usingClause943	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000003001000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_usingClauseObjective_in_usingClause945	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000003081002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_AND_in_usingClause950	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000003001000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_usingClauseObjective_in_usingClause953	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000003081002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_USING_in_usingClauseDelete975	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000001001000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_usingClauseDeleteObjective_in_usingClauseDelete977	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000001081002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_AND_in_usingClauseDelete982	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000001001000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_usingClauseDeleteObjective_in_usingClauseDelete985	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000001081002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_CONSISTENCY_in_usingClauseDeleteObjective1007	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000002000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_LEVEL_in_usingClauseDeleteObjective1009	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_TIMESTAMP_in_usingClauseDeleteObjective1020	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000040L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_INTEGER_in_usingClauseDeleteObjective1024	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_usingClauseDeleteObjective_in_usingClauseObjective1044	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_TTL_in_usingClauseObjective1053	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000040L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_INTEGER_in_usingClauseObjective1057	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_BEGIN_in_batchStatement1097	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000008000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_BATCH_in_batchStatement1099	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000A0200800L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_usingClause_in_batchStatement1103	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000A0200800L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_batchStatementObjective_in_batchStatement1121	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000B0200800L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_86_in_batchStatement1123	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000B0200800L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_batchStatementObjective_in_batchStatement1132	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000B0200800L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_86_in_batchStatement1134	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000B0200800L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_APPLY_in_batchStatement1148	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000008000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_BATCH_in_batchStatement1150	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_batchStatement1152	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_insertStatement_in_batchStatementObjective1183	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_updateStatement_in_batchStatementObjective1196	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_deleteStatement_in_batchStatementObjective1209	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_UPDATE_in_updateStatement1243	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_updateStatement1248	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000080000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_83_in_updateStatement1260	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_updateStatement1266	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000040000800L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_usingClause_in_updateStatement1292	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000040000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_SET_in_updateStatement1308	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_termPairWithOperation_in_updateStatement1310	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000004000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000100000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_84_in_updateStatement1314	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_termPairWithOperation_in_updateStatement1316	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000004000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000100000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_WHERE_in_updateStatement1331	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_updateStatement1337	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000100000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000800000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_87_in_updateStatement1340	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_updateStatement1344	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_IN_in_updateStatement1422	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000020000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_81_in_updateStatement1424	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_termList_in_updateStatement1428	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000040000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_82_in_updateStatement1432	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_DELETE_in_deleteStatement1474	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000004E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_termList_in_deleteStatement1490	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000400L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_FROM_in_deleteStatement1506	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_deleteStatement1511	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000080000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_83_in_deleteStatement1523	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_deleteStatement1529	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000004802L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_usingClauseDelete_in_deleteStatement1555	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000004002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_WHERE_in_deleteStatement1573	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_deleteStatement1577	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000100000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000800000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_87_in_deleteStatement1580	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_deleteStatement1584	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_IN_in_deleteStatement1635	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000020000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_81_in_deleteStatement1637	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_termList_in_deleteStatement1641	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000040000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_82_in_deleteStatement1645	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_CREATE_in_createKeyspaceStatement1708	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000200000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_KEYSPACE_in_createKeyspaceStatement1710	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_createKeyspaceStatement1714	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000400000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_WITH_in_createKeyspaceStatement1738	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000800000020L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_createKeyspaceStatement1743	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000800000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_87_in_createKeyspaceStatement1753	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_createKeyspaceStatement1757	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000080000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_AND_in_createKeyspaceStatement1785	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000800000020L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_createKeyspaceStatement1789	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000800000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_87_in_createKeyspaceStatement1799	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_createKeyspaceStatement1803	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000080000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_createKeyspaceStatement1832	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_CREATE_in_createColumnFamilyStatement1867	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000001000000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_COLUMNFAMILY_in_createColumnFamilyStatement1869	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_createColumnFamilyStatement1873	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000400000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000420000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_81_in_createColumnFamilyStatement1897	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_createCfamColumns_in_createColumnFamilyStatement1899	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000140000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_84_in_createColumnFamilyStatement1904	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_createCfamColumns_in_createColumnFamilyStatement1906	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000140000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_82_in_createColumnFamilyStatement1912	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000400000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_WITH_in_createColumnFamilyStatement1925	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000800000020L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_createColumnFamilyStatement1929	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000800000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_87_in_createColumnFamilyStatement1937	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000080000000E0L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000003FFF000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_createCfamKeywordArgument_in_createColumnFamilyStatement1941	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000080000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_AND_in_createColumnFamilyStatement1957	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000800000020L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_createColumnFamilyStatement1961	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000800000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_87_in_createColumnFamilyStatement1969	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000080000000E0L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000003FFF000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_createCfamKeywordArgument_in_createColumnFamilyStatement1973	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000080000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_createColumnFamilyStatement1995	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_createCfamColumns2015	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000080L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000003FFF000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_createCfamColumnValidator_in_createCfamColumns2019	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_createCfamColumns2031	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000080L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000003FFF000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_createCfamColumnValidator_in_createCfamColumns2035	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000002000000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_PRIMARY_in_createCfamColumns2037	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000004000000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_KEY_in_createCfamColumns2039	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_comparatorType_in_createCfamColumnValidator2062	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_STRING_LITERAL_in_createCfamColumnValidator2072	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_comparatorType_in_createCfamKeywordArgument2095	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_createCfamKeywordArgument2107	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_CREATE_in_createIndexStatement2148	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000010000000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_INDEX_in_createIndexStatement2150	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000020000000020L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_IDENT_in_createIndexStatement2155	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000020000000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_ON_in_createIndexStatement2159	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_createIndexStatement2163	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000020000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_81_in_createIndexStatement2177	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_createIndexStatement2181	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000040000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_82_in_createIndexStatement2183	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_createIndexStatement2185	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_DROP_in_dropIndexStatement2221	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000010000000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_INDEX_in_dropIndexStatement2223	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_dropIndexStatement2227	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_dropIndexStatement2241	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_DROP_in_dropKeyspaceStatement2272	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000200000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_KEYSPACE_in_dropKeyspaceStatement2274	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_dropKeyspaceStatement2278	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_dropKeyspaceStatement2292	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_ALTER_in_alterTableStatement2326	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000001000000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_COLUMNFAMILY_in_alterTableStatement2328	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_alterTableStatement2332	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00002C0400000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_ALTER_in_alterTableStatement2360	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_alterTableStatement2382	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000100000000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_TYPE_in_alterTableStatement2414	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000003FFF000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_comparatorType_in_alterTableStatement2418	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_ADD_in_alterTableStatement2434	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_alterTableStatement2456	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000003FFF000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_comparatorType_in_alterTableStatement2490	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_DROP_in_alterTableStatement2506	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_alterTableStatement2528	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_WITH_in_alterTableStatement2557	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000800000020L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_alterTableStatement2578	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000800000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_87_in_alterTableStatement2586	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000080000000E0L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000003FFF000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_createCfamKeywordArgument_in_alterTableStatement2590	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000080000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_AND_in_alterTableStatement2611	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000800000020L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_alterTableStatement2615	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000800000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_87_in_alterTableStatement2623	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000080000000E0L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000003FFF000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_createCfamKeywordArgument_in_alterTableStatement2627	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000080000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_alterTableStatement2640	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_DROP_in_dropColumnFamilyStatement2671	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000001000000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_COLUMNFAMILY_in_dropColumnFamilyStatement2673	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_dropColumnFamilyStatement2677	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_dropColumnFamilyStatement2691	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_comparatorType0	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_KEY_in_term2788	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_STRING_LITERAL_in_term2794	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_INTEGER_in_term2800	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_UUID_in_term2806	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_IDENT_in_term2812	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_FLOAT_in_term2818	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_QMARK_in_term2835	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_termList2876	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000100000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_84_in_termList2881	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_termList2885	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000100000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_termPair2912	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000800000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_87_in_termPair2914	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_termPair2918	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_INTEGER_in_intTerm2943	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_termPairWithOperation2965	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000800000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_87_in_termPairWithOperation2967	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_termPairWithOperation2972	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_termPairWithOperation2997	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000040L	TokenNameLongLiteral
,	TokenNameCOMMA
0x000000C000000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_102_in_termPairWithOperation3001	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_termPairWithOperation3006	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_103_in_termPairWithOperation3042	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000040L	TokenNameLongLiteral
,	TokenNameCOMMA
0x000000C000000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_intTerm_in_termPairWithOperation3047	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_relation3110	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x00000F0000800000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_relation3114	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000C0C0000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_term_in_relation3136	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_K_TRUNCATE_in_truncateStatement3166	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_truncateStatement3171	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000080000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_83_in_truncateStatement3185	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x00000000000000E0L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_set_in_truncateStatement3191	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000400000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_endStmnt_in_truncateStatement3207	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_86_in_endStmnt3224	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000000L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
BitSet	TokenNameIdentifier
FOLLOW_EOF_in_endStmnt3228	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0x0000000000000002L	TokenNameLongLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
