package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
transport	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
net	TokenNameIdentifier
.	TokenNameDOT
InetSocketAddress	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
nio	TokenNameIdentifier
.	TokenNameDOT
ByteBuffer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
concurrent	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
jboss	TokenNameIdentifier
.	TokenNameDOT
netty	TokenNameIdentifier
.	TokenNameDOT
bootstrap	TokenNameIdentifier
.	TokenNameDOT
ClientBootstrap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
jboss	TokenNameIdentifier
.	TokenNameDOT
netty	TokenNameIdentifier
.	TokenNameDOT
channel	TokenNameIdentifier
.	TokenNameDOT
Channel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
jboss	TokenNameIdentifier
.	TokenNameDOT
netty	TokenNameIdentifier
.	TokenNameDOT
channel	TokenNameIdentifier
.	TokenNameDOT
Channels	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
jboss	TokenNameIdentifier
.	TokenNameDOT
netty	TokenNameIdentifier
.	TokenNameDOT
channel	TokenNameIdentifier
.	TokenNameDOT
ChannelFuture	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
jboss	TokenNameIdentifier
.	TokenNameDOT
netty	TokenNameIdentifier
.	TokenNameDOT
channel	TokenNameIdentifier
.	TokenNameDOT
ChannelHandlerContext	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
jboss	TokenNameIdentifier
.	TokenNameDOT
netty	TokenNameIdentifier
.	TokenNameDOT
channel	TokenNameIdentifier
.	TokenNameDOT
ChannelPipeline	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
jboss	TokenNameIdentifier
.	TokenNameDOT
netty	TokenNameIdentifier
.	TokenNameDOT
channel	TokenNameIdentifier
.	TokenNameDOT
ChannelPipelineFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
jboss	TokenNameIdentifier
.	TokenNameDOT
netty	TokenNameIdentifier
.	TokenNameDOT
channel	TokenNameIdentifier
.	TokenNameDOT
MessageEvent	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
jboss	TokenNameIdentifier
.	TokenNameDOT
netty	TokenNameIdentifier
.	TokenNameDOT
channel	TokenNameIdentifier
.	TokenNameDOT
SimpleChannelUpstreamHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
jboss	TokenNameIdentifier
.	TokenNameDOT
netty	TokenNameIdentifier
.	TokenNameDOT
channel	TokenNameIdentifier
.	TokenNameDOT
socket	TokenNameIdentifier
.	TokenNameDOT
nio	TokenNameIdentifier
.	TokenNameDOT
NioClientSocketChannelFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
jboss	TokenNameIdentifier
.	TokenNameDOT
netty	TokenNameIdentifier
.	TokenNameDOT
logging	TokenNameIdentifier
.	TokenNameDOT
InternalLoggerFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
jboss	TokenNameIdentifier
.	TokenNameDOT
netty	TokenNameIdentifier
.	TokenNameDOT
logging	TokenNameIdentifier
.	TokenNameDOT
Slf4JLoggerFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
db	TokenNameIdentifier
.	TokenNameDOT
ConsistencyLevel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
transport	TokenNameIdentifier
.	TokenNameDOT
messages	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
SimpleClient	TokenNameIdentifier
{	TokenNameLBRACE
static	TokenNamestatic
{	TokenNameLBRACE
InternalLoggerFactory	TokenNameIdentifier
.	TokenNameDOT
setDefaultFactory	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Slf4JLoggerFactory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
String	TokenNameIdentifier
host	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
int	TokenNameint
port	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
ResponseHandler	TokenNameIdentifier
responseHandler	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResponseHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
Connection	TokenNameIdentifier
.	TokenNameDOT
Tracker	TokenNameIdentifier
tracker	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ConnectionTracker	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
Connection	TokenNameIdentifier
connection	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Connection	TokenNameIdentifier
(	TokenNameLPAREN
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
ClientBootstrap	TokenNameIdentifier
bootstrap	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Channel	TokenNameIdentifier
channel	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
ChannelFuture	TokenNameIdentifier
lastWriteFuture	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Connection	TokenNameIdentifier
.	TokenNameDOT
Factory	TokenNameIdentifier
connectionFactory	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Connection	TokenNameIdentifier
.	TokenNameDOT
Factory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
Connection	TokenNameIdentifier
newConnection	TokenNameIdentifier
(	TokenNameLPAREN
Connection	TokenNameIdentifier
.	TokenNameDOT
Tracker	TokenNameIdentifier
tracker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
connection	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
SimpleClient	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
host	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
port	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
host	TokenNameIdentifier
=	TokenNameEQUAL
host	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
port	TokenNameIdentifier
=	TokenNameEQUAL
port	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
connect	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
useCompression	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
establishConnection	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
options	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
options	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
StartupMessage	TokenNameIdentifier
.	TokenNameDOT
CQL_VERSION	TokenNameIdentifier
,	TokenNameCOMMA
"3.0.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
useCompression	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
options	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
StartupMessage	TokenNameIdentifier
.	TokenNameDOT
COMPRESSION	TokenNameIdentifier
,	TokenNameCOMMA
"snappy"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
connection	TokenNameIdentifier
.	TokenNameDOT
setCompressor	TokenNameIdentifier
(	TokenNameLPAREN
FrameCompressor	TokenNameIdentifier
.	TokenNameDOT
SnappyCompressor	TokenNameIdentifier
.	TokenNameDOT
instance	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
execute	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StartupMessage	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
establishConnection	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
bootstrap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ClientBootstrap	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
NioClientSocketChannelFactory	TokenNameIdentifier
(	TokenNameLPAREN
Executors	TokenNameIdentifier
.	TokenNameDOT
newCachedThreadPool	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
Executors	TokenNameIdentifier
.	TokenNameDOT
newCachedThreadPool	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bootstrap	TokenNameIdentifier
.	TokenNameDOT
setOption	TokenNameIdentifier
(	TokenNameLPAREN
"tcpNoDelay"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bootstrap	TokenNameIdentifier
.	TokenNameDOT
setPipelineFactory	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
PipelineFactory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ChannelFuture	TokenNameIdentifier
future	TokenNameIdentifier
=	TokenNameEQUAL
bootstrap	TokenNameIdentifier
.	TokenNameDOT
connect	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
InetSocketAddress	TokenNameIdentifier
(	TokenNameLPAREN
host	TokenNameIdentifier
,	TokenNameCOMMA
port	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
channel	TokenNameIdentifier
=	TokenNameEQUAL
future	TokenNameIdentifier
.	TokenNameDOT
awaitUninterruptibly	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getChannel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
future	TokenNameIdentifier
.	TokenNameDOT
isSuccess	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
bootstrap	TokenNameIdentifier
.	TokenNameDOT
releaseExternalResources	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"Connection Error"	TokenNameStringLiteral
,	TokenNameCOMMA
future	TokenNameIdentifier
.	TokenNameDOT
getCause	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
login	TokenNameIdentifier
(	TokenNameLPAREN
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
credentials	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
CredentialsMessage	TokenNameIdentifier
msg	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CredentialsMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
msg	TokenNameIdentifier
.	TokenNameDOT
credentials	TokenNameIdentifier
.	TokenNameDOT
putAll	TokenNameIdentifier
(	TokenNameLPAREN
credentials	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
execute	TokenNameIdentifier
(	TokenNameLPAREN
msg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ResultMessage	TokenNameIdentifier
execute	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
ConsistencyLevel	TokenNameIdentifier
consistency	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Message	TokenNameIdentifier
.	TokenNameDOT
Response	TokenNameIdentifier
msg	TokenNameIdentifier
=	TokenNameEQUAL
execute	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
QueryMessage	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
consistency	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
msg	TokenNameIdentifier
instanceof	TokenNameinstanceof
ResultMessage	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
ResultMessage	TokenNameIdentifier
)	TokenNameRPAREN
msg	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ResultMessage	TokenNameIdentifier
.	TokenNameDOT
Prepared	TokenNameIdentifier
prepare	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Message	TokenNameIdentifier
.	TokenNameDOT
Response	TokenNameIdentifier
msg	TokenNameIdentifier
=	TokenNameEQUAL
execute	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
PrepareMessage	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
msg	TokenNameIdentifier
instanceof	TokenNameinstanceof
ResultMessage	TokenNameIdentifier
.	TokenNameDOT
Prepared	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
ResultMessage	TokenNameIdentifier
.	TokenNameDOT
Prepared	TokenNameIdentifier
)	TokenNameRPAREN
msg	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ResultMessage	TokenNameIdentifier
executePrepared	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
statementId	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
>	TokenNameGREATER
values	TokenNameIdentifier
,	TokenNameCOMMA
ConsistencyLevel	TokenNameIdentifier
consistency	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Message	TokenNameIdentifier
.	TokenNameDOT
Response	TokenNameIdentifier
msg	TokenNameIdentifier
=	TokenNameEQUAL
execute	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
ExecuteMessage	TokenNameIdentifier
(	TokenNameLPAREN
statementId	TokenNameIdentifier
,	TokenNameCOMMA
values	TokenNameIdentifier
,	TokenNameCOMMA
consistency	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
msg	TokenNameIdentifier
instanceof	TokenNameinstanceof
ResultMessage	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
ResultMessage	TokenNameIdentifier
)	TokenNameRPAREN
msg	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
lastWriteFuture	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
lastWriteFuture	TokenNameIdentifier
.	TokenNameDOT
awaitUninterruptibly	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
channel	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
awaitUninterruptibly	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bootstrap	TokenNameIdentifier
.	TokenNameDOT
releaseExternalResources	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Message	TokenNameIdentifier
.	TokenNameDOT
Response	TokenNameIdentifier
execute	TokenNameIdentifier
(	TokenNameLPAREN
Message	TokenNameIdentifier
.	TokenNameDOT
Request	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
request	TokenNameIdentifier
.	TokenNameDOT
attach	TokenNameIdentifier
(	TokenNameLPAREN
connection	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lastWriteFuture	TokenNameIdentifier
=	TokenNameEQUAL
channel	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Message	TokenNameIdentifier
.	TokenNameDOT
Response	TokenNameIdentifier
msg	TokenNameIdentifier
=	TokenNameEQUAL
responseHandler	TokenNameIdentifier
.	TokenNameDOT
responses	TokenNameIdentifier
.	TokenNameDOT
take	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
msg	TokenNameIdentifier
instanceof	TokenNameinstanceof
ErrorMessage	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
Throwable	TokenNameIdentifier
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
ErrorMessage	TokenNameIdentifier
)	TokenNameRPAREN
msg	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
error	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
msg	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Message	TokenNameIdentifier
.	TokenNameDOT
ProtocolDecoder	TokenNameIdentifier
messageDecoder	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Message	TokenNameIdentifier
.	TokenNameDOT
ProtocolDecoder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Message	TokenNameIdentifier
.	TokenNameDOT
ProtocolEncoder	TokenNameIdentifier
messageEncoder	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Message	TokenNameIdentifier
.	TokenNameDOT
ProtocolEncoder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Frame	TokenNameIdentifier
.	TokenNameDOT
Decompressor	TokenNameIdentifier
frameDecompressor	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Frame	TokenNameIdentifier
.	TokenNameDOT
Decompressor	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Frame	TokenNameIdentifier
.	TokenNameDOT
Compressor	TokenNameIdentifier
frameCompressor	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Frame	TokenNameIdentifier
.	TokenNameDOT
Compressor	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Frame	TokenNameIdentifier
.	TokenNameDOT
Encoder	TokenNameIdentifier
frameEncoder	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Frame	TokenNameIdentifier
.	TokenNameDOT
Encoder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
ConnectionTracker	TokenNameIdentifier
implements	TokenNameimplements
Connection	TokenNameIdentifier
.	TokenNameDOT
Tracker	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
addConnection	TokenNameIdentifier
(	TokenNameLPAREN
Channel	TokenNameIdentifier
ch	TokenNameIdentifier
,	TokenNameCOMMA
Connection	TokenNameIdentifier
connection	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
closeAll	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
class	TokenNameclass
PipelineFactory	TokenNameIdentifier
implements	TokenNameimplements
ChannelPipelineFactory	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
ChannelPipeline	TokenNameIdentifier
getPipeline	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
ChannelPipeline	TokenNameIdentifier
pipeline	TokenNameIdentifier
=	TokenNameEQUAL
Channels	TokenNameIdentifier
.	TokenNameDOT
pipeline	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pipeline	TokenNameIdentifier
.	TokenNameDOT
addLast	TokenNameIdentifier
(	TokenNameLPAREN
"frameDecoder"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Frame	TokenNameIdentifier
.	TokenNameDOT
Decoder	TokenNameIdentifier
(	TokenNameLPAREN
tracker	TokenNameIdentifier
,	TokenNameCOMMA
connectionFactory	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pipeline	TokenNameIdentifier
.	TokenNameDOT
addLast	TokenNameIdentifier
(	TokenNameLPAREN
"frameEncoder"	TokenNameStringLiteral
,	TokenNameCOMMA
frameEncoder	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pipeline	TokenNameIdentifier
.	TokenNameDOT
addLast	TokenNameIdentifier
(	TokenNameLPAREN
"frameDecompressor"	TokenNameStringLiteral
,	TokenNameCOMMA
frameDecompressor	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pipeline	TokenNameIdentifier
.	TokenNameDOT
addLast	TokenNameIdentifier
(	TokenNameLPAREN
"frameCompressor"	TokenNameStringLiteral
,	TokenNameCOMMA
frameCompressor	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pipeline	TokenNameIdentifier
.	TokenNameDOT
addLast	TokenNameIdentifier
(	TokenNameLPAREN
"messageDecoder"	TokenNameStringLiteral
,	TokenNameCOMMA
messageDecoder	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pipeline	TokenNameIdentifier
.	TokenNameDOT
addLast	TokenNameIdentifier
(	TokenNameLPAREN
"messageEncoder"	TokenNameStringLiteral
,	TokenNameCOMMA
messageEncoder	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pipeline	TokenNameIdentifier
.	TokenNameDOT
addLast	TokenNameIdentifier
(	TokenNameLPAREN
"handler"	TokenNameStringLiteral
,	TokenNameCOMMA
responseHandler	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
pipeline	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
ResponseHandler	TokenNameIdentifier
extends	TokenNameextends
SimpleChannelUpstreamHandler	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
final	TokenNamefinal
BlockingQueue	TokenNameIdentifier
<	TokenNameLESS
Message	TokenNameIdentifier
.	TokenNameDOT
Response	TokenNameIdentifier
>	TokenNameGREATER
responses	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SynchronousQueue	TokenNameIdentifier
<	TokenNameLESS
Message	TokenNameIdentifier
.	TokenNameDOT
Response	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
messageReceived	TokenNameIdentifier
(	TokenNameLPAREN
ChannelHandlerContext	TokenNameIdentifier
ctx	TokenNameIdentifier
,	TokenNameCOMMA
MessageEvent	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
Message	TokenNameIdentifier
.	TokenNameDOT
Response	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
responses	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
Message	TokenNameIdentifier
.	TokenNameDOT
Response	TokenNameIdentifier
)	TokenNameRPAREN
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
ie	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
ie	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
