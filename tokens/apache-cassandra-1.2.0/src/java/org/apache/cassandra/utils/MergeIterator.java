package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
com	TokenNameIdentifier
.	TokenNameDOT
google	TokenNameIdentifier
.	TokenNameDOT
common	TokenNameIdentifier
.	TokenNameDOT
collect	TokenNameIdentifier
.	TokenNameDOT
AbstractIterator	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
abstract	TokenNameabstract
class	TokenNameclass
MergeIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
extends	TokenNameextends
AbstractIterator	TokenNameIdentifier
<	TokenNameLESS
Out	TokenNameIdentifier
>	TokenNameGREATER
implements	TokenNameimplements
IMergeIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
protected	TokenNameprotected
final	TokenNamefinal
Reducer	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
reducer	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
List	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
extends	TokenNameextends
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
iterators	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
MergeIterator	TokenNameIdentifier
(	TokenNameLPAREN
List	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
extends	TokenNameextends
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
iters	TokenNameIdentifier
,	TokenNameCOMMA
Reducer	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
reducer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
iterators	TokenNameIdentifier
=	TokenNameEQUAL
iters	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
reducer	TokenNameIdentifier
=	TokenNameEQUAL
reducer	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
IMergeIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
get	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
List	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
extends	TokenNameextends
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
sources	TokenNameIdentifier
,	TokenNameCOMMA
Comparator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
comparator	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
Reducer	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
reducer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sources	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
reducer	TokenNameIdentifier
.	TokenNameDOT
trivialReduceIsTrivial	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
new	TokenNamenew
TrivialOneToOne	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
sources	TokenNameIdentifier
,	TokenNameCOMMA
reducer	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
new	TokenNamenew
OneToOne	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
sources	TokenNameIdentifier
,	TokenNameCOMMA
reducer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
ManyToOne	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
sources	TokenNameIdentifier
,	TokenNameCOMMA
comparator	TokenNameIdentifier
,	TokenNameCOMMA
reducer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Iterable	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
extends	TokenNameextends
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
iterators	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
iterators	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
iterator	TokenNameIdentifier
:	TokenNameCOLON
this	TokenNamethis
.	TokenNameDOT
iterators	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
iterator	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
reducer	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
ManyToOne	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
extends	TokenNameextends
MergeIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
protected	TokenNameprotected
final	TokenNamefinal
PriorityQueue	TokenNameIdentifier
<	TokenNameLESS
Candidate	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
queue	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
ArrayDeque	TokenNameIdentifier
<	TokenNameLESS
Candidate	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
candidates	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ManyToOne	TokenNameIdentifier
(	TokenNameLPAREN
List	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
extends	TokenNameextends
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
iters	TokenNameIdentifier
,	TokenNameCOMMA
Comparator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
comp	TokenNameIdentifier
,	TokenNameCOMMA
Reducer	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
reducer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
iters	TokenNameIdentifier
,	TokenNameCOMMA
reducer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
queue	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PriorityQueue	TokenNameIdentifier
<	TokenNameLESS
Candidate	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
iters	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
iter	TokenNameIdentifier
:	TokenNameCOLON
iters	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Candidate	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
candidate	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Candidate	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
iter	TokenNameIdentifier
,	TokenNameCOMMA
comp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
candidate	TokenNameIdentifier
.	TokenNameDOT
advance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
continue	TokenNamecontinue
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
queue	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
candidate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
candidates	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayDeque	TokenNameIdentifier
<	TokenNameLESS
Candidate	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
(	TokenNameLPAREN
queue	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
Out	TokenNameIdentifier
computeNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
advance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
Out	TokenNameIdentifier
consume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
reducer	TokenNameIdentifier
.	TokenNameDOT
onKeyChange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Candidate	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
candidate	TokenNameIdentifier
=	TokenNameEQUAL
queue	TokenNameIdentifier
.	TokenNameDOT
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
candidate	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
endOfData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
candidate	TokenNameIdentifier
=	TokenNameEQUAL
queue	TokenNameIdentifier
.	TokenNameDOT
poll	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
candidates	TokenNameIdentifier
.	TokenNameDOT
push	TokenNameIdentifier
(	TokenNameLPAREN
candidate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
reducer	TokenNameIdentifier
.	TokenNameDOT
reduce	TokenNameIdentifier
(	TokenNameLPAREN
candidate	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
queue	TokenNameIdentifier
.	TokenNameDOT
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
queue	TokenNameIdentifier
.	TokenNameDOT
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
candidate	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
reducer	TokenNameIdentifier
.	TokenNameDOT
getReduced	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
void	TokenNamevoid
advance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Candidate	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
candidate	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
candidate	TokenNameIdentifier
=	TokenNameEQUAL
candidates	TokenNameIdentifier
.	TokenNameDOT
pollFirst	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
if	TokenNameif
(	TokenNameLPAREN
candidate	TokenNameIdentifier
.	TokenNameDOT
advance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
queue	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
candidate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
Candidate	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
implements	TokenNameimplements
Comparable	TokenNameIdentifier
<	TokenNameLESS
Candidate	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
iter	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Comparator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
comp	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
In	TokenNameIdentifier
item	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Candidate	TokenNameIdentifier
(	TokenNameLPAREN
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
iter	TokenNameIdentifier
,	TokenNameCOMMA
Comparator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
comp	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
iter	TokenNameIdentifier
=	TokenNameEQUAL
iter	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
comp	TokenNameIdentifier
=	TokenNameEQUAL
comp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
advance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
iter	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
item	TokenNameIdentifier
=	TokenNameEQUAL
iter	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
Candidate	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
that	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
comp	TokenNameIdentifier
.	TokenNameDOT
compare	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
item	TokenNameIdentifier
,	TokenNameCOMMA
that	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
abstract	TokenNameabstract
class	TokenNameclass
Reducer	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
public	TokenNamepublic
boolean	TokenNameboolean
trivialReduceIsTrivial	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
abstract	TokenNameabstract
void	TokenNamevoid
reduce	TokenNameIdentifier
(	TokenNameLPAREN
In	TokenNameIdentifier
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
abstract	TokenNameabstract
Out	TokenNameIdentifier
getReduced	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
void	TokenNamevoid
onKeyChange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
OneToOne	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
extends	TokenNameextends
MergeIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>	TokenNameGREATER
source	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
OneToOne	TokenNameIdentifier
(	TokenNameLPAREN
List	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
extends	TokenNameextends
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
sources	TokenNameIdentifier
,	TokenNameCOMMA
Reducer	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
reducer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
sources	TokenNameIdentifier
,	TokenNameCOMMA
reducer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
source	TokenNameIdentifier
=	TokenNameEQUAL
sources	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Out	TokenNameIdentifier
computeNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
source	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
endOfData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
reducer	TokenNameIdentifier
.	TokenNameDOT
onKeyChange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
reducer	TokenNameIdentifier
.	TokenNameDOT
reduce	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
reducer	TokenNameIdentifier
.	TokenNameDOT
getReduced	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
TrivialOneToOne	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
extends	TokenNameextends
MergeIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
source	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
TrivialOneToOne	TokenNameIdentifier
(	TokenNameLPAREN
List	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
extends	TokenNameextends
CloseableIterator	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
sources	TokenNameIdentifier
,	TokenNameCOMMA
Reducer	TokenNameIdentifier
<	TokenNameLESS
In	TokenNameIdentifier
,	TokenNameCOMMA
Out	TokenNameIdentifier
>	TokenNameGREATER
reducer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
sources	TokenNameIdentifier
,	TokenNameCOMMA
reducer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
source	TokenNameIdentifier
=	TokenNameEQUAL
sources	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Out	TokenNameIdentifier
computeNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
source	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
endOfData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
Out	TokenNameIdentifier
)	TokenNameRPAREN
source	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
