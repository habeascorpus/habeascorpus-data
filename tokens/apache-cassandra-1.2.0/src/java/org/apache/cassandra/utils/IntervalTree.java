package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
DataInput	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
DataOutput	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
reflect	TokenNameIdentifier
.	TokenNameDOT
Constructor	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
reflect	TokenNameIdentifier
.	TokenNameDOT
InvocationTargetException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
com	TokenNameIdentifier
.	TokenNameDOT
google	TokenNameIdentifier
.	TokenNameDOT
common	TokenNameIdentifier
.	TokenNameDOT
base	TokenNameIdentifier
.	TokenNameDOT
Joiner	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
com	TokenNameIdentifier
.	TokenNameDOT
google	TokenNameIdentifier
.	TokenNameDOT
common	TokenNameIdentifier
.	TokenNameDOT
collect	TokenNameIdentifier
.	TokenNameDOT
AbstractIterator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
com	TokenNameIdentifier
.	TokenNameDOT
google	TokenNameIdentifier
.	TokenNameDOT
common	TokenNameIdentifier
.	TokenNameDOT
collect	TokenNameIdentifier
.	TokenNameDOT
Iterators	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
com	TokenNameIdentifier
.	TokenNameDOT
google	TokenNameIdentifier
.	TokenNameDOT
common	TokenNameIdentifier
.	TokenNameDOT
collect	TokenNameIdentifier
.	TokenNameDOT
Ordering	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
slf4j	TokenNameIdentifier
.	TokenNameDOT
Logger	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
slf4j	TokenNameIdentifier
.	TokenNameDOT
LoggerFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
db	TokenNameIdentifier
.	TokenNameDOT
TypeSizes	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
ISerializer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IVersionedSerializer	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
extends	TokenNameextends
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
implements	TokenNameimplements
Iterable	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Logger	TokenNameIdentifier
logger	TokenNameIdentifier
=	TokenNameEQUAL
LoggerFactory	TokenNameIdentifier
.	TokenNameDOT
getLogger	TokenNameIdentifier
(	TokenNameLPAREN
IntervalTree	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
@	TokenNameAT
SuppressWarnings	TokenNameIdentifier
(	TokenNameLPAREN
"unchecked"	TokenNameStringLiteral
)	TokenNameRPAREN
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
IntervalTree	TokenNameIdentifier
EMPTY_TREE	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IntervalTree	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
IntervalNode	TokenNameIdentifier
head	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
count	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Comparator	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
>	TokenNameGREATER
comparator	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Ordering	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
minOrdering	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Ordering	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
maxOrdering	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
IntervalTree	TokenNameIdentifier
(	TokenNameLPAREN
Collection	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
intervals	TokenNameIdentifier
,	TokenNameCOMMA
Comparator	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
>	TokenNameGREATER
comparator	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
comparator	TokenNameIdentifier
=	TokenNameEQUAL
comparator	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
IntervalTree	TokenNameIdentifier
it	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
minOrdering	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Ordering	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
int	TokenNameint
compare	TokenNameIdentifier
(	TokenNameLPAREN
I	TokenNameIdentifier
interval1	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
interval2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
it	TokenNameIdentifier
.	TokenNameDOT
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
interval1	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
,	TokenNameCOMMA
interval2	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
maxOrdering	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Ordering	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
int	TokenNameint
compare	TokenNameIdentifier
(	TokenNameLPAREN
I	TokenNameIdentifier
interval1	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
interval2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
it	TokenNameIdentifier
.	TokenNameDOT
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
interval1	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
,	TokenNameCOMMA
interval2	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
head	TokenNameIdentifier
=	TokenNameEQUAL
intervals	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
intervals	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
new	TokenNamenew
IntervalNode	TokenNameIdentifier
(	TokenNameLPAREN
intervals	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
count	TokenNameIdentifier
=	TokenNameEQUAL
intervals	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
intervals	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
extends	TokenNameextends
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>	TokenNameGREATER
build	TokenNameIdentifier
(	TokenNameLPAREN
Collection	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
intervals	TokenNameIdentifier
,	TokenNameCOMMA
Comparator	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
>	TokenNameGREATER
comparator	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
intervals	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
intervals	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
emptyTree	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
intervals	TokenNameIdentifier
,	TokenNameCOMMA
comparator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
<	TokenNameLESS
C	TokenNameIdentifier
extends	TokenNameextends
Comparable	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
>	TokenNameGREATER
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
extends	TokenNameextends
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>	TokenNameGREATER
build	TokenNameIdentifier
(	TokenNameLPAREN
Collection	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
intervals	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
intervals	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
intervals	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
emptyTree	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
intervals	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
extends	TokenNameextends
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
Serializer	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>	TokenNameGREATER
serializer	TokenNameIdentifier
(	TokenNameLPAREN
ISerializer	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
>	TokenNameGREATER
pointSerializer	TokenNameIdentifier
,	TokenNameCOMMA
ISerializer	TokenNameIdentifier
<	TokenNameLESS
D	TokenNameIdentifier
>	TokenNameGREATER
dataSerializer	TokenNameIdentifier
,	TokenNameCOMMA
Constructor	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
constructor	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Serializer	TokenNameIdentifier
(	TokenNameLPAREN
pointSerializer	TokenNameIdentifier
,	TokenNameCOMMA
dataSerializer	TokenNameIdentifier
,	TokenNameCOMMA
constructor	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
SuppressWarnings	TokenNameIdentifier
(	TokenNameLPAREN
"unchecked"	TokenNameStringLiteral
)	TokenNameRPAREN
public	TokenNamepublic
static	TokenNamestatic
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
extends	TokenNameextends
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>	TokenNameGREATER
emptyTree	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>	TokenNameGREATER
)	TokenNameRPAREN
EMPTY_TREE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Comparator	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
>	TokenNameGREATER
comparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
comparator	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
intervalCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
count	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
head	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
C	TokenNameIdentifier
max	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
head	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalStateException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
head	TokenNameIdentifier
.	TokenNameDOT
high	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
C	TokenNameIdentifier
min	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
head	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalStateException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
head	TokenNameIdentifier
.	TokenNameDOT
low	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
List	TokenNameIdentifier
<	TokenNameLESS
D	TokenNameIdentifier
>	TokenNameGREATER
search	TokenNameIdentifier
(	TokenNameLPAREN
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
searchInterval	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
head	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
Collections	TokenNameIdentifier
.	TokenNameDOT
<	TokenNameLESS
D	TokenNameIdentifier
>	TokenNameGREATER
emptyList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
D	TokenNameIdentifier
>	TokenNameGREATER
results	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
D	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
head	TokenNameIdentifier
.	TokenNameDOT
searchInternal	TokenNameIdentifier
(	TokenNameLPAREN
searchInterval	TokenNameIdentifier
,	TokenNameCOMMA
results	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
results	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
List	TokenNameIdentifier
<	TokenNameLESS
D	TokenNameIdentifier
>	TokenNameGREATER
search	TokenNameIdentifier
(	TokenNameLPAREN
C	TokenNameIdentifier
point	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
search	TokenNameIdentifier
(	TokenNameLPAREN
Interval	TokenNameIdentifier
.	TokenNameDOT
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
create	TokenNameIdentifier
(	TokenNameLPAREN
point	TokenNameIdentifier
,	TokenNameCOMMA
point	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Iterator	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
head	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
Iterators	TokenNameIdentifier
.	TokenNameDOT
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
emptyIterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
TreeIterator	TokenNameIdentifier
(	TokenNameLPAREN
head	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"<"	TokenNameStringLiteral
+	TokenNamePLUS
Joiner	TokenNameIdentifier
.	TokenNameDOT
on	TokenNameIdentifier
(	TokenNameLPAREN
", "	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
+	TokenNamePLUS
">"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
boolean	TokenNameboolean
equals	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
o	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
o	TokenNameIdentifier
instanceof	TokenNameinstanceof
IntervalTree	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
IntervalTree	TokenNameIdentifier
that	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
IntervalTree	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
Iterators	TokenNameIdentifier
.	TokenNameDOT
elementsEqual	TokenNameIdentifier
(	TokenNameLPAREN
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
that	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
final	TokenNamefinal
int	TokenNameint
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
result	TokenNameIdentifier
=	TokenNameEQUAL
comparator	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
interval	TokenNameIdentifier
:	TokenNameCOLON
this	TokenNamethis
)	TokenNameRPAREN
result	TokenNameIdentifier
=	TokenNameEQUAL
31	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
result	TokenNameIdentifier
+	TokenNamePLUS
interval	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
C	TokenNameIdentifier
point1	TokenNameIdentifier
,	TokenNameCOMMA
C	TokenNameIdentifier
point2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
comparator	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
comparator	TokenNameIdentifier
.	TokenNameDOT
compare	TokenNameIdentifier
(	TokenNameLPAREN
point1	TokenNameIdentifier
,	TokenNameCOMMA
point2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
assert	TokenNameassert
point1	TokenNameIdentifier
instanceof	TokenNameinstanceof
Comparable	TokenNameIdentifier
;	TokenNameSEMICOLON
assert	TokenNameassert
point2	TokenNameIdentifier
instanceof	TokenNameinstanceof
Comparable	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
Comparable	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
>	TokenNameGREATER
)	TokenNameRPAREN
point1	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
point2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
encloses	TokenNameIdentifier
(	TokenNameLPAREN
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
enclosing	TokenNameIdentifier
,	TokenNameCOMMA
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
enclosed	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
enclosing	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
,	TokenNameCOMMA
enclosed	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
enclosing	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
,	TokenNameCOMMA
enclosed	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
contains	TokenNameIdentifier
(	TokenNameLPAREN
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
interval	TokenNameIdentifier
,	TokenNameCOMMA
C	TokenNameIdentifier
point	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
,	TokenNameCOMMA
point	TokenNameIdentifier
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
,	TokenNameCOMMA
point	TokenNameIdentifier
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
intersects	TokenNameIdentifier
(	TokenNameLPAREN
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
interval1	TokenNameIdentifier
,	TokenNameCOMMA
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
interval2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
contains	TokenNameIdentifier
(	TokenNameLPAREN
interval1	TokenNameIdentifier
,	TokenNameCOMMA
interval2	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
contains	TokenNameIdentifier
(	TokenNameLPAREN
interval1	TokenNameIdentifier
,	TokenNameCOMMA
interval2	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
class	TokenNameclass
IntervalNode	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
C	TokenNameIdentifier
center	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
C	TokenNameIdentifier
low	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
C	TokenNameIdentifier
high	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
List	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
intersectsLeft	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
List	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
intersectsRight	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
IntervalNode	TokenNameIdentifier
left	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
IntervalNode	TokenNameIdentifier
right	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
IntervalNode	TokenNameIdentifier
(	TokenNameLPAREN
Collection	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
toBisect	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
!	TokenNameNOT
toBisect	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
logger	TokenNameIdentifier
.	TokenNameDOT
debug	TokenNameIdentifier
(	TokenNameLPAREN
"Creating IntervalNode from {}"	TokenNameStringLiteral
,	TokenNameCOMMA
toBisect	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
toBisect	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
I	TokenNameIdentifier
interval	TokenNameIdentifier
=	TokenNameEQUAL
toBisect	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
low	TokenNameIdentifier
=	TokenNameEQUAL
interval	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
;	TokenNameSEMICOLON
center	TokenNameIdentifier
=	TokenNameEQUAL
interval	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
;	TokenNameSEMICOLON
high	TokenNameIdentifier
=	TokenNameEQUAL
interval	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
l	TokenNameIdentifier
=	TokenNameEQUAL
Collections	TokenNameIdentifier
.	TokenNameDOT
singletonList	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
intersectsLeft	TokenNameIdentifier
=	TokenNameEQUAL
l	TokenNameIdentifier
;	TokenNameSEMICOLON
intersectsRight	TokenNameIdentifier
=	TokenNameEQUAL
l	TokenNameIdentifier
;	TokenNameSEMICOLON
left	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
right	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
>	TokenNameGREATER
allEndpoints	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
toBisect	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
I	TokenNameIdentifier
interval	TokenNameIdentifier
:	TokenNameCOLON
toBisect	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
(	TokenNameLPAREN
comparator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
(	TokenNameLPAREN
(	TokenNameLPAREN
Comparable	TokenNameIdentifier
)	TokenNameRPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
comparator	TokenNameIdentifier
.	TokenNameDOT
compare	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
,	TokenNameCOMMA
interval	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
:	TokenNameCOLON
"Interval min > max"	TokenNameStringLiteral
;	TokenNameSEMICOLON
allEndpoints	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
allEndpoints	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
comparator	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
Collections	TokenNameIdentifier
.	TokenNameDOT
sort	TokenNameIdentifier
(	TokenNameLPAREN
allEndpoints	TokenNameIdentifier
,	TokenNameCOMMA
comparator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
Collections	TokenNameIdentifier
.	TokenNameDOT
sort	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
List	TokenNameIdentifier
<	TokenNameLESS
Comparable	TokenNameIdentifier
>	TokenNameGREATER
)	TokenNameRPAREN
allEndpoints	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
low	TokenNameIdentifier
=	TokenNameEQUAL
allEndpoints	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
center	TokenNameIdentifier
=	TokenNameEQUAL
allEndpoints	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
toBisect	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
high	TokenNameIdentifier
=	TokenNameEQUAL
allEndpoints	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
allEndpoints	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
intersects	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
leftSegment	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
rightSegment	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
I	TokenNameIdentifier
candidate	TokenNameIdentifier
:	TokenNameCOLON
toBisect	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
candidate	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
,	TokenNameCOMMA
center	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
leftSegment	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
candidate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
candidate	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
,	TokenNameCOMMA
center	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rightSegment	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
candidate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
intersects	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
candidate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
intersectsLeft	TokenNameIdentifier
=	TokenNameEQUAL
minOrdering	TokenNameIdentifier
.	TokenNameDOT
sortedCopy	TokenNameIdentifier
(	TokenNameLPAREN
intersects	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
intersectsRight	TokenNameIdentifier
=	TokenNameEQUAL
maxOrdering	TokenNameIdentifier
.	TokenNameDOT
reverse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
sortedCopy	TokenNameIdentifier
(	TokenNameLPAREN
intersects	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
left	TokenNameIdentifier
=	TokenNameEQUAL
leftSegment	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
new	TokenNamenew
IntervalNode	TokenNameIdentifier
(	TokenNameLPAREN
leftSegment	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
right	TokenNameIdentifier
=	TokenNameEQUAL
rightSegment	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
new	TokenNamenew
IntervalNode	TokenNameIdentifier
(	TokenNameLPAREN
rightSegment	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
(	TokenNameLPAREN
intersects	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
leftSegment	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
rightSegment	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
toBisect	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
"intersects ("	TokenNameStringLiteral
+	TokenNamePLUS
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
intersects	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
") + leftSegment ("	TokenNameStringLiteral
+	TokenNamePLUS
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
leftSegment	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
") + rightSegment ("	TokenNameStringLiteral
+	TokenNamePLUS
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
rightSegment	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
") != toBisect ("	TokenNameStringLiteral
+	TokenNamePLUS
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
toBisect	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
searchInternal	TokenNameIdentifier
(	TokenNameLPAREN
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
searchInterval	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
D	TokenNameIdentifier
>	TokenNameGREATER
results	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
searchInterval	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
,	TokenNameCOMMA
low	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
searchInterval	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
,	TokenNameCOMMA
high	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contains	TokenNameIdentifier
(	TokenNameLPAREN
searchInterval	TokenNameIdentifier
,	TokenNameCOMMA
center	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
interval	TokenNameIdentifier
:	TokenNameCOLON
intersectsLeft	TokenNameIdentifier
)	TokenNameRPAREN
results	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
left	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
left	TokenNameIdentifier
.	TokenNameDOT
searchInternal	TokenNameIdentifier
(	TokenNameLPAREN
searchInterval	TokenNameIdentifier
,	TokenNameCOMMA
results	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
right	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
right	TokenNameIdentifier
.	TokenNameDOT
searchInternal	TokenNameIdentifier
(	TokenNameLPAREN
searchInterval	TokenNameIdentifier
,	TokenNameCOMMA
results	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
center	TokenNameIdentifier
,	TokenNameCOMMA
searchInterval	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
interval	TokenNameIdentifier
:	TokenNameCOLON
intersectsRight	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
,	TokenNameCOMMA
searchInterval	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
results	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
right	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
right	TokenNameIdentifier
.	TokenNameDOT
searchInternal	TokenNameIdentifier
(	TokenNameLPAREN
searchInterval	TokenNameIdentifier
,	TokenNameCOMMA
results	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
assert	TokenNameassert
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
center	TokenNameIdentifier
,	TokenNameCOMMA
searchInterval	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
interval	TokenNameIdentifier
:	TokenNameCOLON
intersectsLeft	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
comparePoints	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
,	TokenNameCOMMA
searchInterval	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
results	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
left	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
left	TokenNameIdentifier
.	TokenNameDOT
searchInternal	TokenNameIdentifier
(	TokenNameLPAREN
searchInterval	TokenNameIdentifier
,	TokenNameCOMMA
results	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
class	TokenNameclass
TreeIterator	TokenNameIdentifier
extends	TokenNameextends
AbstractIterator	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
Deque	TokenNameIdentifier
<	TokenNameLESS
IntervalNode	TokenNameIdentifier
>	TokenNameGREATER
stack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayDeque	TokenNameIdentifier
<	TokenNameLESS
IntervalNode	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Iterator	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
current	TokenNameIdentifier
;	TokenNameSEMICOLON
TreeIterator	TokenNameIdentifier
(	TokenNameLPAREN
IntervalNode	TokenNameIdentifier
node	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
gotoMinOf	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
I	TokenNameIdentifier
computeNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
current	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
current	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IntervalNode	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
stack	TokenNameIdentifier
.	TokenNameDOT
pollFirst	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
node	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
endOfData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
current	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
.	TokenNameDOT
intersectsLeft	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
gotoMinOf	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
.	TokenNameDOT
right	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
computeNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
gotoMinOf	TokenNameIdentifier
(	TokenNameLPAREN
IntervalNode	TokenNameIdentifier
node	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
node	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
stack	TokenNameIdentifier
.	TokenNameDOT
offerFirst	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
node	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
Serializer	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
extends	TokenNameextends
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
implements	TokenNameimplements
IVersionedSerializer	TokenNameIdentifier
<	TokenNameLESS
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
ISerializer	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
>	TokenNameGREATER
pointSerializer	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
ISerializer	TokenNameIdentifier
<	TokenNameLESS
D	TokenNameIdentifier
>	TokenNameGREATER
dataSerializer	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Constructor	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
constructor	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Serializer	TokenNameIdentifier
(	TokenNameLPAREN
ISerializer	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
>	TokenNameGREATER
pointSerializer	TokenNameIdentifier
,	TokenNameCOMMA
ISerializer	TokenNameIdentifier
<	TokenNameLESS
D	TokenNameIdentifier
>	TokenNameGREATER
dataSerializer	TokenNameIdentifier
,	TokenNameCOMMA
Constructor	TokenNameIdentifier
<	TokenNameLESS
I	TokenNameIdentifier
>	TokenNameGREATER
constructor	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
pointSerializer	TokenNameIdentifier
=	TokenNameEQUAL
pointSerializer	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
dataSerializer	TokenNameIdentifier
=	TokenNameEQUAL
dataSerializer	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
constructor	TokenNameIdentifier
=	TokenNameEQUAL
constructor	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
serialize	TokenNameIdentifier
(	TokenNameLPAREN
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>	TokenNameGREATER
it	TokenNameIdentifier
,	TokenNameCOMMA
DataOutput	TokenNameIdentifier
dos	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
version	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
dos	TokenNameIdentifier
.	TokenNameDOT
writeInt	TokenNameIdentifier
(	TokenNameLPAREN
it	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
interval	TokenNameIdentifier
:	TokenNameCOLON
it	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
pointSerializer	TokenNameIdentifier
.	TokenNameDOT
serialize	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
,	TokenNameCOMMA
dos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pointSerializer	TokenNameIdentifier
.	TokenNameDOT
serialize	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
,	TokenNameCOMMA
dos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dataSerializer	TokenNameIdentifier
.	TokenNameDOT
serialize	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
,	TokenNameCOMMA
dos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>	TokenNameGREATER
deserialize	TokenNameIdentifier
(	TokenNameLPAREN
DataInput	TokenNameIdentifier
dis	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
version	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
deserialize	TokenNameIdentifier
(	TokenNameLPAREN
dis	TokenNameIdentifier
,	TokenNameCOMMA
version	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>	TokenNameGREATER
deserialize	TokenNameIdentifier
(	TokenNameLPAREN
DataInput	TokenNameIdentifier
dis	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
version	TokenNameIdentifier
,	TokenNameCOMMA
Comparator	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
>	TokenNameGREATER
comparator	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
dis	TokenNameIdentifier
.	TokenNameDOT
readInt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
intervals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
(	TokenNameLPAREN
count	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
C	TokenNameIdentifier
min	TokenNameIdentifier
=	TokenNameEQUAL
pointSerializer	TokenNameIdentifier
.	TokenNameDOT
deserialize	TokenNameIdentifier
(	TokenNameLPAREN
dis	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
C	TokenNameIdentifier
max	TokenNameIdentifier
=	TokenNameEQUAL
pointSerializer	TokenNameIdentifier
.	TokenNameDOT
deserialize	TokenNameIdentifier
(	TokenNameLPAREN
dis	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
D	TokenNameIdentifier
data	TokenNameIdentifier
=	TokenNameEQUAL
dataSerializer	TokenNameIdentifier
.	TokenNameDOT
deserialize	TokenNameIdentifier
(	TokenNameLPAREN
dis	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
intervals	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
constructor	TokenNameIdentifier
.	TokenNameDOT
newInstance	TokenNameIdentifier
(	TokenNameLPAREN
min	TokenNameIdentifier
,	TokenNameCOMMA
max	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
IntervalTree	TokenNameIdentifier
(	TokenNameLPAREN
intervals	TokenNameIdentifier
,	TokenNameCOMMA
comparator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InstantiationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InvocationTargetException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IllegalAccessException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
long	TokenNamelong
serializedSize	TokenNameIdentifier
(	TokenNameLPAREN
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>	TokenNameGREATER
it	TokenNameIdentifier
,	TokenNameCOMMA
TypeSizes	TokenNameIdentifier
typeSizes	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
version	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
size	TokenNameIdentifier
=	TokenNameEQUAL
typeSizes	TokenNameIdentifier
.	TokenNameDOT
sizeof	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Interval	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
>	TokenNameGREATER
interval	TokenNameIdentifier
:	TokenNameCOLON
it	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
size	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pointSerializer	TokenNameIdentifier
.	TokenNameDOT
serializedSize	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
,	TokenNameCOMMA
typeSizes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
size	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pointSerializer	TokenNameIdentifier
.	TokenNameDOT
serializedSize	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
,	TokenNameCOMMA
typeSizes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
size	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dataSerializer	TokenNameIdentifier
.	TokenNameDOT
serializedSize	TokenNameIdentifier
(	TokenNameLPAREN
interval	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
,	TokenNameCOMMA
typeSizes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
size	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
long	TokenNamelong
serializedSize	TokenNameIdentifier
(	TokenNameLPAREN
IntervalTree	TokenNameIdentifier
<	TokenNameLESS
C	TokenNameIdentifier
,	TokenNameCOMMA
D	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
>	TokenNameGREATER
it	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
version	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
serializedSize	TokenNameIdentifier
(	TokenNameLPAREN
it	TokenNameIdentifier
,	TokenNameCOMMA
TypeSizes	TokenNameIdentifier
.	TokenNameDOT
NATIVE	TokenNameIdentifier
,	TokenNameCOMMA
version	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
