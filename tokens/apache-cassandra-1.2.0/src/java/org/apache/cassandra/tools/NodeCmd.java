package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
InputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
PrintStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
management	TokenNameIdentifier
.	TokenNameDOT
MemoryUsage	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
net	TokenNameIdentifier
.	TokenNameDOT
ConnectException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
net	TokenNameIdentifier
.	TokenNameDOT
InetAddress	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
net	TokenNameIdentifier
.	TokenNameDOT
UnknownHostException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
text	TokenNameIdentifier
.	TokenNameDOT
DecimalFormat	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
concurrent	TokenNameIdentifier
.	TokenNameDOT
ExecutionException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
com	TokenNameIdentifier
.	TokenNameDOT
google	TokenNameIdentifier
.	TokenNameDOT
common	TokenNameIdentifier
.	TokenNameDOT
collect	TokenNameIdentifier
.	TokenNameDOT
LinkedHashMultimap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
com	TokenNameIdentifier
.	TokenNameDOT
google	TokenNameIdentifier
.	TokenNameDOT
common	TokenNameIdentifier
.	TokenNameDOT
collect	TokenNameIdentifier
.	TokenNameDOT
Maps	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
commons	TokenNameIdentifier
.	TokenNameDOT
cli	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
service	TokenNameIdentifier
.	TokenNameDOT
CacheServiceMBean	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
service	TokenNameIdentifier
.	TokenNameDOT
PBSPredictionResult	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
service	TokenNameIdentifier
.	TokenNameDOT
PBSPredictorMBean	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
service	TokenNameIdentifier
.	TokenNameDOT
StorageProxyMBean	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
concurrent	TokenNameIdentifier
.	TokenNameDOT
JMXEnabledThreadPoolExecutorMBean	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
db	TokenNameIdentifier
.	TokenNameDOT
ColumnFamilyStoreMBean	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
db	TokenNameIdentifier
.	TokenNameDOT
Table	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
db	TokenNameIdentifier
.	TokenNameDOT
compaction	TokenNameIdentifier
.	TokenNameDOT
CompactionManagerMBean	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
db	TokenNameIdentifier
.	TokenNameDOT
compaction	TokenNameIdentifier
.	TokenNameDOT
OperationType	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
exceptions	TokenNameIdentifier
.	TokenNameDOT
ConfigurationException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
exceptions	TokenNameIdentifier
.	TokenNameDOT
InvalidRequestException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
FileUtils	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
locator	TokenNameIdentifier
.	TokenNameDOT
EndpointSnitchInfoMBean	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
net	TokenNameIdentifier
.	TokenNameDOT
MessagingServiceMBean	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
EstimatedHistogram	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
Pair	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
yaml	TokenNameIdentifier
.	TokenNameDOT
snakeyaml	TokenNameIdentifier
.	TokenNameDOT
Loader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
yaml	TokenNameIdentifier
.	TokenNameDOT
snakeyaml	TokenNameIdentifier
.	TokenNameDOT
TypeDescription	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
yaml	TokenNameIdentifier
.	TokenNameDOT
snakeyaml	TokenNameIdentifier
.	TokenNameDOT
Yaml	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
yaml	TokenNameIdentifier
.	TokenNameDOT
snakeyaml	TokenNameIdentifier
.	TokenNameDOT
constructor	TokenNameIdentifier
.	TokenNameDOT
Constructor	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
NodeCmd	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
SNAPSHOT_COLUMNFAMILY_OPT	TokenNameIdentifier
=	TokenNameEQUAL
Pair	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
"cf"	TokenNameStringLiteral
,	TokenNameCOMMA
"column-family"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
HOST_OPT	TokenNameIdentifier
=	TokenNameEQUAL
Pair	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
"h"	TokenNameStringLiteral
,	TokenNameCOMMA
"host"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
PORT_OPT	TokenNameIdentifier
=	TokenNameEQUAL
Pair	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
"p"	TokenNameStringLiteral
,	TokenNameCOMMA
"port"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
USERNAME_OPT	TokenNameIdentifier
=	TokenNameEQUAL
Pair	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
"u"	TokenNameStringLiteral
,	TokenNameCOMMA
"username"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
PASSWORD_OPT	TokenNameIdentifier
=	TokenNameEQUAL
Pair	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
"pw"	TokenNameStringLiteral
,	TokenNameCOMMA
"password"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
TAG_OPT	TokenNameIdentifier
=	TokenNameEQUAL
Pair	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
"t"	TokenNameStringLiteral
,	TokenNameCOMMA
"tag"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
TOKENS_OPT	TokenNameIdentifier
=	TokenNameEQUAL
Pair	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
"T"	TokenNameStringLiteral
,	TokenNameCOMMA
"tokens"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
PRIMARY_RANGE_OPT	TokenNameIdentifier
=	TokenNameEQUAL
Pair	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
"pr"	TokenNameStringLiteral
,	TokenNameCOMMA
"partitioner-range"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
SNAPSHOT_REPAIR_OPT	TokenNameIdentifier
=	TokenNameEQUAL
Pair	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
"snapshot"	TokenNameStringLiteral
,	TokenNameCOMMA
"with-snapshot"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
LOCAL_DC_REPAIR_OPT	TokenNameIdentifier
=	TokenNameEQUAL
Pair	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
"local"	TokenNameStringLiteral
,	TokenNameCOMMA
"in-local-dc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DEFAULT_HOST	TokenNameIdentifier
=	TokenNameEQUAL
"127.0.0.1"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DEFAULT_PORT	TokenNameIdentifier
=	TokenNameEQUAL
7199	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
ToolOptions	TokenNameIdentifier
options	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ToolOptions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
NodeProbe	TokenNameIdentifier
probe	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
options	TokenNameIdentifier
.	TokenNameDOT
addOption	TokenNameIdentifier
(	TokenNameLPAREN
SNAPSHOT_COLUMNFAMILY_OPT	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"only take a snapshot of the specified column family"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
options	TokenNameIdentifier
.	TokenNameDOT
addOption	TokenNameIdentifier
(	TokenNameLPAREN
HOST_OPT	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"node hostname or ip address"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
options	TokenNameIdentifier
.	TokenNameDOT
addOption	TokenNameIdentifier
(	TokenNameLPAREN
PORT_OPT	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"remote jmx agent port number"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
options	TokenNameIdentifier
.	TokenNameDOT
addOption	TokenNameIdentifier
(	TokenNameLPAREN
USERNAME_OPT	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"remote jmx agent username"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
options	TokenNameIdentifier
.	TokenNameDOT
addOption	TokenNameIdentifier
(	TokenNameLPAREN
PASSWORD_OPT	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"remote jmx agent password"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
options	TokenNameIdentifier
.	TokenNameDOT
addOption	TokenNameIdentifier
(	TokenNameLPAREN
TAG_OPT	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"optional name to give a snapshot"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
options	TokenNameIdentifier
.	TokenNameDOT
addOption	TokenNameIdentifier
(	TokenNameLPAREN
TOKENS_OPT	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"display all tokens"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
options	TokenNameIdentifier
.	TokenNameDOT
addOption	TokenNameIdentifier
(	TokenNameLPAREN
PRIMARY_RANGE_OPT	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"only repair the first range returned by the partitioner for the node"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
options	TokenNameIdentifier
.	TokenNameDOT
addOption	TokenNameIdentifier
(	TokenNameLPAREN
SNAPSHOT_REPAIR_OPT	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"repair one node at a time using snapshots"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
options	TokenNameIdentifier
.	TokenNameDOT
addOption	TokenNameIdentifier
(	TokenNameLPAREN
LOCAL_DC_REPAIR_OPT	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"only repair against nodes in the same datacenter"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
NodeCmd	TokenNameIdentifier
(	TokenNameLPAREN
NodeProbe	TokenNameIdentifier
probe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
probe	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
enum	TokenNameenum
NodeCommand	TokenNameIdentifier
{	TokenNameLBRACE
CFHISTOGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
CFSTATS	TokenNameIdentifier
,	TokenNameCOMMA
CLEANUP	TokenNameIdentifier
,	TokenNameCOMMA
CLEARSNAPSHOT	TokenNameIdentifier
,	TokenNameCOMMA
COMPACT	TokenNameIdentifier
,	TokenNameCOMMA
COMPACTIONSTATS	TokenNameIdentifier
,	TokenNameCOMMA
DECOMMISSION	TokenNameIdentifier
,	TokenNameCOMMA
DISABLEGOSSIP	TokenNameIdentifier
,	TokenNameCOMMA
DISABLETHRIFT	TokenNameIdentifier
,	TokenNameCOMMA
DRAIN	TokenNameIdentifier
,	TokenNameCOMMA
ENABLEGOSSIP	TokenNameIdentifier
,	TokenNameCOMMA
ENABLETHRIFT	TokenNameIdentifier
,	TokenNameCOMMA
FLUSH	TokenNameIdentifier
,	TokenNameCOMMA
GETCOMPACTIONTHRESHOLD	TokenNameIdentifier
,	TokenNameCOMMA
GETENDPOINTS	TokenNameIdentifier
,	TokenNameCOMMA
GETSSTABLES	TokenNameIdentifier
,	TokenNameCOMMA
GOSSIPINFO	TokenNameIdentifier
,	TokenNameCOMMA
HELP	TokenNameIdentifier
,	TokenNameCOMMA
INFO	TokenNameIdentifier
,	TokenNameCOMMA
INVALIDATEKEYCACHE	TokenNameIdentifier
,	TokenNameCOMMA
INVALIDATEROWCACHE	TokenNameIdentifier
,	TokenNameCOMMA
JOIN	TokenNameIdentifier
,	TokenNameCOMMA
MOVE	TokenNameIdentifier
,	TokenNameCOMMA
NETSTATS	TokenNameIdentifier
,	TokenNameCOMMA
PROXYHISTOGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
REBUILD	TokenNameIdentifier
,	TokenNameCOMMA
REFRESH	TokenNameIdentifier
,	TokenNameCOMMA
REMOVETOKEN	TokenNameIdentifier
,	TokenNameCOMMA
REMOVENODE	TokenNameIdentifier
,	TokenNameCOMMA
REPAIR	TokenNameIdentifier
,	TokenNameCOMMA
RING	TokenNameIdentifier
,	TokenNameCOMMA
SCRUB	TokenNameIdentifier
,	TokenNameCOMMA
SETCACHECAPACITY	TokenNameIdentifier
,	TokenNameCOMMA
SETCOMPACTIONTHRESHOLD	TokenNameIdentifier
,	TokenNameCOMMA
SETCOMPACTIONTHROUGHPUT	TokenNameIdentifier
,	TokenNameCOMMA
SETSTREAMTHROUGHPUT	TokenNameIdentifier
,	TokenNameCOMMA
SETTRACEPROBABILITY	TokenNameIdentifier
,	TokenNameCOMMA
SNAPSHOT	TokenNameIdentifier
,	TokenNameCOMMA
STATUS	TokenNameIdentifier
,	TokenNameCOMMA
STATUSTHRIFT	TokenNameIdentifier
,	TokenNameCOMMA
STOP	TokenNameIdentifier
,	TokenNameCOMMA
TPSTATS	TokenNameIdentifier
,	TokenNameCOMMA
UPGRADESSTABLES	TokenNameIdentifier
,	TokenNameCOMMA
VERSION	TokenNameIdentifier
,	TokenNameCOMMA
DESCRIBERING	TokenNameIdentifier
,	TokenNameCOMMA
RANGEKEYSAMPLE	TokenNameIdentifier
,	TokenNameCOMMA
REBUILD_INDEX	TokenNameIdentifier
,	TokenNameCOMMA
RESETLOCALSCHEMA	TokenNameIdentifier
,	TokenNameCOMMA
PREDICTCONSISTENCY	TokenNameIdentifier
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
printUsage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
HelpFormatter	TokenNameIdentifier
hf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HelpFormatter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
StringBuilder	TokenNameIdentifier
header	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuilder	TokenNameIdentifier
(	TokenNameLPAREN
512	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
header	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
" Available commands "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
NodeToolHelp	TokenNameIdentifier
ntHelp	TokenNameIdentifier
=	TokenNameEQUAL
loadHelp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
NodeToolHelp	TokenNameIdentifier
.	TokenNameDOT
NodeToolCommand	TokenNameIdentifier
cmd	TokenNameIdentifier
:	TokenNameCOLON
ntHelp	TokenNameIdentifier
.	TokenNameDOT
commands	TokenNameIdentifier
)	TokenNameRPAREN
addCmdHelp	TokenNameIdentifier
(	TokenNameLPAREN
header	TokenNameIdentifier
,	TokenNameCOMMA
cmd	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
usage	TokenNameIdentifier
=	TokenNameEQUAL
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"java %s --host <arg> <command>%n"	TokenNameStringLiteral
,	TokenNameCOMMA
NodeCmd	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hf	TokenNameIdentifier
.	TokenNameDOT
printHelp	TokenNameIdentifier
(	TokenNameLPAREN
usage	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
options	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
header	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
NodeToolHelp	TokenNameIdentifier
loadHelp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
InputStream	TokenNameIdentifier
is	TokenNameIdentifier
=	TokenNameEQUAL
NodeCmd	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
.	TokenNameDOT
getClassLoader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getResourceAsStream	TokenNameIdentifier
(	TokenNameLPAREN
"org/apache/cassandra/tools/NodeToolHelp.yaml"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
is	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
final	TokenNamefinal
Constructor	TokenNameIdentifier
constructor	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Constructor	TokenNameIdentifier
(	TokenNameLPAREN
NodeToolHelp	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TypeDescription	TokenNameIdentifier
desc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TypeDescription	TokenNameIdentifier
(	TokenNameLPAREN
NodeToolHelp	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
desc	TokenNameIdentifier
.	TokenNameDOT
putListPropertyType	TokenNameIdentifier
(	TokenNameLPAREN
"commands"	TokenNameStringLiteral
,	TokenNameCOMMA
NodeToolHelp	TokenNameIdentifier
.	TokenNameDOT
NodeToolCommand	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
Yaml	TokenNameIdentifier
yaml	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Yaml	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Loader	TokenNameIdentifier
(	TokenNameLPAREN
constructor	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
NodeToolHelp	TokenNameIdentifier
)	TokenNameRPAREN
yaml	TokenNameIdentifier
.	TokenNameDOT
load	TokenNameIdentifier
(	TokenNameLPAREN
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
FileUtils	TokenNameIdentifier
.	TokenNameDOT
closeQuietly	TokenNameIdentifier
(	TokenNameLPAREN
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
addCmdHelp	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
sb	TokenNameIdentifier
,	TokenNameCOMMA
NodeToolHelp	TokenNameIdentifier
.	TokenNameDOT
NodeToolCommand	TokenNameIdentifier
cmd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sb	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"  "	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
cmd	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cmd	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
cmd	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
22	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
sb	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
" "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sb	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
" - "	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
cmd	TokenNameIdentifier
.	TokenNameDOT
help	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
printRing	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
keyspace	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
tokensToEndpoints	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getTokenToEndpointMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LinkedHashMultimap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
endpointsToTokens	TokenNameIdentifier
=	TokenNameEQUAL
LinkedHashMultimap	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
entry	TokenNameIdentifier
:	TokenNameCOLON
tokensToEndpoints	TokenNameIdentifier
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
endpointsToTokens	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
entry	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
format	TokenNameIdentifier
=	TokenNameEQUAL
"%-16s%-12s%-7s%-8s%-16s%-20s%-44s%n"	TokenNameStringLiteral
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>	TokenNameGREATER
ownerships	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
keyspaceSelected	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
ownerships	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
effectiveOwnership	TokenNameIdentifier
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
keyspaceSelected	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IllegalStateException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ownerships	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getOwnership	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"Note: Ownership information does not include topology; for complete information, specify a keyspace%n"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
keyspaceSelected	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Map	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
perDcOwnerships	TokenNameIdentifier
=	TokenNameEQUAL
Maps	TokenNameIdentifier
.	TokenNameDOT
newLinkedHashMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>	TokenNameGREATER
ownership	TokenNameIdentifier
:	TokenNameCOLON
ownerships	TokenNameIdentifier
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
dc	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getEndpointSnitchInfoProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDatacenter	TokenNameIdentifier
(	TokenNameLPAREN
ownership	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getHostAddress	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
perDcOwnerships	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
dc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
perDcOwnerships	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
dc	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
LinkedHashMap	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
perDcOwnerships	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
dc	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
ownership	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
ownership	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Map	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
entry	TokenNameIdentifier
:	TokenNameCOLON
perDcOwnerships	TokenNameIdentifier
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
printDc	TokenNameIdentifier
(	TokenNameLPAREN
outs	TokenNameIdentifier
,	TokenNameCOMMA
format	TokenNameIdentifier
,	TokenNameCOMMA
entry	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
endpointsToTokens	TokenNameIdentifier
,	TokenNameCOMMA
keyspaceSelected	TokenNameIdentifier
,	TokenNameCOMMA
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
UnknownHostException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printDc	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
format	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
dc	TokenNameIdentifier
,	TokenNameCOMMA
LinkedHashMultimap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
endpointsToTokens	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
keyspaceSelected	TokenNameIdentifier
,	TokenNameCOMMA
Map	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>	TokenNameGREATER
filteredOwnerships	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Collection	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
liveNodes	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getLiveNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Collection	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
deadNodes	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getUnreachableNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Collection	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
joiningNodes	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getJoiningNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Collection	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
leavingNodes	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getLeavingNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Collection	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
movingNodes	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getMovingNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
loadMap	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getLoadMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Datacenter: "	TokenNameStringLiteral
+	TokenNamePLUS
dc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"=========="	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
tokens	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
totalReplicas	TokenNameIdentifier
=	TokenNameEQUAL
0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
lastToken	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>	TokenNameGREATER
entry	TokenNameIdentifier
:	TokenNameCOLON
filteredOwnerships	TokenNameIdentifier
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
tokens	TokenNameIdentifier
.	TokenNameDOT
addAll	TokenNameIdentifier
(	TokenNameLPAREN
endpointsToTokens	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
entry	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getHostAddress	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lastToken	TokenNameIdentifier
=	TokenNameEQUAL
tokens	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
totalReplicas	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
keyspaceSelected	TokenNameIdentifier
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Replicas: "	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
totalReplicas	TokenNameIdentifier
+	TokenNamePLUS
"  "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
format	TokenNameIdentifier
,	TokenNameCOMMA
"Address"	TokenNameStringLiteral
,	TokenNameCOMMA
"Rack"	TokenNameStringLiteral
,	TokenNameCOMMA
"Status"	TokenNameStringLiteral
,	TokenNameCOMMA
"State"	TokenNameStringLiteral
,	TokenNameCOMMA
"Load"	TokenNameStringLiteral
,	TokenNameCOMMA
"Owns"	TokenNameStringLiteral
,	TokenNameCOMMA
"Token"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
filteredOwnerships	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
format	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
lastToken	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>	TokenNameGREATER
entry	TokenNameIdentifier
:	TokenNameCOLON
filteredOwnerships	TokenNameIdentifier
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
endpoint	TokenNameIdentifier
=	TokenNameEQUAL
entry	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getHostAddress	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
token	TokenNameIdentifier
:	TokenNameCOLON
endpointsToTokens	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
rack	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
rack	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getEndpointSnitchInfoProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getRack	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
UnknownHostException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
rack	TokenNameIdentifier
=	TokenNameEQUAL
"Unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
status	TokenNameIdentifier
=	TokenNameEQUAL
liveNodes	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
"Up"	TokenNameStringLiteral
:	TokenNameCOLON
deadNodes	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
"Down"	TokenNameStringLiteral
:	TokenNameCOLON
"?"	TokenNameStringLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
state	TokenNameIdentifier
=	TokenNameEQUAL
"Normal"	TokenNameStringLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
joiningNodes	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
state	TokenNameIdentifier
=	TokenNameEQUAL
"Joining"	TokenNameStringLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
leavingNodes	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
state	TokenNameIdentifier
=	TokenNameEQUAL
"Leaving"	TokenNameStringLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
movingNodes	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
state	TokenNameIdentifier
=	TokenNameEQUAL
"Moving"	TokenNameStringLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
load	TokenNameIdentifier
=	TokenNameEQUAL
loadMap	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
loadMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
"?"	TokenNameStringLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
owns	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DecimalFormat	TokenNameIdentifier
(	TokenNameLPAREN
"##0.00%"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
format	TokenNameIdentifier
,	TokenNameCOMMA
endpoint	TokenNameIdentifier
,	TokenNameCOMMA
rack	TokenNameIdentifier
,	TokenNameCOMMA
status	TokenNameIdentifier
,	TokenNameCOMMA
state	TokenNameIdentifier
,	TokenNameCOMMA
load	TokenNameIdentifier
,	TokenNameCOMMA
owns	TokenNameIdentifier
,	TokenNameCOMMA
token	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
class	TokenNameclass
ClusterStatus	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
kSpace	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
,	TokenNameCOMMA
format	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Collection	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
joiningNodes	TokenNameIdentifier
,	TokenNameCOMMA
leavingNodes	TokenNameIdentifier
,	TokenNameCOMMA
movingNodes	TokenNameIdentifier
,	TokenNameCOMMA
liveNodes	TokenNameIdentifier
,	TokenNameCOMMA
unreachableNodes	TokenNameIdentifier
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
loadMap	TokenNameIdentifier
,	TokenNameCOMMA
hostIDMap	TokenNameIdentifier
,	TokenNameCOMMA
tokensToEndpoints	TokenNameIdentifier
;	TokenNameSEMICOLON
EndpointSnitchInfoMBean	TokenNameIdentifier
epSnitchInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
;	TokenNameSEMICOLON
ClusterStatus	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
kSpace	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
kSpace	TokenNameIdentifier
=	TokenNameEQUAL
kSpace	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
outs	TokenNameIdentifier
=	TokenNameEQUAL
outs	TokenNameIdentifier
;	TokenNameSEMICOLON
joiningNodes	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getJoiningNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
leavingNodes	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getLeavingNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
movingNodes	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getMovingNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loadMap	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getLoadMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tokensToEndpoints	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getTokenToEndpointMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
liveNodes	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getLiveNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
unreachableNodes	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getUnreachableNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hostIDMap	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getHostIdMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
epSnitchInfo	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getEndpointSnitchInfoProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printStatusLegend	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Status=Up/Down"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"|/ State=Normal/Leaving/Joining/Moving"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Map	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
getOwnershipByDc	TokenNameIdentifier
(	TokenNameLPAREN
Map	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>	TokenNameGREATER
ownerships	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
UnknownHostException	TokenNameIdentifier
{	TokenNameLBRACE
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Map	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
ownershipByDc	TokenNameIdentifier
=	TokenNameEQUAL
Maps	TokenNameIdentifier
.	TokenNameDOT
newLinkedHashMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
EndpointSnitchInfoMBean	TokenNameIdentifier
epSnitchInfo	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getEndpointSnitchInfoProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>	TokenNameGREATER
ownership	TokenNameIdentifier
:	TokenNameCOLON
ownerships	TokenNameIdentifier
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
dc	TokenNameIdentifier
=	TokenNameEQUAL
epSnitchInfo	TokenNameIdentifier
.	TokenNameDOT
getDatacenter	TokenNameIdentifier
(	TokenNameLPAREN
ownership	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getHostAddress	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ownershipByDc	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
dc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
ownershipByDc	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
dc	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
LinkedHashMap	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ownershipByDc	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
dc	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
ownership	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
ownership	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ownershipByDc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getFormat	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
hasEffectiveOwns	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
isTokenPerNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
format	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
buf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"%s%s  %-16s  %-9s  "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isTokenPerNode	TokenNameIdentifier
)	TokenNameRPAREN
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"%-6s  "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
hasEffectiveOwns	TokenNameIdentifier
)	TokenNameRPAREN
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"%-16s  "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"%-5s  "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"%-36s  "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isTokenPerNode	TokenNameIdentifier
)	TokenNameRPAREN
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"%-39s  "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"%s%n"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
format	TokenNameIdentifier
=	TokenNameEQUAL
buf	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
format	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printNode	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
endpoint	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
owns	TokenNameIdentifier
,	TokenNameCOMMA
Map	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>	TokenNameGREATER
ownerships	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
hasEffectiveOwns	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
isTokenPerNode	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
UnknownHostException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
status	TokenNameIdentifier
,	TokenNameCOMMA
state	TokenNameIdentifier
,	TokenNameCOMMA
load	TokenNameIdentifier
,	TokenNameCOMMA
strOwns	TokenNameIdentifier
,	TokenNameCOMMA
hostID	TokenNameIdentifier
,	TokenNameCOMMA
rack	TokenNameIdentifier
,	TokenNameCOMMA
fmt	TokenNameIdentifier
;	TokenNameSEMICOLON
fmt	TokenNameIdentifier
=	TokenNameEQUAL
getFormat	TokenNameIdentifier
(	TokenNameLPAREN
hasEffectiveOwns	TokenNameIdentifier
,	TokenNameCOMMA
isTokenPerNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
liveNodes	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
status	TokenNameIdentifier
=	TokenNameEQUAL
"U"	TokenNameStringLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
unreachableNodes	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
status	TokenNameIdentifier
=	TokenNameEQUAL
"D"	TokenNameStringLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
status	TokenNameIdentifier
=	TokenNameEQUAL
"?"	TokenNameStringLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
joiningNodes	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
state	TokenNameIdentifier
=	TokenNameEQUAL
"J"	TokenNameStringLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
leavingNodes	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
state	TokenNameIdentifier
=	TokenNameEQUAL
"L"	TokenNameStringLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
movingNodes	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
state	TokenNameIdentifier
=	TokenNameEQUAL
"M"	TokenNameStringLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
state	TokenNameIdentifier
=	TokenNameEQUAL
"N"	TokenNameStringLiteral
;	TokenNameSEMICOLON
load	TokenNameIdentifier
=	TokenNameEQUAL
loadMap	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
loadMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
"?"	TokenNameStringLiteral
;	TokenNameSEMICOLON
strOwns	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DecimalFormat	TokenNameIdentifier
(	TokenNameLPAREN
"##0.0%"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
ownerships	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
InetAddress	TokenNameIdentifier
.	TokenNameDOT
getByName	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hostID	TokenNameIdentifier
=	TokenNameEQUAL
hostIDMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
rack	TokenNameIdentifier
=	TokenNameEQUAL
epSnitchInfo	TokenNameIdentifier
.	TokenNameDOT
getRack	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isTokenPerNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
fmt	TokenNameIdentifier
,	TokenNameCOMMA
status	TokenNameIdentifier
,	TokenNameCOMMA
state	TokenNameIdentifier
,	TokenNameCOMMA
endpoint	TokenNameIdentifier
,	TokenNameCOMMA
load	TokenNameIdentifier
,	TokenNameCOMMA
strOwns	TokenNameIdentifier
,	TokenNameCOMMA
hostID	TokenNameIdentifier
,	TokenNameCOMMA
probe	TokenNameIdentifier
.	TokenNameDOT
getTokens	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
rack	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
tokens	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getTokens	TokenNameIdentifier
(	TokenNameLPAREN
endpoint	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
fmt	TokenNameIdentifier
,	TokenNameCOMMA
status	TokenNameIdentifier
,	TokenNameCOMMA
state	TokenNameIdentifier
,	TokenNameCOMMA
endpoint	TokenNameIdentifier
,	TokenNameCOMMA
load	TokenNameIdentifier
,	TokenNameCOMMA
tokens	TokenNameIdentifier
,	TokenNameCOMMA
strOwns	TokenNameIdentifier
,	TokenNameCOMMA
hostID	TokenNameIdentifier
,	TokenNameCOMMA
rack	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printNodesHeader	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
hasEffectiveOwns	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
isTokenPerNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
fmt	TokenNameIdentifier
=	TokenNameEQUAL
getFormat	TokenNameIdentifier
(	TokenNameLPAREN
hasEffectiveOwns	TokenNameIdentifier
,	TokenNameCOMMA
isTokenPerNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
owns	TokenNameIdentifier
=	TokenNameEQUAL
hasEffectiveOwns	TokenNameIdentifier
?	TokenNameQUESTION
"Owns (effective)"	TokenNameStringLiteral
:	TokenNameCOLON
"Owns"	TokenNameStringLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isTokenPerNode	TokenNameIdentifier
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
fmt	TokenNameIdentifier
,	TokenNameCOMMA
"-"	TokenNameStringLiteral
,	TokenNameCOMMA
"-"	TokenNameStringLiteral
,	TokenNameCOMMA
"Address"	TokenNameStringLiteral
,	TokenNameCOMMA
"Load"	TokenNameStringLiteral
,	TokenNameCOMMA
owns	TokenNameIdentifier
,	TokenNameCOMMA
"Host ID"	TokenNameStringLiteral
,	TokenNameCOMMA
"Token"	TokenNameStringLiteral
,	TokenNameCOMMA
"Rack"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
fmt	TokenNameIdentifier
,	TokenNameCOMMA
"-"	TokenNameStringLiteral
,	TokenNameCOMMA
"-"	TokenNameStringLiteral
,	TokenNameCOMMA
"Address"	TokenNameStringLiteral
,	TokenNameCOMMA
"Load"	TokenNameStringLiteral
,	TokenNameCOMMA
"Tokens"	TokenNameStringLiteral
,	TokenNameCOMMA
owns	TokenNameIdentifier
,	TokenNameCOMMA
"Host ID"	TokenNameStringLiteral
,	TokenNameCOMMA
"Rack"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
print	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
UnknownHostException	TokenNameIdentifier
{	TokenNameLBRACE
Map	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>	TokenNameGREATER
ownerships	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
hasEffectiveOwns	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
,	TokenNameCOMMA
isTokenPerNode	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
ownerships	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
effectiveOwnership	TokenNameIdentifier
(	TokenNameLPAREN
kSpace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hasEffectiveOwns	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IllegalStateException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ownerships	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getOwnership	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
new	TokenNamenew
HashSet	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
tokensToEndpoints	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
tokensToEndpoints	TokenNameIdentifier
.	TokenNameDOT
keySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
isTokenPerNode	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Map	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
dc	TokenNameIdentifier
:	TokenNameCOLON
getOwnershipByDc	TokenNameIdentifier
(	TokenNameLPAREN
ownerships	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
dcHeader	TokenNameIdentifier
=	TokenNameEQUAL
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"Datacenter: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
dc	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
dcHeader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
(	TokenNameLPAREN
dcHeader	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'='	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
printStatusLegend	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
printNodesHeader	TokenNameIdentifier
(	TokenNameLPAREN
hasEffectiveOwns	TokenNameIdentifier
,	TokenNameCOMMA
isTokenPerNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
>	TokenNameGREATER
entry	TokenNameIdentifier
:	TokenNameCOLON
dc	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
printNode	TokenNameIdentifier
(	TokenNameLPAREN
entry	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getHostAddress	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
ownerships	TokenNameIdentifier
,	TokenNameCOMMA
hasEffectiveOwns	TokenNameIdentifier
,	TokenNameCOMMA
isTokenPerNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
printClusterStatus	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
keyspace	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
UnknownHostException	TokenNameIdentifier
{	TokenNameLBRACE
new	TokenNamenew
ClusterStatus	TokenNameIdentifier
(	TokenNameLPAREN
outs	TokenNameIdentifier
,	TokenNameCOMMA
keyspace	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
printThreadPoolStats	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-25s%10s%10s%15s%10s%18s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pool Name"	TokenNameStringLiteral
,	TokenNameCOMMA
"Active"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pending"	TokenNameStringLiteral
,	TokenNameCOMMA
"Completed"	TokenNameStringLiteral
,	TokenNameCOMMA
"Blocked"	TokenNameStringLiteral
,	TokenNameCOMMA
"All time blocked"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Iterator	TokenNameIdentifier
<	TokenNameLESS
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
JMXEnabledThreadPoolExecutorMBean	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
threads	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getThreadPoolMBeanProxies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
threads	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Entry	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
JMXEnabledThreadPoolExecutorMBean	TokenNameIdentifier
>	TokenNameGREATER
thread	TokenNameIdentifier
=	TokenNameEQUAL
threads	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
poolName	TokenNameIdentifier
=	TokenNameEQUAL
thread	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
JMXEnabledThreadPoolExecutorMBean	TokenNameIdentifier
threadPoolProxy	TokenNameIdentifier
=	TokenNameEQUAL
thread	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-25s%10s%10s%15s%10s%18s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
poolName	TokenNameIdentifier
,	TokenNameCOMMA
threadPoolProxy	TokenNameIdentifier
.	TokenNameDOT
getActiveCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
threadPoolProxy	TokenNameIdentifier
.	TokenNameDOT
getPendingTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
threadPoolProxy	TokenNameIdentifier
.	TokenNameDOT
getCompletedTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
threadPoolProxy	TokenNameIdentifier
.	TokenNameDOT
getCurrentlyBlockedTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
threadPoolProxy	TokenNameIdentifier
.	TokenNameDOT
getTotalBlockedTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%n%-20s%10s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Message type"	TokenNameStringLiteral
,	TokenNameCOMMA
"Dropped"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Entry	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
>	TokenNameGREATER
entry	TokenNameIdentifier
:	TokenNameCOLON
probe	TokenNameIdentifier
.	TokenNameDOT
getDroppedMessages	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-20s%10s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
entry	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
printInfo	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
,	TokenNameCOMMA
ToolCommandLine	TokenNameIdentifier
cmd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
gossipInitialized	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
isInitialized	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
toks	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getTokens	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
toks	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Token"	TokenNameStringLiteral
,	TokenNameCOMMA
toks	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
cmd	TokenNameIdentifier
.	TokenNameDOT
hasOption	TokenNameIdentifier
(	TokenNameLPAREN
TOKENS_OPT	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: (invoke with -T/--tokens to see all %d tokens)%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Token"	TokenNameStringLiteral
,	TokenNameCOMMA
toks	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"ID"	TokenNameStringLiteral
,	TokenNameCOMMA
probe	TokenNameIdentifier
.	TokenNameDOT
getLocalHostId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Gossip active"	TokenNameStringLiteral
,	TokenNameCOMMA
gossipInitialized	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Thrift active"	TokenNameStringLiteral
,	TokenNameCOMMA
probe	TokenNameIdentifier
.	TokenNameDOT
isThriftServerRunning	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Load"	TokenNameStringLiteral
,	TokenNameCOMMA
probe	TokenNameIdentifier
.	TokenNameDOT
getLoadString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
gossipInitialized	TokenNameIdentifier
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Generation No"	TokenNameStringLiteral
,	TokenNameCOMMA
probe	TokenNameIdentifier
.	TokenNameDOT
getCurrentGenerationNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Generation No"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
secondsUp	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getUptime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
1000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %d%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Uptime (seconds)"	TokenNameStringLiteral
,	TokenNameCOMMA
secondsUp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
MemoryUsage	TokenNameIdentifier
heapUsage	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getHeapMemoryUsage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
memUsed	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
double	TokenNamedouble
)	TokenNameRPAREN
heapUsage	TokenNameIdentifier
.	TokenNameDOT
getUsed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
1024	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1024	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
memMax	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
double	TokenNamedouble
)	TokenNameRPAREN
heapUsage	TokenNameIdentifier
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
1024	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1024	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %.2f / %.2f%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Heap Memory (MB)"	TokenNameStringLiteral
,	TokenNameCOMMA
memUsed	TokenNameIdentifier
,	TokenNameCOMMA
memMax	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Data Center"	TokenNameStringLiteral
,	TokenNameCOMMA
probe	TokenNameIdentifier
.	TokenNameDOT
getDataCenter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Rack"	TokenNameStringLiteral
,	TokenNameCOMMA
probe	TokenNameIdentifier
.	TokenNameDOT
getRack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Exceptions"	TokenNameStringLiteral
,	TokenNameCOMMA
probe	TokenNameIdentifier
.	TokenNameDOT
getExceptionCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
CacheServiceMBean	TokenNameIdentifier
cacheService	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getCacheServiceMBean	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: size %d (bytes), capacity %d (bytes), %d hits, %d requests, %.3f recent hit rate, %d save period in seconds%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Key Cache"	TokenNameStringLiteral
,	TokenNameCOMMA
cacheService	TokenNameIdentifier
.	TokenNameDOT
getKeyCacheSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cacheService	TokenNameIdentifier
.	TokenNameDOT
getKeyCacheCapacityInBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cacheService	TokenNameIdentifier
.	TokenNameDOT
getKeyCacheHits	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cacheService	TokenNameIdentifier
.	TokenNameDOT
getKeyCacheRequests	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cacheService	TokenNameIdentifier
.	TokenNameDOT
getKeyCacheRecentHitRate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cacheService	TokenNameIdentifier
.	TokenNameDOT
getKeyCacheSavePeriodInSeconds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: size %d (bytes), capacity %d (bytes), %d hits, %d requests, %.3f recent hit rate, %d save period in seconds%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Row Cache"	TokenNameStringLiteral
,	TokenNameCOMMA
cacheService	TokenNameIdentifier
.	TokenNameDOT
getRowCacheSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cacheService	TokenNameIdentifier
.	TokenNameDOT
getRowCacheCapacityInBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cacheService	TokenNameIdentifier
.	TokenNameDOT
getRowCacheHits	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cacheService	TokenNameIdentifier
.	TokenNameDOT
getRowCacheRequests	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cacheService	TokenNameIdentifier
.	TokenNameDOT
getRowCacheRecentHitRate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cacheService	TokenNameIdentifier
.	TokenNameDOT
getRowCacheSavePeriodInSeconds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
toks	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
cmd	TokenNameIdentifier
.	TokenNameDOT
hasOption	TokenNameIdentifier
(	TokenNameLPAREN
TOKENS_OPT	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
tok	TokenNameIdentifier
:	TokenNameCOLON
toks	TokenNameIdentifier
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-17s: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Token"	TokenNameStringLiteral
,	TokenNameCOMMA
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
printReleaseVersion	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"ReleaseVersion: "	TokenNameStringLiteral
+	TokenNamePLUS
probe	TokenNameIdentifier
.	TokenNameDOT
getReleaseVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
printNetworkStats	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
InetAddress	TokenNameIdentifier
addr	TokenNameIdentifier
,	TokenNameCOMMA
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"Mode: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
probe	TokenNameIdentifier
.	TokenNameDOT
getOperationMode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Set	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
>	TokenNameGREATER
hosts	TokenNameIdentifier
=	TokenNameEQUAL
addr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
probe	TokenNameIdentifier
.	TokenNameDOT
getStreamDestinations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
new	TokenNamenew
HashSet	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
{	TokenNameLBRACE
add	TokenNameIdentifier
(	TokenNameLPAREN
addr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
hosts	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Not sending any streams."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
InetAddress	TokenNameIdentifier
host	TokenNameIdentifier
:	TokenNameCOLON
hosts	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
files	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getFilesDestinedFor	TokenNameIdentifier
(	TokenNameLPAREN
host	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
files	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"Streaming to: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
host	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
file	TokenNameIdentifier
:	TokenNameCOLON
files	TokenNameIdentifier
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"   %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
file	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
" Nothing streaming to %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
host	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"   Error retrieving file data for %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
host	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
hosts	TokenNameIdentifier
=	TokenNameEQUAL
addr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
probe	TokenNameIdentifier
.	TokenNameDOT
getStreamSources	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
new	TokenNamenew
HashSet	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
{	TokenNameLBRACE
add	TokenNameIdentifier
(	TokenNameLPAREN
addr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
hosts	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Not receiving any streams."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
InetAddress	TokenNameIdentifier
host	TokenNameIdentifier
:	TokenNameCOLON
hosts	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
files	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getIncomingFiles	TokenNameIdentifier
(	TokenNameLPAREN
host	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
files	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"Streaming from: %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
host	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
file	TokenNameIdentifier
:	TokenNameCOLON
files	TokenNameIdentifier
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"   %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
file	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
" Nothing streaming from %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
host	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"   Error retrieving file data for %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
host	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
MessagingServiceMBean	TokenNameIdentifier
ms	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
msProxy	TokenNameIdentifier
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-25s"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pool Name"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%10s"	TokenNameStringLiteral
,	TokenNameCOMMA
"Active"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%10s"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pending"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%15s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Completed"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
pending	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
completed	TokenNameIdentifier
;	TokenNameSEMICOLON
pending	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
n	TokenNameIdentifier
:	TokenNameCOLON
ms	TokenNameIdentifier
.	TokenNameDOT
getCommandPendingTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
values	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
pending	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
n	TokenNameIdentifier
;	TokenNameSEMICOLON
completed	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
long	TokenNamelong
n	TokenNameIdentifier
:	TokenNameCOLON
ms	TokenNameIdentifier
.	TokenNameDOT
getCommandCompletedTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
values	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
completed	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
n	TokenNameIdentifier
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-25s%10s%10s%15s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Commands"	TokenNameStringLiteral
,	TokenNameCOMMA
"n/a"	TokenNameStringLiteral
,	TokenNameCOMMA
pending	TokenNameIdentifier
,	TokenNameCOMMA
completed	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pending	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
n	TokenNameIdentifier
:	TokenNameCOLON
ms	TokenNameIdentifier
.	TokenNameDOT
getResponsePendingTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
values	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
pending	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
n	TokenNameIdentifier
;	TokenNameSEMICOLON
completed	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
long	TokenNamelong
n	TokenNameIdentifier
:	TokenNameCOLON
ms	TokenNameIdentifier
.	TokenNameDOT
getResponseCompletedTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
values	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
completed	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
n	TokenNameIdentifier
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%-25s%10s%10s%15s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Responses"	TokenNameStringLiteral
,	TokenNameCOMMA
"n/a"	TokenNameStringLiteral
,	TokenNameCOMMA
pending	TokenNameIdentifier
,	TokenNameCOMMA
completed	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
printCompactionStats	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
compactionThroughput	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getCompactionThroughput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
CompactionManagerMBean	TokenNameIdentifier
cm	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getCompactionManagerProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"pending tasks: "	TokenNameStringLiteral
+	TokenNamePLUS
cm	TokenNameIdentifier
.	TokenNameDOT
getPendingTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cm	TokenNameIdentifier
.	TokenNameDOT
getCompactions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%25s%16s%16s%16s%16s%10s%10s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"compaction type"	TokenNameStringLiteral
,	TokenNameCOMMA
"keyspace"	TokenNameStringLiteral
,	TokenNameCOMMA
"column family"	TokenNameStringLiteral
,	TokenNameCOMMA
"completed"	TokenNameStringLiteral
,	TokenNameCOMMA
"total"	TokenNameStringLiteral
,	TokenNameCOMMA
"unit"	TokenNameStringLiteral
,	TokenNameCOMMA
"progress"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
remainingBytes	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
c	TokenNameIdentifier
:	TokenNameCOLON
cm	TokenNameIdentifier
.	TokenNameDOT
getCompactions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
percentComplete	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Long	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"total"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
"n/a"	TokenNameStringLiteral
:	TokenNameCOLON
new	TokenNamenew
DecimalFormat	TokenNameIdentifier
(	TokenNameLPAREN
"0.00"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
double	TokenNamedouble
)	TokenNameRPAREN
new	TokenNamenew
Long	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"completed"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
new	TokenNamenew
Long	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"total"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
100	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
"%"	TokenNameStringLiteral
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%25s%16s%16s%16s%16s%10s%10s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
c	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"taskType"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"keyspace"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"columnfamily"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"completed"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"total"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"unit"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
percentComplete	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"taskType"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
OperationType	TokenNameIdentifier
.	TokenNameDOT
COMPACTION	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
remainingBytes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
new	TokenNamenew
Long	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"total"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
new	TokenNamenew
Long	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"completed"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
long	TokenNamelong
remainingTimeInSecs	TokenNameIdentifier
=	TokenNameEQUAL
compactionThroughput	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
remainingBytes	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
(	TokenNameLPAREN
remainingBytes	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
(	TokenNameLPAREN
1024L	TokenNameLongLiteral
*	TokenNameMULTIPLY
1024L	TokenNameLongLiteral
*	TokenNameMULTIPLY
compactionThroughput	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
remainingTime	TokenNameIdentifier
=	TokenNameEQUAL
remainingTimeInSecs	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
"n/a"	TokenNameStringLiteral
:	TokenNameCOLON
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"%dh%02dm%02ds"	TokenNameStringLiteral
,	TokenNameCOMMA
remainingTimeInSecs	TokenNameIdentifier
/	TokenNameDIVIDE
3600	TokenNameIntegerLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
remainingTimeInSecs	TokenNameIdentifier
%	TokenNameREMAINDER
3600	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
60	TokenNameIntegerLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
remainingTimeInSecs	TokenNameIdentifier
%	TokenNameREMAINDER
60	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%25s%10s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
"Active compaction remaining time : "	TokenNameStringLiteral
,	TokenNameCOMMA
remainingTime	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
printColumnFamilyStats	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
ColumnFamilyStoreMBean	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
cfstoreMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
ColumnFamilyStoreMBean	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Iterator	TokenNameIdentifier
<	TokenNameLESS
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
ColumnFamilyStoreMBean	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
cfamilies	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getColumnFamilyStoreMBeanProxies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
cfamilies	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Entry	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
ColumnFamilyStoreMBean	TokenNameIdentifier
>	TokenNameGREATER
entry	TokenNameIdentifier
=	TokenNameEQUAL
cfamilies	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
tableName	TokenNameIdentifier
=	TokenNameEQUAL
entry	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ColumnFamilyStoreMBean	TokenNameIdentifier
cfsProxy	TokenNameIdentifier
=	TokenNameEQUAL
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
cfstoreMap	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
tableName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
ColumnFamilyStoreMBean	TokenNameIdentifier
>	TokenNameGREATER
columnFamilies	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
ColumnFamilyStoreMBean	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
columnFamilies	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
cfsProxy	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cfstoreMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
tableName	TokenNameIdentifier
,	TokenNameCOMMA
columnFamilies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
cfstoreMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
tableName	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
cfsProxy	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
Entry	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
ColumnFamilyStoreMBean	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
entry	TokenNameIdentifier
:	TokenNameCOLON
cfstoreMap	TokenNameIdentifier
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
tableName	TokenNameIdentifier
=	TokenNameEQUAL
entry	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
ColumnFamilyStoreMBean	TokenNameIdentifier
>	TokenNameGREATER
columnFamilies	TokenNameIdentifier
=	TokenNameEQUAL
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
tableReadCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
tableWriteCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
tablePendingTasks	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
tableTotalReadTime	TokenNameIdentifier
=	TokenNameEQUAL
0.0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
tableTotalWriteTime	TokenNameIdentifier
=	TokenNameEQUAL
0.0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Keyspace: "	TokenNameStringLiteral
+	TokenNamePLUS
tableName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
ColumnFamilyStoreMBean	TokenNameIdentifier
cfstore	TokenNameIdentifier
:	TokenNameCOLON
columnFamilies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
writeCount	TokenNameIdentifier
=	TokenNameEQUAL
cfstore	TokenNameIdentifier
.	TokenNameDOT
getWriteCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
readCount	TokenNameIdentifier
=	TokenNameEQUAL
cfstore	TokenNameIdentifier
.	TokenNameDOT
getReadCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
readCount	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
tableReadCount	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
readCount	TokenNameIdentifier
;	TokenNameSEMICOLON
tableTotalReadTime	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
cfstore	TokenNameIdentifier
.	TokenNameDOT
getTotalReadLatencyMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
writeCount	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
tableWriteCount	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
writeCount	TokenNameIdentifier
;	TokenNameSEMICOLON
tableTotalWriteTime	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
cfstore	TokenNameIdentifier
.	TokenNameDOT
getTotalWriteLatencyMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tablePendingTasks	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
cfstore	TokenNameIdentifier
.	TokenNameDOT
getPendingTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
double	TokenNamedouble
tableReadLatency	TokenNameIdentifier
=	TokenNameEQUAL
tableReadCount	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
tableTotalReadTime	TokenNameIdentifier
/	TokenNameDIVIDE
tableReadCount	TokenNameIdentifier
/	TokenNameDIVIDE
1000	TokenNameIntegerLiteral
:	TokenNameCOLON
Double	TokenNameIdentifier
.	TokenNameDOT
NaN	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
tableWriteLatency	TokenNameIdentifier
=	TokenNameEQUAL
tableWriteCount	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
tableTotalWriteTime	TokenNameIdentifier
/	TokenNameDIVIDE
tableWriteCount	TokenNameIdentifier
/	TokenNameDIVIDE
1000	TokenNameIntegerLiteral
:	TokenNameCOLON
Double	TokenNameIdentifier
.	TokenNameDOT
NaN	TokenNameIdentifier
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
" Read Count: "	TokenNameStringLiteral
+	TokenNamePLUS
tableReadCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
" Read Latency: "	TokenNameStringLiteral
+	TokenNamePLUS
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"%s"	TokenNameStringLiteral
,	TokenNameCOMMA
tableReadLatency	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" ms."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
" Write Count: "	TokenNameStringLiteral
+	TokenNamePLUS
tableWriteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
" Write Latency: "	TokenNameStringLiteral
+	TokenNamePLUS
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"%s"	TokenNameStringLiteral
,	TokenNameCOMMA
tableWriteLatency	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" ms."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
" Pending Tasks: "	TokenNameStringLiteral
+	TokenNamePLUS
tablePendingTasks	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
ColumnFamilyStoreMBean	TokenNameIdentifier
cfstore	TokenNameIdentifier
:	TokenNameCOLON
columnFamilies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Column Family: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getColumnFamilyName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  SSTable count: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getLiveSSTableCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
leveledSStables	TokenNameIdentifier
=	TokenNameEQUAL
cfstore	TokenNameIdentifier
.	TokenNameDOT
getSSTableCountPerLevel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
leveledSStables	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"  SSTables in each level: ["	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
level	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
level	TokenNameIdentifier
<	TokenNameLESS
leveledSStables	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
level	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
leveledSStables	TokenNameIdentifier
[	TokenNameLBRACKET
level	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
count	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
maxCount	TokenNameIdentifier
=	TokenNameEQUAL
4L	TokenNameLongLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
level	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
maxCount	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
pow	TokenNameIdentifier
(	TokenNameLPAREN
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
level	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
count	TokenNameIdentifier
>	TokenNameGREATER
maxCount	TokenNameIdentifier
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"/"	TokenNameStringLiteral
+	TokenNamePLUS
maxCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
level	TokenNameIdentifier
<	TokenNameLESS
leveledSStables	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
outs	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
", "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Space used (live): "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getLiveDiskSpaceUsed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Space used (total): "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getTotalDiskSpaceUsed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Number of Keys (estimate): "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
estimateKeys	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Memtable Columns Count: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getMemtableColumnsCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Memtable Data Size: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getMemtableDataSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Memtable Switch Count: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getMemtableSwitchCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Read Count: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getReadCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Read Latency: "	TokenNameStringLiteral
+	TokenNamePLUS
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"%01.3f"	TokenNameStringLiteral
,	TokenNameCOMMA
cfstore	TokenNameIdentifier
.	TokenNameDOT
getRecentReadLatencyMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
" ms."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Write Count: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getWriteCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Write Latency: "	TokenNameStringLiteral
+	TokenNamePLUS
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"%01.3f"	TokenNameStringLiteral
,	TokenNameCOMMA
cfstore	TokenNameIdentifier
.	TokenNameDOT
getRecentWriteLatencyMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
" ms."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Pending Tasks: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getPendingTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Bloom Filter False Positives: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getBloomFilterFalsePositives	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Bloom Filter False Ratio: "	TokenNameStringLiteral
+	TokenNamePLUS
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"%01.5f"	TokenNameStringLiteral
,	TokenNameCOMMA
cfstore	TokenNameIdentifier
.	TokenNameDOT
getRecentBloomFilterFalseRatio	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Bloom Filter Space Used: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getBloomFilterDiskSpaceUsed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Compacted row minimum size: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getMinRowSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Compacted row maximum size: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getMaxRowSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  Compacted row mean size: "	TokenNameStringLiteral
+	TokenNamePLUS
cfstore	TokenNameIdentifier
.	TokenNameDOT
getMeanRowSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"----------------"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
printRemovalStatus	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"RemovalStatus: "	TokenNameStringLiteral
+	TokenNamePLUS
probe	TokenNameIdentifier
.	TokenNameDOT
getRemovalStatus	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printCfHistograms	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
keySpace	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
columnFamily	TokenNameIdentifier
,	TokenNameCOMMA
PrintStream	TokenNameIdentifier
output	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ColumnFamilyStoreMBean	TokenNameIdentifier
store	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
probe	TokenNameIdentifier
.	TokenNameDOT
getCfsProxy	TokenNameIdentifier
(	TokenNameLPAREN
keySpace	TokenNameIdentifier
,	TokenNameCOMMA
columnFamily	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
offsets	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
EstimatedHistogram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBucketOffsets	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rrlh	TokenNameIdentifier
=	TokenNameEQUAL
store	TokenNameIdentifier
.	TokenNameDOT
getRecentReadLatencyHistogramMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rwlh	TokenNameIdentifier
=	TokenNameEQUAL
store	TokenNameIdentifier
.	TokenNameDOT
getRecentWriteLatencyHistogramMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sprh	TokenNameIdentifier
=	TokenNameEQUAL
store	TokenNameIdentifier
.	TokenNameDOT
getRecentSSTablesPerReadHistogram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ersh	TokenNameIdentifier
=	TokenNameEQUAL
store	TokenNameIdentifier
.	TokenNameDOT
getEstimatedRowSizeHistogram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ecch	TokenNameIdentifier
=	TokenNameEQUAL
store	TokenNameIdentifier
.	TokenNameDOT
getEstimatedColumnCountHistogram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"%s/%s histograms"	TokenNameStringLiteral
,	TokenNameCOMMA
keySpace	TokenNameIdentifier
,	TokenNameCOMMA
columnFamily	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"%-10s%10s%18s%18s%18s%18s"	TokenNameStringLiteral
,	TokenNameCOMMA
"Offset"	TokenNameStringLiteral
,	TokenNameCOMMA
"SSTables"	TokenNameStringLiteral
,	TokenNameCOMMA
"Write Latency"	TokenNameStringLiteral
,	TokenNameCOMMA
"Read Latency"	TokenNameStringLiteral
,	TokenNameCOMMA
"Row Size"	TokenNameStringLiteral
,	TokenNameCOMMA
"Column Count"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
offsets	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"%-10d%10s%18s%18s%18s%18s"	TokenNameStringLiteral
,	TokenNameCOMMA
offsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
sprh	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
?	TokenNameQUESTION
sprh	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
"0"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
rwlh	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
?	TokenNameQUESTION
rwlh	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
"0"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
rrlh	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
?	TokenNameQUESTION
rrlh	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
"0"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
ersh	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
?	TokenNameQUESTION
ersh	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
"0"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
ecch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
?	TokenNameQUESTION
ecch	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
"0"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printProxyHistograms	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
output	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
StorageProxyMBean	TokenNameIdentifier
sp	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
probe	TokenNameIdentifier
.	TokenNameDOT
getSpProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
offsets	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
EstimatedHistogram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBucketOffsets	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rrlh	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
.	TokenNameDOT
getRecentReadLatencyHistogramMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rwlh	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
.	TokenNameDOT
getRecentWriteLatencyHistogramMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rrnglh	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
.	TokenNameDOT
getRecentRangeLatencyHistogramMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"proxy histograms"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"%-10s%18s%18s%18s"	TokenNameStringLiteral
,	TokenNameCOMMA
"Offset"	TokenNameStringLiteral
,	TokenNameCOMMA
"Read Latency"	TokenNameStringLiteral
,	TokenNameCOMMA
"Write Latency"	TokenNameStringLiteral
,	TokenNameCOMMA
"Range Latency"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
offsets	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"%-10d%18s%18s%18s"	TokenNameStringLiteral
,	TokenNameCOMMA
offsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
rrlh	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
?	TokenNameQUESTION
rrlh	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
"0"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
rwlh	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
?	TokenNameQUESTION
rwlh	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
"0"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
rrnglh	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
?	TokenNameQUESTION
rrnglh	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
"0"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printEndPoints	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
keySpace	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
cf	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
PrintStream	TokenNameIdentifier
output	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
InetAddress	TokenNameIdentifier
>	TokenNameGREATER
endpoints	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
probe	TokenNameIdentifier
.	TokenNameDOT
getEndpoints	TokenNameIdentifier
(	TokenNameLPAREN
keySpace	TokenNameIdentifier
,	TokenNameCOMMA
cf	TokenNameIdentifier
,	TokenNameCOMMA
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
InetAddress	TokenNameIdentifier
anEndpoint	TokenNameIdentifier
:	TokenNameCOLON
endpoints	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
anEndpoint	TokenNameIdentifier
.	TokenNameDOT
getHostAddress	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printSSTables	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
keyspace	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
cf	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
PrintStream	TokenNameIdentifier
output	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
sstables	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
probe	TokenNameIdentifier
.	TokenNameDOT
getSSTables	TokenNameIdentifier
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
,	TokenNameCOMMA
cf	TokenNameIdentifier
,	TokenNameCOMMA
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
sstable	TokenNameIdentifier
:	TokenNameCOLON
sstables	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
sstable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printIsThriftServerRunning	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
probe	TokenNameIdentifier
.	TokenNameDOT
isThriftServerRunning	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
"running"	TokenNameStringLiteral
:	TokenNameCOLON
"not running"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
predictConsistency	TokenNameIdentifier
(	TokenNameLPAREN
Integer	TokenNameIdentifier
replicationFactor	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
timeAfterWrite	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
numVersions	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
percentileLatency	TokenNameIdentifier
,	TokenNameCOMMA
PrintStream	TokenNameIdentifier
output	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
PBSPredictorMBean	TokenNameIdentifier
predictorMBean	TokenNameIdentifier
=	TokenNameEQUAL
probe	TokenNameIdentifier
.	TokenNameDOT
getPBSPredictorMBean	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
r	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
replicationFactor	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
r	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
w	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
w	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
replicationFactor	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
w	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
w	TokenNameIdentifier
+	TokenNamePLUS
r	TokenNameIdentifier
>	TokenNameGREATER
replicationFactor	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
continue	TokenNamecontinue
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
PBSPredictionResult	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
predictorMBean	TokenNameIdentifier
.	TokenNameDOT
doPrediction	TokenNameIdentifier
(	TokenNameLPAREN
replicationFactor	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
w	TokenNameIdentifier
,	TokenNameCOMMA
timeAfterWrite	TokenNameIdentifier
,	TokenNameCOMMA
numVersions	TokenNameIdentifier
,	TokenNameCOMMA
percentileLatency	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
r	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
w	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"%dms after a given write, with maximum version staleness of k=%d%n"	TokenNameStringLiteral
,	TokenNameCOMMA
timeAfterWrite	TokenNameIdentifier
,	TokenNameCOMMA
numVersions	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
output	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"N=%d, R=%d, W=%d%n"	TokenNameStringLiteral
,	TokenNameCOMMA
replicationFactor	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
w	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"Probability of consistent reads: %f%n"	TokenNameStringLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
getConsistencyProbability	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"Average read latency: %fms (%.3fth %%ile %dms)%n"	TokenNameStringLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
getAverageReadLatency	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
getPercentileReadLatencyPercentile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
100	TokenNameIntegerLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
getPercentileReadLatencyValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"Average write latency: %fms (%.3fth %%ile %dms)%n%n"	TokenNameStringLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
getAverageWriteLatency	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
getPercentileWriteLatencyPercentile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
100	TokenNameIntegerLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
getPercentileWriteLatencyValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
e	TokenNameIdentifier
.	TokenNameDOT
printStackTrace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
main	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
args	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
,	TokenNameCOMMA
InterruptedException	TokenNameIdentifier
,	TokenNameCOMMA
ConfigurationException	TokenNameIdentifier
,	TokenNameCOMMA
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
CommandLineParser	TokenNameIdentifier
parser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PosixParser	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ToolCommandLine	TokenNameIdentifier
cmd	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
cmd	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ToolCommandLine	TokenNameIdentifier
(	TokenNameLPAREN
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
,	TokenNameCOMMA
args	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ParseException	TokenNameIdentifier
p	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
p	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
host	TokenNameIdentifier
=	TokenNameEQUAL
cmd	TokenNameIdentifier
.	TokenNameDOT
hasOption	TokenNameIdentifier
(	TokenNameLPAREN
HOST_OPT	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
cmd	TokenNameIdentifier
.	TokenNameDOT
getOptionValue	TokenNameIdentifier
(	TokenNameLPAREN
HOST_OPT	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
DEFAULT_HOST	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
port	TokenNameIdentifier
=	TokenNameEQUAL
DEFAULT_PORT	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
portNum	TokenNameIdentifier
=	TokenNameEQUAL
cmd	TokenNameIdentifier
.	TokenNameDOT
getOptionValue	TokenNameIdentifier
(	TokenNameLPAREN
PORT_OPT	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
portNum	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
port	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
portNum	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NumberFormatException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
ParseException	TokenNameIdentifier
(	TokenNameLPAREN
"Port must be a number"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
String	TokenNameIdentifier
username	TokenNameIdentifier
=	TokenNameEQUAL
cmd	TokenNameIdentifier
.	TokenNameDOT
getOptionValue	TokenNameIdentifier
(	TokenNameLPAREN
USERNAME_OPT	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
password	TokenNameIdentifier
=	TokenNameEQUAL
cmd	TokenNameIdentifier
.	TokenNameDOT
getOptionValue	TokenNameIdentifier
(	TokenNameLPAREN
PASSWORD_OPT	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NodeProbe	TokenNameIdentifier
probe	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
probe	TokenNameIdentifier
=	TokenNameEQUAL
username	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
new	TokenNamenew
NodeProbe	TokenNameIdentifier
(	TokenNameLPAREN
host	TokenNameIdentifier
,	TokenNameCOMMA
port	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
new	TokenNamenew
NodeProbe	TokenNameIdentifier
(	TokenNameLPAREN
host	TokenNameIdentifier
,	TokenNameCOMMA
port	TokenNameIdentifier
,	TokenNameCOMMA
username	TokenNameIdentifier
,	TokenNameCOMMA
password	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Throwable	TokenNameIdentifier
inner	TokenNameIdentifier
=	TokenNameEQUAL
findInnermostThrowable	TokenNameIdentifier
(	TokenNameLPAREN
ioe	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
inner	TokenNameIdentifier
instanceof	TokenNameinstanceof
ConnectException	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"Failed to connect to '%s:%d': %s%n"	TokenNameStringLiteral
,	TokenNameCOMMA
host	TokenNameIdentifier
,	TokenNameCOMMA
port	TokenNameIdentifier
,	TokenNameCOMMA
inner	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
exit	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
inner	TokenNameIdentifier
instanceof	TokenNameinstanceof
UnknownHostException	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
printf	TokenNameIdentifier
(	TokenNameLPAREN
"Cannot resolve '%s': unknown host%n"	TokenNameStringLiteral
,	TokenNameCOMMA
host	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
exit	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
err	TokenNameIdentifier
(	TokenNameLPAREN
ioe	TokenNameIdentifier
,	TokenNameCOMMA
"Error connecting to remote JMX agent!"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
NodeCommand	TokenNameIdentifier
command	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
command	TokenNameIdentifier
=	TokenNameEQUAL
cmd	TokenNameIdentifier
.	TokenNameDOT
getCommand	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IllegalArgumentException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
NodeCmd	TokenNameIdentifier
nodeCmd	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeCmd	TokenNameIdentifier
(	TokenNameLPAREN
probe	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
arguments	TokenNameIdentifier
=	TokenNameEQUAL
cmd	TokenNameIdentifier
.	TokenNameDOT
getCommandArguments	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
tag	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
columnFamilyName	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
command	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
HELP	TokenNameIdentifier
:	TokenNameCOLON
printUsage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
RING	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printRing	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printRing	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
INFO	TokenNameIdentifier
:	TokenNameCOLON
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printInfo	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
,	TokenNameCOMMA
cmd	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CFSTATS	TokenNameIdentifier
:	TokenNameCOLON
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printColumnFamilyStats	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TPSTATS	TokenNameIdentifier
:	TokenNameCOLON
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printThreadPoolStats	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
VERSION	TokenNameIdentifier
:	TokenNameCOLON
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printReleaseVersion	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
COMPACTIONSTATS	TokenNameIdentifier
:	TokenNameCOLON
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printCompactionStats	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
DISABLEGOSSIP	TokenNameIdentifier
:	TokenNameCOLON
probe	TokenNameIdentifier
.	TokenNameDOT
stopGossiping	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ENABLEGOSSIP	TokenNameIdentifier
:	TokenNameCOLON
probe	TokenNameIdentifier
.	TokenNameDOT
startGossiping	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
DISABLETHRIFT	TokenNameIdentifier
:	TokenNameCOLON
probe	TokenNameIdentifier
.	TokenNameDOT
stopThriftServer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ENABLETHRIFT	TokenNameIdentifier
:	TokenNameCOLON
probe	TokenNameIdentifier
.	TokenNameDOT
startThriftServer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
STATUSTHRIFT	TokenNameIdentifier
:	TokenNameCOLON
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printIsThriftServerRunning	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
RESETLOCALSCHEMA	TokenNameIdentifier
:	TokenNameCOLON
probe	TokenNameIdentifier
.	TokenNameDOT
resetLocalSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
STATUS	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printClusterStatus	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printClusterStatus	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
DECOMMISSION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Decommission will decommission the node you are connected to and does not take arguments!"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
exit	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
decommission	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
DRAIN	TokenNameIdentifier
:	TokenNameCOLON
try	TokenNametry
{	TokenNameLBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
drain	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ExecutionException	TokenNameIdentifier
ee	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
err	TokenNameIdentifier
(	TokenNameLPAREN
ee	TokenNameIdentifier
,	TokenNameCOMMA
"Error occured during flushing"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
NETSTATS	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printNetworkStats	TokenNameIdentifier
(	TokenNameLPAREN
InetAddress	TokenNameIdentifier
.	TokenNameDOT
getByName	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printNetworkStats	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SNAPSHOT	TokenNameIdentifier
:	TokenNameCOLON
columnFamilyName	TokenNameIdentifier
=	TokenNameEQUAL
cmd	TokenNameIdentifier
.	TokenNameDOT
getOptionValue	TokenNameIdentifier
(	TokenNameLPAREN
SNAPSHOT_COLUMNFAMILY_OPT	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
CLEARSNAPSHOT	TokenNameIdentifier
:	TokenNameCOLON
tag	TokenNameIdentifier
=	TokenNameEQUAL
cmd	TokenNameIdentifier
.	TokenNameDOT
getOptionValue	TokenNameIdentifier
(	TokenNameLPAREN
TAG_OPT	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
handleSnapshots	TokenNameIdentifier
(	TokenNameLPAREN
command	TokenNameIdentifier
,	TokenNameCOMMA
tag	TokenNameIdentifier
,	TokenNameCOMMA
arguments	TokenNameIdentifier
,	TokenNameCOMMA
columnFamilyName	TokenNameIdentifier
,	TokenNameCOMMA
probe	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
MOVE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"Missing token argument for move."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
move	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
UnsupportedOperationException	TokenNameIdentifier
uoerror	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
uoerror	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
exit	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
JOIN	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
probe	TokenNameIdentifier
.	TokenNameDOT
isJoined	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"This node has already joined the ring."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
exit	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
joinRing	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SETCOMPACTIONTHROUGHPUT	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"Missing value argument."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
setCompactionThroughput	TokenNameIdentifier
(	TokenNameLPAREN
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SETSTREAMTHROUGHPUT	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"Missing value argument."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
setStreamThroughput	TokenNameIdentifier
(	TokenNameLPAREN
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SETTRACEPROBABILITY	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"Missing value argument."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
setTraceProbability	TokenNameIdentifier
(	TokenNameLPAREN
Double	TokenNameIdentifier
.	TokenNameDOT
parseDouble	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
REBUILD	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"Too many arguments."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
rebuild	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
?	TokenNameQUESTION
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
REMOVETOKEN	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Warn: removetoken is deprecated, please use removenode instead"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
REMOVENODE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"Missing an argument for removenode (either status, force, or an ID)"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"status"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printRemovalStatus	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"force"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printRemovalStatus	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
probe	TokenNameIdentifier
.	TokenNameDOT
forceRemoveCompletion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
removeNode	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
INVALIDATEKEYCACHE	TokenNameIdentifier
:	TokenNameCOLON
probe	TokenNameIdentifier
.	TokenNameDOT
invalidateKeyCache	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
INVALIDATEROWCACHE	TokenNameIdentifier
:	TokenNameCOLON
probe	TokenNameIdentifier
.	TokenNameDOT
invalidateRowCache	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CLEANUP	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
COMPACT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
REPAIR	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
FLUSH	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
SCRUB	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
UPGRADESSTABLES	TokenNameIdentifier
:	TokenNameCOLON
optionalKSandCFs	TokenNameIdentifier
(	TokenNameLPAREN
command	TokenNameIdentifier
,	TokenNameCOMMA
cmd	TokenNameIdentifier
,	TokenNameCOMMA
arguments	TokenNameIdentifier
,	TokenNameCOMMA
probe	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
GETCOMPACTIONTHRESHOLD	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"getcompactionthreshold requires ks and cf args."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
getCompactionThreshold	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CFHISTOGRAMS	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"cfhistograms requires ks and cf args"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printCfHistograms	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SETCACHECAPACITY	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"setcachecapacity requires key-cache-capacity, and row-cache-capacity args."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
setCacheCapacities	TokenNameIdentifier
(	TokenNameLPAREN
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SETCOMPACTIONTHRESHOLD	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"setcompactionthreshold requires ks, cf, min, and max threshold args."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
minthreshold	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
maxthreshold	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
minthreshold	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
maxthreshold	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"Thresholds must be positive integers"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
minthreshold	TokenNameIdentifier
>	TokenNameGREATER
maxthreshold	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"Min threshold cannot be greater than max."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
minthreshold	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
&&	TokenNameAND_AND
maxthreshold	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"Min threshold must be at least 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
setCompactionThreshold	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
minthreshold	TokenNameIdentifier
,	TokenNameCOMMA
maxthreshold	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
GETENDPOINTS	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"getendpoints requires ks, cf and key args"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printEndPoints	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PROXYHISTOGRAMS	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"proxyhistograms does not take arguments"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printProxyHistograms	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
GETSSTABLES	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"getsstables requires ks, cf and key args"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printSSTables	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
REFRESH	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"load_new_sstables requires ks and cf args"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
loadNewSSTables	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
REBUILD_INDEX	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"rebuild_index requires ks and cf args"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
probe	TokenNameIdentifier
.	TokenNameDOT
rebuildIndex	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
","	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
probe	TokenNameIdentifier
.	TokenNameDOT
rebuildIndex	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
GOSSIPINFO	TokenNameIdentifier
:	TokenNameCOLON
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printGossipInfo	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
STOP	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"stop requires a type."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
stop	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
toUpperCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
DESCRIBERING	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"Missing keyspace argument for describering."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printDescribeRing	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
RANGEKEYSAMPLE	TokenNameIdentifier
:	TokenNameCOLON
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
printRangeKeySample	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PREDICTCONSISTENCY	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
badUse	TokenNameIdentifier
(	TokenNameLPAREN
"Requires replication factor and time"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
numVersions	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
numVersions	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
percentileLatency	TokenNameIdentifier
=	TokenNameEQUAL
.999f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
arguments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
percentileLatency	TokenNameIdentifier
=	TokenNameEQUAL
Float	TokenNameIdentifier
.	TokenNameDOT
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nodeCmd	TokenNameIdentifier
.	TokenNameDOT
predictConsistency	TokenNameIdentifier
(	TokenNameLPAREN
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
arguments	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
numVersions	TokenNameIdentifier
,	TokenNameCOMMA
percentileLatency	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Unreachable code."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
probe	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
System	TokenNameIdentifier
.	TokenNameDOT
exit	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
Throwable	TokenNameIdentifier
findInnermostThrowable	TokenNameIdentifier
(	TokenNameLPAREN
Throwable	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Throwable	TokenNameIdentifier
inner	TokenNameIdentifier
=	TokenNameEQUAL
ex	TokenNameIdentifier
.	TokenNameDOT
getCause	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
inner	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
ex	TokenNameIdentifier
:	TokenNameCOLON
findInnermostThrowable	TokenNameIdentifier
(	TokenNameLPAREN
inner	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printDescribeRing	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
keyspaceName	TokenNameIdentifier
,	TokenNameCOMMA
PrintStream	TokenNameIdentifier
out	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Schema Version:"	TokenNameStringLiteral
+	TokenNamePLUS
probe	TokenNameIdentifier
.	TokenNameDOT
getSchemaVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"TokenRange: "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
tokenRangeString	TokenNameIdentifier
:	TokenNameCOLON
probe	TokenNameIdentifier
.	TokenNameDOT
describeRing	TokenNameIdentifier
(	TokenNameLPAREN
keyspaceName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
" "	TokenNameStringLiteral
+	TokenNamePLUS
tokenRangeString	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
err	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
,	TokenNameCOMMA
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printRangeKeySample	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
outs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"RangeKeySample: "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
tokenStrings	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
probe	TokenNameIdentifier
.	TokenNameDOT
sampleKeyRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
tokenString	TokenNameIdentifier
:	TokenNameCOLON
tokenStrings	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
outs	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
" "	TokenNameStringLiteral
+	TokenNamePLUS
tokenString	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printGossipInfo	TokenNameIdentifier
(	TokenNameLPAREN
PrintStream	TokenNameIdentifier
out	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
probe	TokenNameIdentifier
.	TokenNameDOT
getGossipInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
badUse	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
useStr	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
useStr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
printUsage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
exit	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
err	TokenNameIdentifier
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
errStr	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
errStr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
e	TokenNameIdentifier
.	TokenNameDOT
printStackTrace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
exit	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
complainNonzeroArgs	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
args	TokenNameIdentifier
,	TokenNameCOMMA
NodeCommand	TokenNameIdentifier
cmd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
args	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Too many arguments for command '"	TokenNameStringLiteral
+	TokenNamePLUS
cmd	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"'."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
printUsage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
exit	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
handleSnapshots	TokenNameIdentifier
(	TokenNameLPAREN
NodeCommand	TokenNameIdentifier
nc	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
tag	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
cmdArgs	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
columnFamily	TokenNameIdentifier
,	TokenNameCOMMA
NodeProbe	TokenNameIdentifier
probe	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
InterruptedException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
keyspaces	TokenNameIdentifier
=	TokenNameEQUAL
Arrays	TokenNameIdentifier
.	TokenNameDOT
copyOfRange	TokenNameIdentifier
(	TokenNameLPAREN
cmdArgs	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
cmdArgs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Requested snapshot for: "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
keyspaces	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
keyspaces	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
keyspaces	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
" "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"all keyspaces "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
columnFamily	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"and column family: "	TokenNameStringLiteral
+	TokenNamePLUS
columnFamily	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
nc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
SNAPSHOT	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
tag	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
tag	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
tag	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Long	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
currentTimeMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
probe	TokenNameIdentifier
.	TokenNameDOT
takeSnapshot	TokenNameIdentifier
(	TokenNameLPAREN
tag	TokenNameIdentifier
,	TokenNameCOMMA
columnFamily	TokenNameIdentifier
,	TokenNameCOMMA
keyspaces	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Snapshot directory: "	TokenNameStringLiteral
+	TokenNamePLUS
tag	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CLEARSNAPSHOT	TokenNameIdentifier
:	TokenNameCOLON
probe	TokenNameIdentifier
.	TokenNameDOT
clearSnapshot	TokenNameIdentifier
(	TokenNameLPAREN
tag	TokenNameIdentifier
,	TokenNameCOMMA
keyspaces	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
optionalKSandCFs	TokenNameIdentifier
(	TokenNameLPAREN
NodeCommand	TokenNameIdentifier
nc	TokenNameIdentifier
,	TokenNameCOMMA
ToolCommandLine	TokenNameIdentifier
cmd	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
cmdArgs	TokenNameIdentifier
,	TokenNameCOMMA
NodeProbe	TokenNameIdentifier
probe	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
InterruptedException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
keyspaces	TokenNameIdentifier
=	TokenNameEQUAL
cmdArgs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
probe	TokenNameIdentifier
.	TokenNameDOT
getKeyspaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
cmdArgs	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
keyspace	TokenNameIdentifier
:	TokenNameCOLON
keyspaces	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
probe	TokenNameIdentifier
.	TokenNameDOT
getKeyspaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Keyspace ["	TokenNameStringLiteral
+	TokenNamePLUS
keyspace	TokenNameIdentifier
+	TokenNamePLUS
"] does not exist."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
exit	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
keyspace	TokenNameIdentifier
:	TokenNameCOLON
keyspaces	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
columnFamilies	TokenNameIdentifier
=	TokenNameEQUAL
cmdArgs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
1	TokenNameIntegerLiteral
?	TokenNameQUESTION
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
:	TokenNameCOLON
Arrays	TokenNameIdentifier
.	TokenNameDOT
copyOfRange	TokenNameIdentifier
(	TokenNameLPAREN
cmdArgs	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
cmdArgs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
nc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
REPAIR	TokenNameIdentifier
:	TokenNameCOLON
boolean	TokenNameboolean
snapshot	TokenNameIdentifier
=	TokenNameEQUAL
cmd	TokenNameIdentifier
.	TokenNameDOT
hasOption	TokenNameIdentifier
(	TokenNameLPAREN
SNAPSHOT_REPAIR_OPT	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
localDC	TokenNameIdentifier
=	TokenNameEQUAL
cmd	TokenNameIdentifier
.	TokenNameDOT
hasOption	TokenNameIdentifier
(	TokenNameLPAREN
LOCAL_DC_REPAIR_OPT	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cmd	TokenNameIdentifier
.	TokenNameDOT
hasOption	TokenNameIdentifier
(	TokenNameLPAREN
PRIMARY_RANGE_OPT	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
probe	TokenNameIdentifier
.	TokenNameDOT
forceTableRepairPrimaryRange	TokenNameIdentifier
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
,	TokenNameCOMMA
snapshot	TokenNameIdentifier
,	TokenNameCOMMA
localDC	TokenNameIdentifier
,	TokenNameCOMMA
columnFamilies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
probe	TokenNameIdentifier
.	TokenNameDOT
forceTableRepair	TokenNameIdentifier
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
,	TokenNameCOMMA
snapshot	TokenNameIdentifier
,	TokenNameCOMMA
localDC	TokenNameIdentifier
,	TokenNameCOMMA
columnFamilies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
FLUSH	TokenNameIdentifier
:	TokenNameCOLON
try	TokenNametry
{	TokenNameLBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
forceTableFlush	TokenNameIdentifier
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
,	TokenNameCOMMA
columnFamilies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ExecutionException	TokenNameIdentifier
ee	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
err	TokenNameIdentifier
(	TokenNameLPAREN
ee	TokenNameIdentifier
,	TokenNameCOMMA
"Error occured during flushing"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
COMPACT	TokenNameIdentifier
:	TokenNameCOLON
try	TokenNametry
{	TokenNameLBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
forceTableCompaction	TokenNameIdentifier
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
,	TokenNameCOMMA
columnFamilies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ExecutionException	TokenNameIdentifier
ee	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
err	TokenNameIdentifier
(	TokenNameLPAREN
ee	TokenNameIdentifier
,	TokenNameCOMMA
"Error occured during compaction"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CLEANUP	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
Table	TokenNameIdentifier
.	TokenNameDOT
SYSTEM_KS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
forceTableCleanup	TokenNameIdentifier
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
,	TokenNameCOMMA
columnFamilies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ExecutionException	TokenNameIdentifier
ee	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
err	TokenNameIdentifier
(	TokenNameLPAREN
ee	TokenNameIdentifier
,	TokenNameCOMMA
"Error occured during cleanup"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SCRUB	TokenNameIdentifier
:	TokenNameCOLON
try	TokenNametry
{	TokenNameLBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
scrub	TokenNameIdentifier
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
,	TokenNameCOMMA
columnFamilies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ExecutionException	TokenNameIdentifier
ee	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
err	TokenNameIdentifier
(	TokenNameLPAREN
ee	TokenNameIdentifier
,	TokenNameCOMMA
"Error occured while scrubbing keyspace "	TokenNameStringLiteral
+	TokenNamePLUS
keyspace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
UPGRADESSTABLES	TokenNameIdentifier
:	TokenNameCOLON
try	TokenNametry
{	TokenNameLBRACE
probe	TokenNameIdentifier
.	TokenNameDOT
upgradeSSTables	TokenNameIdentifier
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
,	TokenNameCOMMA
columnFamilies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ExecutionException	TokenNameIdentifier
ee	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
err	TokenNameIdentifier
(	TokenNameLPAREN
ee	TokenNameIdentifier
,	TokenNameCOMMA
"Error occured while upgrading the sstables for keyspace "	TokenNameStringLiteral
+	TokenNamePLUS
keyspace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Unreachable code."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
ToolOptions	TokenNameIdentifier
extends	TokenNameextends
Options	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
addOption	TokenNameIdentifier
(	TokenNameLPAREN
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
opts	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
hasArgument	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
description	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addOption	TokenNameIdentifier
(	TokenNameLPAREN
opts	TokenNameIdentifier
,	TokenNameCOMMA
hasArgument	TokenNameIdentifier
,	TokenNameCOMMA
description	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addOption	TokenNameIdentifier
(	TokenNameLPAREN
Pair	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
opts	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
hasArgument	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
description	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
required	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addOption	TokenNameIdentifier
(	TokenNameLPAREN
opts	TokenNameIdentifier
.	TokenNameDOT
left	TokenNameIdentifier
,	TokenNameCOMMA
opts	TokenNameIdentifier
.	TokenNameDOT
right	TokenNameIdentifier
,	TokenNameCOMMA
hasArgument	TokenNameIdentifier
,	TokenNameCOMMA
description	TokenNameIdentifier
,	TokenNameCOMMA
required	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addOption	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
opt	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
longOpt	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
hasArgument	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
description	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
required	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Option	TokenNameIdentifier
option	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Option	TokenNameIdentifier
(	TokenNameLPAREN
opt	TokenNameIdentifier
,	TokenNameCOMMA
longOpt	TokenNameIdentifier
,	TokenNameCOMMA
hasArgument	TokenNameIdentifier
,	TokenNameCOMMA
description	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
option	TokenNameIdentifier
.	TokenNameDOT
setRequired	TokenNameIdentifier
(	TokenNameLPAREN
required	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addOption	TokenNameIdentifier
(	TokenNameLPAREN
option	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
ToolCommandLine	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
CommandLine	TokenNameIdentifier
commandLine	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ToolCommandLine	TokenNameIdentifier
(	TokenNameLPAREN
CommandLine	TokenNameIdentifier
commands	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
commandLine	TokenNameIdentifier
=	TokenNameEQUAL
commands	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Option	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getOptions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
commandLine	TokenNameIdentifier
.	TokenNameDOT
getOptions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
hasOption	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
opt	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
commandLine	TokenNameIdentifier
.	TokenNameDOT
hasOption	TokenNameIdentifier
(	TokenNameLPAREN
opt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getOptionValue	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
opt	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
commandLine	TokenNameIdentifier
.	TokenNameDOT
getOptionValue	TokenNameIdentifier
(	TokenNameLPAREN
opt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
NodeCommand	TokenNameIdentifier
getCommand	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
commandLine	TokenNameIdentifier
.	TokenNameDOT
getArgs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Command was not specified."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
command	TokenNameIdentifier
=	TokenNameEQUAL
commandLine	TokenNameIdentifier
.	TokenNameDOT
getArgs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
NodeCommand	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
command	TokenNameIdentifier
.	TokenNameDOT
toUpperCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IllegalArgumentException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Unrecognized command: "	TokenNameStringLiteral
+	TokenNamePLUS
command	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getCommandArguments	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
List	TokenNameIdentifier
params	TokenNameIdentifier
=	TokenNameEQUAL
commandLine	TokenNameIdentifier
.	TokenNameDOT
getArgList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
params	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
toReturn	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
params	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
params	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
parm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
params	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
parm	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"\"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
parm	TokenNameIdentifier
=	TokenNameEQUAL
parm	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
toReturn	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
parm	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
toReturn	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
