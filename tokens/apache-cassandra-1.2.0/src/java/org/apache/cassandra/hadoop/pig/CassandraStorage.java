package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
hadoop	TokenNameIdentifier
.	TokenNameDOT
pig	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
math	TokenNameIdentifier
.	TokenNameDOT
BigInteger	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
nio	TokenNameIdentifier
.	TokenNameDOT
ByteBuffer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
exceptions	TokenNameIdentifier
.	TokenNameDOT
ConfigurationException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
exceptions	TokenNameIdentifier
.	TokenNameDOT
SyntaxException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
commons	TokenNameIdentifier
.	TokenNameDOT
logging	TokenNameIdentifier
.	TokenNameDOT
Log	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
commons	TokenNameIdentifier
.	TokenNameDOT
logging	TokenNameIdentifier
.	TokenNameDOT
LogFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
auth	TokenNameIdentifier
.	TokenNameDOT
IAuthenticator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
db	TokenNameIdentifier
.	TokenNameDOT
Column	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
db	TokenNameIdentifier
.	TokenNameDOT
IColumn	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
db	TokenNameIdentifier
.	TokenNameDOT
marshal	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
db	TokenNameIdentifier
.	TokenNameDOT
marshal	TokenNameIdentifier
.	TokenNameDOT
AbstractCompositeType	TokenNameIdentifier
.	TokenNameDOT
CompositeComponent	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
hadoop	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
thrift	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
ByteBufferUtil	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
FBUtilities	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
Hex	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
UUIDGen	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
hadoop	TokenNameIdentifier
.	TokenNameDOT
conf	TokenNameIdentifier
.	TokenNameDOT
Configuration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
hadoop	TokenNameIdentifier
.	TokenNameDOT
fs	TokenNameIdentifier
.	TokenNameDOT
Path	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
hadoop	TokenNameIdentifier
.	TokenNameDOT
mapreduce	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
pig	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
pig	TokenNameIdentifier
.	TokenNameDOT
backend	TokenNameIdentifier
.	TokenNameDOT
executionengine	TokenNameIdentifier
.	TokenNameDOT
ExecException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
pig	TokenNameIdentifier
.	TokenNameDOT
backend	TokenNameIdentifier
.	TokenNameDOT
hadoop	TokenNameIdentifier
.	TokenNameDOT
executionengine	TokenNameIdentifier
.	TokenNameDOT
mapReduceLayer	TokenNameIdentifier
.	TokenNameDOT
PigSplit	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
pig	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
pig	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
UDFContext	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
pig	TokenNameIdentifier
.	TokenNameDOT
ResourceSchema	TokenNameIdentifier
.	TokenNameDOT
ResourceFieldSchema	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
thrift	TokenNameIdentifier
.	TokenNameDOT
TDeserializer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
thrift	TokenNameIdentifier
.	TokenNameDOT
TException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
thrift	TokenNameIdentifier
.	TokenNameDOT
TSerializer	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
CassandraStorage	TokenNameIdentifier
extends	TokenNameextends
LoadFunc	TokenNameIdentifier
implements	TokenNameimplements
StoreFuncInterface	TokenNameIdentifier
,	TokenNameCOMMA
LoadMetadata	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_INPUT_RPC_PORT	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_INPUT_RPC_PORT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_INPUT_INITIAL_ADDRESS	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_INPUT_INITIAL_ADDRESS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_INPUT_PARTITIONER	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_INPUT_PARTITIONER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_OUTPUT_RPC_PORT	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_OUTPUT_RPC_PORT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_OUTPUT_INITIAL_ADDRESS	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_OUTPUT_INITIAL_ADDRESS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_OUTPUT_PARTITIONER	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_OUTPUT_PARTITIONER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_RPC_PORT	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_RPC_PORT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_INITIAL_ADDRESS	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_INITIAL_ADDRESS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_PARTITIONER	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_PARTITIONER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_INPUT_FORMAT	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_INPUT_FORMAT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_OUTPUT_FORMAT	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_OUTPUT_FORMAT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_ALLOW_DELETES	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_ALLOW_DELETES"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_WIDEROW_INPUT	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_WIDEROW_INPUT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PIG_USE_SECONDARY	TokenNameIdentifier
=	TokenNameEQUAL
"PIG_USE_SECONDARY"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
DEFAULT_INPUT_FORMAT	TokenNameIdentifier
=	TokenNameEQUAL
"org.apache.cassandra.hadoop.ColumnFamilyInputFormat"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
DEFAULT_OUTPUT_FORMAT	TokenNameIdentifier
=	TokenNameEQUAL
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
PARTITION_FILTER_SIGNATURE	TokenNameIdentifier
=	TokenNameEQUAL
"cassandra.partition.filter"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
ByteBuffer	TokenNameIdentifier
BOUND	TokenNameIdentifier
=	TokenNameEQUAL
ByteBufferUtil	TokenNameIdentifier
.	TokenNameDOT
EMPTY_BYTE_BUFFER	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Log	TokenNameIdentifier
logger	TokenNameIdentifier
=	TokenNameEQUAL
LogFactory	TokenNameIdentifier
.	TokenNameDOT
getLog	TokenNameIdentifier
(	TokenNameLPAREN
CassandraStorage	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
ByteBuffer	TokenNameIdentifier
slice_start	TokenNameIdentifier
=	TokenNameEQUAL
BOUND	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
ByteBuffer	TokenNameIdentifier
slice_end	TokenNameIdentifier
=	TokenNameEQUAL
BOUND	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
slice_reverse	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
allow_deletes	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
username	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
password	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
keyspace	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
column_family	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
loadSignature	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
storeSignature	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Configuration	TokenNameIdentifier
conf	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
RecordReader	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
Map	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
IColumn	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
reader	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
RecordWriter	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
Mutation	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
writer	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
inputFormatClass	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
outputFormatClass	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
limit	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
widerows	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
usePartitionFilter	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
ByteBuffer	TokenNameIdentifier
lastKey	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Map	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
IColumn	TokenNameIdentifier
>	TokenNameGREATER
lastRow	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
hasNext	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
public	TokenNamepublic
CassandraStorage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
1024	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
CassandraStorage	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
limit	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
limit	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getLimit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
limit	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Tuple	TokenNameIdentifier
getNextWide	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
CfDef	TokenNameIdentifier
cfDef	TokenNameIdentifier
=	TokenNameEQUAL
getCfDef	TokenNameIdentifier
(	TokenNameLPAREN
loadSignature	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ByteBuffer	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Tuple	TokenNameIdentifier
tuple	TokenNameIdentifier
=	TokenNameEQUAL
TupleFactory	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
newTuple	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DefaultDataBag	TokenNameIdentifier
bag	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DefaultDataBag	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
hasNext	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
nextKeyValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hasNext	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
lastRow	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tuple	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
key	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ByteBuffer	TokenNameIdentifier
)	TokenNameRPAREN
reader	TokenNameIdentifier
.	TokenNameDOT
getCurrentKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tuple	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
DataByteArray	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
array	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
key	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
key	TokenNameIdentifier
.	TokenNameDOT
arrayOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
key	TokenNameIdentifier
.	TokenNameDOT
limit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
key	TokenNameIdentifier
.	TokenNameDOT
arrayOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
IColumn	TokenNameIdentifier
>	TokenNameGREATER
entry	TokenNameIdentifier
:	TokenNameCOLON
lastRow	TokenNameIdentifier
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
bag	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
columnToTuple	TokenNameIdentifier
(	TokenNameLPAREN
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cfDef	TokenNameIdentifier
,	TokenNameCOMMA
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getComparator_type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lastKey	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
lastRow	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
tuple	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
bag	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tuple	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tuple	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
tuple	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
bag	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tuple	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
key	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
!	TokenNameNOT
(	TokenNameLPAREN
(	TokenNameLPAREN
ByteBuffer	TokenNameIdentifier
)	TokenNameRPAREN
reader	TokenNameIdentifier
.	TokenNameDOT
getCurrentKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
lastKey	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ByteBuffer	TokenNameIdentifier
)	TokenNameRPAREN
reader	TokenNameIdentifier
.	TokenNameDOT
getCurrentKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lastRow	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SortedMap	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
IColumn	TokenNameIdentifier
>	TokenNameGREATER
)	TokenNameRPAREN
reader	TokenNameIdentifier
.	TokenNameDOT
getCurrentValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tuple	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
bag	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tuple	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
key	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
key	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ByteBuffer	TokenNameIdentifier
)	TokenNameRPAREN
reader	TokenNameIdentifier
.	TokenNameDOT
getCurrentKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lastKey	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
!	TokenNameNOT
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
lastKey	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
tuple	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
DataByteArray	TokenNameIdentifier
(	TokenNameLPAREN
lastKey	TokenNameIdentifier
.	TokenNameDOT
array	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
lastKey	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
lastKey	TokenNameIdentifier
.	TokenNameDOT
arrayOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
lastKey	TokenNameIdentifier
.	TokenNameDOT
limit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
lastKey	TokenNameIdentifier
.	TokenNameDOT
arrayOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
IColumn	TokenNameIdentifier
>	TokenNameGREATER
entry	TokenNameIdentifier
:	TokenNameCOLON
lastRow	TokenNameIdentifier
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
bag	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
columnToTuple	TokenNameIdentifier
(	TokenNameLPAREN
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cfDef	TokenNameIdentifier
,	TokenNameCOMMA
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getComparator_type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tuple	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
bag	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lastKey	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
;	TokenNameSEMICOLON
lastRow	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SortedMap	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
IColumn	TokenNameIdentifier
>	TokenNameGREATER
)	TokenNameRPAREN
reader	TokenNameIdentifier
.	TokenNameDOT
getCurrentValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tuple	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tuple	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
DataByteArray	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
array	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
key	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
key	TokenNameIdentifier
.	TokenNameDOT
arrayOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
key	TokenNameIdentifier
.	TokenNameDOT
limit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
key	TokenNameIdentifier
.	TokenNameDOT
arrayOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
SortedMap	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
IColumn	TokenNameIdentifier
>	TokenNameGREATER
row	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SortedMap	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
IColumn	TokenNameIdentifier
>	TokenNameGREATER
)	TokenNameRPAREN
reader	TokenNameIdentifier
.	TokenNameDOT
getCurrentValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lastRow	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
IColumn	TokenNameIdentifier
>	TokenNameGREATER
entry	TokenNameIdentifier
:	TokenNameCOLON
lastRow	TokenNameIdentifier
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
bag	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
columnToTuple	TokenNameIdentifier
(	TokenNameLPAREN
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cfDef	TokenNameIdentifier
,	TokenNameCOMMA
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getComparator_type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lastKey	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
lastRow	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
IColumn	TokenNameIdentifier
>	TokenNameGREATER
entry	TokenNameIdentifier
:	TokenNameCOLON
row	TokenNameIdentifier
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
bag	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
columnToTuple	TokenNameIdentifier
(	TokenNameLPAREN
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cfDef	TokenNameIdentifier
,	TokenNameCOMMA
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getComparator_type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
Tuple	TokenNameIdentifier
getNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
widerows	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
getNextWide	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
reader	TokenNameIdentifier
.	TokenNameDOT
nextKeyValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
CfDef	TokenNameIdentifier
cfDef	TokenNameIdentifier
=	TokenNameEQUAL
getCfDef	TokenNameIdentifier
(	TokenNameLPAREN
loadSignature	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ByteBuffer	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
getCurrentKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
IColumn	TokenNameIdentifier
>	TokenNameGREATER
cf	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
getCurrentValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
key	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
cf	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Tuple	TokenNameIdentifier
tuple	TokenNameIdentifier
=	TokenNameEQUAL
keyToTuple	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
cfDef	TokenNameIdentifier
,	TokenNameCOMMA
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getKey_validation_class	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DefaultDataBag	TokenNameIdentifier
bag	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DefaultDataBag	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
Boolean	TokenNameIdentifier
>	TokenNameGREATER
added	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
Boolean	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
ColumnDef	TokenNameIdentifier
cdef	TokenNameIdentifier
:	TokenNameCOLON
cfDef	TokenNameIdentifier
.	TokenNameDOT
column_metadata	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cf	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
cdef	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
tuple	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
columnToTuple	TokenNameIdentifier
(	TokenNameLPAREN
cf	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
cdef	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
cfDef	TokenNameIdentifier
,	TokenNameCOMMA
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getComparator_type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tuple	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
TupleFactory	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
newTuple	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
added	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
cdef	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
Map	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
IColumn	TokenNameIdentifier
>	TokenNameGREATER
entry	TokenNameIdentifier
:	TokenNameCOLON
cf	TokenNameIdentifier
.	TokenNameDOT
entrySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
added	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
entry	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
bag	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
columnToTuple	TokenNameIdentifier
(	TokenNameLPAREN
entry	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
cfDef	TokenNameIdentifier
,	TokenNameCOMMA
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getComparator_type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tuple	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
bag	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
usePartitionFilter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
ColumnDef	TokenNameIdentifier
cdef	TokenNameIdentifier
:	TokenNameCOLON
getIndexes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Tuple	TokenNameIdentifier
throwaway	TokenNameIdentifier
=	TokenNameEQUAL
columnToTuple	TokenNameIdentifier
(	TokenNameLPAREN
cf	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
cdef	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
cfDef	TokenNameIdentifier
,	TokenNameCOMMA
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getComparator_type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tuple	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
throwaway	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
tuple	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
Tuple	TokenNameIdentifier
composeComposite	TokenNameIdentifier
(	TokenNameLPAREN
AbstractCompositeType	TokenNameIdentifier
comparator	TokenNameIdentifier
,	TokenNameCOMMA
ByteBuffer	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
CompositeComponent	TokenNameIdentifier
>	TokenNameGREATER
result	TokenNameIdentifier
=	TokenNameEQUAL
comparator	TokenNameIdentifier
.	TokenNameDOT
deconstruct	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Tuple	TokenNameIdentifier
t	TokenNameIdentifier
=	TokenNameEQUAL
TupleFactory	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
newTuple	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
result	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
setTupleValue	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
,	TokenNameCOMMA
i	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
comparator	TokenNameIdentifier
.	TokenNameDOT
compose	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
t	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Tuple	TokenNameIdentifier
keyToTuple	TokenNameIdentifier
(	TokenNameLPAREN
ByteBuffer	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
CfDef	TokenNameIdentifier
cfDef	TokenNameIdentifier
,	TokenNameCOMMA
AbstractType	TokenNameIdentifier
comparator	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
Tuple	TokenNameIdentifier
tuple	TokenNameIdentifier
=	TokenNameEQUAL
TupleFactory	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
newTuple	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
comparator	TokenNameIdentifier
instanceof	TokenNameinstanceof
AbstractCompositeType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setTupleValue	TokenNameIdentifier
(	TokenNameLPAREN
tuple	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
composeComposite	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
AbstractCompositeType	TokenNameIdentifier
)	TokenNameRPAREN
comparator	TokenNameIdentifier
,	TokenNameCOMMA
key	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
setTupleValue	TokenNameIdentifier
(	TokenNameLPAREN
tuple	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
getDefaultMarshallers	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
compose	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
tuple	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Tuple	TokenNameIdentifier
columnToTuple	TokenNameIdentifier
(	TokenNameLPAREN
IColumn	TokenNameIdentifier
col	TokenNameIdentifier
,	TokenNameCOMMA
CfDef	TokenNameIdentifier
cfDef	TokenNameIdentifier
,	TokenNameCOMMA
AbstractType	TokenNameIdentifier
comparator	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
Tuple	TokenNameIdentifier
pair	TokenNameIdentifier
=	TokenNameEQUAL
TupleFactory	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
newTuple	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
comparator	TokenNameIdentifier
instanceof	TokenNameinstanceof
AbstractCompositeType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setTupleValue	TokenNameIdentifier
(	TokenNameLPAREN
pair	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
composeComposite	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
AbstractCompositeType	TokenNameIdentifier
)	TokenNameRPAREN
comparator	TokenNameIdentifier
,	TokenNameCOMMA
col	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
setTupleValue	TokenNameIdentifier
(	TokenNameLPAREN
pair	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
comparator	TokenNameIdentifier
.	TokenNameDOT
compose	TokenNameIdentifier
(	TokenNameLPAREN
col	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
col	TokenNameIdentifier
instanceof	TokenNameinstanceof
Column	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
AbstractType	TokenNameIdentifier
>	TokenNameGREATER
marshallers	TokenNameIdentifier
=	TokenNameEQUAL
getDefaultMarshallers	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
AbstractType	TokenNameIdentifier
>	TokenNameGREATER
validators	TokenNameIdentifier
=	TokenNameEQUAL
getValidatorMap	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
validators	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
col	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
setTupleValue	TokenNameIdentifier
(	TokenNameLPAREN
pair	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
marshallers	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
compose	TokenNameIdentifier
(	TokenNameLPAREN
col	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
setTupleValue	TokenNameIdentifier
(	TokenNameLPAREN
pair	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
validators	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
col	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
compose	TokenNameIdentifier
(	TokenNameLPAREN
col	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
pair	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ArrayList	TokenNameIdentifier
<	TokenNameLESS
Tuple	TokenNameIdentifier
>	TokenNameGREATER
subcols	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
Tuple	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
IColumn	TokenNameIdentifier
subcol	TokenNameIdentifier
:	TokenNameCOLON
col	TokenNameIdentifier
.	TokenNameDOT
getSubColumns	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
subcols	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
columnToTuple	TokenNameIdentifier
(	TokenNameLPAREN
subcol	TokenNameIdentifier
,	TokenNameCOMMA
cfDef	TokenNameIdentifier
,	TokenNameCOMMA
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getSubcomparator_type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pair	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
new	TokenNamenew
DefaultDataBag	TokenNameIdentifier
(	TokenNameLPAREN
subcols	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
pair	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
setTupleValue	TokenNameIdentifier
(	TokenNameLPAREN
Tuple	TokenNameIdentifier
pair	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
position	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
value	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ExecException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
instanceof	TokenNameinstanceof
BigInteger	TokenNameIdentifier
)	TokenNameRPAREN
pair	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
position	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
)	TokenNameRPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
instanceof	TokenNameinstanceof
ByteBuffer	TokenNameIdentifier
)	TokenNameRPAREN
pair	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
position	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
DataByteArray	TokenNameIdentifier
(	TokenNameLPAREN
ByteBufferUtil	TokenNameIdentifier
.	TokenNameDOT
getArray	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
ByteBuffer	TokenNameIdentifier
)	TokenNameRPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
instanceof	TokenNameinstanceof
UUID	TokenNameIdentifier
)	TokenNameRPAREN
pair	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
position	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
DataByteArray	TokenNameIdentifier
(	TokenNameLPAREN
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
decompose	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
UUID	TokenNameIdentifier
)	TokenNameRPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
instanceof	TokenNameinstanceof
Date	TokenNameIdentifier
)	TokenNameRPAREN
pair	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
position	TokenNameIdentifier
,	TokenNameCOMMA
DateType	TokenNameIdentifier
.	TokenNameDOT
instance	TokenNameIdentifier
.	TokenNameDOT
decompose	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
Date	TokenNameIdentifier
)	TokenNameRPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getLong	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
pair	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
position	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
CfDef	TokenNameIdentifier
getCfDef	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
signature	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
UDFContext	TokenNameIdentifier
context	TokenNameIdentifier
=	TokenNameEQUAL
UDFContext	TokenNameIdentifier
.	TokenNameDOT
getUDFContext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Properties	TokenNameIdentifier
property	TokenNameIdentifier
=	TokenNameEQUAL
context	TokenNameIdentifier
.	TokenNameDOT
getUDFProperties	TokenNameIdentifier
(	TokenNameLPAREN
CassandraStorage	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
cfdefFromString	TokenNameIdentifier
(	TokenNameLPAREN
property	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
signature	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
List	TokenNameIdentifier
<	TokenNameLESS
IndexExpression	TokenNameIdentifier
>	TokenNameGREATER
getIndexExpressions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
UDFContext	TokenNameIdentifier
context	TokenNameIdentifier
=	TokenNameEQUAL
UDFContext	TokenNameIdentifier
.	TokenNameDOT
getUDFContext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Properties	TokenNameIdentifier
property	TokenNameIdentifier
=	TokenNameEQUAL
context	TokenNameIdentifier
.	TokenNameDOT
getUDFProperties	TokenNameIdentifier
(	TokenNameLPAREN
CassandraStorage	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
property	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
PARTITION_FILTER_SIGNATURE	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
indexExpressionsFromString	TokenNameIdentifier
(	TokenNameLPAREN
property	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
PARTITION_FILTER_SIGNATURE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
List	TokenNameIdentifier
<	TokenNameLESS
AbstractType	TokenNameIdentifier
>	TokenNameGREATER
getDefaultMarshallers	TokenNameIdentifier
(	TokenNameLPAREN
CfDef	TokenNameIdentifier
cfDef	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
ArrayList	TokenNameIdentifier
<	TokenNameLESS
AbstractType	TokenNameIdentifier
>	TokenNameGREATER
marshallers	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
AbstractType	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
AbstractType	TokenNameIdentifier
comparator	TokenNameIdentifier
;	TokenNameSEMICOLON
AbstractType	TokenNameIdentifier
subcomparator	TokenNameIdentifier
;	TokenNameSEMICOLON
AbstractType	TokenNameIdentifier
default_validator	TokenNameIdentifier
;	TokenNameSEMICOLON
AbstractType	TokenNameIdentifier
key_validator	TokenNameIdentifier
;	TokenNameSEMICOLON
comparator	TokenNameIdentifier
=	TokenNameEQUAL
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getComparator_type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
subcomparator	TokenNameIdentifier
=	TokenNameEQUAL
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getSubcomparator_type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
default_validator	TokenNameIdentifier
=	TokenNameEQUAL
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getDefault_validation_class	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key_validator	TokenNameIdentifier
=	TokenNameEQUAL
parseType	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
getKey_validation_class	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
marshallers	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
comparator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
marshallers	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
default_validator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
marshallers	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
key_validator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
marshallers	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
subcomparator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
marshallers	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Map	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
AbstractType	TokenNameIdentifier
>	TokenNameGREATER
getValidatorMap	TokenNameIdentifier
(	TokenNameLPAREN
CfDef	TokenNameIdentifier
cfDef	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
Map	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
AbstractType	TokenNameIdentifier
>	TokenNameGREATER
validators	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
AbstractType	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
ColumnDef	TokenNameIdentifier
cd	TokenNameIdentifier
:	TokenNameCOLON
cfDef	TokenNameIdentifier
.	TokenNameDOT
getColumn_metadata	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cd	TokenNameIdentifier
.	TokenNameDOT
getValidation_class	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
!	TokenNameNOT
cd	TokenNameIdentifier
.	TokenNameDOT
getValidation_class	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
AbstractType	TokenNameIdentifier
validator	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
validator	TokenNameIdentifier
=	TokenNameEQUAL
TypeParser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
cd	TokenNameIdentifier
.	TokenNameDOT
getValidation_class	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validators	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
cd	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
,	TokenNameCOMMA
validator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
SyntaxException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
validators	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
AbstractType	TokenNameIdentifier
parseType	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
type	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"org.apache.cassandra.db.marshal.CounterColumnType"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
LongType	TokenNameIdentifier
.	TokenNameDOT
instance	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
TypeParser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
SyntaxException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
InputFormat	TokenNameIdentifier
getInputFormat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
FBUtilities	TokenNameIdentifier
.	TokenNameDOT
construct	TokenNameIdentifier
(	TokenNameLPAREN
inputFormatClass	TokenNameIdentifier
,	TokenNameCOMMA
"inputformat"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
prepareToRead	TokenNameIdentifier
(	TokenNameLPAREN
RecordReader	TokenNameIdentifier
reader	TokenNameIdentifier
,	TokenNameCOMMA
PigSplit	TokenNameIdentifier
split	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
reader	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
getQueryMap	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
params	TokenNameIdentifier
=	TokenNameEQUAL
query	TokenNameIdentifier
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"&"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
map	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
param	TokenNameIdentifier
:	TokenNameCOLON
params	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
keyValue	TokenNameIdentifier
=	TokenNameEQUAL
param	TokenNameIdentifier
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"="	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
map	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
keyValue	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
keyValue	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
map	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
setLocationFromUri	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
location	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
location	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"cassandra://"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"Bad scheme."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
urlParts	TokenNameIdentifier
=	TokenNameEQUAL
location	TokenNameIdentifier
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"\?"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
urlParts	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
urlQuery	TokenNameIdentifier
=	TokenNameEQUAL
getQueryMap	TokenNameIdentifier
(	TokenNameLPAREN
urlParts	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
AbstractType	TokenNameIdentifier
comparator	TokenNameIdentifier
=	TokenNameEQUAL
BytesType	TokenNameIdentifier
.	TokenNameDOT
instance	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
"comparator"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
comparator	TokenNameIdentifier
=	TokenNameEQUAL
TypeParser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"comparator"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
"slice_start"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
slice_start	TokenNameIdentifier
=	TokenNameEQUAL
comparator	TokenNameIdentifier
.	TokenNameDOT
fromString	TokenNameIdentifier
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"slice_start"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
"slice_end"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
slice_end	TokenNameIdentifier
=	TokenNameEQUAL
comparator	TokenNameIdentifier
.	TokenNameDOT
fromString	TokenNameIdentifier
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"slice_end"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
"reversed"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
slice_reverse	TokenNameIdentifier
=	TokenNameEQUAL
Boolean	TokenNameIdentifier
.	TokenNameDOT
parseBoolean	TokenNameIdentifier
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"reversed"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
"limit"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
limit	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"limit"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
"allow_deletes"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
allow_deletes	TokenNameIdentifier
=	TokenNameEQUAL
Boolean	TokenNameIdentifier
.	TokenNameDOT
parseBoolean	TokenNameIdentifier
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"allow_deletes"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
"widerows"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
widerows	TokenNameIdentifier
=	TokenNameEQUAL
Boolean	TokenNameIdentifier
.	TokenNameDOT
parseBoolean	TokenNameIdentifier
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"widerows"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
"use_secondary"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
usePartitionFilter	TokenNameIdentifier
=	TokenNameEQUAL
Boolean	TokenNameIdentifier
.	TokenNameDOT
parseBoolean	TokenNameIdentifier
(	TokenNameLPAREN
urlQuery	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"use_secondary"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
parts	TokenNameIdentifier
=	TokenNameEQUAL
urlParts	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"/+"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
credentialsAndKeyspace	TokenNameIdentifier
=	TokenNameEQUAL
parts	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"@"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
credentialsAndKeyspace	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
credentials	TokenNameIdentifier
=	TokenNameEQUAL
credentialsAndKeyspace	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
":"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
username	TokenNameIdentifier
=	TokenNameEQUAL
credentials	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
password	TokenNameIdentifier
=	TokenNameEQUAL
credentials	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
credentialsAndKeyspace	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
keyspace	TokenNameIdentifier
=	TokenNameEQUAL
parts	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
column_family	TokenNameIdentifier
=	TokenNameEQUAL
parts	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"Expected 'cassandra://[username:password@]<keyspace>/<columnfamily>[?slice_start=<start>&slice_end=<end>[&reversed=true][&limit=1][&allow_deletes=true][widerows=true][use_secondary=true]]': "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
setConnectionInformation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_RPC_PORT	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setInputRpcPort	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_RPC_PORT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setOutputRpcPort	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_RPC_PORT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_INPUT_RPC_PORT	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setInputRpcPort	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_INPUT_RPC_PORT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_OUTPUT_RPC_PORT	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setOutputRpcPort	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_OUTPUT_RPC_PORT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_INITIAL_ADDRESS	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setInputInitialAddress	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_INITIAL_ADDRESS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setOutputInitialAddress	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_INITIAL_ADDRESS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_INPUT_INITIAL_ADDRESS	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setInputInitialAddress	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_INPUT_INITIAL_ADDRESS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_OUTPUT_INITIAL_ADDRESS	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setOutputInitialAddress	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_OUTPUT_INITIAL_ADDRESS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_PARTITIONER	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setInputPartitioner	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_PARTITIONER	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setOutputPartitioner	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_PARTITIONER	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_INPUT_PARTITIONER	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setInputPartitioner	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_INPUT_PARTITIONER	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_OUTPUT_PARTITIONER	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setOutputPartitioner	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_OUTPUT_PARTITIONER	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_INPUT_FORMAT	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
inputFormatClass	TokenNameIdentifier
=	TokenNameEQUAL
getFullyQualifiedClassName	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_INPUT_FORMAT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
inputFormatClass	TokenNameIdentifier
=	TokenNameEQUAL
DEFAULT_INPUT_FORMAT	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_OUTPUT_FORMAT	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
outputFormatClass	TokenNameIdentifier
=	TokenNameEQUAL
getFullyQualifiedClassName	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_OUTPUT_FORMAT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
outputFormatClass	TokenNameIdentifier
=	TokenNameEQUAL
DEFAULT_OUTPUT_FORMAT	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_ALLOW_DELETES	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
allow_deletes	TokenNameIdentifier
=	TokenNameEQUAL
Boolean	TokenNameIdentifier
.	TokenNameDOT
parseBoolean	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_ALLOW_DELETES	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getFullyQualifiedClassName	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
classname	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
classname	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"."	TokenNameStringLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
classname	TokenNameIdentifier
:	TokenNameCOLON
"org.apache.cassandra.hadoop."	TokenNameStringLiteral
+	TokenNamePLUS
classname	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setLocation	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
location	TokenNameIdentifier
,	TokenNameCOMMA
Job	TokenNameIdentifier
job	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
conf	TokenNameIdentifier
=	TokenNameEQUAL
job	TokenNameIdentifier
.	TokenNameDOT
getConfiguration	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setLocationFromUri	TokenNameIdentifier
(	TokenNameLPAREN
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
getInputSlicePredicate	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
SliceRange	TokenNameIdentifier
range	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SliceRange	TokenNameIdentifier
(	TokenNameLPAREN
slice_start	TokenNameIdentifier
,	TokenNameCOMMA
slice_end	TokenNameIdentifier
,	TokenNameCOMMA
slice_reverse	TokenNameIdentifier
,	TokenNameCOMMA
limit	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SlicePredicate	TokenNameIdentifier
predicate	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SlicePredicate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
setSlice_range	TokenNameIdentifier
(	TokenNameLPAREN
range	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setInputSlicePredicate	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
predicate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_WIDEROW_INPUT	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
widerows	TokenNameIdentifier
=	TokenNameEQUAL
Boolean	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_WIDEROW_INPUT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_USE_SECONDARY	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
usePartitionFilter	TokenNameIdentifier
=	TokenNameEQUAL
Boolean	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_USE_SECONDARY	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
usePartitionFilter	TokenNameIdentifier
&&	TokenNameAND_AND
getIndexExpressions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setInputRange	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
getIndexExpressions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
username	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
password	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setInputKeyspaceUserNameAndPassword	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
username	TokenNameIdentifier
,	TokenNameCOMMA
password	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setInputColumnFamily	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
keyspace	TokenNameIdentifier
,	TokenNameCOMMA
column_family	TokenNameIdentifier
,	TokenNameCOMMA
widerows	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setConnectionInformation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
getInputRpcPort	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"PIG_INPUT_RPC_PORT or PIG_RPC_PORT environment variable not set"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
getInputInitialAddress	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"PIG_INPUT_INITIAL_ADDRESS or PIG_INITIAL_ADDRESS environment variable not set"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
getInputPartitioner	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"PIG_INPUT_PARTITIONER or PIG_PARTITIONER environment variable not set"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
loadSignature	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
loadSignature	TokenNameIdentifier
=	TokenNameEQUAL
location	TokenNameIdentifier
;	TokenNameSEMICOLON
initSchema	TokenNameIdentifier
(	TokenNameLPAREN
loadSignature	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ResourceSchema	TokenNameIdentifier
getSchema	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
location	TokenNameIdentifier
,	TokenNameCOMMA
Job	TokenNameIdentifier
job	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
setLocation	TokenNameIdentifier
(	TokenNameLPAREN
location	TokenNameIdentifier
,	TokenNameCOMMA
job	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
CfDef	TokenNameIdentifier
cfDef	TokenNameIdentifier
=	TokenNameEQUAL
getCfDef	TokenNameIdentifier
(	TokenNameLPAREN
loadSignature	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
.	TokenNameDOT
column_type	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"Super"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
ResourceSchema	TokenNameIdentifier
schema	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
AbstractType	TokenNameIdentifier
>	TokenNameGREATER
marshallers	TokenNameIdentifier
=	TokenNameEQUAL
getDefaultMarshallers	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
,	TokenNameCOMMA
AbstractType	TokenNameIdentifier
>	TokenNameGREATER
validators	TokenNameIdentifier
=	TokenNameEQUAL
getValidatorMap	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ResourceFieldSchema	TokenNameIdentifier
keyFieldSchema	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
keyFieldSchema	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
"key"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
keyFieldSchema	TokenNameIdentifier
.	TokenNameDOT
setType	TokenNameIdentifier
(	TokenNameLPAREN
getPigType	TokenNameIdentifier
(	TokenNameLPAREN
marshallers	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ResourceSchema	TokenNameIdentifier
bagSchema	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ResourceFieldSchema	TokenNameIdentifier
bagField	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bagField	TokenNameIdentifier
.	TokenNameDOT
setType	TokenNameIdentifier
(	TokenNameLPAREN
DataType	TokenNameIdentifier
.	TokenNameDOT
BAG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bagField	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
"columns"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ResourceSchema	TokenNameIdentifier
bagTupleSchema	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ResourceFieldSchema	TokenNameIdentifier
bagTupleField	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bagTupleField	TokenNameIdentifier
.	TokenNameDOT
setType	TokenNameIdentifier
(	TokenNameLPAREN
DataType	TokenNameIdentifier
.	TokenNameDOT
TUPLE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ResourceFieldSchema	TokenNameIdentifier
bagcolSchema	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ResourceFieldSchema	TokenNameIdentifier
bagvalSchema	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bagcolSchema	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
"name"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bagvalSchema	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
"value"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bagcolSchema	TokenNameIdentifier
.	TokenNameDOT
setType	TokenNameIdentifier
(	TokenNameLPAREN
getPigType	TokenNameIdentifier
(	TokenNameLPAREN
marshallers	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bagvalSchema	TokenNameIdentifier
.	TokenNameDOT
setType	TokenNameIdentifier
(	TokenNameLPAREN
getPigType	TokenNameIdentifier
(	TokenNameLPAREN
marshallers	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bagTupleSchema	TokenNameIdentifier
.	TokenNameDOT
setFields	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
bagcolSchema	TokenNameIdentifier
,	TokenNameCOMMA
bagvalSchema	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bagTupleField	TokenNameIdentifier
.	TokenNameDOT
setSchema	TokenNameIdentifier
(	TokenNameLPAREN
bagTupleSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bagSchema	TokenNameIdentifier
.	TokenNameDOT
setFields	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
bagTupleField	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bagField	TokenNameIdentifier
.	TokenNameDOT
setSchema	TokenNameIdentifier
(	TokenNameLPAREN
bagSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
ResourceFieldSchema	TokenNameIdentifier
>	TokenNameGREATER
allSchemaFields	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
ResourceFieldSchema	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
allSchemaFields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
keyFieldSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
ColumnDef	TokenNameIdentifier
cdef	TokenNameIdentifier
:	TokenNameCOLON
cfDef	TokenNameIdentifier
.	TokenNameDOT
column_metadata	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ResourceSchema	TokenNameIdentifier
innerTupleSchema	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ResourceFieldSchema	TokenNameIdentifier
innerTupleField	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
innerTupleField	TokenNameIdentifier
.	TokenNameDOT
setType	TokenNameIdentifier
(	TokenNameLPAREN
DataType	TokenNameIdentifier
.	TokenNameDOT
TUPLE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
innerTupleField	TokenNameIdentifier
.	TokenNameDOT
setSchema	TokenNameIdentifier
(	TokenNameLPAREN
innerTupleSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
innerTupleField	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
cdef	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ResourceFieldSchema	TokenNameIdentifier
idxColSchema	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
idxColSchema	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
"name"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
idxColSchema	TokenNameIdentifier
.	TokenNameDOT
setType	TokenNameIdentifier
(	TokenNameLPAREN
getPigType	TokenNameIdentifier
(	TokenNameLPAREN
marshallers	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ResourceFieldSchema	TokenNameIdentifier
valSchema	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
AbstractType	TokenNameIdentifier
validator	TokenNameIdentifier
=	TokenNameEQUAL
validators	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
cdef	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
validator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
validator	TokenNameIdentifier
=	TokenNameEQUAL
marshallers	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
valSchema	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
"value"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
valSchema	TokenNameIdentifier
.	TokenNameDOT
setType	TokenNameIdentifier
(	TokenNameLPAREN
getPigType	TokenNameIdentifier
(	TokenNameLPAREN
validator	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
innerTupleSchema	TokenNameIdentifier
.	TokenNameDOT
setFields	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
idxColSchema	TokenNameIdentifier
,	TokenNameCOMMA
valSchema	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
allSchemaFields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
innerTupleField	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
allSchemaFields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
bagField	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
usePartitionFilter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
ColumnDef	TokenNameIdentifier
cdef	TokenNameIdentifier
:	TokenNameCOLON
getIndexes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ResourceFieldSchema	TokenNameIdentifier
idxSchema	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
idxSchema	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
"index_"	TokenNameStringLiteral
+	TokenNamePLUS
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
cdef	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
AbstractType	TokenNameIdentifier
validator	TokenNameIdentifier
=	TokenNameEQUAL
validators	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
cdef	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
validator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
validator	TokenNameIdentifier
=	TokenNameEQUAL
marshallers	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
idxSchema	TokenNameIdentifier
.	TokenNameDOT
setType	TokenNameIdentifier
(	TokenNameLPAREN
getPigType	TokenNameIdentifier
(	TokenNameLPAREN
validator	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
allSchemaFields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
idxSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
schema	TokenNameIdentifier
.	TokenNameDOT
setFields	TokenNameIdentifier
(	TokenNameLPAREN
allSchemaFields	TokenNameIdentifier
.	TokenNameDOT
toArray	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
ResourceFieldSchema	TokenNameIdentifier
[	TokenNameLBRACKET
allSchemaFields	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
schema	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
byte	TokenNamebyte
getPigType	TokenNameIdentifier
(	TokenNameLPAREN
AbstractType	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
LongType	TokenNameIdentifier
||	TokenNameOR_OR
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
DateType	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DataType	TokenNameIdentifier
.	TokenNameDOT
LONG	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
IntegerType	TokenNameIdentifier
||	TokenNameOR_OR
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
Int32Type	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DataType	TokenNameIdentifier
.	TokenNameDOT
INTEGER	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
AsciiType	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DataType	TokenNameIdentifier
.	TokenNameDOT
CHARARRAY	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
UTF8Type	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DataType	TokenNameIdentifier
.	TokenNameDOT
CHARARRAY	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
FloatType	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DataType	TokenNameIdentifier
.	TokenNameDOT
FLOAT	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
DoubleType	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DataType	TokenNameIdentifier
.	TokenNameDOT
DOUBLE	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
AbstractCompositeType	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DataType	TokenNameIdentifier
.	TokenNameDOT
TUPLE	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
DataType	TokenNameIdentifier
.	TokenNameDOT
BYTEARRAY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ResourceStatistics	TokenNameIdentifier
getStatistics	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
location	TokenNameIdentifier
,	TokenNameCOMMA
Job	TokenNameIdentifier
job	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getPartitionKeys	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
location	TokenNameIdentifier
,	TokenNameCOMMA
Job	TokenNameIdentifier
job	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
usePartitionFilter	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
ColumnDef	TokenNameIdentifier
>	TokenNameGREATER
indexes	TokenNameIdentifier
=	TokenNameEQUAL
getIndexes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
partitionKeys	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
indexes	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
indexes	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
partitionKeys	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
indexes	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
partitionKeys	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setPartitionFilter	TokenNameIdentifier
(	TokenNameLPAREN
Expression	TokenNameIdentifier
partitionFilter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
UDFContext	TokenNameIdentifier
context	TokenNameIdentifier
=	TokenNameEQUAL
UDFContext	TokenNameIdentifier
.	TokenNameDOT
getUDFContext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Properties	TokenNameIdentifier
property	TokenNameIdentifier
=	TokenNameEQUAL
context	TokenNameIdentifier
.	TokenNameDOT
getUDFProperties	TokenNameIdentifier
(	TokenNameLPAREN
CassandraStorage	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
property	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
PARTITION_FILTER_SIGNATURE	TokenNameIdentifier
,	TokenNameCOMMA
indexExpressionsToString	TokenNameIdentifier
(	TokenNameLPAREN
filterToIndexExpressions	TokenNameIdentifier
(	TokenNameLPAREN
partitionFilter	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
List	TokenNameIdentifier
<	TokenNameLESS
IndexExpression	TokenNameIdentifier
>	TokenNameGREATER
filterToIndexExpressions	TokenNameIdentifier
(	TokenNameLPAREN
Expression	TokenNameIdentifier
expression	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
IndexExpression	TokenNameIdentifier
>	TokenNameGREATER
indexExpressions	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
IndexExpression	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Expression	TokenNameIdentifier
.	TokenNameDOT
BinaryExpression	TokenNameIdentifier
be	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Expression	TokenNameIdentifier
.	TokenNameDOT
BinaryExpression	TokenNameIdentifier
)	TokenNameRPAREN
expression	TokenNameIdentifier
;	TokenNameSEMICOLON
ByteBuffer	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
ByteBuffer	TokenNameIdentifier
.	TokenNameDOT
wrap	TokenNameIdentifier
(	TokenNameLPAREN
be	TokenNameIdentifier
.	TokenNameDOT
getLhs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ByteBuffer	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
ByteBuffer	TokenNameIdentifier
.	TokenNameDOT
wrap	TokenNameIdentifier
(	TokenNameLPAREN
be	TokenNameIdentifier
.	TokenNameDOT
getRhs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
expression	TokenNameIdentifier
.	TokenNameDOT
getOpType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
OP_EQ	TokenNameIdentifier
:	TokenNameCOLON
indexExpressions	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
IndexExpression	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
IndexOperator	TokenNameIdentifier
.	TokenNameDOT
EQ	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
OP_GE	TokenNameIdentifier
:	TokenNameCOLON
indexExpressions	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
IndexExpression	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
IndexOperator	TokenNameIdentifier
.	TokenNameDOT
GTE	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
OP_GT	TokenNameIdentifier
:	TokenNameCOLON
indexExpressions	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
IndexExpression	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
IndexOperator	TokenNameIdentifier
.	TokenNameDOT
GT	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
OP_LE	TokenNameIdentifier
:	TokenNameCOLON
indexExpressions	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
IndexExpression	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
IndexOperator	TokenNameIdentifier
.	TokenNameDOT
LTE	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
OP_LT	TokenNameIdentifier
:	TokenNameCOLON
indexExpressions	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
IndexExpression	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
IndexOperator	TokenNameIdentifier
.	TokenNameDOT
LT	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
OP_AND	TokenNameIdentifier
:	TokenNameCOLON
indexExpressions	TokenNameIdentifier
.	TokenNameDOT
addAll	TokenNameIdentifier
(	TokenNameLPAREN
filterToIndexExpressions	TokenNameIdentifier
(	TokenNameLPAREN
be	TokenNameIdentifier
.	TokenNameDOT
getLhs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
indexExpressions	TokenNameIdentifier
.	TokenNameDOT
addAll	TokenNameIdentifier
(	TokenNameLPAREN
filterToIndexExpressions	TokenNameIdentifier
(	TokenNameLPAREN
be	TokenNameIdentifier
.	TokenNameDOT
getRhs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Unsupported expression type: "	TokenNameStringLiteral
+	TokenNamePLUS
expression	TokenNameIdentifier
.	TokenNameDOT
getOpType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
name	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
indexExpressions	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
List	TokenNameIdentifier
<	TokenNameLESS
ColumnDef	TokenNameIdentifier
>	TokenNameGREATER
getIndexes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
CfDef	TokenNameIdentifier
cfdef	TokenNameIdentifier
=	TokenNameEQUAL
getCfDef	TokenNameIdentifier
(	TokenNameLPAREN
loadSignature	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
ColumnDef	TokenNameIdentifier
>	TokenNameGREATER
indexes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
ColumnDef	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
ColumnDef	TokenNameIdentifier
cdef	TokenNameIdentifier
:	TokenNameCOLON
cfdef	TokenNameIdentifier
.	TokenNameDOT
column_metadata	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cdef	TokenNameIdentifier
.	TokenNameDOT
index_type	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
indexes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
cdef	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
indexes	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
String	TokenNameIdentifier
relativeToAbsolutePath	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
location	TokenNameIdentifier
,	TokenNameCOMMA
Path	TokenNameIdentifier
curDir	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
location	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setUDFContextSignature	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
signature	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
loadSignature	TokenNameIdentifier
=	TokenNameEQUAL
signature	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setStoreFuncUDFContextSignature	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
signature	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
storeSignature	TokenNameIdentifier
=	TokenNameEQUAL
signature	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
relToAbsPathForStoreLocation	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
location	TokenNameIdentifier
,	TokenNameCOMMA
Path	TokenNameIdentifier
curDir	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
relativeToAbsolutePath	TokenNameIdentifier
(	TokenNameLPAREN
location	TokenNameIdentifier
,	TokenNameCOMMA
curDir	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setStoreLocation	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
location	TokenNameIdentifier
,	TokenNameCOMMA
Job	TokenNameIdentifier
job	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
conf	TokenNameIdentifier
=	TokenNameEQUAL
job	TokenNameIdentifier
.	TokenNameDOT
getConfiguration	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setLocationFromUri	TokenNameIdentifier
(	TokenNameLPAREN
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
username	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
password	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setOutputKeyspaceUserNameAndPassword	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
username	TokenNameIdentifier
,	TokenNameCOMMA
password	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
setOutputColumnFamily	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
,	TokenNameCOMMA
keyspace	TokenNameIdentifier
,	TokenNameCOMMA
column_family	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setConnectionInformation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
getOutputRpcPort	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"PIG_OUTPUT_RPC_PORT or PIG_RPC_PORT environment variable not set"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
getOutputInitialAddress	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"PIG_OUTPUT_INITIAL_ADDRESS or PIG_INITIAL_ADDRESS environment variable not set"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
getOutputPartitioner	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"PIG_OUTPUT_PARTITIONER or PIG_PARTITIONER environment variable not set"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_USE_SECONDARY	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
usePartitionFilter	TokenNameIdentifier
=	TokenNameEQUAL
Boolean	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
getenv	TokenNameIdentifier
(	TokenNameLPAREN
PIG_USE_SECONDARY	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
initSchema	TokenNameIdentifier
(	TokenNameLPAREN
storeSignature	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
OutputFormat	TokenNameIdentifier
getOutputFormat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
FBUtilities	TokenNameIdentifier
.	TokenNameDOT
construct	TokenNameIdentifier
(	TokenNameLPAREN
outputFormatClass	TokenNameIdentifier
,	TokenNameCOMMA
"outputformat"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
checkSchema	TokenNameIdentifier
(	TokenNameLPAREN
ResourceSchema	TokenNameIdentifier
schema	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
prepareToWrite	TokenNameIdentifier
(	TokenNameLPAREN
RecordWriter	TokenNameIdentifier
writer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
writer	TokenNameIdentifier
=	TokenNameEQUAL
writer	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
ByteBuffer	TokenNameIdentifier
objToBB	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
o	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
o	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
(	TokenNameLPAREN
ByteBuffer	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
o	TokenNameIdentifier
instanceof	TokenNameinstanceof
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
ByteBuffer	TokenNameIdentifier
.	TokenNameDOT
wrap	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
DataByteArray	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
o	TokenNameIdentifier
instanceof	TokenNameinstanceof
Integer	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
Int32Type	TokenNameIdentifier
.	TokenNameDOT
instance	TokenNameIdentifier
.	TokenNameDOT
decompose	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
Integer	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
o	TokenNameIdentifier
instanceof	TokenNameinstanceof
Long	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
LongType	TokenNameIdentifier
.	TokenNameDOT
instance	TokenNameIdentifier
.	TokenNameDOT
decompose	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
Long	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
o	TokenNameIdentifier
instanceof	TokenNameinstanceof
Float	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
FloatType	TokenNameIdentifier
.	TokenNameDOT
instance	TokenNameIdentifier
.	TokenNameDOT
decompose	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
Float	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
o	TokenNameIdentifier
instanceof	TokenNameinstanceof
Double	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DoubleType	TokenNameIdentifier
.	TokenNameDOT
instance	TokenNameIdentifier
.	TokenNameDOT
decompose	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
Double	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
o	TokenNameIdentifier
instanceof	TokenNameinstanceof
UUID	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
ByteBuffer	TokenNameIdentifier
.	TokenNameDOT
wrap	TokenNameIdentifier
(	TokenNameLPAREN
UUIDGen	TokenNameIdentifier
.	TokenNameDOT
decompose	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
UUID	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
o	TokenNameIdentifier
instanceof	TokenNameinstanceof
Tuple	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
Object	TokenNameIdentifier
>	TokenNameGREATER
objects	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
Tuple	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getAll	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
>	TokenNameGREATER
serialized	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
ByteBuffer	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
objects	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
totalLength	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Object	TokenNameIdentifier
sub	TokenNameIdentifier
:	TokenNameCOLON
objects	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ByteBuffer	TokenNameIdentifier
buffer	TokenNameIdentifier
=	TokenNameEQUAL
objToBB	TokenNameIdentifier
(	TokenNameLPAREN
sub	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
serialized	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
totalLength	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
.	TokenNameDOT
remaining	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ByteBuffer	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
ByteBuffer	TokenNameIdentifier
.	TokenNameDOT
allocate	TokenNameIdentifier
(	TokenNameLPAREN
totalLength	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
ByteBuffer	TokenNameIdentifier
bb	TokenNameIdentifier
:	TokenNameCOLON
serialized	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
bb	TokenNameIdentifier
.	TokenNameDOT
remaining	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
length	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
length	TokenNameIdentifier
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
bb	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
out	TokenNameIdentifier
.	TokenNameDOT
flip	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
out	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ByteBuffer	TokenNameIdentifier
.	TokenNameDOT
wrap	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
DataByteArray	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
putNext	TokenNameIdentifier
(	TokenNameLPAREN
Tuple	TokenNameIdentifier
t	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
warn	TokenNameIdentifier
(	TokenNameLPAREN
"Empty output skipped, filter empty tuples to suppress this warning"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ByteBuffer	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
objToBB	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
DataType	TokenNameIdentifier
.	TokenNameDOT
TUPLE	TokenNameIdentifier
)	TokenNameRPAREN
writeColumnsFromTuple	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
t	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
DataType	TokenNameIdentifier
.	TokenNameDOT
BAG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"No arguments allowed after bag"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeColumnsFromBag	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
DefaultDataBag	TokenNameIdentifier
)	TokenNameRPAREN
t	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"Second argument in output must be a tuple or bag"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
writeColumnsFromTuple	TokenNameIdentifier
(	TokenNameLPAREN
ByteBuffer	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
Tuple	TokenNameIdentifier
t	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
offset	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
ArrayList	TokenNameIdentifier
<	TokenNameLESS
Mutation	TokenNameIdentifier
>	TokenNameGREATER
mutationList	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
Mutation	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
t	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
DataType	TokenNameIdentifier
.	TokenNameDOT
BAG	TokenNameIdentifier
)	TokenNameRPAREN
writeColumnsFromBag	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
DefaultDataBag	TokenNameIdentifier
)	TokenNameRPAREN
t	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
DataType	TokenNameIdentifier
.	TokenNameDOT
TUPLE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Tuple	TokenNameIdentifier
inner	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Tuple	TokenNameIdentifier
)	TokenNameRPAREN
t	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
inner	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
mutationList	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
mutationFromTuple	TokenNameIdentifier
(	TokenNameLPAREN
inner	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
usePartitionFilter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"Output type was not a bag or a tuple"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
mutationList	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
writeMutations	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
mutationList	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Mutation	TokenNameIdentifier
mutationFromTuple	TokenNameIdentifier
(	TokenNameLPAREN
Tuple	TokenNameIdentifier
t	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
Mutation	TokenNameIdentifier
mutation	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Mutation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
allow_deletes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
mutation	TokenNameIdentifier
.	TokenNameDOT
deletion	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Deletion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
mutation	TokenNameIdentifier
.	TokenNameDOT
deletion	TokenNameIdentifier
.	TokenNameDOT
predicate	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
thrift	TokenNameIdentifier
.	TokenNameDOT
SlicePredicate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
mutation	TokenNameIdentifier
.	TokenNameDOT
deletion	TokenNameIdentifier
.	TokenNameDOT
predicate	TokenNameIdentifier
.	TokenNameDOT
column_names	TokenNameIdentifier
=	TokenNameEQUAL
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
objToBB	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
mutation	TokenNameIdentifier
.	TokenNameDOT
deletion	TokenNameIdentifier
.	TokenNameDOT
setTimestamp	TokenNameIdentifier
(	TokenNameLPAREN
FBUtilities	TokenNameIdentifier
.	TokenNameDOT
timestampMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"null found but deletes are disabled, set "	TokenNameStringLiteral
+	TokenNamePLUS
PIG_ALLOW_DELETES	TokenNameIdentifier
+	TokenNamePLUS
"=true in environment or allow_deletes=true in URL to enable"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
thrift	TokenNameIdentifier
.	TokenNameDOT
Column	TokenNameIdentifier
column	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
thrift	TokenNameIdentifier
.	TokenNameDOT
Column	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
column	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
objToBB	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
column	TokenNameIdentifier
.	TokenNameDOT
setValue	TokenNameIdentifier
(	TokenNameLPAREN
objToBB	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
column	TokenNameIdentifier
.	TokenNameDOT
setTimestamp	TokenNameIdentifier
(	TokenNameLPAREN
FBUtilities	TokenNameIdentifier
.	TokenNameDOT
timestampMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
mutation	TokenNameIdentifier
.	TokenNameDOT
column_or_supercolumn	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ColumnOrSuperColumn	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
mutation	TokenNameIdentifier
.	TokenNameDOT
column_or_supercolumn	TokenNameIdentifier
.	TokenNameDOT
column	TokenNameIdentifier
=	TokenNameEQUAL
column	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
mutation	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
writeColumnsFromBag	TokenNameIdentifier
(	TokenNameLPAREN
ByteBuffer	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
DefaultDataBag	TokenNameIdentifier
bag	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
Mutation	TokenNameIdentifier
>	TokenNameGREATER
mutationList	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
Mutation	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Tuple	TokenNameIdentifier
pair	TokenNameIdentifier
:	TokenNameCOLON
bag	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Mutation	TokenNameIdentifier
mutation	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Mutation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DataType	TokenNameIdentifier
.	TokenNameDOT
findType	TokenNameIdentifier
(	TokenNameLPAREN
pair	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
DataType	TokenNameIdentifier
.	TokenNameDOT
BAG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
SuperColumn	TokenNameIdentifier
sc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SuperColumn	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sc	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
objToBB	TokenNameIdentifier
(	TokenNameLPAREN
pair	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
thrift	TokenNameIdentifier
.	TokenNameDOT
Column	TokenNameIdentifier
>	TokenNameGREATER
columns	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
thrift	TokenNameIdentifier
.	TokenNameDOT
Column	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Tuple	TokenNameIdentifier
subcol	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
DefaultDataBag	TokenNameIdentifier
)	TokenNameRPAREN
pair	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
thrift	TokenNameIdentifier
.	TokenNameDOT
Column	TokenNameIdentifier
column	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
cassandra	TokenNameIdentifier
.	TokenNameDOT
thrift	TokenNameIdentifier
.	TokenNameDOT
Column	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
column	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
objToBB	TokenNameIdentifier
(	TokenNameLPAREN
subcol	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
column	TokenNameIdentifier
.	TokenNameDOT
setValue	TokenNameIdentifier
(	TokenNameLPAREN
objToBB	TokenNameIdentifier
(	TokenNameLPAREN
subcol	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
column	TokenNameIdentifier
.	TokenNameDOT
setTimestamp	TokenNameIdentifier
(	TokenNameLPAREN
FBUtilities	TokenNameIdentifier
.	TokenNameDOT
timestampMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
columns	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
column	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
columns	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
allow_deletes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
mutation	TokenNameIdentifier
.	TokenNameDOT
deletion	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Deletion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
mutation	TokenNameIdentifier
.	TokenNameDOT
deletion	TokenNameIdentifier
.	TokenNameDOT
super_column	TokenNameIdentifier
=	TokenNameEQUAL
objToBB	TokenNameIdentifier
(	TokenNameLPAREN
pair	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
mutation	TokenNameIdentifier
.	TokenNameDOT
deletion	TokenNameIdentifier
.	TokenNameDOT
setTimestamp	TokenNameIdentifier
(	TokenNameLPAREN
FBUtilities	TokenNameIdentifier
.	TokenNameDOT
timestampMicros	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"SuperColumn deletion attempted with empty bag, but deletes are disabled, set "	TokenNameStringLiteral
+	TokenNamePLUS
PIG_ALLOW_DELETES	TokenNameIdentifier
+	TokenNamePLUS
"=true in environment or allow_deletes=true in URL to enable"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sc	TokenNameIdentifier
.	TokenNameDOT
columns	TokenNameIdentifier
=	TokenNameEQUAL
columns	TokenNameIdentifier
;	TokenNameSEMICOLON
mutation	TokenNameIdentifier
.	TokenNameDOT
column_or_supercolumn	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ColumnOrSuperColumn	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
mutation	TokenNameIdentifier
.	TokenNameDOT
column_or_supercolumn	TokenNameIdentifier
.	TokenNameDOT
super_column	TokenNameIdentifier
=	TokenNameEQUAL
sc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
mutation	TokenNameIdentifier
=	TokenNameEQUAL
mutationFromTuple	TokenNameIdentifier
(	TokenNameLPAREN
pair	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
mutationList	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
mutation	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
mutationList	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
writeMutations	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
mutationList	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
mutationList	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
mutationList	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
writeMutations	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
mutationList	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
writeMutations	TokenNameIdentifier
(	TokenNameLPAREN
ByteBuffer	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
Mutation	TokenNameIdentifier
>	TokenNameGREATER
mutations	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
writer	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
mutations	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
cleanupOnFailure	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
failure	TokenNameIdentifier
,	TokenNameCOMMA
Job	TokenNameIdentifier
job	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
initSchema	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
signature	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Properties	TokenNameIdentifier
properties	TokenNameIdentifier
=	TokenNameEQUAL
UDFContext	TokenNameIdentifier
.	TokenNameDOT
getUDFContext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getUDFProperties	TokenNameIdentifier
(	TokenNameLPAREN
CassandraStorage	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
properties	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
signature	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
Cassandra	TokenNameIdentifier
.	TokenNameDOT
Client	TokenNameIdentifier
client	TokenNameIdentifier
=	TokenNameEQUAL
ConfigHelper	TokenNameIdentifier
.	TokenNameDOT
getClientFromInputAddressList	TokenNameIdentifier
(	TokenNameLPAREN
conf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
set_keyspace	TokenNameIdentifier
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
username	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
password	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
credentials	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
credentials	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
IAuthenticator	TokenNameIdentifier
.	TokenNameDOT
USERNAME_KEY	TokenNameIdentifier
,	TokenNameCOMMA
username	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
credentials	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
IAuthenticator	TokenNameIdentifier
.	TokenNameDOT
PASSWORD_KEY	TokenNameIdentifier
,	TokenNameCOMMA
password	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
client	TokenNameIdentifier
.	TokenNameDOT
login	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
AuthenticationRequest	TokenNameIdentifier
(	TokenNameLPAREN
credentials	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
AuthenticationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
"Authentication exception: invalid username and/or password"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
AuthorizationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
AssertionError	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
CfDef	TokenNameIdentifier
cfDef	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
KsDef	TokenNameIdentifier
ksDef	TokenNameIdentifier
=	TokenNameEQUAL
client	TokenNameIdentifier
.	TokenNameDOT
describe_keyspace	TokenNameIdentifier
(	TokenNameLPAREN
keyspace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
CfDef	TokenNameIdentifier
>	TokenNameGREATER
defs	TokenNameIdentifier
=	TokenNameEQUAL
ksDef	TokenNameIdentifier
.	TokenNameDOT
getCf_defs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
CfDef	TokenNameIdentifier
def	TokenNameIdentifier
:	TokenNameCOLON
defs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
column_family	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
def	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
cfDef	TokenNameIdentifier
=	TokenNameEQUAL
def	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
properties	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
signature	TokenNameIdentifier
,	TokenNameCOMMA
cfdefToString	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
"Column family '%s' not found in keyspace '%s'"	TokenNameStringLiteral
,	TokenNameCOMMA
column_family	TokenNameIdentifier
,	TokenNameCOMMA
keyspace	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
TException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InvalidRequestException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NotFoundException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
String	TokenNameIdentifier
cfdefToString	TokenNameIdentifier
(	TokenNameLPAREN
CfDef	TokenNameIdentifier
cfDef	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
cfDef	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
TSerializer	TokenNameIdentifier
serializer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TSerializer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TBinaryProtocol	TokenNameIdentifier
.	TokenNameDOT
Factory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
Hex	TokenNameIdentifier
.	TokenNameDOT
bytesToHex	TokenNameIdentifier
(	TokenNameLPAREN
serializer	TokenNameIdentifier
.	TokenNameDOT
serialize	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
TException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
CfDef	TokenNameIdentifier
cfdefFromString	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
st	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
st	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
TDeserializer	TokenNameIdentifier
deserializer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TDeserializer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TBinaryProtocol	TokenNameIdentifier
.	TokenNameDOT
Factory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
CfDef	TokenNameIdentifier
cfDef	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CfDef	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
deserializer	TokenNameIdentifier
.	TokenNameDOT
deserialize	TokenNameIdentifier
(	TokenNameLPAREN
cfDef	TokenNameIdentifier
,	TokenNameCOMMA
Hex	TokenNameIdentifier
.	TokenNameDOT
hexToBytes	TokenNameIdentifier
(	TokenNameLPAREN
st	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
TException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
cfDef	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
String	TokenNameIdentifier
indexExpressionsToString	TokenNameIdentifier
(	TokenNameLPAREN
List	TokenNameIdentifier
<	TokenNameLESS
IndexExpression	TokenNameIdentifier
>	TokenNameGREATER
indexExpressions	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
indexExpressions	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
IndexClause	TokenNameIdentifier
indexClause	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexClause	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
indexClause	TokenNameIdentifier
.	TokenNameDOT
setExpressions	TokenNameIdentifier
(	TokenNameLPAREN
indexExpressions	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
indexClause	TokenNameIdentifier
.	TokenNameDOT
setStart_key	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
.	TokenNameDOT
getBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TSerializer	TokenNameIdentifier
serializer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TSerializer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TBinaryProtocol	TokenNameIdentifier
.	TokenNameDOT
Factory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
Hex	TokenNameIdentifier
.	TokenNameDOT
bytesToHex	TokenNameIdentifier
(	TokenNameLPAREN
serializer	TokenNameIdentifier
.	TokenNameDOT
serialize	TokenNameIdentifier
(	TokenNameLPAREN
indexClause	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
TException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
List	TokenNameIdentifier
<	TokenNameLESS
IndexExpression	TokenNameIdentifier
>	TokenNameGREATER
indexExpressionsFromString	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
ie	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
ie	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
TDeserializer	TokenNameIdentifier
deserializer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TDeserializer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TBinaryProtocol	TokenNameIdentifier
.	TokenNameDOT
Factory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexClause	TokenNameIdentifier
indexClause	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexClause	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
deserializer	TokenNameIdentifier
.	TokenNameDOT
deserialize	TokenNameIdentifier
(	TokenNameLPAREN
indexClause	TokenNameIdentifier
,	TokenNameCOMMA
Hex	TokenNameIdentifier
.	TokenNameDOT
hexToBytes	TokenNameIdentifier
(	TokenNameLPAREN
ie	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
TException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
indexClause	TokenNameIdentifier
.	TokenNameDOT
getExpressions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
