package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
transcoder	TokenNameIdentifier
.	TokenNameDOT
wmf	TokenNameIdentifier
.	TokenNameDOT
tosvg	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Paint	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Color	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Graphics2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
TexturePaint	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
BufferedImage	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
transcoder	TokenNameIdentifier
.	TokenNameDOT
wmf	TokenNameIdentifier
.	TokenNameDOT
WMFConstants	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TextureFactory	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
TextureFactory	TokenNameIdentifier
fac	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
Map	TokenNameIdentifier
textures	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
SIZE	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
float	TokenNamefloat
scale	TokenNameIdentifier
=	TokenNameEQUAL
1.0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
TextureFactory	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
scale	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
TextureFactory	TokenNameIdentifier
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fac	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
fac	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TextureFactory	TokenNameIdentifier
(	TokenNameLPAREN
1.0f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
fac	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
TextureFactory	TokenNameIdentifier
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
scale	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fac	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
fac	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TextureFactory	TokenNameIdentifier
(	TokenNameLPAREN
scale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
fac	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
textures	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Paint	TokenNameIdentifier
getTexture	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
textureId	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Integer	TokenNameIdentifier
_itexture	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
textureId	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
textures	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
_itexture	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Paint	TokenNameIdentifier
paint	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Paint	TokenNameIdentifier
)	TokenNameRPAREN
(	TokenNameLPAREN
textures	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
_itexture	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
paint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
Paint	TokenNameIdentifier
paint	TokenNameIdentifier
=	TokenNameEQUAL
createTexture	TokenNameIdentifier
(	TokenNameLPAREN
textureId	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
paint	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
textures	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
_itexture	TokenNameIdentifier
,	TokenNameCOMMA
paint	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
paint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
Paint	TokenNameIdentifier
getTexture	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
textureId	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
foreground	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ColoredTexture	TokenNameIdentifier
_ctexture	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ColoredTexture	TokenNameIdentifier
(	TokenNameLPAREN
textureId	TokenNameIdentifier
,	TokenNameCOMMA
foreground	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
textures	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
_ctexture	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Paint	TokenNameIdentifier
paint	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Paint	TokenNameIdentifier
)	TokenNameRPAREN
(	TokenNameLPAREN
textures	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
_ctexture	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
paint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
Paint	TokenNameIdentifier
paint	TokenNameIdentifier
=	TokenNameEQUAL
createTexture	TokenNameIdentifier
(	TokenNameLPAREN
textureId	TokenNameIdentifier
,	TokenNameCOMMA
foreground	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
paint	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
textures	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
_ctexture	TokenNameIdentifier
,	TokenNameCOMMA
paint	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
paint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
Paint	TokenNameIdentifier
getTexture	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
textureId	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
foreground	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
background	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ColoredTexture	TokenNameIdentifier
_ctexture	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ColoredTexture	TokenNameIdentifier
(	TokenNameLPAREN
textureId	TokenNameIdentifier
,	TokenNameCOMMA
foreground	TokenNameIdentifier
,	TokenNameCOMMA
background	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
textures	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
_ctexture	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Paint	TokenNameIdentifier
paint	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Paint	TokenNameIdentifier
)	TokenNameRPAREN
(	TokenNameLPAREN
textures	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
_ctexture	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
paint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
Paint	TokenNameIdentifier
paint	TokenNameIdentifier
=	TokenNameEQUAL
createTexture	TokenNameIdentifier
(	TokenNameLPAREN
textureId	TokenNameIdentifier
,	TokenNameCOMMA
foreground	TokenNameIdentifier
,	TokenNameCOMMA
background	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
paint	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
textures	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
_ctexture	TokenNameIdentifier
,	TokenNameCOMMA
paint	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
paint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
Paint	TokenNameIdentifier
createTexture	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
textureId	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
foreground	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
background	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
BufferedImage	TokenNameIdentifier
img	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BufferedImage	TokenNameIdentifier
(	TokenNameLPAREN
SIZE	TokenNameIdentifier
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
,	TokenNameCOMMA
BufferedImage	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT_ARGB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Graphics2D	TokenNameIdentifier
g2d	TokenNameIdentifier
=	TokenNameEQUAL
img	TokenNameIdentifier
.	TokenNameDOT
createGraphics	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Rectangle2D	TokenNameIdentifier
rec	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Rectangle2D	TokenNameIdentifier
.	TokenNameDOT
Float	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Paint	TokenNameIdentifier
paint	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
boolean	TokenNameboolean
ok	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
background	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
g2d	TokenNameIdentifier
.	TokenNameDOT
setColor	TokenNameIdentifier
(	TokenNameLPAREN
background	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
g2d	TokenNameIdentifier
.	TokenNameDOT
fillRect	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
foreground	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
g2d	TokenNameIdentifier
.	TokenNameDOT
setColor	TokenNameIdentifier
(	TokenNameLPAREN
Color	TokenNameIdentifier
.	TokenNameDOT
black	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
g2d	TokenNameIdentifier
.	TokenNameDOT
setColor	TokenNameIdentifier
(	TokenNameLPAREN
foreground	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
textureId	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
WMFConstants	TokenNameIdentifier
.	TokenNameDOT
HS_VERTICAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
g2d	TokenNameIdentifier
.	TokenNameDOT
drawLine	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ok	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
textureId	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
WMFConstants	TokenNameIdentifier
.	TokenNameDOT
HS_HORIZONTAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
g2d	TokenNameIdentifier
.	TokenNameDOT
drawLine	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
,	TokenNameCOMMA
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ok	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
textureId	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
WMFConstants	TokenNameIdentifier
.	TokenNameDOT
HS_BDIAGONAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
g2d	TokenNameIdentifier
.	TokenNameDOT
drawLine	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ok	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
textureId	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
WMFConstants	TokenNameIdentifier
.	TokenNameDOT
HS_FDIAGONAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
g2d	TokenNameIdentifier
.	TokenNameDOT
drawLine	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
-	TokenNameMINUS
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ok	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
textureId	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
WMFConstants	TokenNameIdentifier
.	TokenNameDOT
HS_DIAGCROSS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
g2d	TokenNameIdentifier
.	TokenNameDOT
drawLine	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
g2d	TokenNameIdentifier
.	TokenNameDOT
drawLine	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
-	TokenNameMINUS
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ok	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
textureId	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
WMFConstants	TokenNameIdentifier
.	TokenNameDOT
HS_CROSS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
g2d	TokenNameIdentifier
.	TokenNameDOT
drawLine	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
g2d	TokenNameIdentifier
.	TokenNameDOT
drawLine	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
SIZE	TokenNameIdentifier
,	TokenNameCOMMA
i	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ok	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
img	TokenNameIdentifier
.	TokenNameDOT
flush	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ok	TokenNameIdentifier
)	TokenNameRPAREN
paint	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TexturePaint	TokenNameIdentifier
(	TokenNameLPAREN
img	TokenNameIdentifier
,	TokenNameCOMMA
rec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
paint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
class	TokenNameclass
ColoredTexture	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
textureId	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Color	TokenNameIdentifier
foreground	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Color	TokenNameIdentifier
background	TokenNameIdentifier
;	TokenNameSEMICOLON
ColoredTexture	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
textureId	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
foreground	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
background	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
textureId	TokenNameIdentifier
=	TokenNameEQUAL
textureId	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
foreground	TokenNameIdentifier
=	TokenNameEQUAL
foreground	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
background	TokenNameIdentifier
=	TokenNameEQUAL
background	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
