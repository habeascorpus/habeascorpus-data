package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
anim	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
anim	TokenNameIdentifier
.	TokenNameDOT
timing	TokenNameIdentifier
.	TokenNameDOT
TimedElement	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
anim	TokenNameIdentifier
.	TokenNameDOT
AnimatableElement	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Cubic	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SMILConstants	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
abstract	TokenNameabstract
class	TokenNameclass
InterpolatingAnimation	TokenNameIdentifier
extends	TokenNameextends
AbstractAnimation	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
int	TokenNameint
calcMode	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
keyTimes	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
keySplines	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Cubic	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
keySplineCubics	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
boolean	TokenNameboolean
additive	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
boolean	TokenNameboolean
cumulative	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
InterpolatingAnimation	TokenNameIdentifier
(	TokenNameLPAREN
TimedElement	TokenNameIdentifier
timedElement	TokenNameIdentifier
,	TokenNameCOMMA
AnimatableElement	TokenNameIdentifier
animatableElement	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
calcMode	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
keyTimes	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
keySplines	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
additive	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
cumulative	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
timedElement	TokenNameIdentifier
,	TokenNameCOMMA
animatableElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
calcMode	TokenNameIdentifier
=	TokenNameEQUAL
calcMode	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
keyTimes	TokenNameIdentifier
=	TokenNameEQUAL
keyTimes	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
keySplines	TokenNameIdentifier
=	TokenNameEQUAL
keySplines	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
additive	TokenNameIdentifier
=	TokenNameEQUAL
additive	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
cumulative	TokenNameIdentifier
=	TokenNameEQUAL
cumulative	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
calcMode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CALC_MODE_SPLINE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
keySplines	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
keySplines	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
%	TokenNameREMAINDER
4	TokenNameIntegerLiteral
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
timedElement	TokenNameIdentifier
.	TokenNameDOT
createException	TokenNameIdentifier
(	TokenNameLPAREN
"attribute.malformed"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
null	TokenNamenull
,	TokenNameCOMMA
SMILConstants	TokenNameIdentifier
.	TokenNameDOT
SMIL_KEY_SPLINES_ATTRIBUTE	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
keySplineCubics	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Cubic	TokenNameIdentifier
[	TokenNameLBRACKET
keySplines	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
/	TokenNameDIVIDE
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
keySplines	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
/	TokenNameDIVIDE
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
keySplineCubics	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
Cubic	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
keySplines	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
*	TokenNameMULTIPLY
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
keySplines	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
*	TokenNameMULTIPLY
4	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
keySplines	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
*	TokenNameMULTIPLY
4	TokenNameIntegerLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
keySplines	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
*	TokenNameMULTIPLY
4	TokenNameIntegerLiteral
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
keyTimes	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
invalidKeyTimes	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
calcMode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CALC_MODE_LINEAR	TokenNameIdentifier
||	TokenNameOR_OR
calcMode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CALC_MODE_SPLINE	TokenNameIdentifier
||	TokenNameOR_OR
calcMode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CALC_MODE_PACED	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
keyTimes	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
||	TokenNameOR_OR
keyTimes	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
keyTimes	TokenNameIdentifier
[	TokenNameLBRACKET
keyTimes	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
calcMode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CALC_MODE_DISCRETE	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
keyTimes	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
keyTimes	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
invalidKeyTimes	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
invalidKeyTimes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
keyTimes	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
keyTimes	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
keyTimes	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>	TokenNameGREATER
1	TokenNameIntegerLiteral
||	TokenNameOR_OR
keyTimes	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
<	TokenNameLESS
keyTimes	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
invalidKeyTimes	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
invalidKeyTimes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
timedElement	TokenNameIdentifier
.	TokenNameDOT
createException	TokenNameIdentifier
(	TokenNameLPAREN
"attribute.malformed"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
null	TokenNamenull
,	TokenNameCOMMA
SMILConstants	TokenNameIdentifier
.	TokenNameDOT
SMIL_KEY_TIMES_ATTRIBUTE	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
willReplace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
!	TokenNameNOT
additive	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
sampledLastValue	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
repeatIteration	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sampledAtUnitTime	TokenNameIdentifier
(	TokenNameLPAREN
1f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
repeatIteration	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
sampledAt	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
simpleTime	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
simpleDur	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
repeatIteration	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
float	TokenNamefloat
unitTime	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
simpleDur	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TimedElement	TokenNameIdentifier
.	TokenNameDOT
INDEFINITE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
unitTime	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
unitTime	TokenNameIdentifier
=	TokenNameEQUAL
simpleTime	TokenNameIdentifier
/	TokenNameDIVIDE
simpleDur	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sampledAtUnitTime	TokenNameIdentifier
(	TokenNameLPAREN
unitTime	TokenNameIdentifier
,	TokenNameCOMMA
repeatIteration	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
abstract	TokenNameabstract
void	TokenNamevoid
sampledAtUnitTime	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
unitTime	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
repeatIteration	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
