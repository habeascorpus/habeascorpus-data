package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Color	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
PointLight	TokenNameIdentifier
extends	TokenNameextends
AbstractLight	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
double	TokenNamedouble
lightX	TokenNameIdentifier
,	TokenNameCOMMA
lightY	TokenNameIdentifier
,	TokenNameCOMMA
lightZ	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
double	TokenNamedouble
getLightX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
lightX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getLightY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
lightY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getLightZ	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
lightZ	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
PointLight	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
lightX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
lightY	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
lightZ	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
lightColor	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
lightColor	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
lightX	TokenNameIdentifier
=	TokenNameEQUAL
lightX	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
lightY	TokenNameIdentifier
=	TokenNameEQUAL
lightY	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
lightZ	TokenNameIdentifier
=	TokenNameEQUAL
lightZ	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isConstant	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
getLight	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
double	TokenNamedouble
x	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
y	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
z	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
L	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
L0	TokenNameIdentifier
=	TokenNameEQUAL
lightX	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
L1	TokenNameIdentifier
=	TokenNameEQUAL
lightY	TokenNameIdentifier
-	TokenNameMINUS
y	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
L2	TokenNameIdentifier
=	TokenNameEQUAL
lightZ	TokenNameIdentifier
-	TokenNameMINUS
z	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
norm	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
L0	TokenNameIdentifier
*	TokenNameMULTIPLY
L0	TokenNameIdentifier
+	TokenNamePLUS
L1	TokenNameIdentifier
*	TokenNameMULTIPLY
L1	TokenNameIdentifier
+	TokenNamePLUS
L2	TokenNameIdentifier
*	TokenNameMULTIPLY
L2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
norm	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
double	TokenNamedouble
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
norm	TokenNameIdentifier
;	TokenNameSEMICOLON
L0	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
L1	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
L2	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
L	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
L0	TokenNameIdentifier
;	TokenNameSEMICOLON
L	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
L1	TokenNameIdentifier
;	TokenNameSEMICOLON
L	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
L2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
