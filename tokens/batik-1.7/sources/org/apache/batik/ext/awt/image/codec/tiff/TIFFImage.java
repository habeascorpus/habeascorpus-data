package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
tiff	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Rectangle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Transparency	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
color	TokenNameIdentifier
.	TokenNameDOT
ColorSpace	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
ColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
ComponentColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBuffer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBufferByte	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBufferInt	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBufferShort	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBufferUShort	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
IndexColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
MultiPixelPackedSampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
PixelInterleavedSampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
Raster	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
SampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
WritableRaster	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
ByteArrayInputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
zip	TokenNameIdentifier
.	TokenNameDOT
DataFormatException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
zip	TokenNameIdentifier
.	TokenNameDOT
Inflater	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SeekableStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
rendered	TokenNameIdentifier
.	TokenNameDOT
AbstractRed	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
rendered	TokenNameIdentifier
.	TokenNameDOT
CachableRed	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGCodec	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGDecodeParam	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGImageDecoder	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TIFFImage	TokenNameIdentifier
extends	TokenNameextends
AbstractRed	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_NONE	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_FAX_G3_1D	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_FAX_G3_2D	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_FAX_G4_2D	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_LZW	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_JPEG_OLD	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_JPEG_TTN2	TokenNameIdentifier
=	TokenNameEQUAL
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_PACKBITS	TokenNameIdentifier
=	TokenNameEQUAL
32773	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_DEFLATE	TokenNameIdentifier
=	TokenNameEQUAL
32946	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TYPE_UNSUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TYPE_BILEVEL	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TYPE_GRAY_4BIT	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TYPE_GRAY	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TYPE_GRAY_ALPHA	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TYPE_PALETTE	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TYPE_RGB	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TYPE_RGB_ALPHA	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TYPE_YCBCR_SUB	TokenNameIdentifier
=	TokenNameEQUAL
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TYPE_GENERIC	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_JPEG_TABLES	TokenNameIdentifier
=	TokenNameEQUAL
347	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_YCBCR_SUBSAMPLING	TokenNameIdentifier
=	TokenNameEQUAL
530	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
SeekableStream	TokenNameIdentifier
stream	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
tileSize	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
tilesX	TokenNameIdentifier
,	TokenNameCOMMA
tilesY	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tileOffsets	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tileByteCounts	TokenNameIdentifier
;	TokenNameSEMICOLON
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
colormap	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
sampleSize	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
compression	TokenNameIdentifier
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
palette	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
numBands	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
chromaSubH	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
chromaSubV	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
tiffT4Options	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
tiffT6Options	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
fillOrder	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
predictor	TokenNameIdentifier
;	TokenNameSEMICOLON
JPEGDecodeParam	TokenNameIdentifier
decodeParam	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
boolean	TokenNameboolean
colorConvertJPEG	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
Inflater	TokenNameIdentifier
inflater	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isBigEndian	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
imageType	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isWhiteZero	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
dataType	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
decodePaletteAsShorts	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
tiled	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
TIFFFaxDecoder	TokenNameIdentifier
decoder	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
TIFFLZWDecoder	TokenNameIdentifier
lzwDecoder	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Raster	TokenNameIdentifier
decodeJPEG	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
data	TokenNameIdentifier
,	TokenNameCOMMA
JPEGDecodeParam	TokenNameIdentifier
decodeParam	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
colorConvert	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minX	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ByteArrayInputStream	TokenNameIdentifier
jpegStream	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ByteArrayInputStream	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
JPEGImageDecoder	TokenNameIdentifier
decoder	TokenNameIdentifier
=	TokenNameEQUAL
decodeParam	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
JPEGCodec	TokenNameIdentifier
.	TokenNameDOT
createJPEGDecoder	TokenNameIdentifier
(	TokenNameLPAREN
jpegStream	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
JPEGCodec	TokenNameIdentifier
.	TokenNameDOT
createJPEGDecoder	TokenNameIdentifier
(	TokenNameLPAREN
jpegStream	TokenNameIdentifier
,	TokenNameCOMMA
decodeParam	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Raster	TokenNameIdentifier
jpegRaster	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
jpegRaster	TokenNameIdentifier
=	TokenNameEQUAL
colorConvert	TokenNameIdentifier
?	TokenNameQUESTION
decoder	TokenNameIdentifier
.	TokenNameDOT
decodeAsBufferedImage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getWritableTile	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
:	TokenNameCOLON
decoder	TokenNameIdentifier
.	TokenNameDOT
decodeAsRaster	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
jpegRaster	TokenNameIdentifier
.	TokenNameDOT
createTranslatedChild	TokenNameIdentifier
(	TokenNameLPAREN
minX	TokenNameIdentifier
,	TokenNameCOMMA
minY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
inflate	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
deflated	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
inflated	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
inflater	TokenNameIdentifier
.	TokenNameDOT
setInput	TokenNameIdentifier
(	TokenNameLPAREN
deflated	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
inflater	TokenNameIdentifier
.	TokenNameDOT
inflate	TokenNameIdentifier
(	TokenNameLPAREN
inflated	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
DataFormatException	TokenNameIdentifier
dfe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage17"	TokenNameStringLiteral
+	TokenNamePLUS
": "	TokenNameStringLiteral
+	TokenNamePLUS
dfe	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
inflater	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
SampleModel	TokenNameIdentifier
createPixelInterleavedSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
dataType	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
tileHeight	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
bands	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bandOffsets	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
bands	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
bands	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
bandOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
PixelInterleavedSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
dataType	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
tileHeight	TokenNameIdentifier
,	TokenNameCOMMA
bands	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
*	TokenNameMULTIPLY
bands	TokenNameIdentifier
,	TokenNameCOMMA
bandOffsets	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getFieldAsLongs	TokenNameIdentifier
(	TokenNameLPAREN
TIFFField	TokenNameIdentifier
field	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
value	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
field	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SHORT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
charValue	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsChars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
value	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
charValue	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
charValue	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
value	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
charValue	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
field	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_LONG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
value	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsLongs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
TIFFImage	TokenNameIdentifier
(	TokenNameLPAREN
SeekableStream	TokenNameIdentifier
stream	TokenNameIdentifier
,	TokenNameCOMMA
TIFFDecodeParam	TokenNameIdentifier
param	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
directory	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
stream	TokenNameIdentifier
=	TokenNameEQUAL
stream	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
param	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
param	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TIFFDecodeParam	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
decodePaletteAsShorts	TokenNameIdentifier
=	TokenNameEQUAL
param	TokenNameIdentifier
.	TokenNameDOT
getDecodePaletteAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TIFFDirectory	TokenNameIdentifier
dir	TokenNameIdentifier
=	TokenNameEQUAL
param	TokenNameIdentifier
.	TokenNameDOT
getIFDOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
new	TokenNamenew
TIFFDirectory	TokenNameIdentifier
(	TokenNameLPAREN
stream	TokenNameIdentifier
,	TokenNameCOMMA
directory	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
new	TokenNamenew
TIFFDirectory	TokenNameIdentifier
(	TokenNameLPAREN
stream	TokenNameIdentifier
,	TokenNameCOMMA
param	TokenNameIdentifier
.	TokenNameDOT
getIFDOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
longValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
directory	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TIFFField	TokenNameIdentifier
sfield	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_SAMPLES_PER_PIXEL	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
samplesPerPixel	TokenNameIdentifier
=	TokenNameEQUAL
sfield	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
sfield	TokenNameIdentifier
.	TokenNameDOT
getAsLong	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TIFFField	TokenNameIdentifier
planarConfigurationField	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_PLANAR_CONFIGURATION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
planarConfiguration	TokenNameIdentifier
=	TokenNameEQUAL
planarConfigurationField	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
:	TokenNameCOLON
planarConfigurationField	TokenNameIdentifier
.	TokenNameDOT
getAsChars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
planarConfiguration	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
samplesPerPixel	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
TIFFField	TokenNameIdentifier
bitsField	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_BITS_PER_SAMPLE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bitsPerSample	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
bitsField	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
bitsPerSample	TokenNameIdentifier
=	TokenNameEQUAL
bitsField	TokenNameIdentifier
.	TokenNameDOT
getAsChars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
bitsPerSample	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
bitsPerSample	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
bitsPerSample	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
bitsPerSample	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
sampleSize	TokenNameIdentifier
=	TokenNameEQUAL
bitsPerSample	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
TIFFField	TokenNameIdentifier
sampleFormatField	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_SAMPLE_FORMAT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sampleFormat	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sampleFormatField	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sampleFormat	TokenNameIdentifier
=	TokenNameEQUAL
sampleFormatField	TokenNameIdentifier
.	TokenNameDOT
getAsChars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
l	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
l	TokenNameIdentifier
<	TokenNameLESS
sampleFormat	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
l	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sampleFormat	TokenNameIdentifier
[	TokenNameLBRACKET
l	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
sampleFormat	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sampleFormat	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
isValidDataFormat	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
case	TokenNamecase
8	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleFormat	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
dataType	TokenNameIdentifier
=	TokenNameEQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_BYTE	TokenNameIdentifier
;	TokenNameSEMICOLON
isValidDataFormat	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
16	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleFormat	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
dataType	TokenNameIdentifier
=	TokenNameEQUAL
sampleFormat	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
?	TokenNameQUESTION
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_SHORT	TokenNameIdentifier
:	TokenNameCOLON
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_USHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
isValidDataFormat	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
32	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleFormat	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
isValidDataFormat	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
else	TokenNameelse
{	TokenNameLBRACE
dataType	TokenNameIdentifier
=	TokenNameEQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
;	TokenNameSEMICOLON
isValidDataFormat	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isValidDataFormat	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage3"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
TIFFField	TokenNameIdentifier
compField	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_COMPRESSION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
compression	TokenNameIdentifier
=	TokenNameEQUAL
compField	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
COMP_NONE	TokenNameIdentifier
:	TokenNameCOLON
compField	TokenNameIdentifier
.	TokenNameDOT
getAsInt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
photometricType	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
getFieldAsLong	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_PHOTOMETRIC_INTERPRETATION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_UNSUPPORTED	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
photometricType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
0	TokenNameIntegerLiteral
:	TokenNameCOLON
isWhiteZero	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_BILEVEL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
&&	TokenNameAND_AND
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_GRAY_4BIT	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
%	TokenNameREMAINDER
8	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_GRAY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_GRAY_ALPHA	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_GENERIC	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
%	TokenNameREMAINDER
8	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_RGB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_RGB_ALPHA	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_GENERIC	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
||	TokenNameOR_OR
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
8	TokenNameIntegerLiteral
||	TokenNameOR_OR
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_PALETTE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_BILEVEL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
6	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
&&	TokenNameAND_AND
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
8	TokenNameIntegerLiteral
&&	TokenNameAND_AND
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
colorConvertJPEG	TokenNameIdentifier
=	TokenNameEQUAL
param	TokenNameIdentifier
.	TokenNameDOT
getJPEGDecompressYCbCrToRGB	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
imageType	TokenNameIdentifier
=	TokenNameEQUAL
colorConvertJPEG	TokenNameIdentifier
?	TokenNameQUESTION
TYPE_RGB	TokenNameIdentifier
:	TokenNameCOLON
TYPE_GENERIC	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
TIFFField	TokenNameIdentifier
chromaField	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFF_YCBCR_SUBSAMPLING	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
chromaField	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
chromaSubH	TokenNameIdentifier
=	TokenNameEQUAL
chromaField	TokenNameIdentifier
.	TokenNameDOT
getAsInt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
chromaSubV	TokenNameIdentifier
=	TokenNameEQUAL
chromaField	TokenNameIdentifier
.	TokenNameDOT
getAsInt	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
chromaSubH	TokenNameIdentifier
=	TokenNameEQUAL
chromaSubV	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
chromaSubH	TokenNameIdentifier
*	TokenNameMULTIPLY
chromaSubV	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_GENERIC	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
8	TokenNameIntegerLiteral
&&	TokenNameAND_AND
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_YCBCR_SUB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
%	TokenNameREMAINDER
8	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TYPE_GENERIC	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPE_UNSUPPORTED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage4"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Rectangle	TokenNameIdentifier
bounds	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Rectangle	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
getFieldAsLong	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_IMAGE_WIDTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
getFieldAsLong	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_IMAGE_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
numBands	TokenNameIdentifier
=	TokenNameEQUAL
samplesPerPixel	TokenNameIdentifier
;	TokenNameSEMICOLON
TIFFField	TokenNameIdentifier
efield	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_EXTRA_SAMPLES	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
extraSamples	TokenNameIdentifier
=	TokenNameEQUAL
efield	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
efield	TokenNameIdentifier
.	TokenNameDOT
getAsLong	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
tileHeight	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_OFFSETS	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
tiled	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
tileWidth	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
getFieldAsLong	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_WIDTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileHeight	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
getFieldAsLong	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileOffsets	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_OFFSETS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAsLongs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
=	TokenNameEQUAL
getFieldAsLongs	TokenNameIdentifier
(	TokenNameLPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_BYTE_COUNTS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tiled	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
tileWidth	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_WIDTH	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
getFieldAsLong	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_WIDTH	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
bounds	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
;	TokenNameSEMICOLON
TIFFField	TokenNameIdentifier
field	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_ROWS_PER_STRIP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
field	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
tileHeight	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
getFieldAsLong	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
bounds	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
long	TokenNamelong
l	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsLong	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
infinity	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
infinity	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
infinity	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
l	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
infinity	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tileHeight	TokenNameIdentifier
=	TokenNameEQUAL
bounds	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tileHeight	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
l	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
TIFFField	TokenNameIdentifier
tileOffsetsField	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_STRIP_OFFSETS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tileOffsetsField	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tileOffsets	TokenNameIdentifier
=	TokenNameEQUAL
getFieldAsLongs	TokenNameIdentifier
(	TokenNameLPAREN
tileOffsetsField	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
TIFFField	TokenNameIdentifier
tileByteCountsField	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_STRIP_BYTE_COUNTS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tileByteCountsField	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage6"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tileByteCounts	TokenNameIdentifier
=	TokenNameEQUAL
getFieldAsLongs	TokenNameIdentifier
(	TokenNameLPAREN
tileByteCountsField	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
tilesX	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bounds	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
+	TokenNamePLUS
tileWidth	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
tileWidth	TokenNameIdentifier
;	TokenNameSEMICOLON
tilesY	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bounds	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
+	TokenNamePLUS
tileHeight	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
tileHeight	TokenNameIdentifier
;	TokenNameSEMICOLON
tileSize	TokenNameIdentifier
=	TokenNameEQUAL
tileWidth	TokenNameIdentifier
*	TokenNameMULTIPLY
tileHeight	TokenNameIdentifier
*	TokenNameMULTIPLY
numBands	TokenNameIdentifier
;	TokenNameSEMICOLON
isBigEndian	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
isBigEndian	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TIFFField	TokenNameIdentifier
fillOrderField	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_FILL_ORDER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fillOrderField	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fillOrder	TokenNameIdentifier
=	TokenNameEQUAL
fillOrderField	TokenNameIdentifier
.	TokenNameDOT
getAsInt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fillOrder	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
compression	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
COMP_NONE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
COMP_PACKBITS	TokenNameIdentifier
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
COMP_DEFLATE	TokenNameIdentifier
:	TokenNameCOLON
inflater	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Inflater	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
COMP_FAX_G3_1D	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
COMP_FAX_G3_2D	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
COMP_FAX_G4_2D	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage7"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
TIFFField	TokenNameIdentifier
t4OptionsField	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_T4_OPTIONS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
t4OptionsField	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
tiffT4Options	TokenNameIdentifier
=	TokenNameEQUAL
t4OptionsField	TokenNameIdentifier
.	TokenNameDOT
getAsLong	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tiffT4Options	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
TIFFField	TokenNameIdentifier
t6OptionsField	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_T6_OPTIONS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
t6OptionsField	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
tiffT6Options	TokenNameIdentifier
=	TokenNameEQUAL
t6OptionsField	TokenNameIdentifier
.	TokenNameDOT
getAsLong	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tiffT6Options	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
decoder	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TIFFFaxDecoder	TokenNameIdentifier
(	TokenNameLPAREN
fillOrder	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
tileHeight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
COMP_LZW	TokenNameIdentifier
:	TokenNameCOLON
TIFFField	TokenNameIdentifier
predictorField	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_PREDICTOR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
predictorField	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
predictor	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
predictor	TokenNameIdentifier
=	TokenNameEQUAL
predictorField	TokenNameIdentifier
.	TokenNameDOT
getAsInt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
predictor	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
predictor	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage8"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
predictor	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
&&	TokenNameAND_AND
sampleSize	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
+	TokenNamePLUS
"TIFFImage9"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
lzwDecoder	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TIFFLZWDecoder	TokenNameIdentifier
(	TokenNameLPAREN
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
predictor	TokenNameIdentifier
,	TokenNameCOMMA
samplesPerPixel	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
COMP_JPEG_OLD	TokenNameIdentifier
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage15"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
COMP_JPEG_TTN2	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
8	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPE_GRAY	TokenNameIdentifier
&&	TokenNameAND_AND
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPE_PALETTE	TokenNameIdentifier
&&	TokenNameAND_AND
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPE_RGB	TokenNameIdentifier
&&	TokenNameAND_AND
samplesPerPixel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage16"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
isTagPresent	TokenNameIdentifier
(	TokenNameLPAREN
TIFF_JPEG_TABLES	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
TIFFField	TokenNameIdentifier
jpegTableField	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFF_JPEG_TABLES	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
jpegTable	TokenNameIdentifier
=	TokenNameEQUAL
jpegTableField	TokenNameIdentifier
.	TokenNameDOT
getAsBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ByteArrayInputStream	TokenNameIdentifier
tableStream	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ByteArrayInputStream	TokenNameIdentifier
(	TokenNameLPAREN
jpegTable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
JPEGImageDecoder	TokenNameIdentifier
decoder	TokenNameIdentifier
=	TokenNameEQUAL
JPEGCodec	TokenNameIdentifier
.	TokenNameDOT
createJPEGDecoder	TokenNameIdentifier
(	TokenNameLPAREN
tableStream	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
decoder	TokenNameIdentifier
.	TokenNameDOT
decodeAsRaster	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
decodeParam	TokenNameIdentifier
=	TokenNameEQUAL
decoder	TokenNameIdentifier
.	TokenNameDOT
getJPEGDecodeParam	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage10"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ColorModel	TokenNameIdentifier
colorModel	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
SampleModel	TokenNameIdentifier
sampleModel	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
imageType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
TYPE_BILEVEL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
TYPE_GRAY_4BIT	TokenNameIdentifier
:	TokenNameCOLON
sampleModel	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MultiPixelPackedSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
dataType	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
tileHeight	TokenNameIdentifier
,	TokenNameCOMMA
sampleSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPE_BILEVEL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
map	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
isWhiteZero	TokenNameIdentifier
?	TokenNameQUESTION
255	TokenNameIntegerLiteral
:	TokenNameCOLON
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
isWhiteZero	TokenNameIdentifier
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
colorModel	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexColorModel	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
map	TokenNameIdentifier
,	TokenNameCOMMA
map	TokenNameIdentifier
,	TokenNameCOMMA
map	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
map	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
16	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isWhiteZero	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
map	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
map	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
255	TokenNameIntegerLiteral
-	TokenNameMINUS
(	TokenNameLPAREN
16	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
map	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
map	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
16	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
colorModel	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexColorModel	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
16	TokenNameIntegerLiteral
,	TokenNameCOMMA
map	TokenNameIdentifier
,	TokenNameCOMMA
map	TokenNameIdentifier
,	TokenNameCOMMA
map	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TYPE_GRAY	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
TYPE_GRAY_ALPHA	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
TYPE_RGB	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
TYPE_RGB_ALPHA	TokenNameIdentifier
:	TokenNameCOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
reverseOffsets	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
numBands	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numBands	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
reverseOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
numBands	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
-	TokenNameMINUS
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sampleModel	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PixelInterleavedSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
dataType	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
tileHeight	TokenNameIdentifier
,	TokenNameCOMMA
numBands	TokenNameIdentifier
,	TokenNameCOMMA
numBands	TokenNameIdentifier
*	TokenNameMULTIPLY
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
reverseOffsets	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPE_GRAY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
colorModel	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ComponentColorModel	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_GRAY	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
sampleSize	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Transparency	TokenNameIdentifier
.	TokenNameDOT
OPAQUE	TokenNameIdentifier
,	TokenNameCOMMA
dataType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPE_RGB	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
colorModel	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ComponentColorModel	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_sRGB	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
sampleSize	TokenNameIdentifier
,	TokenNameCOMMA
sampleSize	TokenNameIdentifier
,	TokenNameCOMMA
sampleSize	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Transparency	TokenNameIdentifier
.	TokenNameDOT
OPAQUE	TokenNameIdentifier
,	TokenNameCOMMA
dataType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
transparency	TokenNameIdentifier
=	TokenNameEQUAL
Transparency	TokenNameIdentifier
.	TokenNameDOT
OPAQUE	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
extraSamples	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
transparency	TokenNameIdentifier
=	TokenNameEQUAL
Transparency	TokenNameIdentifier
.	TokenNameDOT
TRANSLUCENT	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
extraSamples	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
transparency	TokenNameIdentifier
=	TokenNameEQUAL
Transparency	TokenNameIdentifier
.	TokenNameDOT
BITMASK	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
colorModel	TokenNameIdentifier
=	TokenNameEQUAL
createAlphaComponentColorModel	TokenNameIdentifier
(	TokenNameLPAREN
dataType	TokenNameIdentifier
,	TokenNameCOMMA
numBands	TokenNameIdentifier
,	TokenNameCOMMA
extraSamples	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
transparency	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TYPE_GENERIC	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
TYPE_YCBCR_SUB	TokenNameIdentifier
:	TokenNameCOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bandOffsets	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
numBands	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numBands	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
bandOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sampleModel	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PixelInterleavedSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
dataType	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
tileHeight	TokenNameIdentifier
,	TokenNameCOMMA
numBands	TokenNameIdentifier
,	TokenNameCOMMA
numBands	TokenNameIdentifier
*	TokenNameMULTIPLY
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
bandOffsets	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
colorModel	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TYPE_PALETTE	TokenNameIdentifier
:	TokenNameCOLON
TIFFField	TokenNameIdentifier
cfield	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_COLORMAP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cfield	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage11"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
colormap	TokenNameIdentifier
=	TokenNameEQUAL
cfield	TokenNameIdentifier
.	TokenNameDOT
getAsChars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
decodePaletteAsShorts	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
numBands	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_BYTE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
dataType	TokenNameIdentifier
=	TokenNameEQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_USHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sampleModel	TokenNameIdentifier
=	TokenNameEQUAL
createPixelInterleavedSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
dataType	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
tileHeight	TokenNameIdentifier
,	TokenNameCOMMA
numBands	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
colorModel	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ComponentColorModel	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_sRGB	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
16	TokenNameIntegerLiteral
,	TokenNameCOMMA
16	TokenNameIntegerLiteral
,	TokenNameCOMMA
16	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Transparency	TokenNameIdentifier
.	TokenNameDOT
OPAQUE	TokenNameIdentifier
,	TokenNameCOMMA
dataType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
numBands	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sampleModel	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MultiPixelPackedSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_BYTE	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
tileHeight	TokenNameIdentifier
,	TokenNameCOMMA
sampleSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sampleModel	TokenNameIdentifier
=	TokenNameEQUAL
createPixelInterleavedSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_BYTE	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
tileHeight	TokenNameIdentifier
,	TokenNameCOMMA
numBands	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
dataType	TokenNameIdentifier
=	TokenNameEQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_USHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
sampleModel	TokenNameIdentifier
=	TokenNameEQUAL
createPixelInterleavedSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_USHORT	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
tileHeight	TokenNameIdentifier
,	TokenNameCOMMA
numBands	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
bandLength	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
/	TokenNameDIVIDE
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
r	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
bandLength	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
g	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
bandLength	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
b	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
bandLength	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
gIndex	TokenNameIdentifier
=	TokenNameEQUAL
bandLength	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bIndex	TokenNameIdentifier
=	TokenNameEQUAL
bandLength	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_SHORT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
bandLength	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
param	TokenNameIdentifier
.	TokenNameDOT
decodeSigned16BitsTo8Bits	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
g	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
param	TokenNameIdentifier
.	TokenNameDOT
decodeSigned16BitsTo8Bits	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
gIndex	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
b	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
param	TokenNameIdentifier
.	TokenNameDOT
decodeSigned16BitsTo8Bits	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
bIndex	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
bandLength	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
param	TokenNameIdentifier
.	TokenNameDOT
decode16BitsTo8Bits	TokenNameIdentifier
(	TokenNameLPAREN
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
g	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
param	TokenNameIdentifier
.	TokenNameDOT
decode16BitsTo8Bits	TokenNameIdentifier
(	TokenNameLPAREN
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
gIndex	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
b	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
param	TokenNameIdentifier
.	TokenNameDOT
decode16BitsTo8Bits	TokenNameIdentifier
(	TokenNameLPAREN
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
bIndex	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
colorModel	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexColorModel	TokenNameIdentifier
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
,	TokenNameCOMMA
bandLength	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage4"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Map	TokenNameIdentifier
properties	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
properties	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"tiff_directory"	TokenNameStringLiteral
,	TokenNameCOMMA
dir	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
init	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
CachableRed	TokenNameIdentifier
)	TokenNameRPAREN
null	TokenNamenull
,	TokenNameCOMMA
bounds	TokenNameIdentifier
,	TokenNameCOMMA
colorModel	TokenNameIdentifier
,	TokenNameCOMMA
sampleModel	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
properties	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
TIFFDirectory	TokenNameIdentifier
getPrivateIFD	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
offset	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
TIFFDirectory	TokenNameIdentifier
(	TokenNameLPAREN
stream	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
WritableRaster	TokenNameIdentifier
copyData	TokenNameIdentifier
(	TokenNameLPAREN
WritableRaster	TokenNameIdentifier
wr	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
copyToRaster	TokenNameIdentifier
(	TokenNameLPAREN
wr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
wr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
Raster	TokenNameIdentifier
getTile	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
tileX	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
tileY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
tileX	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
tileX	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
tilesX	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
tileY	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
tileY	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
tilesY	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage12"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bdata	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sdata	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
idata	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
SampleModel	TokenNameIdentifier
sampleModel	TokenNameIdentifier
=	TokenNameEQUAL
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
WritableRaster	TokenNameIdentifier
tile	TokenNameIdentifier
=	TokenNameEQUAL
makeTile	TokenNameIdentifier
(	TokenNameLPAREN
tileX	TokenNameIdentifier
,	TokenNameCOMMA
tileY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DataBuffer	TokenNameIdentifier
buffer	TokenNameIdentifier
=	TokenNameEQUAL
tile	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
dataType	TokenNameIdentifier
=	TokenNameEQUAL
sampleModel	TokenNameIdentifier
.	TokenNameDOT
getDataType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_BYTE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bdata	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
DataBufferByte	TokenNameIdentifier
)	TokenNameRPAREN
buffer	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_USHORT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sdata	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
DataBufferUShort	TokenNameIdentifier
)	TokenNameRPAREN
buffer	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_SHORT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sdata	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
DataBufferShort	TokenNameIdentifier
)	TokenNameRPAREN
buffer	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
idata	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
buffer	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
byte	TokenNamebyte
bswap	TokenNameIdentifier
;	TokenNameSEMICOLON
short	TokenNameshort
sswap	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
iswap	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
save_offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
save_offset	TokenNameIdentifier
=	TokenNameEQUAL
stream	TokenNameIdentifier
.	TokenNameDOT
getFilePointer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stream	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
tileY	TokenNameIdentifier
*	TokenNameMULTIPLY
tilesX	TokenNameIdentifier
+	TokenNamePLUS
tileX	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
byteCount	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
tileY	TokenNameIdentifier
*	TokenNameMULTIPLY
tilesX	TokenNameIdentifier
+	TokenNamePLUS
tileX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
Rectangle	TokenNameIdentifier
newRect	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
tiled	TokenNameIdentifier
)	TokenNameRPAREN
newRect	TokenNameIdentifier
=	TokenNameEQUAL
tile	TokenNameIdentifier
.	TokenNameDOT
getBounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
newRect	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Rectangle	TokenNameIdentifier
(	TokenNameLPAREN
tile	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
tile	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
tileHeight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
unitsInThisTile	TokenNameIdentifier
=	TokenNameEQUAL
newRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
*	TokenNameMULTIPLY
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
*	TokenNameMULTIPLY
numBands	TokenNameIdentifier
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
data	TokenNameIdentifier
=	TokenNameEQUAL
compression	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
COMP_NONE	TokenNameIdentifier
||	TokenNameOR_OR
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPE_PALETTE	TokenNameIdentifier
?	TokenNameQUESTION
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
byteCount	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPE_BILEVEL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
bytesInThisTile	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
newRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
%	TokenNameREMAINDER
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bytesInThisTile	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
newRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
/	TokenNameDIVIDE
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
bytesInThisTile	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
newRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
/	TokenNameDIVIDE
8	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
decodePackbits	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bytesInThisTile	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_LZW	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lzwDecoder	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_FAX_G3_1D	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
decoder	TokenNameIdentifier
.	TokenNameDOT
decode1D	TokenNameIdentifier
(	TokenNameLPAREN
bdata	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_FAX_G3_2D	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
decoder	TokenNameIdentifier
.	TokenNameDOT
decode2D	TokenNameIdentifier
(	TokenNameLPAREN
bdata	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
,	TokenNameCOMMA
tiffT4Options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_FAX_G4_2D	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
decoder	TokenNameIdentifier
.	TokenNameDOT
decodeT6	TokenNameIdentifier
(	TokenNameLPAREN
bdata	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
,	TokenNameCOMMA
tiffT6Options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflate	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
bdata	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
save_offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPE_PALETTE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
decodePaletteAsShorts	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tempData	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
unitsBeforeLookup	TokenNameIdentifier
=	TokenNameEQUAL
unitsInThisTile	TokenNameIdentifier
/	TokenNameDIVIDE
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
entries	TokenNameIdentifier
=	TokenNameEQUAL
unitsBeforeLookup	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
entries	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
decodePackbits	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
entries	TokenNameIdentifier
,	TokenNameCOMMA
byteArray	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
unitsBeforeLookup	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
interpretBytesAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
tempData	TokenNameIdentifier
,	TokenNameCOMMA
unitsBeforeLookup	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_LZW	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
entries	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
lzwDecoder	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
unitsBeforeLookup	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
interpretBytesAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
tempData	TokenNameIdentifier
,	TokenNameCOMMA
unitsBeforeLookup	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
entries	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
inflate	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
byteArray	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
unitsBeforeLookup	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
interpretBytesAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
tempData	TokenNameIdentifier
,	TokenNameCOMMA
unitsBeforeLookup	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
byteCount	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
readShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteCount	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
tempData	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
save_offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_USHORT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
cmapValue	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
lookup	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
/	TokenNameDIVIDE
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
len2	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
unitsBeforeLookup	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
lookup	TokenNameIdentifier
=	TokenNameEQUAL
tempData	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
cmapValue	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
lookup	TokenNameIdentifier
+	TokenNamePLUS
len2	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
cmapValue	TokenNameIdentifier
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cmapValue	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
lookup	TokenNameIdentifier
+	TokenNamePLUS
len	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
cmapValue	TokenNameIdentifier
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cmapValue	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
lookup	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
cmapValue	TokenNameIdentifier
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_SHORT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
cmapValue	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
lookup	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
/	TokenNameDIVIDE
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
len2	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
unitsBeforeLookup	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
lookup	TokenNameIdentifier
=	TokenNameEQUAL
tempData	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
cmapValue	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
lookup	TokenNameIdentifier
+	TokenNamePLUS
len2	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
cmapValue	TokenNameIdentifier
;	TokenNameSEMICOLON
cmapValue	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
lookup	TokenNameIdentifier
+	TokenNamePLUS
len	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
cmapValue	TokenNameIdentifier
;	TokenNameSEMICOLON
cmapValue	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
lookup	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
cmapValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
bytesInThisTile	TokenNameIdentifier
=	TokenNameEQUAL
unitsInThisTile	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
bytesInThisTile	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
decodePackbits	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bytesInThisTile	TokenNameIdentifier
,	TokenNameCOMMA
byteArray	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
interpretBytesAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
sdata	TokenNameIdentifier
,	TokenNameCOMMA
unitsInThisTile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_LZW	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
unitsInThisTile	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
lzwDecoder	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
interpretBytesAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
sdata	TokenNameIdentifier
,	TokenNameCOMMA
unitsInThisTile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
unitsInThisTile	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
inflate	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
byteArray	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
interpretBytesAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
sdata	TokenNameIdentifier
,	TokenNameCOMMA
unitsInThisTile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
readShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteCount	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
sdata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
save_offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
decodePaletteAsShorts	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tempData	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
unitsBeforeLookup	TokenNameIdentifier
=	TokenNameEQUAL
unitsInThisTile	TokenNameIdentifier
/	TokenNameDIVIDE
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
unitsBeforeLookup	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
decodePackbits	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
unitsBeforeLookup	TokenNameIdentifier
,	TokenNameCOMMA
tempData	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_LZW	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
unitsBeforeLookup	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
lzwDecoder	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
tempData	TokenNameIdentifier
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Raster	TokenNameIdentifier
tempTile	TokenNameIdentifier
=	TokenNameEQUAL
decodeJPEG	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
decodeParam	TokenNameIdentifier
,	TokenNameCOMMA
colorConvertJPEG	TokenNameIdentifier
,	TokenNameCOMMA
tile	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
tile	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tempPixels	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
unitsBeforeLookup	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
tempTile	TokenNameIdentifier
.	TokenNameDOT
getPixels	TokenNameIdentifier
(	TokenNameLPAREN
tile	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
tile	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
tile	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
tile	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
tempPixels	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
unitsBeforeLookup	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
unitsBeforeLookup	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
tempData	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
tempPixels	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
unitsBeforeLookup	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
inflate	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
tempData	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
byteCount	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
tempData	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
save_offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
cmapValue	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
lookup	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
/	TokenNameDIVIDE
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
len2	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
unitsBeforeLookup	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
lookup	TokenNameIdentifier
=	TokenNameEQUAL
tempData	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
cmapValue	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
lookup	TokenNameIdentifier
+	TokenNamePLUS
len2	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
cmapValue	TokenNameIdentifier
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cmapValue	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
lookup	TokenNameIdentifier
+	TokenNamePLUS
len	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
cmapValue	TokenNameIdentifier
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cmapValue	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
lookup	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
cmapValue	TokenNameIdentifier
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
decodePackbits	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
unitsInThisTile	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_LZW	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lzwDecoder	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tile	TokenNameIdentifier
.	TokenNameDOT
setRect	TokenNameIdentifier
(	TokenNameLPAREN
decodeJPEG	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
decodeParam	TokenNameIdentifier
,	TokenNameCOMMA
colorConvertJPEG	TokenNameIdentifier
,	TokenNameCOMMA
tile	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
tile	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflate	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
bdata	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
save_offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
padding	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
newRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
%	TokenNameREMAINDER
2	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
bytesPostDecoding	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
newRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
+	TokenNamePLUS
padding	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
decodePaletteAsShorts	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tempData	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stream	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
save_offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
bytesPostDecoding	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
decodePackbits	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bytesPostDecoding	TokenNameIdentifier
,	TokenNameCOMMA
tempData	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_LZW	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
bytesPostDecoding	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
lzwDecoder	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
tempData	TokenNameIdentifier
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
bytesPostDecoding	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
inflate	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
tempData	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tempData	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
bytes	TokenNameIdentifier
=	TokenNameEQUAL
unitsInThisTile	TokenNameIdentifier
/	TokenNameDIVIDE
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
data	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
bytes	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
srcCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
dstCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
newRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
[	TokenNameLBRACKET
dstCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
tempData	TokenNameIdentifier
[	TokenNameLBRACKET
srcCount	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xf0	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
data	TokenNameIdentifier
[	TokenNameLBRACKET
dstCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
tempData	TokenNameIdentifier
[	TokenNameLBRACKET
srcCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
padding	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
[	TokenNameLBRACKET
dstCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
tempData	TokenNameIdentifier
[	TokenNameLBRACKET
srcCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xf0	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
/	TokenNameDIVIDE
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
len2	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
cmapValue	TokenNameIdentifier
,	TokenNameCOMMA
lookup	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
bytes	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
lookup	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
cmapValue	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
lookup	TokenNameIdentifier
+	TokenNamePLUS
len2	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
cmapValue	TokenNameIdentifier
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cmapValue	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
lookup	TokenNameIdentifier
+	TokenNamePLUS
len	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
cmapValue	TokenNameIdentifier
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cmapValue	TokenNameIdentifier
=	TokenNameEQUAL
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
lookup	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
cmapValue	TokenNameIdentifier
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
decodePackbits	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bytesPostDecoding	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_LZW	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lzwDecoder	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflate	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
bdata	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
save_offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPE_GRAY_4BIT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
bytesInThisTile	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
newRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
%	TokenNameREMAINDER
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bytesInThisTile	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
newRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
bytesInThisTile	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
newRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
decodePackbits	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bytesInThisTile	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_LZW	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lzwDecoder	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflate	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
bdata	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
save_offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
bdata	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_LZW	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lzwDecoder	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
decodePackbits	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
unitsInThisTile	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tile	TokenNameIdentifier
.	TokenNameDOT
setRect	TokenNameIdentifier
(	TokenNameLPAREN
decodeJPEG	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
decodeParam	TokenNameIdentifier
,	TokenNameCOMMA
colorConvertJPEG	TokenNameIdentifier
,	TokenNameCOMMA
tile	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
tile	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflate	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bdata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
readShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteCount	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
sdata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_LZW	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
unitsInThisTile	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
lzwDecoder	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
interpretBytesAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
sdata	TokenNameIdentifier
,	TokenNameCOMMA
unitsInThisTile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
bytesInThisTile	TokenNameIdentifier
=	TokenNameEQUAL
unitsInThisTile	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
bytesInThisTile	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
decodePackbits	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bytesInThisTile	TokenNameIdentifier
,	TokenNameCOMMA
byteArray	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
interpretBytesAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
sdata	TokenNameIdentifier
,	TokenNameCOMMA
unitsInThisTile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
unitsInThisTile	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
inflate	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
byteArray	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
interpretBytesAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
sdata	TokenNameIdentifier
,	TokenNameCOMMA
unitsInThisTile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
32	TokenNameIntegerLiteral
&&	TokenNameAND_AND
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
readInts	TokenNameIdentifier
(	TokenNameLPAREN
byteCount	TokenNameIdentifier
/	TokenNameDIVIDE
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
idata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_LZW	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
unitsInThisTile	TokenNameIdentifier
*	TokenNameMULTIPLY
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
lzwDecoder	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
interpretBytesAsInts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
idata	TokenNameIdentifier
,	TokenNameCOMMA
unitsInThisTile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
bytesInThisTile	TokenNameIdentifier
=	TokenNameEQUAL
unitsInThisTile	TokenNameIdentifier
*	TokenNameMULTIPLY
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
bytesInThisTile	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
decodePackbits	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
bytesInThisTile	TokenNameIdentifier
,	TokenNameCOMMA
byteArray	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
interpretBytesAsInts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
idata	TokenNameIdentifier
,	TokenNameCOMMA
unitsInThisTile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
unitsInThisTile	TokenNameIdentifier
*	TokenNameMULTIPLY
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
inflate	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
byteArray	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
interpretBytesAsInts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
idata	TokenNameIdentifier
,	TokenNameCOMMA
unitsInThisTile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
save_offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
imageType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
TYPE_GRAY	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
TYPE_GRAY_ALPHA	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
isWhiteZero	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_BYTE	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
(	TokenNameLPAREN
getColorModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
IndexColorModel	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
l	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
l	TokenNameIdentifier
<	TokenNameLESS
bdata	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
l	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
numBands	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
l	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
255	TokenNameIntegerLiteral
-	TokenNameMINUS
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
l	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_USHORT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
ushortMax	TokenNameIdentifier
=	TokenNameEQUAL
Short	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
-	TokenNameMINUS
Short	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
l	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
l	TokenNameIdentifier
<	TokenNameLESS
sdata	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
l	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
numBands	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
l	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
ushortMax	TokenNameIdentifier
-	TokenNameMINUS
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
l	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_SHORT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
l	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
l	TokenNameIdentifier
<	TokenNameLESS
sdata	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
l	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
numBands	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
l	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
~	TokenNameTWIDDLE
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
l	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
uintMax	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
l	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
l	TokenNameIdentifier
<	TokenNameLESS
idata	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
l	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
numBands	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
idata	TokenNameIdentifier
[	TokenNameLBRACKET
l	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
uintMax	TokenNameIdentifier
-	TokenNameMINUS
idata	TokenNameIdentifier
[	TokenNameLBRACKET
l	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TYPE_RGB	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
8	TokenNameIntegerLiteral
&&	TokenNameAND_AND
compression	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
unitsInThisTile	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bswap	TokenNameIdentifier
=	TokenNameEQUAL
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
bswap	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
unitsInThisTile	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sswap	TokenNameIdentifier
=	TokenNameEQUAL
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
sswap	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
unitsInThisTile	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
iswap	TokenNameIdentifier
=	TokenNameEQUAL
idata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
idata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
idata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
idata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
iswap	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TYPE_RGB_ALPHA	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
unitsInThisTile	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bswap	TokenNameIdentifier
=	TokenNameEQUAL
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
bswap	TokenNameIdentifier
;	TokenNameSEMICOLON
bswap	TokenNameIdentifier
=	TokenNameEQUAL
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
bswap	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
unitsInThisTile	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sswap	TokenNameIdentifier
=	TokenNameEQUAL
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
sswap	TokenNameIdentifier
;	TokenNameSEMICOLON
sswap	TokenNameIdentifier
=	TokenNameEQUAL
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sdata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
sswap	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
unitsInThisTile	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
iswap	TokenNameIdentifier
=	TokenNameEQUAL
idata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
idata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
idata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
idata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
iswap	TokenNameIdentifier
;	TokenNameSEMICOLON
iswap	TokenNameIdentifier
=	TokenNameEQUAL
idata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
idata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
idata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
idata	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
iswap	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TYPE_YCBCR_SUB	TokenNameIdentifier
:	TokenNameCOLON
int	TokenNameint
pixelsPerDataUnit	TokenNameIdentifier
=	TokenNameEQUAL
chromaSubH	TokenNameIdentifier
*	TokenNameMULTIPLY
chromaSubV	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
numH	TokenNameIdentifier
=	TokenNameEQUAL
newRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
/	TokenNameDIVIDE
chromaSubH	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
numV	TokenNameIdentifier
=	TokenNameEQUAL
newRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
/	TokenNameDIVIDE
chromaSubV	TokenNameIdentifier
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tempData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
numH	TokenNameIdentifier
*	TokenNameMULTIPLY
numV	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
pixelsPerDataUnit	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
bdata	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
tempData	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
tempData	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
samplesPerDataUnit	TokenNameIdentifier
=	TokenNameEQUAL
pixelsPerDataUnit	TokenNameIdentifier
*	TokenNameMULTIPLY
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
pixels	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
samplesPerDataUnit	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
bOffset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
offsetCb	TokenNameIdentifier
=	TokenNameEQUAL
pixelsPerDataUnit	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
offsetCr	TokenNameIdentifier
=	TokenNameEQUAL
offsetCb	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
y	TokenNameIdentifier
=	TokenNameEQUAL
newRect	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
numV	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
x	TokenNameIdentifier
=	TokenNameEQUAL
newRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numH	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
Cb	TokenNameIdentifier
=	TokenNameEQUAL
tempData	TokenNameIdentifier
[	TokenNameLBRACKET
bOffset	TokenNameIdentifier
+	TokenNamePLUS
offsetCb	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
Cr	TokenNameIdentifier
=	TokenNameEQUAL
tempData	TokenNameIdentifier
[	TokenNameLBRACKET
bOffset	TokenNameIdentifier
+	TokenNamePLUS
offsetCr	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
k	TokenNameIdentifier
<	TokenNameLESS
samplesPerDataUnit	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
tempData	TokenNameIdentifier
[	TokenNameLBRACKET
bOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
Cb	TokenNameIdentifier
;	TokenNameSEMICOLON
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
Cr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
tile	TokenNameIdentifier
.	TokenNameDOT
setPixels	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
,	TokenNameCOMMA
chromaSubH	TokenNameIdentifier
,	TokenNameCOMMA
chromaSubV	TokenNameIdentifier
,	TokenNameCOMMA
pixels	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
x	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
chromaSubH	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
y	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
chromaSubV	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
tile	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
readShorts	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
shortCount	TokenNameIdentifier
,	TokenNameCOMMA
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
shortArray	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
byteCount	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
shortCount	TokenNameIdentifier
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
byteCount	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
interpretBytesAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
shortArray	TokenNameIdentifier
,	TokenNameCOMMA
shortCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
readInts	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
intCount	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
intArray	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
byteCount	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
intCount	TokenNameIdentifier
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
byteCount	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
stream	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
byteCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage13"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
interpretBytesAsInts	TokenNameIdentifier
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
intArray	TokenNameIdentifier
,	TokenNameCOMMA
intCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
interpretBytesAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
shortArray	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
shortCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
firstByte	TokenNameIdentifier
,	TokenNameCOMMA
secondByte	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBigEndian	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
shortCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
firstByte	TokenNameIdentifier
=	TokenNameEQUAL
byteArray	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
secondByte	TokenNameIdentifier
=	TokenNameEQUAL
byteArray	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
shortArray	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
firstByte	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
secondByte	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
shortCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
firstByte	TokenNameIdentifier
=	TokenNameEQUAL
byteArray	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
secondByte	TokenNameIdentifier
=	TokenNameEQUAL
byteArray	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
shortArray	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
secondByte	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
firstByte	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
interpretBytesAsInts	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
byteArray	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
intArray	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
intCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBigEndian	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
intCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
intArray	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
intCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
intArray	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
byteArray	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
decodePackbits	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
data	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
arraySize	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dst	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dst	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dst	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
arraySize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
srcCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
dstCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
byte	TokenNamebyte
repeat	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
dstCount	TokenNameIdentifier
<	TokenNameLESS
arraySize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
srcCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
b	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
b	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
127	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
(	TokenNameLPAREN
b	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
dst	TokenNameIdentifier
[	TokenNameLBRACKET
dstCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
srcCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
b	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
b	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
-	TokenNameMINUS
127	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
repeat	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
srcCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
(	TokenNameLPAREN
-	TokenNameMINUS
b	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
dst	TokenNameIdentifier
[	TokenNameLBRACKET
dstCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
repeat	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
srcCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
ArrayIndexOutOfBoundsException	TokenNameIdentifier
ae	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImage14"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
dst	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
ComponentColorModel	TokenNameIdentifier
createAlphaComponentColorModel	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
dataType	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numBands	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
isAlphaPremultiplied	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
transparency	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ComponentColorModel	TokenNameIdentifier
ccm	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
RGBBits	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
ColorSpace	TokenNameIdentifier
cs	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
numBands	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
cs	TokenNameIdentifier
=	TokenNameEQUAL
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_GRAY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
cs	TokenNameIdentifier
=	TokenNameEQUAL
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_sRGB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
componentSize	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
dataType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_BYTE	TokenNameIdentifier
:	TokenNameCOLON
componentSize	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_USHORT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_SHORT	TokenNameIdentifier
:	TokenNameCOLON
componentSize	TokenNameIdentifier
=	TokenNameEQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
:	TokenNameCOLON
componentSize	TokenNameIdentifier
=	TokenNameEQUAL
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
RGBBits	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
numBands	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numBands	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
RGBBits	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
componentSize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ccm	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ComponentColorModel	TokenNameIdentifier
(	TokenNameLPAREN
cs	TokenNameIdentifier
,	TokenNameCOMMA
RGBBits	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
isAlphaPremultiplied	TokenNameIdentifier
,	TokenNameCOMMA
transparency	TokenNameIdentifier
,	TokenNameCOMMA
dataType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
ccm	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
