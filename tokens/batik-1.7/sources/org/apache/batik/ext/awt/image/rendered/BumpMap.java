package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
rendered	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Rectangle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBufferInt	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
Raster	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
RenderedImage	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
SinglePixelPackedSampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
class	TokenNameclass
BumpMap	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
RenderedImage	TokenNameIdentifier
texture	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
surfaceScale	TokenNameIdentifier
,	TokenNameCOMMA
surfaceScaleX	TokenNameIdentifier
,	TokenNameCOMMA
surfaceScaleY	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
scaleX	TokenNameIdentifier
,	TokenNameCOMMA
scaleY	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
BumpMap	TokenNameIdentifier
(	TokenNameLPAREN
RenderedImage	TokenNameIdentifier
texture	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
surfaceScale	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
scaleX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
scaleY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
texture	TokenNameIdentifier
=	TokenNameEQUAL
texture	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
surfaceScaleX	TokenNameIdentifier
=	TokenNameEQUAL
surfaceScale	TokenNameIdentifier
*	TokenNameMULTIPLY
scaleX	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
surfaceScaleY	TokenNameIdentifier
=	TokenNameEQUAL
surfaceScale	TokenNameIdentifier
*	TokenNameMULTIPLY
scaleY	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
surfaceScale	TokenNameIdentifier
=	TokenNameEQUAL
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
scaleX	TokenNameIdentifier
=	TokenNameEQUAL
scaleX	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
scaleY	TokenNameIdentifier
=	TokenNameEQUAL
scaleY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getSurfaceScale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getNormalArray	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
x	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
y	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
w	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
h	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
N	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
h	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
w	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
Rectangle	TokenNameIdentifier
srcRect	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Rectangle	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
y	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
w	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
h	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Rectangle	TokenNameIdentifier
srcBound	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Rectangle	TokenNameIdentifier
(	TokenNameLPAREN
texture	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
texture	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
texture	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
texture	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
srcRect	TokenNameIdentifier
.	TokenNameDOT
intersects	TokenNameIdentifier
(	TokenNameLPAREN
srcBound	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
N	TokenNameIdentifier
;	TokenNameSEMICOLON
srcRect	TokenNameIdentifier
=	TokenNameEQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
intersection	TokenNameIdentifier
(	TokenNameLPAREN
srcBound	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
Raster	TokenNameIdentifier
r	TokenNameIdentifier
=	TokenNameEQUAL
texture	TokenNameIdentifier
.	TokenNameDOT
getData	TokenNameIdentifier
(	TokenNameLPAREN
srcRect	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
srcRect	TokenNameIdentifier
=	TokenNameEQUAL
r	TokenNameIdentifier
.	TokenNameDOT
getBounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
DataBufferInt	TokenNameIdentifier
db	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
r	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
pixels	TokenNameIdentifier
=	TokenNameEQUAL
db	TokenNameIdentifier
.	TokenNameDOT
getBankData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
SinglePixelPackedSampleModel	TokenNameIdentifier
sppsm	TokenNameIdentifier
;	TokenNameSEMICOLON
sppsm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
r	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
scanStride	TokenNameIdentifier
=	TokenNameEQUAL
sppsm	TokenNameIdentifier
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
scanStridePP	TokenNameIdentifier
=	TokenNameEQUAL
scanStride	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
scanStrideMM	TokenNameIdentifier
=	TokenNameEQUAL
scanStride	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
prpc	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
prcc	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
prnc	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
crpc	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
crcc	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
crnc	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
nrpc	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
nrcc	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
nrnc	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
quarterSurfaceScaleX	TokenNameIdentifier
=	TokenNameEQUAL
surfaceScaleX	TokenNameIdentifier
/	TokenNameDIVIDE
4f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
quarterSurfaceScaleY	TokenNameIdentifier
=	TokenNameEQUAL
surfaceScaleY	TokenNameIdentifier
/	TokenNameDIVIDE
4f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
halfSurfaceScaleX	TokenNameIdentifier
=	TokenNameEQUAL
surfaceScaleX	TokenNameIdentifier
/	TokenNameDIVIDE
2f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
halfSurfaceScaleY	TokenNameIdentifier
=	TokenNameEQUAL
surfaceScaleY	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
thirdSurfaceScaleX	TokenNameIdentifier
=	TokenNameEQUAL
surfaceScaleX	TokenNameIdentifier
/	TokenNameDIVIDE
3f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
thirdSurfaceScaleY	TokenNameIdentifier
=	TokenNameEQUAL
surfaceScaleY	TokenNameIdentifier
/	TokenNameDIVIDE
3f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
twoThirdSurfaceScaleX	TokenNameIdentifier
=	TokenNameEQUAL
surfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
/	TokenNameDIVIDE
3f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
twoThirdSurfaceScaleY	TokenNameIdentifier
=	TokenNameEQUAL
surfaceScaleY	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
/	TokenNameDIVIDE
3f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
pixelScale	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
w	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
N	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
h	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
N	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
xEnd	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
(	TokenNameLPAREN
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
+	TokenNamePLUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
x	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
yEnd	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
(	TokenNameLPAREN
srcRect	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
+	TokenNamePLUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
y	TokenNameIdentifier
+	TokenNamePLUS
h	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
offset	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
db	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
sppsm	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
-	TokenNameMINUS
r	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
srcRect	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
-	TokenNameMINUS
r	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
yloc	TokenNameIdentifier
=	TokenNameEQUAL
y	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
yloc	TokenNameIdentifier
<	TokenNameLESS
srcRect	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
yloc	TokenNameIdentifier
=	TokenNameEQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
yloc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
yloc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
yEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
NRow	TokenNameIdentifier
=	TokenNameEQUAL
N	TokenNameIdentifier
[	TokenNameLBRACKET
yloc	TokenNameIdentifier
-	TokenNameMINUS
y	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
xloc	TokenNameIdentifier
=	TokenNameEQUAL
x	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xloc	TokenNameIdentifier
<	TokenNameLESS
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
xloc	TokenNameIdentifier
=	TokenNameEQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
p	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
offset	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
xloc	TokenNameIdentifier
-	TokenNameMINUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
scanStride	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
yloc	TokenNameIdentifier
-	TokenNameMINUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
crcc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xloc	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
crpc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
xloc	TokenNameIdentifier
<	TokenNameLESS
xEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
crnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
n	TokenNameIdentifier
=	TokenNameEQUAL
NRow	TokenNameIdentifier
[	TokenNameLBRACKET
xloc	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
surfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
crcc	TokenNameIdentifier
-	TokenNameMINUS
crnc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
crcc	TokenNameIdentifier
*	TokenNameMULTIPLY
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
p	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
xloc	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
crpc	TokenNameIdentifier
=	TokenNameEQUAL
crcc	TokenNameIdentifier
;	TokenNameSEMICOLON
crcc	TokenNameIdentifier
=	TokenNameEQUAL
crnc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
crpc	TokenNameIdentifier
=	TokenNameEQUAL
crcc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
xloc	TokenNameIdentifier
<	TokenNameLESS
xEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
xloc	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
crnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
n	TokenNameIdentifier
=	TokenNameEQUAL
NRow	TokenNameIdentifier
[	TokenNameLBRACKET
xloc	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
surfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
crpc	TokenNameIdentifier
-	TokenNameMINUS
crnc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
crcc	TokenNameIdentifier
*	TokenNameMULTIPLY
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
p	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
crpc	TokenNameIdentifier
=	TokenNameEQUAL
crcc	TokenNameIdentifier
;	TokenNameSEMICOLON
crcc	TokenNameIdentifier
=	TokenNameEQUAL
crnc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
xloc	TokenNameIdentifier
<	TokenNameLESS
x	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
xloc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
+	TokenNamePLUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
n	TokenNameIdentifier
=	TokenNameEQUAL
NRow	TokenNameIdentifier
[	TokenNameLBRACKET
xloc	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
surfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
crpc	TokenNameIdentifier
-	TokenNameMINUS
crcc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
crcc	TokenNameIdentifier
*	TokenNameMULTIPLY
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
N	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
NRow	TokenNameIdentifier
=	TokenNameEQUAL
N	TokenNameIdentifier
[	TokenNameLBRACKET
yloc	TokenNameIdentifier
-	TokenNameMINUS
y	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
p	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
+	TokenNamePLUS
scanStride	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
yloc	TokenNameIdentifier
-	TokenNameMINUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
xloc	TokenNameIdentifier
=	TokenNameEQUAL
x	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xloc	TokenNameIdentifier
<	TokenNameLESS
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
xloc	TokenNameIdentifier
=	TokenNameEQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
p	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
xloc	TokenNameIdentifier
-	TokenNameMINUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
crcc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
nrcc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
scanStride	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xloc	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
crpc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
nrpc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
scanStrideMM	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
xloc	TokenNameIdentifier
<	TokenNameLESS
xEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
crnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
nrnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
scanStridePP	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
n	TokenNameIdentifier
=	TokenNameEQUAL
NRow	TokenNameIdentifier
[	TokenNameLBRACKET
xloc	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
twoThirdSurfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crnc	TokenNameIdentifier
+	TokenNamePLUS
nrnc	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
-	TokenNameMINUS
nrcc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
twoThirdSurfaceScaleY	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
nrcc	TokenNameIdentifier
+	TokenNamePLUS
nrnc	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
-	TokenNameMINUS
crnc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
crcc	TokenNameIdentifier
*	TokenNameMULTIPLY
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
p	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
xloc	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
crpc	TokenNameIdentifier
=	TokenNameEQUAL
crcc	TokenNameIdentifier
;	TokenNameSEMICOLON
nrpc	TokenNameIdentifier
=	TokenNameEQUAL
nrcc	TokenNameIdentifier
;	TokenNameSEMICOLON
crcc	TokenNameIdentifier
=	TokenNameEQUAL
crnc	TokenNameIdentifier
;	TokenNameSEMICOLON
nrcc	TokenNameIdentifier
=	TokenNameEQUAL
nrnc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
crpc	TokenNameIdentifier
=	TokenNameEQUAL
crcc	TokenNameIdentifier
;	TokenNameSEMICOLON
nrpc	TokenNameIdentifier
=	TokenNameEQUAL
nrcc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
xloc	TokenNameIdentifier
<	TokenNameLESS
xEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
xloc	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
crnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
nrnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
scanStridePP	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
n	TokenNameIdentifier
=	TokenNameEQUAL
NRow	TokenNameIdentifier
[	TokenNameLBRACKET
xloc	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
thirdSurfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crnc	TokenNameIdentifier
+	TokenNamePLUS
nrnc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crpc	TokenNameIdentifier
+	TokenNamePLUS
nrpc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
halfSurfaceScaleY	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
nrpc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
nrcc	TokenNameIdentifier
+	TokenNamePLUS
nrnc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
crpc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
+	TokenNamePLUS
crnc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
crcc	TokenNameIdentifier
*	TokenNameMULTIPLY
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
p	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
crpc	TokenNameIdentifier
=	TokenNameEQUAL
crcc	TokenNameIdentifier
;	TokenNameSEMICOLON
nrpc	TokenNameIdentifier
=	TokenNameEQUAL
nrcc	TokenNameIdentifier
;	TokenNameSEMICOLON
crcc	TokenNameIdentifier
=	TokenNameEQUAL
crnc	TokenNameIdentifier
;	TokenNameSEMICOLON
nrcc	TokenNameIdentifier
=	TokenNameEQUAL
nrnc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
xloc	TokenNameIdentifier
<	TokenNameLESS
x	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
xloc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
+	TokenNamePLUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
n	TokenNameIdentifier
=	TokenNameEQUAL
NRow	TokenNameIdentifier
[	TokenNameLBRACKET
xloc	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
twoThirdSurfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
+	TokenNamePLUS
nrcc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crpc	TokenNameIdentifier
+	TokenNamePLUS
nrpc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
twoThirdSurfaceScaleY	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
nrcc	TokenNameIdentifier
+	TokenNamePLUS
nrpc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
+	TokenNamePLUS
crpc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
crcc	TokenNameIdentifier
*	TokenNameMULTIPLY
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
yloc	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
yloc	TokenNameIdentifier
<	TokenNameLESS
yEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
yloc	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
NRow	TokenNameIdentifier
=	TokenNameEQUAL
N	TokenNameIdentifier
[	TokenNameLBRACKET
yloc	TokenNameIdentifier
-	TokenNameMINUS
y	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
p	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
+	TokenNamePLUS
scanStride	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
yloc	TokenNameIdentifier
-	TokenNameMINUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
xloc	TokenNameIdentifier
=	TokenNameEQUAL
x	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xloc	TokenNameIdentifier
<	TokenNameLESS
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
xloc	TokenNameIdentifier
=	TokenNameEQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
p	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
xloc	TokenNameIdentifier
-	TokenNameMINUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
prcc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
-	TokenNameMINUS
scanStride	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
crcc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
nrcc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
scanStride	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xloc	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
prpc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
-	TokenNameMINUS
scanStridePP	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
crpc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
nrpc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
scanStrideMM	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
xloc	TokenNameIdentifier
<	TokenNameLESS
xEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
crnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
prnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
-	TokenNameMINUS
scanStrideMM	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
nrnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
scanStridePP	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
n	TokenNameIdentifier
=	TokenNameEQUAL
NRow	TokenNameIdentifier
[	TokenNameLBRACKET
xloc	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
halfSurfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
prnc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crnc	TokenNameIdentifier
+	TokenNamePLUS
nrnc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
prcc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
+	TokenNamePLUS
nrcc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
thirdSurfaceScaleY	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
prcc	TokenNameIdentifier
+	TokenNamePLUS
prnc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
+	TokenNamePLUS
crnc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
crcc	TokenNameIdentifier
*	TokenNameMULTIPLY
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
p	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
xloc	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
prpc	TokenNameIdentifier
=	TokenNameEQUAL
prcc	TokenNameIdentifier
;	TokenNameSEMICOLON
crpc	TokenNameIdentifier
=	TokenNameEQUAL
crcc	TokenNameIdentifier
;	TokenNameSEMICOLON
nrpc	TokenNameIdentifier
=	TokenNameEQUAL
nrcc	TokenNameIdentifier
;	TokenNameSEMICOLON
prcc	TokenNameIdentifier
=	TokenNameEQUAL
prnc	TokenNameIdentifier
;	TokenNameSEMICOLON
crcc	TokenNameIdentifier
=	TokenNameEQUAL
crnc	TokenNameIdentifier
;	TokenNameSEMICOLON
nrcc	TokenNameIdentifier
=	TokenNameEQUAL
nrnc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
prpc	TokenNameIdentifier
=	TokenNameEQUAL
prcc	TokenNameIdentifier
;	TokenNameSEMICOLON
crpc	TokenNameIdentifier
=	TokenNameEQUAL
crcc	TokenNameIdentifier
;	TokenNameSEMICOLON
nrpc	TokenNameIdentifier
=	TokenNameEQUAL
nrcc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
xloc	TokenNameIdentifier
<	TokenNameLESS
xEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
xloc	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
prnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
-	TokenNameMINUS
scanStrideMM	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
crnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
nrnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
scanStridePP	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
n	TokenNameIdentifier
=	TokenNameEQUAL
NRow	TokenNameIdentifier
[	TokenNameLBRACKET
xloc	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
quarterSurfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
prnc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crnc	TokenNameIdentifier
+	TokenNamePLUS
nrnc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
prpc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crpc	TokenNameIdentifier
+	TokenNamePLUS
nrpc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
quarterSurfaceScaleY	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
nrpc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
nrcc	TokenNameIdentifier
+	TokenNamePLUS
nrnc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
prpc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
prcc	TokenNameIdentifier
+	TokenNamePLUS
prnc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
crcc	TokenNameIdentifier
*	TokenNameMULTIPLY
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
p	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
prpc	TokenNameIdentifier
=	TokenNameEQUAL
prcc	TokenNameIdentifier
;	TokenNameSEMICOLON
crpc	TokenNameIdentifier
=	TokenNameEQUAL
crcc	TokenNameIdentifier
;	TokenNameSEMICOLON
nrpc	TokenNameIdentifier
=	TokenNameEQUAL
nrcc	TokenNameIdentifier
;	TokenNameSEMICOLON
prcc	TokenNameIdentifier
=	TokenNameEQUAL
prnc	TokenNameIdentifier
;	TokenNameSEMICOLON
crcc	TokenNameIdentifier
=	TokenNameEQUAL
crnc	TokenNameIdentifier
;	TokenNameSEMICOLON
nrcc	TokenNameIdentifier
=	TokenNameEQUAL
nrnc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
xloc	TokenNameIdentifier
<	TokenNameLESS
x	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
xloc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
+	TokenNamePLUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
n	TokenNameIdentifier
=	TokenNameEQUAL
NRow	TokenNameIdentifier
[	TokenNameLBRACKET
xloc	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
halfSurfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
prcc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
+	TokenNamePLUS
nrcc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
prpc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crpc	TokenNameIdentifier
+	TokenNamePLUS
nrpc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
thirdSurfaceScaleY	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
nrpc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
nrcc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
prpc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
prcc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
crcc	TokenNameIdentifier
*	TokenNameMULTIPLY
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
yloc	TokenNameIdentifier
<	TokenNameLESS
y	TokenNameIdentifier
+	TokenNamePLUS
h	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
yloc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
+	TokenNamePLUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
NRow	TokenNameIdentifier
=	TokenNameEQUAL
N	TokenNameIdentifier
[	TokenNameLBRACKET
yloc	TokenNameIdentifier
-	TokenNameMINUS
y	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
p	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
+	TokenNamePLUS
scanStride	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
yloc	TokenNameIdentifier
-	TokenNameMINUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
xloc	TokenNameIdentifier
=	TokenNameEQUAL
x	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xloc	TokenNameIdentifier
<	TokenNameLESS
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
xloc	TokenNameIdentifier
=	TokenNameEQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
p	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
xloc	TokenNameIdentifier
-	TokenNameMINUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
crcc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
prcc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
-	TokenNameMINUS
scanStride	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xloc	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
prpc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
-	TokenNameMINUS
scanStridePP	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
crpc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
xloc	TokenNameIdentifier
<	TokenNameLESS
xEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
crnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
prnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
-	TokenNameMINUS
scanStrideMM	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
n	TokenNameIdentifier
=	TokenNameEQUAL
NRow	TokenNameIdentifier
[	TokenNameLBRACKET
xloc	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
twoThirdSurfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crnc	TokenNameIdentifier
+	TokenNamePLUS
prnc	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
-	TokenNameMINUS
prcc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
twoThirdSurfaceScaleY	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
+	TokenNamePLUS
crnc	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
prcc	TokenNameIdentifier
-	TokenNameMINUS
prnc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
crcc	TokenNameIdentifier
*	TokenNameMULTIPLY
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
p	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
xloc	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
crpc	TokenNameIdentifier
=	TokenNameEQUAL
crcc	TokenNameIdentifier
;	TokenNameSEMICOLON
prpc	TokenNameIdentifier
=	TokenNameEQUAL
prcc	TokenNameIdentifier
;	TokenNameSEMICOLON
crcc	TokenNameIdentifier
=	TokenNameEQUAL
crnc	TokenNameIdentifier
;	TokenNameSEMICOLON
prcc	TokenNameIdentifier
=	TokenNameEQUAL
prnc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
crpc	TokenNameIdentifier
=	TokenNameEQUAL
crcc	TokenNameIdentifier
;	TokenNameSEMICOLON
prpc	TokenNameIdentifier
=	TokenNameEQUAL
prcc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
xloc	TokenNameIdentifier
<	TokenNameLESS
xEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
xloc	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
crnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
prnc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
p	TokenNameIdentifier
-	TokenNameMINUS
scanStrideMM	TokenNameIdentifier
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
pixelScale	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
n	TokenNameIdentifier
=	TokenNameEQUAL
NRow	TokenNameIdentifier
[	TokenNameLBRACKET
xloc	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
thirdSurfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crnc	TokenNameIdentifier
+	TokenNamePLUS
prnc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crpc	TokenNameIdentifier
+	TokenNamePLUS
prpc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
halfSurfaceScaleY	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
crpc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
+	TokenNamePLUS
crnc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
prpc	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
prcc	TokenNameIdentifier
+	TokenNamePLUS
prnc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
crcc	TokenNameIdentifier
*	TokenNameMULTIPLY
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
p	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
crpc	TokenNameIdentifier
=	TokenNameEQUAL
crcc	TokenNameIdentifier
;	TokenNameSEMICOLON
prpc	TokenNameIdentifier
=	TokenNameEQUAL
prcc	TokenNameIdentifier
;	TokenNameSEMICOLON
crcc	TokenNameIdentifier
=	TokenNameEQUAL
crnc	TokenNameIdentifier
;	TokenNameSEMICOLON
prcc	TokenNameIdentifier
=	TokenNameEQUAL
prnc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
xloc	TokenNameIdentifier
<	TokenNameLESS
x	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
xloc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
srcRect	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
+	TokenNamePLUS
srcRect	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
n	TokenNameIdentifier
=	TokenNameEQUAL
NRow	TokenNameIdentifier
[	TokenNameLBRACKET
xloc	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
twoThirdSurfaceScaleX	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
+	TokenNamePLUS
prcc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crpc	TokenNameIdentifier
+	TokenNamePLUS
prpc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
twoThirdSurfaceScaleY	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
crcc	TokenNameIdentifier
+	TokenNamePLUS
crpc	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
prcc	TokenNameIdentifier
+	TokenNamePLUS
prpc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
crcc	TokenNameIdentifier
*	TokenNameMULTIPLY
surfaceScale	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
N	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
