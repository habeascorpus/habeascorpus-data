package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Color	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
SpotLight	TokenNameIdentifier
extends	TokenNameextends
AbstractLight	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
double	TokenNamedouble
lightX	TokenNameIdentifier
,	TokenNameCOMMA
lightY	TokenNameIdentifier
,	TokenNameCOMMA
lightZ	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
pointAtX	TokenNameIdentifier
,	TokenNameCOMMA
pointAtY	TokenNameIdentifier
,	TokenNameCOMMA
pointAtZ	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
specularExponent	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
limitingConeAngle	TokenNameIdentifier
,	TokenNameCOMMA
limitingCos	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
S	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
public	TokenNamepublic
double	TokenNamedouble
getLightX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
lightX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getLightY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
lightY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getLightZ	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
lightZ	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getPointAtX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
pointAtX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getPointAtY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
pointAtY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getPointAtZ	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
pointAtZ	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getSpecularExponent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
specularExponent	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getLimitingConeAngle	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
limitingConeAngle	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
SpotLight	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
lightX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
lightY	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
lightZ	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointAtX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointAtY	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointAtZ	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
specularExponent	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
limitingConeAngle	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
lightColor	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
lightColor	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
lightX	TokenNameIdentifier
=	TokenNameEQUAL
lightX	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
lightY	TokenNameIdentifier
=	TokenNameEQUAL
lightY	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
lightZ	TokenNameIdentifier
=	TokenNameEQUAL
lightZ	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
pointAtX	TokenNameIdentifier
=	TokenNameEQUAL
pointAtX	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
pointAtY	TokenNameIdentifier
=	TokenNameEQUAL
pointAtY	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
pointAtZ	TokenNameIdentifier
=	TokenNameEQUAL
pointAtZ	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
specularExponent	TokenNameIdentifier
=	TokenNameEQUAL
specularExponent	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
limitingConeAngle	TokenNameIdentifier
=	TokenNameEQUAL
limitingConeAngle	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
limitingCos	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
cos	TokenNameIdentifier
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
toRadians	TokenNameIdentifier
(	TokenNameLPAREN
limitingConeAngle	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
S	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pointAtX	TokenNameIdentifier
-	TokenNameMINUS
lightX	TokenNameIdentifier
;	TokenNameSEMICOLON
S	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pointAtY	TokenNameIdentifier
-	TokenNameMINUS
lightY	TokenNameIdentifier
;	TokenNameSEMICOLON
S	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pointAtZ	TokenNameIdentifier
-	TokenNameMINUS
lightZ	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
S	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
S	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
S	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
S	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
S	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
S	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
S	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
S	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
S	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isConstant	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
double	TokenNamedouble
getLightBase	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
double	TokenNamedouble
x	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
y	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
z	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
L	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
L0	TokenNameIdentifier
=	TokenNameEQUAL
lightX	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
L1	TokenNameIdentifier
=	TokenNameEQUAL
lightY	TokenNameIdentifier
-	TokenNameMINUS
y	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
L2	TokenNameIdentifier
=	TokenNameEQUAL
lightZ	TokenNameIdentifier
-	TokenNameMINUS
z	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
invNorm	TokenNameIdentifier
=	TokenNameEQUAL
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
L0	TokenNameIdentifier
*	TokenNameMULTIPLY
L0	TokenNameIdentifier
+	TokenNamePLUS
L1	TokenNameIdentifier
*	TokenNameMULTIPLY
L1	TokenNameIdentifier
+	TokenNamePLUS
L2	TokenNameIdentifier
*	TokenNameMULTIPLY
L2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
L0	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
L1	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
L2	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
invNorm	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
LS	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
(	TokenNameLPAREN
L0	TokenNameIdentifier
*	TokenNameMULTIPLY
S	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
L1	TokenNameIdentifier
*	TokenNameMULTIPLY
S	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
L2	TokenNameIdentifier
*	TokenNameMULTIPLY
S	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
L	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
L0	TokenNameIdentifier
;	TokenNameSEMICOLON
L	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
L1	TokenNameIdentifier
;	TokenNameSEMICOLON
L	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
L2	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
LS	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
limitingCos	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
double	TokenNamedouble
Iatt	TokenNameIdentifier
=	TokenNameEQUAL
limitingCos	TokenNameIdentifier
/	TokenNameDIVIDE
LS	TokenNameIdentifier
;	TokenNameSEMICOLON
Iatt	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
Iatt	TokenNameIdentifier
;	TokenNameSEMICOLON
Iatt	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
Iatt	TokenNameIdentifier
;	TokenNameSEMICOLON
Iatt	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
Iatt	TokenNameIdentifier
;	TokenNameSEMICOLON
Iatt	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
Iatt	TokenNameIdentifier
;	TokenNameSEMICOLON
Iatt	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
Iatt	TokenNameIdentifier
;	TokenNameSEMICOLON
Iatt	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
Iatt	TokenNameIdentifier
;	TokenNameSEMICOLON
Iatt	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
-	TokenNameMINUS
Iatt	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
Iatt	TokenNameIdentifier
*	TokenNameMULTIPLY
Math	TokenNameIdentifier
.	TokenNameDOT
pow	TokenNameIdentifier
(	TokenNameLPAREN
LS	TokenNameIdentifier
,	TokenNameCOMMA
specularExponent	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
getLight	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
double	TokenNamedouble
x	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
y	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
z	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
L	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
double	TokenNamedouble
s	TokenNameIdentifier
=	TokenNameEQUAL
getLightBase	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
,	TokenNameCOMMA
z	TokenNameIdentifier
,	TokenNameCOMMA
L	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
L	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
s	TokenNameIdentifier
;	TokenNameSEMICOLON
L	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
s	TokenNameIdentifier
;	TokenNameSEMICOLON
L	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
s	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
getLight4	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
double	TokenNamedouble
x	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
y	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
z	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
L	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
L	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
getLightBase	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
,	TokenNameCOMMA
z	TokenNameIdentifier
,	TokenNameCOMMA
L	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getLightRow4	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
x	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
y	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
dx	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
width	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
z	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
lightRow	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ret	TokenNameIdentifier
=	TokenNameEQUAL
lightRow	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ret	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
ret	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
width	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
width	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
getLight4	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
,	TokenNameCOMMA
z	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
ret	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
x	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dx	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
