package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
tiff	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TIFFLZWDecoder	TokenNameIdentifier
{	TokenNameLBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
stringTable	TokenNameIdentifier
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
data	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
uncompData	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
tableIndex	TokenNameIdentifier
,	TokenNameCOMMA
bitsToGet	TokenNameIdentifier
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
bytePointer	TokenNameIdentifier
,	TokenNameCOMMA
bitPointer	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
dstIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
w	TokenNameIdentifier
,	TokenNameCOMMA
h	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
predictor	TokenNameIdentifier
,	TokenNameCOMMA
samplesPerPixel	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nextData	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
nextBits	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
andTable	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
511	TokenNameIntegerLiteral
,	TokenNameCOMMA
1023	TokenNameIntegerLiteral
,	TokenNameCOMMA
2047	TokenNameIntegerLiteral
,	TokenNameCOMMA
4095	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
TIFFLZWDecoder	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
w	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
predictor	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
samplesPerPixel	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
w	TokenNameIdentifier
=	TokenNameEQUAL
w	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
predictor	TokenNameIdentifier
=	TokenNameEQUAL
predictor	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
samplesPerPixel	TokenNameIdentifier
=	TokenNameEQUAL
samplesPerPixel	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
decode	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
data	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
uncompData	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
h	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0x00	TokenNameIntegerLiteral
&&	TokenNameAND_AND
data	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0x01	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
UnsupportedOperationException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFLZWDecoder0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
initializeStringTable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
h	TokenNameIdentifier
=	TokenNameEQUAL
h	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
uncompData	TokenNameIdentifier
=	TokenNameEQUAL
uncompData	TokenNameIdentifier
;	TokenNameSEMICOLON
bytePointer	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bitPointer	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
dstIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nextData	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nextBits	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
code	TokenNameIdentifier
,	TokenNameCOMMA
oldCode	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
string	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
code	TokenNameIdentifier
=	TokenNameEQUAL
getNextCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
257	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
dstIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
uncompData	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
code	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
256	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
initializeStringTable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
code	TokenNameIdentifier
=	TokenNameEQUAL
getNextCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
code	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
257	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
writeString	TokenNameIdentifier
(	TokenNameLPAREN
stringTable	TokenNameIdentifier
[	TokenNameLBRACKET
code	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
oldCode	TokenNameIdentifier
=	TokenNameEQUAL
code	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
code	TokenNameIdentifier
<	TokenNameLESS
tableIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
string	TokenNameIdentifier
=	TokenNameEQUAL
stringTable	TokenNameIdentifier
[	TokenNameLBRACKET
code	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
writeString	TokenNameIdentifier
(	TokenNameLPAREN
string	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addStringToTable	TokenNameIdentifier
(	TokenNameLPAREN
stringTable	TokenNameIdentifier
[	TokenNameLBRACKET
oldCode	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
string	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
oldCode	TokenNameIdentifier
=	TokenNameEQUAL
code	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
string	TokenNameIdentifier
=	TokenNameEQUAL
stringTable	TokenNameIdentifier
[	TokenNameLBRACKET
oldCode	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
string	TokenNameIdentifier
=	TokenNameEQUAL
composeString	TokenNameIdentifier
(	TokenNameLPAREN
string	TokenNameIdentifier
,	TokenNameCOMMA
string	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeString	TokenNameIdentifier
(	TokenNameLPAREN
string	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addStringToTable	TokenNameIdentifier
(	TokenNameLPAREN
string	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
oldCode	TokenNameIdentifier
=	TokenNameEQUAL
code	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
predictor	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
count	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
count	TokenNameIdentifier
=	TokenNameEQUAL
samplesPerPixel	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
j	TokenNameIdentifier
*	TokenNameMULTIPLY
w	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
samplesPerPixel	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
*	TokenNameMULTIPLY
samplesPerPixel	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
uncompData	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
uncompData	TokenNameIdentifier
[	TokenNameLBRACKET
count	TokenNameIdentifier
-	TokenNameMINUS
samplesPerPixel	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
uncompData	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
initializeStringTable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
stringTable	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
4096	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
256	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
stringTable	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
stringTable	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tableIndex	TokenNameIdentifier
=	TokenNameEQUAL
258	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bitsToGet	TokenNameIdentifier
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
writeString	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
string	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
string	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
uncompData	TokenNameIdentifier
[	TokenNameLBRACKET
dstIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
string	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addStringToTable	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
oldString	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
newString	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
oldString	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
string	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
length	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
oldString	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
string	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
string	TokenNameIdentifier
[	TokenNameLBRACKET
length	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
newString	TokenNameIdentifier
;	TokenNameSEMICOLON
stringTable	TokenNameIdentifier
[	TokenNameLBRACKET
tableIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
string	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tableIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
511	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bitsToGet	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tableIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1023	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bitsToGet	TokenNameIdentifier
=	TokenNameEQUAL
11	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tableIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
2047	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bitsToGet	TokenNameIdentifier
=	TokenNameEQUAL
12	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addStringToTable	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
string	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stringTable	TokenNameIdentifier
[	TokenNameLBRACKET
tableIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
string	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tableIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
511	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bitsToGet	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tableIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1023	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bitsToGet	TokenNameIdentifier
=	TokenNameEQUAL
11	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tableIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
2047	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bitsToGet	TokenNameIdentifier
=	TokenNameEQUAL
12	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
composeString	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
oldString	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
newString	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
oldString	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
string	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
length	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
oldString	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
string	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
string	TokenNameIdentifier
[	TokenNameLBRACKET
length	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
newString	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
string	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNextCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
nextData	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
nextData	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
data	TokenNameIdentifier
[	TokenNameLBRACKET
bytePointer	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextBits	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextBits	TokenNameIdentifier
<	TokenNameLESS
bitsToGet	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nextData	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
nextData	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
data	TokenNameIdentifier
[	TokenNameLBRACKET
bytePointer	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextBits	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
code	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
nextData	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
(	TokenNameLPAREN
nextBits	TokenNameIdentifier
-	TokenNameMINUS
bitsToGet	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
&	TokenNameAND
andTable	TokenNameIdentifier
[	TokenNameLBRACKET
bitsToGet	TokenNameIdentifier
-	TokenNameMINUS
9	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
nextBits	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
bitsToGet	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
code	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ArrayIndexOutOfBoundsException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
257	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
