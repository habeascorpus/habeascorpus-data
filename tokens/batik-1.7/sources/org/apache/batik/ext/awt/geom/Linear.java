package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Point2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Rectangle2D	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Linear	TokenNameIdentifier
implements	TokenNameimplements
Segment	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
p1	TokenNameIdentifier
,	TokenNameCOMMA
p2	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Linear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
p1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
p2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Linear	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
x1	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
y1	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
x2	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
y2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
p1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
x1	TokenNameIdentifier
,	TokenNameCOMMA
y1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
p2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
x2	TokenNameIdentifier
,	TokenNameCOMMA
y2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Linear	TokenNameIdentifier
(	TokenNameLPAREN
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
p1	TokenNameIdentifier
,	TokenNameCOMMA
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
p2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
p1	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
p2	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Linear	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
,	TokenNameCOMMA
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
,	TokenNameCOMMA
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Segment	TokenNameIdentifier
reverse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Linear	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
,	TokenNameCOMMA
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
,	TokenNameCOMMA
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
minX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
<	TokenNameLESS
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
maxX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
>	TokenNameGREATER
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
minY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
<	TokenNameLESS
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
maxY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
>	TokenNameGREATER
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Rectangle2D	TokenNameIdentifier
getBounds2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
,	TokenNameCOMMA
w	TokenNameIdentifier
,	TokenNameCOMMA
h	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
<	TokenNameLESS
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
x	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
w	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
x	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
w	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
-	TokenNameMINUS
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
<	TokenNameLESS
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
y	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
y	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
-	TokenNameMINUS
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
Rectangle2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
,	TokenNameCOMMA
w	TokenNameIdentifier
,	TokenNameCOMMA
h	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
evalDt	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
x	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
y	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
eval	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
x	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
y	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Segment	TokenNameIdentifier
.	TokenNameDOT
SplitResults	TokenNameIdentifier
split	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
y	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
y	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
y	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
y	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
y	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
y	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
y	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
double	TokenNamedouble
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
y	TokenNameIdentifier
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Segment	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
t0	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
getSegment	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
t	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Segment	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
t1	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
getSegment	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
<	TokenNameLESS
y	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
new	TokenNamenew
Segment	TokenNameIdentifier
.	TokenNameDOT
SplitResults	TokenNameIdentifier
(	TokenNameLPAREN
t0	TokenNameIdentifier
,	TokenNameCOMMA
t1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Segment	TokenNameIdentifier
.	TokenNameDOT
SplitResults	TokenNameIdentifier
(	TokenNameLPAREN
t1	TokenNameIdentifier
,	TokenNameCOMMA
t0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Segment	TokenNameIdentifier
getSegment	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
t0	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
t1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
np1	TokenNameIdentifier
=	TokenNameEQUAL
eval	TokenNameIdentifier
(	TokenNameLPAREN
t0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
np2	TokenNameIdentifier
=	TokenNameEQUAL
eval	TokenNameIdentifier
(	TokenNameLPAREN
t1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Linear	TokenNameIdentifier
(	TokenNameLPAREN
np1	TokenNameIdentifier
,	TokenNameCOMMA
np2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Segment	TokenNameIdentifier
splitBefore	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Linear	TokenNameIdentifier
(	TokenNameLPAREN
p1	TokenNameIdentifier
,	TokenNameCOMMA
eval	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Segment	TokenNameIdentifier
splitAfter	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Linear	TokenNameIdentifier
(	TokenNameLPAREN
eval	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
p2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
subdivide	TokenNameIdentifier
(	TokenNameLPAREN
Segment	TokenNameIdentifier
s0	TokenNameIdentifier
,	TokenNameCOMMA
Segment	TokenNameIdentifier
s1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Linear	TokenNameIdentifier
l0	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
,	TokenNameCOMMA
l1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
s0	TokenNameIdentifier
instanceof	TokenNameinstanceof
Linear	TokenNameIdentifier
)	TokenNameRPAREN
l0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Linear	TokenNameIdentifier
)	TokenNameRPAREN
s0	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
s1	TokenNameIdentifier
instanceof	TokenNameinstanceof
Linear	TokenNameIdentifier
)	TokenNameRPAREN
l1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Linear	TokenNameIdentifier
)	TokenNameRPAREN
s1	TokenNameIdentifier
;	TokenNameSEMICOLON
subdivide	TokenNameIdentifier
(	TokenNameLPAREN
l0	TokenNameIdentifier
,	TokenNameCOMMA
l1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
subdivide	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
t	TokenNameIdentifier
,	TokenNameCOMMA
Segment	TokenNameIdentifier
s0	TokenNameIdentifier
,	TokenNameCOMMA
Segment	TokenNameIdentifier
s1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Linear	TokenNameIdentifier
l0	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
,	TokenNameCOMMA
l1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
s0	TokenNameIdentifier
instanceof	TokenNameinstanceof
Linear	TokenNameIdentifier
)	TokenNameRPAREN
l0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Linear	TokenNameIdentifier
)	TokenNameRPAREN
s0	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
s1	TokenNameIdentifier
instanceof	TokenNameinstanceof
Linear	TokenNameIdentifier
)	TokenNameRPAREN
l1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Linear	TokenNameIdentifier
)	TokenNameRPAREN
s1	TokenNameIdentifier
;	TokenNameSEMICOLON
subdivide	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
,	TokenNameCOMMA
l0	TokenNameIdentifier
,	TokenNameCOMMA
l1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
subdivide	TokenNameIdentifier
(	TokenNameLPAREN
Linear	TokenNameIdentifier
l0	TokenNameIdentifier
,	TokenNameCOMMA
Linear	TokenNameIdentifier
l1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
l0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
l1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
double	TokenNamedouble
x	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
+	TokenNamePLUS
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
y	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
+	TokenNamePLUS
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
l0	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
l0	TokenNameIdentifier
.	TokenNameDOT
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
l0	TokenNameIdentifier
.	TokenNameDOT
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
l0	TokenNameIdentifier
.	TokenNameDOT
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
=	TokenNameEQUAL
x	TokenNameIdentifier
;	TokenNameSEMICOLON
l0	TokenNameIdentifier
.	TokenNameDOT
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
=	TokenNameEQUAL
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
l1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
l1	TokenNameIdentifier
.	TokenNameDOT
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
=	TokenNameEQUAL
x	TokenNameIdentifier
;	TokenNameSEMICOLON
l1	TokenNameIdentifier
.	TokenNameDOT
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
=	TokenNameEQUAL
y	TokenNameIdentifier
;	TokenNameSEMICOLON
l1	TokenNameIdentifier
.	TokenNameDOT
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
l1	TokenNameIdentifier
.	TokenNameDOT
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
subdivide	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
t	TokenNameIdentifier
,	TokenNameCOMMA
Linear	TokenNameIdentifier
l0	TokenNameIdentifier
,	TokenNameCOMMA
Linear	TokenNameIdentifier
l1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
l0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
l1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
double	TokenNamedouble
x	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
y	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
l0	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
l0	TokenNameIdentifier
.	TokenNameDOT
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
l0	TokenNameIdentifier
.	TokenNameDOT
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
l0	TokenNameIdentifier
.	TokenNameDOT
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
=	TokenNameEQUAL
x	TokenNameIdentifier
;	TokenNameSEMICOLON
l0	TokenNameIdentifier
.	TokenNameDOT
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
=	TokenNameEQUAL
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
l1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
l1	TokenNameIdentifier
.	TokenNameDOT
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
=	TokenNameEQUAL
x	TokenNameIdentifier
;	TokenNameSEMICOLON
l1	TokenNameIdentifier
.	TokenNameDOT
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
=	TokenNameEQUAL
y	TokenNameIdentifier
;	TokenNameSEMICOLON
l1	TokenNameIdentifier
.	TokenNameDOT
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
l1	TokenNameIdentifier
.	TokenNameDOT
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
dx	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
dy	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
dx	TokenNameIdentifier
*	TokenNameMULTIPLY
dx	TokenNameIdentifier
+	TokenNamePLUS
dy	TokenNameIdentifier
*	TokenNameMULTIPLY
dy	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getLength	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
maxErr	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"M"	TokenNameStringLiteral
+	TokenNamePLUS
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
+	TokenNamePLUS
','	TokenNameCharacterLiteral
+	TokenNamePLUS
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
+	TokenNamePLUS
'L'	TokenNameCharacterLiteral
+	TokenNamePLUS
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
+	TokenNamePLUS
','	TokenNameCharacterLiteral
+	TokenNamePLUS
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
