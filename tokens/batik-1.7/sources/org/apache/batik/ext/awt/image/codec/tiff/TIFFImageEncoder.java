package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
tiff	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Rectangle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
color	TokenNameIdentifier
.	TokenNameDOT
ColorSpace	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
BufferedImage	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
ColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
ComponentSampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBuffer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBufferByte	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
IndexColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
MultiPixelPackedSampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
Raster	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
RenderedImage	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
SampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
WritableRaster	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
ByteArrayOutputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
FileInputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
OutputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
RandomAccessFile	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Iterator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SortedSet	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
TreeSet	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
zip	TokenNameIdentifier
.	TokenNameDOT
Deflater	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ImageEncodeParam	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ImageEncoderImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SeekableOutputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGEncodeParam	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGQTable	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TIFFImageEncoder	TokenNameIdentifier
extends	TokenNameextends
ImageEncoderImpl	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_UNSUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_BILEVEL_WHITE_IS_ZERO	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_BILEVEL_BLACK_IS_ZERO	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_GRAY	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_PALETTE	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_RGB	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_CMYK	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_YCBCR	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_CIELAB	TokenNameIdentifier
=	TokenNameEQUAL
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_GENERIC	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_NONE	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_JPEG_TTN2	TokenNameIdentifier
=	TokenNameEQUAL
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_PACKBITS	TokenNameIdentifier
=	TokenNameEQUAL
32773	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
COMP_DEFLATE	TokenNameIdentifier
=	TokenNameEQUAL
32946	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_JPEG_TABLES	TokenNameIdentifier
=	TokenNameEQUAL
347	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_YCBCR_SUBSAMPLING	TokenNameIdentifier
=	TokenNameEQUAL
530	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_YCBCR_POSITIONING	TokenNameIdentifier
=	TokenNameEQUAL
531	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIFF_REF_BLACK_WHITE	TokenNameIdentifier
=	TokenNameEQUAL
532	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
EXTRA_SAMPLE_UNSPECIFIED	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
EXTRA_SAMPLE_ASSOCIATED_ALPHA	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
EXTRA_SAMPLE_UNASSOCIATED_ALPHA	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DEFAULT_ROWS_PER_STRIP	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
TIFFImageEncoder	TokenNameIdentifier
(	TokenNameLPAREN
OutputStream	TokenNameIdentifier
output	TokenNameIdentifier
,	TokenNameCOMMA
ImageEncodeParam	TokenNameIdentifier
param	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
output	TokenNameIdentifier
,	TokenNameCOMMA
param	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
param	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
param	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TIFFEncodeParam	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
encode	TokenNameIdentifier
(	TokenNameLPAREN
RenderedImage	TokenNameIdentifier
im	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
writeFileHeader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TIFFEncodeParam	TokenNameIdentifier
encodeParam	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
TIFFEncodeParam	TokenNameIdentifier
)	TokenNameRPAREN
param	TokenNameIdentifier
;	TokenNameSEMICOLON
Iterator	TokenNameIdentifier
iter	TokenNameIdentifier
=	TokenNameEQUAL
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getExtraImages	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
iter	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
ifdOffset	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
RenderedImage	TokenNameIdentifier
nextImage	TokenNameIdentifier
=	TokenNameEQUAL
im	TokenNameIdentifier
;	TokenNameSEMICOLON
TIFFEncodeParam	TokenNameIdentifier
nextParam	TokenNameIdentifier
=	TokenNameEQUAL
encodeParam	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
hasNext	TokenNameIdentifier
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
hasNext	TokenNameIdentifier
=	TokenNameEQUAL
iter	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ifdOffset	TokenNameIdentifier
=	TokenNameEQUAL
encode	TokenNameIdentifier
(	TokenNameLPAREN
nextImage	TokenNameIdentifier
,	TokenNameCOMMA
nextParam	TokenNameIdentifier
,	TokenNameCOMMA
ifdOffset	TokenNameIdentifier
,	TokenNameCOMMA
!	TokenNameNOT
hasNext	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
hasNext	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
obj	TokenNameIdentifier
=	TokenNameEQUAL
iter	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
obj	TokenNameIdentifier
instanceof	TokenNameinstanceof
RenderedImage	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nextImage	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
RenderedImage	TokenNameIdentifier
)	TokenNameRPAREN
obj	TokenNameIdentifier
;	TokenNameSEMICOLON
nextParam	TokenNameIdentifier
=	TokenNameEQUAL
encodeParam	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
obj	TokenNameIdentifier
instanceof	TokenNameinstanceof
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
o	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
obj	TokenNameIdentifier
;	TokenNameSEMICOLON
nextImage	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
RenderedImage	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
nextParam	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
TIFFEncodeParam	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
hasNext	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
encode	TokenNameIdentifier
(	TokenNameLPAREN
im	TokenNameIdentifier
,	TokenNameCOMMA
encodeParam	TokenNameIdentifier
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
encode	TokenNameIdentifier
(	TokenNameLPAREN
RenderedImage	TokenNameIdentifier
im	TokenNameIdentifier
,	TokenNameCOMMA
TIFFEncodeParam	TokenNameIdentifier
encodeParam	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
ifdOffset	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
isLast	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
compression	TokenNameIdentifier
=	TokenNameEQUAL
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getCompression	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isTiled	TokenNameIdentifier
=	TokenNameEQUAL
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getWriteTiled	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
minX	TokenNameIdentifier
=	TokenNameEQUAL
im	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
minY	TokenNameIdentifier
=	TokenNameEQUAL
im	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
width	TokenNameIdentifier
=	TokenNameEQUAL
im	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
height	TokenNameIdentifier
=	TokenNameEQUAL
im	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SampleModel	TokenNameIdentifier
sampleModel	TokenNameIdentifier
=	TokenNameEQUAL
im	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sampleSize	TokenNameIdentifier
=	TokenNameEQUAL
sampleModel	TokenNameIdentifier
.	TokenNameDOT
getSampleSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
sampleSize	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Error	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
numBands	TokenNameIdentifier
=	TokenNameEQUAL
sampleModel	TokenNameIdentifier
.	TokenNameDOT
getNumBands	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
||	TokenNameOR_OR
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
numBands	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Error	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
dataType	TokenNameIdentifier
=	TokenNameEQUAL
sampleModel	TokenNameIdentifier
.	TokenNameDOT
getDataType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
dataType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_BYTE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
&&	TokenNameAND_AND
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Error	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_SHORT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_USHORT	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Error	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder3"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_FLOAT	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Error	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder4"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
Error	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
dataTypeIsShort	TokenNameIdentifier
=	TokenNameEQUAL
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_SHORT	TokenNameIdentifier
||	TokenNameOR_OR
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_USHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
ColorModel	TokenNameIdentifier
colorModel	TokenNameIdentifier
=	TokenNameEQUAL
im	TokenNameIdentifier
.	TokenNameDOT
getColorModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
colorModel	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
colorModel	TokenNameIdentifier
instanceof	TokenNameinstanceof
IndexColorModel	TokenNameIdentifier
&&	TokenNameAND_AND
dataType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_BYTE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Error	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder6"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
IndexColorModel	TokenNameIdentifier
icm	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
sizeOfColormap	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
colormap	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_UNSUPPORTED	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
numExtraSamples	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
extraSampleType	TokenNameIdentifier
=	TokenNameEQUAL
EXTRA_SAMPLE_UNSPECIFIED	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
colorModel	TokenNameIdentifier
instanceof	TokenNameinstanceof
IndexColorModel	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
icm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
IndexColorModel	TokenNameIdentifier
)	TokenNameRPAREN
colorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
mapSize	TokenNameIdentifier
=	TokenNameEQUAL
icm	TokenNameIdentifier
.	TokenNameDOT
getMapSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
numBands	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
mapSize	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder7"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
r	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
mapSize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
icm	TokenNameIdentifier
.	TokenNameDOT
getReds	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
g	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
mapSize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
icm	TokenNameIdentifier
.	TokenNameDOT
getGreens	TokenNameIdentifier
(	TokenNameLPAREN
g	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
b	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
mapSize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
icm	TokenNameIdentifier
.	TokenNameDOT
getBlues	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
r	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
r	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
255	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
g	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
g	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
255	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
b	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
b	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_BILEVEL_BLACK_IS_ZERO	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
r	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
255	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
r	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
g	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
255	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
g	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
b	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
255	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
b	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_BILEVEL_WHITE_IS_ZERO	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_PALETTE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
numBands	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_PALETTE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
colorModel	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
numBands	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_BILEVEL_BLACK_IS_ZERO	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_GENERIC	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
numBands	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
numExtraSamples	TokenNameIdentifier
=	TokenNameEQUAL
numBands	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ColorSpace	TokenNameIdentifier
colorSpace	TokenNameIdentifier
=	TokenNameEQUAL
colorModel	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
colorSpace	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
TYPE_CMYK	TokenNameIdentifier
:	TokenNameCOLON
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_CMYK	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
TYPE_GRAY	TokenNameIdentifier
:	TokenNameCOLON
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_GRAY	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
TYPE_Lab	TokenNameIdentifier
:	TokenNameCOLON
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_CIELAB	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
TYPE_RGB	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
&&	TokenNameAND_AND
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getJPEGCompressRGBToYCbCr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_YCBCR	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_RGB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
TYPE_YCbCr	TokenNameIdentifier
:	TokenNameCOLON
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_YCBCR	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
imageType	TokenNameIdentifier
=	TokenNameEQUAL
TIFF_GENERIC	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TIFF_GENERIC	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
numExtraSamples	TokenNameIdentifier
=	TokenNameEQUAL
numBands	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
numBands	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
numExtraSamples	TokenNameIdentifier
=	TokenNameEQUAL
numBands	TokenNameIdentifier
-	TokenNameMINUS
colorSpace	TokenNameIdentifier
.	TokenNameDOT
getNumComponents	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
numExtraSamples	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
colorModel	TokenNameIdentifier
.	TokenNameDOT
hasAlpha	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
extraSampleType	TokenNameIdentifier
=	TokenNameEQUAL
colorModel	TokenNameIdentifier
.	TokenNameDOT
isAlphaPremultiplied	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
EXTRA_SAMPLE_ASSOCIATED_ALPHA	TokenNameIdentifier
:	TokenNameCOLON
EXTRA_SAMPLE_UNASSOCIATED_ALPHA	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TIFF_UNSUPPORTED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Error	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder8"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TIFF_PALETTE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Error	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder11"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
8	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TIFF_GRAY	TokenNameIdentifier
||	TokenNameOR_OR
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TIFF_RGB	TokenNameIdentifier
||	TokenNameOR_OR
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TIFF_YCBCR	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Error	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder9"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
photometricInterpretation	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
imageType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
TIFF_BILEVEL_WHITE_IS_ZERO	TokenNameIdentifier
:	TokenNameCOLON
photometricInterpretation	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFF_BILEVEL_BLACK_IS_ZERO	TokenNameIdentifier
:	TokenNameCOLON
photometricInterpretation	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFF_GRAY	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
TIFF_GENERIC	TokenNameIdentifier
:	TokenNameCOLON
photometricInterpretation	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFF_PALETTE	TokenNameIdentifier
:	TokenNameCOLON
photometricInterpretation	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
icm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
IndexColorModel	TokenNameIdentifier
)	TokenNameRPAREN
colorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
sizeOfColormap	TokenNameIdentifier
=	TokenNameEQUAL
icm	TokenNameIdentifier
.	TokenNameDOT
getMapSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
r	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
sizeOfColormap	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
icm	TokenNameIdentifier
.	TokenNameDOT
getReds	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
g	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
sizeOfColormap	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
icm	TokenNameIdentifier
.	TokenNameDOT
getGreens	TokenNameIdentifier
(	TokenNameLPAREN
g	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
b	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
sizeOfColormap	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
icm	TokenNameIdentifier
.	TokenNameDOT
getBlues	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
redIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
greenIndex	TokenNameIdentifier
=	TokenNameEQUAL
sizeOfColormap	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
blueIndex	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
sizeOfColormap	TokenNameIdentifier
;	TokenNameSEMICOLON
colormap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
sizeOfColormap	TokenNameIdentifier
*	TokenNameMULTIPLY
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
sizeOfColormap	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
tmp	TokenNameIdentifier
=	TokenNameEQUAL
0xff	TokenNameIntegerLiteral
&	TokenNameAND
r	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
redIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
tmp	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
tmp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
0xff	TokenNameIntegerLiteral
&	TokenNameAND
g	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
greenIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
tmp	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
tmp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
0xff	TokenNameIntegerLiteral
&	TokenNameAND
b	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
colormap	TokenNameIdentifier
[	TokenNameLBRACKET
blueIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
tmp	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
tmp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sizeOfColormap	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFF_RGB	TokenNameIdentifier
:	TokenNameCOLON
photometricInterpretation	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFF_CMYK	TokenNameIdentifier
:	TokenNameCOLON
photometricInterpretation	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFF_YCBCR	TokenNameIdentifier
:	TokenNameCOLON
photometricInterpretation	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFF_CIELAB	TokenNameIdentifier
:	TokenNameCOLON
photometricInterpretation	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
Error	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder8"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
tileWidth	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
tileHeight	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isTiled	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tileWidth	TokenNameIdentifier
=	TokenNameEQUAL
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getTileWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getTileWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
im	TokenNameIdentifier
.	TokenNameDOT
getTileWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileHeight	TokenNameIdentifier
=	TokenNameEQUAL
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getTileHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getTileHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
im	TokenNameIdentifier
.	TokenNameDOT
getTileHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tileWidth	TokenNameIdentifier
=	TokenNameEQUAL
width	TokenNameIdentifier
;	TokenNameSEMICOLON
tileHeight	TokenNameIdentifier
=	TokenNameEQUAL
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getTileHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getTileHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
DEFAULT_ROWS_PER_STRIP	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
JPEGEncodeParam	TokenNameIdentifier
jep	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
jep	TokenNameIdentifier
=	TokenNameEQUAL
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getJPEGEncodeParam	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
maxSubH	TokenNameIdentifier
=	TokenNameEQUAL
jep	TokenNameIdentifier
.	TokenNameDOT
getHorizontalSubsampling	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
maxSubV	TokenNameIdentifier
=	TokenNameEQUAL
jep	TokenNameIdentifier
.	TokenNameDOT
getVerticalSubsampling	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numBands	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
subH	TokenNameIdentifier
=	TokenNameEQUAL
jep	TokenNameIdentifier
.	TokenNameDOT
getHorizontalSubsampling	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
subH	TokenNameIdentifier
>	TokenNameGREATER
maxSubH	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
maxSubH	TokenNameIdentifier
=	TokenNameEQUAL
subH	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
subV	TokenNameIdentifier
=	TokenNameEQUAL
jep	TokenNameIdentifier
.	TokenNameDOT
getVerticalSubsampling	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
subV	TokenNameIdentifier
>	TokenNameGREATER
maxSubV	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
maxSubV	TokenNameIdentifier
=	TokenNameEQUAL
subV	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
factorV	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
maxSubV	TokenNameIdentifier
;	TokenNameSEMICOLON
tileHeight	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
tileHeight	TokenNameIdentifier
/	TokenNameDIVIDE
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
factorV	TokenNameIdentifier
+	TokenNamePLUS
0.5F	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
factorV	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tileHeight	TokenNameIdentifier
<	TokenNameLESS
factorV	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tileHeight	TokenNameIdentifier
=	TokenNameEQUAL
factorV	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isTiled	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
factorH	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
maxSubH	TokenNameIdentifier
;	TokenNameSEMICOLON
tileWidth	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
tileWidth	TokenNameIdentifier
/	TokenNameDIVIDE
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
factorH	TokenNameIdentifier
+	TokenNamePLUS
0.5F	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
factorH	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tileWidth	TokenNameIdentifier
<	TokenNameLESS
factorH	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tileWidth	TokenNameIdentifier
=	TokenNameEQUAL
factorH	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
numTiles	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isTiled	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
numTiles	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
width	TokenNameIdentifier
+	TokenNamePLUS
tileWidth	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
tileWidth	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
height	TokenNameIdentifier
+	TokenNamePLUS
tileHeight	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
tileHeight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
numTiles	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
ceil	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
double	TokenNamedouble
)	TokenNameRPAREN
height	TokenNameIdentifier
/	TokenNameDIVIDE
(	TokenNameLPAREN
double	TokenNamedouble
)	TokenNameRPAREN
tileHeight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tileByteCounts	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
numTiles	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
long	TokenNamelong
bytesPerRow	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
ceil	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
/	TokenNameDIVIDE
8.0	TokenNameDoubleLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
tileWidth	TokenNameIdentifier
*	TokenNameMULTIPLY
numBands	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
bytesPerTile	TokenNameIdentifier
=	TokenNameEQUAL
bytesPerRow	TokenNameIdentifier
*	TokenNameMULTIPLY
tileHeight	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numTiles	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
bytesPerTile	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isTiled	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
lastStripRows	TokenNameIdentifier
=	TokenNameEQUAL
height	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
tileHeight	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
numTiles	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
numTiles	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
lastStripRows	TokenNameIdentifier
*	TokenNameMULTIPLY
bytesPerRow	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
long	TokenNamelong
totalBytesOfData	TokenNameIdentifier
=	TokenNameEQUAL
bytesPerTile	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
numTiles	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
numTiles	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tileOffsets	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
numTiles	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
SortedSet	TokenNameIdentifier
fields	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TreeSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_IMAGE_WIDTH	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_LONG	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
width	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_IMAGE_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_LONG	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
height	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
shortSampleSize	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
numBands	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numBands	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
shortSampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_BITS_PER_SAMPLE	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SHORT	TokenNameIdentifier
,	TokenNameCOMMA
numBands	TokenNameIdentifier
,	TokenNameCOMMA
shortSampleSize	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_COMPRESSION	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SHORT	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
compression	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_PHOTOMETRIC_INTERPRETATION	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SHORT	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
photometricInterpretation	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isTiled	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_STRIP_OFFSETS	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_LONG	TokenNameIdentifier
,	TokenNameCOMMA
numTiles	TokenNameIdentifier
,	TokenNameCOMMA
tileOffsets	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_SAMPLES_PER_PIXEL	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SHORT	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
numBands	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isTiled	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_ROWS_PER_STRIP	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_LONG	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
tileHeight	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_STRIP_BYTE_COUNTS	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_LONG	TokenNameIdentifier
,	TokenNameCOMMA
numTiles	TokenNameIdentifier
,	TokenNameCOMMA
tileByteCounts	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
colormap	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_COLORMAP	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SHORT	TokenNameIdentifier
,	TokenNameCOMMA
sizeOfColormap	TokenNameIdentifier
,	TokenNameCOMMA
colormap	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isTiled	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_WIDTH	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_LONG	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
tileWidth	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_LONG	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
tileHeight	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_OFFSETS	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_LONG	TokenNameIdentifier
,	TokenNameCOMMA
numTiles	TokenNameIdentifier
,	TokenNameCOMMA
tileOffsets	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_TILE_BYTE_COUNTS	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_LONG	TokenNameIdentifier
,	TokenNameCOMMA
numTiles	TokenNameIdentifier
,	TokenNameCOMMA
tileByteCounts	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
numExtraSamples	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
extraSamples	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
numExtraSamples	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numExtraSamples	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
extraSamples	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
extraSampleType	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_EXTRA_SAMPLES	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SHORT	TokenNameIdentifier
,	TokenNameCOMMA
numExtraSamples	TokenNameIdentifier
,	TokenNameCOMMA
extraSamples	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_BYTE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sampleFormat	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
numBands	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_FLOAT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sampleFormat	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_USHORT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sampleFormat	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sampleFormat	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
b	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b	TokenNameIdentifier
<	TokenNameLESS
numBands	TokenNameIdentifier
;	TokenNameSEMICOLON
b	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
sampleFormat	TokenNameIdentifier
[	TokenNameLBRACKET
b	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
sampleFormat	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFFImageDecoder	TokenNameIdentifier
.	TokenNameDOT
TIFF_SAMPLE_FORMAT	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SHORT	TokenNameIdentifier
,	TokenNameCOMMA
numBands	TokenNameIdentifier
,	TokenNameCOMMA
sampleFormat	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGEncodeParam	TokenNameIdentifier
jpegEncodeParam	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGImageEncoder	TokenNameIdentifier
jpegEncoder	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
jpegColorID	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
jpegColorID	TokenNameIdentifier
=	TokenNameEQUAL
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGDecodeParam	TokenNameIdentifier
.	TokenNameDOT
COLOR_ID_UNKNOWN	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
imageType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
TIFF_GRAY	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
TIFF_PALETTE	TokenNameIdentifier
:	TokenNameCOLON
jpegColorID	TokenNameIdentifier
=	TokenNameEQUAL
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGDecodeParam	TokenNameIdentifier
.	TokenNameDOT
COLOR_ID_GRAY	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFF_RGB	TokenNameIdentifier
:	TokenNameCOLON
jpegColorID	TokenNameIdentifier
=	TokenNameEQUAL
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGDecodeParam	TokenNameIdentifier
.	TokenNameDOT
COLOR_ID_RGB	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFF_YCBCR	TokenNameIdentifier
:	TokenNameCOLON
jpegColorID	TokenNameIdentifier
=	TokenNameEQUAL
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGDecodeParam	TokenNameIdentifier
.	TokenNameDOT
COLOR_ID_YCbCr	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Raster	TokenNameIdentifier
tile00	TokenNameIdentifier
=	TokenNameEQUAL
im	TokenNameIdentifier
.	TokenNameDOT
getTile	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
jpegEncodeParam	TokenNameIdentifier
=	TokenNameEQUAL
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGCodec	TokenNameIdentifier
.	TokenNameDOT
getDefaultJPEGEncodeParam	TokenNameIdentifier
(	TokenNameLPAREN
tile00	TokenNameIdentifier
,	TokenNameCOMMA
jpegColorID	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
modifyEncodeParam	TokenNameIdentifier
(	TokenNameLPAREN
jep	TokenNameIdentifier
,	TokenNameCOMMA
jpegEncodeParam	TokenNameIdentifier
,	TokenNameCOMMA
numBands	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
jpegEncodeParam	TokenNameIdentifier
.	TokenNameDOT
setImageInfoValid	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
jpegEncodeParam	TokenNameIdentifier
.	TokenNameDOT
setTableInfoValid	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ByteArrayOutputStream	TokenNameIdentifier
tableStream	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ByteArrayOutputStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
jpegEncoder	TokenNameIdentifier
=	TokenNameEQUAL
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGCodec	TokenNameIdentifier
.	TokenNameDOT
createJPEGEncoder	TokenNameIdentifier
(	TokenNameLPAREN
tableStream	TokenNameIdentifier
,	TokenNameCOMMA
jpegEncodeParam	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
jpegEncoder	TokenNameIdentifier
.	TokenNameDOT
encode	TokenNameIdentifier
(	TokenNameLPAREN
tile00	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tableData	TokenNameIdentifier
=	TokenNameEQUAL
tableStream	TokenNameIdentifier
.	TokenNameDOT
toByteArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFF_JPEG_TABLES	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
tableData	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
,	TokenNameCOMMA
tableData	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
jpegEncoder	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TIFF_YCBCR	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
subsampleH	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
char	TokenNamechar
subsampleV	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
subsampleH	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
jep	TokenNameIdentifier
.	TokenNameDOT
getHorizontalSubsampling	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
subsampleV	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
jep	TokenNameIdentifier
.	TokenNameDOT
getVerticalSubsampling	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numBands	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
subH	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
jep	TokenNameIdentifier
.	TokenNameDOT
getHorizontalSubsampling	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
subH	TokenNameIdentifier
>	TokenNameGREATER
subsampleH	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
subsampleH	TokenNameIdentifier
=	TokenNameEQUAL
subH	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
char	TokenNamechar
subV	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
jep	TokenNameIdentifier
.	TokenNameDOT
getVerticalSubsampling	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
subV	TokenNameIdentifier
>	TokenNameGREATER
subsampleV	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
subsampleV	TokenNameIdentifier
=	TokenNameEQUAL
subV	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFF_YCBCR_SUBSAMPLING	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SHORT	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
subsampleH	TokenNameIdentifier
,	TokenNameCOMMA
subsampleV	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFF_YCBCR_POSITIONING	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SHORT	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
refbw	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
refbw	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
255	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
128	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
255	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
128	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
255	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
refbw	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
{	TokenNameLBRACE
15	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
235	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
128	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
240	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
128	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
240	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TIFFField	TokenNameIdentifier
(	TokenNameLPAREN
TIFF_REF_BLACK_WHITE	TokenNameIdentifier
,	TokenNameCOMMA
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_RATIONAL	TokenNameIdentifier
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
refbw	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
TIFFField	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
extraFields	TokenNameIdentifier
=	TokenNameEQUAL
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getExtraFields	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
extraFields	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
List	TokenNameIdentifier
extantTags	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
fields	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Iterator	TokenNameIdentifier
fieldIter	TokenNameIdentifier
=	TokenNameEQUAL
fields	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
fieldIter	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
TIFFField	TokenNameIdentifier
fld	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
TIFFField	TokenNameIdentifier
)	TokenNameRPAREN
fieldIter	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
extantTags	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
fld	TokenNameIdentifier
.	TokenNameDOT
getTag	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
numExtraFields	TokenNameIdentifier
=	TokenNameEQUAL
extraFields	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numExtraFields	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
TIFFField	TokenNameIdentifier
fld	TokenNameIdentifier
=	TokenNameEQUAL
extraFields	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
Integer	TokenNameIdentifier
tagValue	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
fld	TokenNameIdentifier
.	TokenNameDOT
getTag	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
extantTags	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
tagValue	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fields	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
fld	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
extantTags	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
tagValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
dirSize	TokenNameIdentifier
=	TokenNameEQUAL
getDirectorySize	TokenNameIdentifier
(	TokenNameLPAREN
fields	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ifdOffset	TokenNameIdentifier
+	TokenNamePLUS
dirSize	TokenNameIdentifier
;	TokenNameSEMICOLON
OutputStream	TokenNameIdentifier
outCache	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
compressBuf	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
File	TokenNameIdentifier
tempFile	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
nextIFDOffset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
skipByte	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
Deflater	TokenNameIdentifier
deflater	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
boolean	TokenNameboolean
jpegRGBToYCbCr	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numBytesPadding	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
16	TokenNameIntegerLiteral
&&	TokenNameAND_AND
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
%	TokenNameREMAINDER
2	TokenNameIntegerLiteral
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
numBytesPadding	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
32	TokenNameIntegerLiteral
&&	TokenNameAND_AND
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
%	TokenNameREMAINDER
4	TokenNameIntegerLiteral
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
numBytesPadding	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
-	TokenNameMINUS
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
%	TokenNameREMAINDER
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
numBytesPadding	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numTiles	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isLast	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nextIFDOffset	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
totalBytesOfData	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
nextIFDOffset	TokenNameIdentifier
&	TokenNameAND
0x01	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nextIFDOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
skipByte	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
writeDirectory	TokenNameIdentifier
(	TokenNameLPAREN
ifdOffset	TokenNameIdentifier
,	TokenNameCOMMA
fields	TokenNameIdentifier
,	TokenNameCOMMA
nextIFDOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
numBytesPadding	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
padding	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
padding	TokenNameIdentifier
<	TokenNameLESS
numBytesPadding	TokenNameIdentifier
;	TokenNameSEMICOLON
padding	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
output	TokenNameIdentifier
instanceof	TokenNameinstanceof
SeekableOutputStream	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
SeekableOutputStream	TokenNameIdentifier
)	TokenNameRPAREN
output	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
outCache	TokenNameIdentifier
=	TokenNameEQUAL
output	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
tempFile	TokenNameIdentifier
=	TokenNameEQUAL
File	TokenNameIdentifier
.	TokenNameDOT
createTempFile	TokenNameIdentifier
(	TokenNameLPAREN
"jai-SOS-"	TokenNameStringLiteral
,	TokenNameCOMMA
".tmp"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempFile	TokenNameIdentifier
.	TokenNameDOT
deleteOnExit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
RandomAccessFile	TokenNameIdentifier
raFile	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
RandomAccessFile	TokenNameIdentifier
(	TokenNameLPAREN
tempFile	TokenNameIdentifier
,	TokenNameCOMMA
"rw"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SeekableOutputStream	TokenNameIdentifier
(	TokenNameLPAREN
raFile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ByteArrayOutputStream	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
totalBytesOfData	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
bufSize	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
compression	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
COMP_PACKBITS	TokenNameIdentifier
:	TokenNameCOLON
bufSize	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
bytesPerTile	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
bytesPerRow	TokenNameIdentifier
+	TokenNamePLUS
127	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
128	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
tileHeight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
COMP_JPEG_TTN2	TokenNameIdentifier
:	TokenNameCOLON
bufSize	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
imageType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TIFF_YCBCR	TokenNameIdentifier
&&	TokenNameAND_AND
colorModel	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
colorModel	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
TYPE_RGB	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
jpegRGBToYCbCr	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
COMP_DEFLATE	TokenNameIdentifier
:	TokenNameCOLON
bufSize	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerTile	TokenNameIdentifier
;	TokenNameSEMICOLON
deflater	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Deflater	TokenNameIdentifier
(	TokenNameLPAREN
encodeParam	TokenNameIdentifier
.	TokenNameDOT
getDeflateLevel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
bufSize	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
bufSize	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
compressBuf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
bufSize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
pixels	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fpixels	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
boolean	TokenNameboolean
checkContiguous	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
sampleModel	TokenNameIdentifier
instanceof	TokenNameinstanceof
MultiPixelPackedSampleModel	TokenNameIdentifier
&&	TokenNameAND_AND
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_BYTE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
8	TokenNameIntegerLiteral
&&	TokenNameAND_AND
sampleModel	TokenNameIdentifier
instanceof	TokenNameinstanceof
ComponentSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bpixels	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_BYTE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bpixels	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
tileHeight	TokenNameIdentifier
*	TokenNameMULTIPLY
tileWidth	TokenNameIdentifier
*	TokenNameMULTIPLY
numBands	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dataTypeIsShort	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bpixels	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
tileHeight	TokenNameIdentifier
*	TokenNameMULTIPLY
tileWidth	TokenNameIdentifier
*	TokenNameMULTIPLY
numBands	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
||	TokenNameOR_OR
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_FLOAT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bpixels	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
tileHeight	TokenNameIdentifier
*	TokenNameMULTIPLY
tileWidth	TokenNameIdentifier
*	TokenNameMULTIPLY
numBands	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
lastRow	TokenNameIdentifier
=	TokenNameEQUAL
minY	TokenNameIdentifier
+	TokenNamePLUS
height	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
lastCol	TokenNameIdentifier
=	TokenNameEQUAL
minX	TokenNameIdentifier
+	TokenNamePLUS
width	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
tileNum	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
row	TokenNameIdentifier
=	TokenNameEQUAL
minY	TokenNameIdentifier
;	TokenNameSEMICOLON
row	TokenNameIdentifier
<	TokenNameLESS
lastRow	TokenNameIdentifier
;	TokenNameSEMICOLON
row	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tileHeight	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
rows	TokenNameIdentifier
=	TokenNameEQUAL
isTiled	TokenNameIdentifier
?	TokenNameQUESTION
tileHeight	TokenNameIdentifier
:	TokenNameCOLON
Math	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
(	TokenNameLPAREN
tileHeight	TokenNameIdentifier
,	TokenNameCOMMA
lastRow	TokenNameIdentifier
-	TokenNameMINUS
row	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
rows	TokenNameIdentifier
*	TokenNameMULTIPLY
tileWidth	TokenNameIdentifier
*	TokenNameMULTIPLY
numBands	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
col	TokenNameIdentifier
=	TokenNameEQUAL
minX	TokenNameIdentifier
;	TokenNameSEMICOLON
col	TokenNameIdentifier
<	TokenNameLESS
lastCol	TokenNameIdentifier
;	TokenNameSEMICOLON
col	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tileWidth	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Raster	TokenNameIdentifier
src	TokenNameIdentifier
=	TokenNameEQUAL
im	TokenNameIdentifier
.	TokenNameDOT
getData	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Rectangle	TokenNameIdentifier
(	TokenNameLPAREN
col	TokenNameIdentifier
,	TokenNameCOMMA
row	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
rows	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
useDataBuffer	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
checkContiguous	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ComponentSampleModel	TokenNameIdentifier
csm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ComponentSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bankIndices	TokenNameIdentifier
=	TokenNameEQUAL
csm	TokenNameIdentifier
.	TokenNameDOT
getBankIndices	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bandOffsets	TokenNameIdentifier
=	TokenNameEQUAL
csm	TokenNameIdentifier
.	TokenNameDOT
getBandOffsets	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
pixelStride	TokenNameIdentifier
=	TokenNameEQUAL
csm	TokenNameIdentifier
.	TokenNameDOT
getPixelStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
lineStride	TokenNameIdentifier
=	TokenNameEQUAL
csm	TokenNameIdentifier
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
pixelStride	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
numBands	TokenNameIdentifier
||	TokenNameOR_OR
lineStride	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
bytesPerRow	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
useDataBuffer	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
useDataBuffer	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
useDataBuffer	TokenNameIdentifier
&&	TokenNameAND_AND
i	TokenNameIdentifier
<	TokenNameLESS
numBands	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
bankIndices	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
bandOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
useDataBuffer	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
MultiPixelPackedSampleModel	TokenNameIdentifier
mpp	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
MultiPixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
mpp	TokenNameIdentifier
.	TokenNameDOT
getNumBands	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
mpp	TokenNameIdentifier
.	TokenNameDOT
getDataBitOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
mpp	TokenNameIdentifier
.	TokenNameDOT
getPixelBitStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
useDataBuffer	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
useDataBuffer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_FLOAT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fpixels	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getPixels	TokenNameIdentifier
(	TokenNameLPAREN
col	TokenNameIdentifier
,	TokenNameCOMMA
row	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
rows	TokenNameIdentifier
,	TokenNameCOMMA
fpixels	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
pixels	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getPixels	TokenNameIdentifier
(	TokenNameLPAREN
col	TokenNameIdentifier
,	TokenNameCOMMA
row	TokenNameIdentifier
,	TokenNameCOMMA
tileWidth	TokenNameIdentifier
,	TokenNameCOMMA
rows	TokenNameIdentifier
,	TokenNameCOMMA
pixels	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
index	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
pixel	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
sampleSize	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
useDataBuffer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
btmp	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
DataBufferByte	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
MultiPixelPackedSampleModel	TokenNameIdentifier
mpp	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
MultiPixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
lineStride	TokenNameIdentifier
=	TokenNameEQUAL
mpp	TokenNameIdentifier
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
inOffset	TokenNameIdentifier
=	TokenNameEQUAL
mpp	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
col	TokenNameIdentifier
-	TokenNameMINUS
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
row	TokenNameIdentifier
-	TokenNameMINUS
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lineStride	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
btmp	TokenNameIdentifier
,	TokenNameCOMMA
inOffset	TokenNameIdentifier
,	TokenNameCOMMA
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
*	TokenNameMULTIPLY
rows	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
outOffset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
rows	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
btmp	TokenNameIdentifier
,	TokenNameCOMMA
inOffset	TokenNameIdentifier
,	TokenNameCOMMA
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
outOffset	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
lineStride	TokenNameIdentifier
;	TokenNameSEMICOLON
outOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
index	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
rows	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
tileWidth	TokenNameIdentifier
/	TokenNameDIVIDE
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
pixel	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
7	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
pixel	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
tileWidth	TokenNameIdentifier
%	TokenNameREMAINDER
8	TokenNameIntegerLiteral
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
pixel	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
tileWidth	TokenNameIdentifier
%	TokenNameREMAINDER
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
pixel	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
7	TokenNameIntegerLiteral
-	TokenNameMINUS
j	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
pixel	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
rows	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
tileWidth	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numCompressedBytes	TokenNameIdentifier
=	TokenNameEQUAL
compressPackBits	TokenNameIdentifier
(	TokenNameLPAREN
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
rows	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
,	TokenNameCOMMA
compressBuf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
tileNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
numCompressedBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
compressBuf	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numCompressedBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numCompressedBytes	TokenNameIdentifier
=	TokenNameEQUAL
deflate	TokenNameIdentifier
(	TokenNameLPAREN
deflater	TokenNameIdentifier
,	TokenNameCOMMA
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
compressBuf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
tileNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
numCompressedBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
compressBuf	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numCompressedBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
rows	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
tileWidth	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
pixel	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
pixel	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
tileWidth	TokenNameIdentifier
&	TokenNameAND
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
pixel	TokenNameIdentifier
=	TokenNameEQUAL
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
pixel	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
rows	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
tileWidth	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numCompressedBytes	TokenNameIdentifier
=	TokenNameEQUAL
compressPackBits	TokenNameIdentifier
(	TokenNameLPAREN
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
rows	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
,	TokenNameCOMMA
compressBuf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
tileNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
numCompressedBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
compressBuf	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numCompressedBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numCompressedBytes	TokenNameIdentifier
=	TokenNameEQUAL
deflate	TokenNameIdentifier
(	TokenNameLPAREN
deflater	TokenNameIdentifier
,	TokenNameCOMMA
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
compressBuf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
tileNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
numCompressedBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
compressBuf	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numCompressedBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
8	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
useDataBuffer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
btmp	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
DataBufferByte	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ComponentSampleModel	TokenNameIdentifier
csm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ComponentSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
inOffset	TokenNameIdentifier
=	TokenNameEQUAL
csm	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
col	TokenNameIdentifier
-	TokenNameMINUS
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
row	TokenNameIdentifier
-	TokenNameMINUS
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
lineStride	TokenNameIdentifier
=	TokenNameEQUAL
csm	TokenNameIdentifier
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lineStride	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
btmp	TokenNameIdentifier
,	TokenNameCOMMA
inOffset	TokenNameIdentifier
,	TokenNameCOMMA
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
*	TokenNameMULTIPLY
rows	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
outOffset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
rows	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
btmp	TokenNameIdentifier
,	TokenNameCOMMA
inOffset	TokenNameIdentifier
,	TokenNameCOMMA
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
outOffset	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
lineStride	TokenNameIdentifier
;	TokenNameSEMICOLON
outOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
size	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numCompressedBytes	TokenNameIdentifier
=	TokenNameEQUAL
compressPackBits	TokenNameIdentifier
(	TokenNameLPAREN
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
rows	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
,	TokenNameCOMMA
compressBuf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
tileNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
numCompressedBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
compressBuf	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numCompressedBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_JPEG_TTN2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
startPos	TokenNameIdentifier
=	TokenNameEQUAL
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
jpegEncoder	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
jpegEncodeParam	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
||	TokenNameOR_OR
jpegEncodeParam	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
jpegEncodeParam	TokenNameIdentifier
=	TokenNameEQUAL
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGCodec	TokenNameIdentifier
.	TokenNameDOT
getDefaultJPEGEncodeParam	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
,	TokenNameCOMMA
jpegColorID	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
modifyEncodeParam	TokenNameIdentifier
(	TokenNameLPAREN
jep	TokenNameIdentifier
,	TokenNameCOMMA
jpegEncodeParam	TokenNameIdentifier
,	TokenNameCOMMA
numBands	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
jpegEncoder	TokenNameIdentifier
=	TokenNameEQUAL
com	TokenNameIdentifier
.	TokenNameDOT
sun	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
codec	TokenNameIdentifier
.	TokenNameDOT
jpeg	TokenNameIdentifier
.	TokenNameDOT
JPEGCodec	TokenNameIdentifier
.	TokenNameDOT
createJPEGEncoder	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
,	TokenNameCOMMA
jpegEncodeParam	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
jpegRGBToYCbCr	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
WritableRaster	TokenNameIdentifier
wRas	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
src	TokenNameIdentifier
instanceof	TokenNameinstanceof
WritableRaster	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
wRas	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
WritableRaster	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
wRas	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
createCompatibleWritableRaster	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
wRas	TokenNameIdentifier
.	TokenNameDOT
setRect	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
wRas	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
wRas	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
wRas	TokenNameIdentifier
=	TokenNameEQUAL
wRas	TokenNameIdentifier
.	TokenNameDOT
createWritableTranslatedChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
BufferedImage	TokenNameIdentifier
bi	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BufferedImage	TokenNameIdentifier
(	TokenNameLPAREN
colorModel	TokenNameIdentifier
,	TokenNameCOMMA
wRas	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
jpegEncoder	TokenNameIdentifier
.	TokenNameDOT
encode	TokenNameIdentifier
(	TokenNameLPAREN
bi	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
jpegEncoder	TokenNameIdentifier
.	TokenNameDOT
encode	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
createTranslatedChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
long	TokenNamelong
endPos	TokenNameIdentifier
=	TokenNameEQUAL
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
tileNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
endPos	TokenNameIdentifier
-	TokenNameMINUS
startPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numCompressedBytes	TokenNameIdentifier
=	TokenNameEQUAL
deflate	TokenNameIdentifier
(	TokenNameLPAREN
deflater	TokenNameIdentifier
,	TokenNameCOMMA
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
compressBuf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
tileNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
numCompressedBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
compressBuf	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numCompressedBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
16	TokenNameIntegerLiteral
:	TokenNameCOLON
int	TokenNameint
ls	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
value	TokenNameIdentifier
=	TokenNameEQUAL
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
ls	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
value	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
ls	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
value	TokenNameIdentifier
&	TokenNameAND
0x00ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
size	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numCompressedBytes	TokenNameIdentifier
=	TokenNameEQUAL
compressPackBits	TokenNameIdentifier
(	TokenNameLPAREN
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
rows	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
,	TokenNameCOMMA
compressBuf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
tileNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
numCompressedBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
compressBuf	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numCompressedBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numCompressedBytes	TokenNameIdentifier
=	TokenNameEQUAL
deflate	TokenNameIdentifier
(	TokenNameLPAREN
deflater	TokenNameIdentifier
,	TokenNameCOMMA
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
compressBuf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
tileNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
numCompressedBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
compressBuf	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numCompressedBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
32	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
dataType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
li	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
value	TokenNameIdentifier
=	TokenNameEQUAL
pixels	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
li	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
value	TokenNameIdentifier
&	TokenNameAND
0xff000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
li	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
value	TokenNameIdentifier
&	TokenNameAND
0x00ff0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
li	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
value	TokenNameIdentifier
&	TokenNameAND
0x0000ff00	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
li	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
value	TokenNameIdentifier
&	TokenNameAND
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
lf	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
value	TokenNameIdentifier
=	TokenNameEQUAL
Float	TokenNameIdentifier
.	TokenNameDOT
floatToIntBits	TokenNameIdentifier
(	TokenNameLPAREN
fpixels	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
lf	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
value	TokenNameIdentifier
&	TokenNameAND
0xff000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
lf	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
value	TokenNameIdentifier
&	TokenNameAND
0x00ff0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
lf	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
value	TokenNameIdentifier
&	TokenNameAND
0x0000ff00	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bpixels	TokenNameIdentifier
[	TokenNameLBRACKET
lf	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
value	TokenNameIdentifier
&	TokenNameAND
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
size	TokenNameIdentifier
*	TokenNameMULTIPLY
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_PACKBITS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numCompressedBytes	TokenNameIdentifier
=	TokenNameEQUAL
compressPackBits	TokenNameIdentifier
(	TokenNameLPAREN
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
rows	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
bytesPerRow	TokenNameIdentifier
,	TokenNameCOMMA
compressBuf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
tileNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
numCompressedBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
compressBuf	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numCompressedBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_DEFLATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numCompressedBytes	TokenNameIdentifier
=	TokenNameEQUAL
deflate	TokenNameIdentifier
(	TokenNameLPAREN
deflater	TokenNameIdentifier
,	TokenNameCOMMA
bpixels	TokenNameIdentifier
,	TokenNameCOMMA
compressBuf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
tileNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
numCompressedBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
compressBuf	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numCompressedBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
COMP_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
skipByte	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
totalBytes	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numTiles	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numBytes	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
totalBytes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
numBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tileOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
numBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
totalBytes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
tileByteCounts	TokenNameIdentifier
[	TokenNameLBRACKET
numTiles	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
nextIFDOffset	TokenNameIdentifier
=	TokenNameEQUAL
isLast	TokenNameIdentifier
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
ifdOffset	TokenNameIdentifier
+	TokenNamePLUS
dirSize	TokenNameIdentifier
+	TokenNamePLUS
totalBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
nextIFDOffset	TokenNameIdentifier
&	TokenNameAND
0x01	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nextIFDOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
skipByte	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
outCache	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
skipByte	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
SeekableOutputStream	TokenNameIdentifier
sos	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SeekableOutputStream	TokenNameIdentifier
)	TokenNameRPAREN
output	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
savePos	TokenNameIdentifier
=	TokenNameEQUAL
sos	TokenNameIdentifier
.	TokenNameDOT
getFilePointer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sos	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
ifdOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeDirectory	TokenNameIdentifier
(	TokenNameLPAREN
ifdOffset	TokenNameIdentifier
,	TokenNameCOMMA
fields	TokenNameIdentifier
,	TokenNameCOMMA
nextIFDOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sos	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
savePos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tempFile	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
FileInputStream	TokenNameIdentifier
fileStream	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FileInputStream	TokenNameIdentifier
(	TokenNameLPAREN
tempFile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
=	TokenNameEQUAL
outCache	TokenNameIdentifier
;	TokenNameSEMICOLON
writeDirectory	TokenNameIdentifier
(	TokenNameLPAREN
ifdOffset	TokenNameIdentifier
,	TokenNameCOMMA
fields	TokenNameIdentifier
,	TokenNameCOMMA
nextIFDOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
copyBuffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
8192	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
bytesCopied	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
bytesCopied	TokenNameIdentifier
<	TokenNameLESS
totalBytes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
bytesRead	TokenNameIdentifier
=	TokenNameEQUAL
fileStream	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
copyBuffer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
bytesRead	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
copyBuffer	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
bytesRead	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bytesCopied	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
bytesRead	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fileStream	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempFile	TokenNameIdentifier
.	TokenNameDOT
delete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
skipByte	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
output	TokenNameIdentifier
instanceof	TokenNameinstanceof
ByteArrayOutputStream	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ByteArrayOutputStream	TokenNameIdentifier
memoryStream	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ByteArrayOutputStream	TokenNameIdentifier
)	TokenNameRPAREN
output	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
=	TokenNameEQUAL
outCache	TokenNameIdentifier
;	TokenNameSEMICOLON
writeDirectory	TokenNameIdentifier
(	TokenNameLPAREN
ifdOffset	TokenNameIdentifier
,	TokenNameCOMMA
fields	TokenNameIdentifier
,	TokenNameCOMMA
nextIFDOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
memoryStream	TokenNameIdentifier
.	TokenNameDOT
writeTo	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
skipByte	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalStateException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
nextIFDOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
getDirectorySize	TokenNameIdentifier
(	TokenNameLPAREN
SortedSet	TokenNameIdentifier
fields	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numEntries	TokenNameIdentifier
=	TokenNameEQUAL
fields	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
dirSize	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
+	TokenNamePLUS
numEntries	TokenNameIdentifier
*	TokenNameMULTIPLY
12	TokenNameIntegerLiteral
+	TokenNamePLUS
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
Iterator	TokenNameIdentifier
iter	TokenNameIdentifier
=	TokenNameEQUAL
fields	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
iter	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
TIFFField	TokenNameIdentifier
field	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
TIFFField	TokenNameIdentifier
)	TokenNameRPAREN
iter	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
valueSize	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
sizeOfType	TokenNameIdentifier
[	TokenNameLBRACKET
field	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
valueSize	TokenNameIdentifier
>	TokenNameGREATER
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
dirSize	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
valueSize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
dirSize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
writeFileHeader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
'M'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
'M'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
42	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
writeDirectory	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
thisIFDOffset	TokenNameIdentifier
,	TokenNameCOMMA
SortedSet	TokenNameIdentifier
fields	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
nextIFDOffset	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
numEntries	TokenNameIdentifier
=	TokenNameEQUAL
fields	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
offsetBeyondIFD	TokenNameIdentifier
=	TokenNameEQUAL
thisIFDOffset	TokenNameIdentifier
+	TokenNamePLUS
12	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
numEntries	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
List	TokenNameIdentifier
tooBig	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeUnsignedShort	TokenNameIdentifier
(	TokenNameLPAREN
numEntries	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Iterator	TokenNameIdentifier
iter	TokenNameIdentifier
=	TokenNameEQUAL
fields	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
iter	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
TIFFField	TokenNameIdentifier
field	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
TIFFField	TokenNameIdentifier
)	TokenNameRPAREN
iter	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
tag	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getTag	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeUnsignedShort	TokenNameIdentifier
(	TokenNameLPAREN
tag	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeUnsignedShort	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
valueSize	TokenNameIdentifier
=	TokenNameEQUAL
getValueSize	TokenNameIdentifier
(	TokenNameLPAREN
field	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_ASCII	TokenNameIdentifier
?	TokenNameQUESTION
valueSize	TokenNameIdentifier
:	TokenNameCOLON
count	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
valueSize	TokenNameIdentifier
>	TokenNameGREATER
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
offsetBeyondIFD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
offsetBeyondIFD	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
valueSize	TokenNameIdentifier
;	TokenNameSEMICOLON
tooBig	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
field	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
writeValuesAsFourBytes	TokenNameIdentifier
(	TokenNameLPAREN
field	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
nextIFDOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
tooBig	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
writeValues	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
TIFFField	TokenNameIdentifier
)	TokenNameRPAREN
tooBig	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
getValueSize	TokenNameIdentifier
(	TokenNameLPAREN
TIFFField	TokenNameIdentifier
field	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
valueSize	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_ASCII	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
stringBytes	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsString	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
valueSize	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
stringBytes	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stringBytes	TokenNameIdentifier
[	TokenNameLBRACKET
stringBytes	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
valueSize	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
valueSize	TokenNameIdentifier
=	TokenNameEQUAL
count	TokenNameIdentifier
*	TokenNameMULTIPLY
sizeOfType	TokenNameIdentifier
[	TokenNameLBRACKET
type	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
valueSize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sizeOfType	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
void	TokenNamevoid
writeValuesAsFourBytes	TokenNameIdentifier
(	TokenNameLPAREN
TIFFField	TokenNameIdentifier
field	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
dataType	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
dataType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_BYTE	TokenNameIdentifier
:	TokenNameCOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bytes	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
count	TokenNameIdentifier
>	TokenNameGREATER
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
count	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bytes	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
-	TokenNameMINUS
count	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SHORT	TokenNameIdentifier
:	TokenNameCOLON
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
chars	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsChars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
count	TokenNameIdentifier
>	TokenNameGREATER
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
count	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
writeUnsignedShort	TokenNameIdentifier
(	TokenNameLPAREN
chars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
-	TokenNameMINUS
count	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
writeUnsignedShort	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_LONG	TokenNameIdentifier
:	TokenNameCOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
longs	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsLongs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
longs	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
writeValues	TokenNameIdentifier
(	TokenNameLPAREN
TIFFField	TokenNameIdentifier
field	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
dataType	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
dataType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_BYTE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SBYTE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_UNDEFINED	TokenNameIdentifier
:	TokenNameCOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bytes	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bytes	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SHORT	TokenNameIdentifier
:	TokenNameCOLON
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
chars	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsChars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
writeUnsignedShort	TokenNameIdentifier
(	TokenNameLPAREN
chars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SSHORT	TokenNameIdentifier
:	TokenNameCOLON
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
shorts	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsShorts	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
writeUnsignedShort	TokenNameIdentifier
(	TokenNameLPAREN
shorts	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_LONG	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SLONG	TokenNameIdentifier
:	TokenNameCOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
longs	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsLongs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
longs	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_FLOAT	TokenNameIdentifier
:	TokenNameCOLON
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
floats	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsFloats	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
intBits	TokenNameIdentifier
=	TokenNameEQUAL
Float	TokenNameIdentifier
.	TokenNameDOT
floatToIntBits	TokenNameIdentifier
(	TokenNameLPAREN
floats	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
intBits	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_DOUBLE	TokenNameIdentifier
:	TokenNameCOLON
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
doubles	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsDoubles	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
longBits	TokenNameIdentifier
=	TokenNameEQUAL
Double	TokenNameIdentifier
.	TokenNameDOT
doubleToLongBits	TokenNameIdentifier
(	TokenNameLPAREN
doubles	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
longBits	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
longBits	TokenNameIdentifier
&	TokenNameAND
0xffffffffL	TokenNameLongLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_RATIONAL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_SRATIONAL	TokenNameIdentifier
:	TokenNameCOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rationals	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsRationals	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
rationals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
rationals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TIFFField	TokenNameIdentifier
.	TokenNameDOT
TIFF_ASCII	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
stringBytes	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
getAsString	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
stringBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stringBytes	TokenNameIdentifier
[	TokenNameLBRACKET
stringBytes	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
Error	TokenNameIdentifier
(	TokenNameLPAREN
"TIFFImageEncoder10"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
writeUnsignedShort	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
s	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
s	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
&	TokenNameAND
0x00ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
l	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
l	TokenNameIdentifier
&	TokenNameAND
0xff000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
l	TokenNameIdentifier
&	TokenNameAND
0x00ff0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
l	TokenNameIdentifier
&	TokenNameAND
0x0000ff00	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
l	TokenNameIdentifier
&	TokenNameAND
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
long	TokenNamelong
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
OutputStream	TokenNameIdentifier
out	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
out	TokenNameIdentifier
instanceof	TokenNameinstanceof
ByteArrayOutputStream	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
ByteArrayOutputStream	TokenNameIdentifier
)	TokenNameRPAREN
out	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
out	TokenNameIdentifier
instanceof	TokenNameinstanceof
SeekableOutputStream	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
SeekableOutputStream	TokenNameIdentifier
)	TokenNameRPAREN
out	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getFilePointer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalStateException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
compressPackBits	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
data	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numRows	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
bytesPerRow	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
compData	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
inOffset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
outOffset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numRows	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
outOffset	TokenNameIdentifier
=	TokenNameEQUAL
packBits	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
inOffset	TokenNameIdentifier
,	TokenNameCOMMA
bytesPerRow	TokenNameIdentifier
,	TokenNameCOMMA
compData	TokenNameIdentifier
,	TokenNameCOMMA
outOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
bytesPerRow	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
outOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
packBits	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
input	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
inOffset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
inCount	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
output	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
outOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
inMax	TokenNameIdentifier
=	TokenNameEQUAL
inOffset	TokenNameIdentifier
+	TokenNamePLUS
inCount	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
inMaxMinus1	TokenNameIdentifier
=	TokenNameEQUAL
inMax	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
inOffset	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
inMax	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
run	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
byte	TokenNamebyte
replicate	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
[	TokenNameLBRACKET
inOffset	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
run	TokenNameIdentifier
<	TokenNameLESS
127	TokenNameIntegerLiteral
&&	TokenNameAND_AND
inOffset	TokenNameIdentifier
<	TokenNameLESS
inMax	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
[	TokenNameLBRACKET
inOffset	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
input	TokenNameIdentifier
[	TokenNameLBRACKET
inOffset	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
run	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
inOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
run	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
inOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
run	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
replicate	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
run	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
saveOffset	TokenNameIdentifier
=	TokenNameEQUAL
outOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
run	TokenNameIdentifier
<	TokenNameLESS
128	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
(	TokenNameLPAREN
inOffset	TokenNameIdentifier
<	TokenNameLESS
inMax	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
[	TokenNameLBRACKET
inOffset	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
input	TokenNameIdentifier
[	TokenNameLBRACKET
inOffset	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
inOffset	TokenNameIdentifier
<	TokenNameLESS
inMaxMinus1	TokenNameIdentifier
&&	TokenNameAND_AND
input	TokenNameIdentifier
[	TokenNameLBRACKET
inOffset	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
input	TokenNameIdentifier
[	TokenNameLBRACKET
inOffset	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
run	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
outOffset	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
input	TokenNameIdentifier
[	TokenNameLBRACKET
inOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
run	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
[	TokenNameLBRACKET
saveOffset	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
run	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
inOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
inMax	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
run	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
run	TokenNameIdentifier
<	TokenNameLESS
128	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
[	TokenNameLBRACKET
saveOffset	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
input	TokenNameIdentifier
[	TokenNameLBRACKET
inOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
output	TokenNameIdentifier
[	TokenNameLBRACKET
outOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
input	TokenNameIdentifier
[	TokenNameLBRACKET
inOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
outOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
deflate	TokenNameIdentifier
(	TokenNameLPAREN
Deflater	TokenNameIdentifier
deflater	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
inflated	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
deflated	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
deflater	TokenNameIdentifier
.	TokenNameDOT
setInput	TokenNameIdentifier
(	TokenNameLPAREN
inflated	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
deflater	TokenNameIdentifier
.	TokenNameDOT
finish	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
numCompressedBytes	TokenNameIdentifier
=	TokenNameEQUAL
deflater	TokenNameIdentifier
.	TokenNameDOT
deflate	TokenNameIdentifier
(	TokenNameLPAREN
deflated	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
deflater	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
numCompressedBytes	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
modifyEncodeParam	TokenNameIdentifier
(	TokenNameLPAREN
JPEGEncodeParam	TokenNameIdentifier
src	TokenNameIdentifier
,	TokenNameCOMMA
JPEGEncodeParam	TokenNameIdentifier
dst	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
nbands	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
dst	TokenNameIdentifier
.	TokenNameDOT
setDensityUnit	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getDensityUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dst	TokenNameIdentifier
.	TokenNameDOT
setXDensity	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getXDensity	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dst	TokenNameIdentifier
.	TokenNameDOT
setYDensity	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getYDensity	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dst	TokenNameIdentifier
.	TokenNameDOT
setRestartInterval	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getRestartInterval	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
JPEGQTable	TokenNameIdentifier
tbl	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getQTable	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tbl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
dst	TokenNameIdentifier
.	TokenNameDOT
setQTable	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
,	TokenNameCOMMA
tbl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
