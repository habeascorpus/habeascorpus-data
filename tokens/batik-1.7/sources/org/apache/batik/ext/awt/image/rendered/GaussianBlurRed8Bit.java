package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
rendered	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Rectangle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
RenderingHints	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
color	TokenNameIdentifier
.	TokenNameDOT
ColorSpace	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
ColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
ConvolveOp	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBuffer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBufferInt	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DirectColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
Kernel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
Raster	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
SampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
SinglePixelPackedSampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
WritableRaster	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
GraphicsUtil	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
GaussianBlurRed8Bit	TokenNameIdentifier
extends	TokenNameextends
AbstractRed	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
xinset	TokenNameIdentifier
,	TokenNameCOMMA
yinset	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
stdDevX	TokenNameIdentifier
,	TokenNameCOMMA
stdDevY	TokenNameIdentifier
;	TokenNameSEMICOLON
RenderingHints	TokenNameIdentifier
hints	TokenNameIdentifier
;	TokenNameSEMICOLON
ConvolveOp	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
convOp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ConvolveOp	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
dX	TokenNameIdentifier
,	TokenNameCOMMA
dY	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
GaussianBlurRed8Bit	TokenNameIdentifier
(	TokenNameLPAREN
CachableRed	TokenNameIdentifier
src	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
stdDev	TokenNameIdentifier
,	TokenNameCOMMA
RenderingHints	TokenNameIdentifier
rh	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
src	TokenNameIdentifier
,	TokenNameCOMMA
stdDev	TokenNameIdentifier
,	TokenNameCOMMA
stdDev	TokenNameIdentifier
,	TokenNameCOMMA
rh	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
GaussianBlurRed8Bit	TokenNameIdentifier
(	TokenNameLPAREN
CachableRed	TokenNameIdentifier
src	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
stdDevX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
stdDevY	TokenNameIdentifier
,	TokenNameCOMMA
RenderingHints	TokenNameIdentifier
rh	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
stdDevX	TokenNameIdentifier
=	TokenNameEQUAL
stdDevX	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
stdDevY	TokenNameIdentifier
=	TokenNameEQUAL
stdDevY	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
hints	TokenNameIdentifier
=	TokenNameEQUAL
rh	TokenNameIdentifier
;	TokenNameSEMICOLON
xinset	TokenNameIdentifier
=	TokenNameEQUAL
surroundPixels	TokenNameIdentifier
(	TokenNameLPAREN
stdDevX	TokenNameIdentifier
,	TokenNameCOMMA
rh	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
yinset	TokenNameIdentifier
=	TokenNameEQUAL
surroundPixels	TokenNameIdentifier
(	TokenNameLPAREN
stdDevY	TokenNameIdentifier
,	TokenNameCOMMA
rh	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Rectangle	TokenNameIdentifier
myBounds	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getBounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
myBounds	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
xinset	TokenNameIdentifier
;	TokenNameSEMICOLON
myBounds	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
yinset	TokenNameIdentifier
;	TokenNameSEMICOLON
myBounds	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
xinset	TokenNameIdentifier
;	TokenNameSEMICOLON
myBounds	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
yinset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
myBounds	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
myBounds	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
myBounds	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
myBounds	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ColorModel	TokenNameIdentifier
cm	TokenNameIdentifier
=	TokenNameEQUAL
fixColorModel	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SampleModel	TokenNameIdentifier
sm	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
tw	TokenNameIdentifier
=	TokenNameEQUAL
sm	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
th	TokenNameIdentifier
=	TokenNameEQUAL
sm	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tw	TokenNameIdentifier
>	TokenNameGREATER
myBounds	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
)	TokenNameRPAREN
tw	TokenNameIdentifier
=	TokenNameEQUAL
myBounds	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
th	TokenNameIdentifier
>	TokenNameGREATER
myBounds	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
th	TokenNameIdentifier
=	TokenNameEQUAL
myBounds	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
sm	TokenNameIdentifier
=	TokenNameEQUAL
cm	TokenNameIdentifier
.	TokenNameDOT
createCompatibleSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
tw	TokenNameIdentifier
,	TokenNameCOMMA
th	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
init	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
,	TokenNameCOMMA
myBounds	TokenNameIdentifier
,	TokenNameCOMMA
cm	TokenNameIdentifier
,	TokenNameCOMMA
sm	TokenNameIdentifier
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getTileGridXOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
xinset	TokenNameIdentifier
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getTileGridYOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
yinset	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
highQuality	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
hints	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
&&	TokenNameAND_AND
RenderingHints	TokenNameIdentifier
.	TokenNameDOT
VALUE_RENDER_QUALITY	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
hints	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
RenderingHints	TokenNameIdentifier
.	TokenNameDOT
KEY_RENDERING	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
xinset	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
(	TokenNameLPAREN
stdDevX	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
highQuality	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
convOp	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
ConvolveOp	TokenNameIdentifier
(	TokenNameLPAREN
makeQualityKernelX	TokenNameIdentifier
(	TokenNameLPAREN
xinset	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
dX	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
floor	TokenNameIdentifier
(	TokenNameLPAREN
DSQRT2PI	TokenNameIdentifier
*	TokenNameMULTIPLY
stdDevX	TokenNameIdentifier
+	TokenNamePLUS
0.5f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
yinset	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
(	TokenNameLPAREN
stdDevY	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
highQuality	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
convOp	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
ConvolveOp	TokenNameIdentifier
(	TokenNameLPAREN
makeQualityKernelY	TokenNameIdentifier
(	TokenNameLPAREN
yinset	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
dY	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
floor	TokenNameIdentifier
(	TokenNameLPAREN
DSQRT2PI	TokenNameIdentifier
*	TokenNameMULTIPLY
stdDevY	TokenNameIdentifier
+	TokenNamePLUS
0.5f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
float	TokenNamefloat
SQRT2PI	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
Math	TokenNameIdentifier
.	TokenNameDOT
PI	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
float	TokenNamefloat
DSQRT2PI	TokenNameIdentifier
=	TokenNameEQUAL
SQRT2PI	TokenNameIdentifier
*	TokenNameMULTIPLY
3f	TokenNameFloatingPointLiteral
/	TokenNameDIVIDE
4f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
float	TokenNamefloat
precision	TokenNameIdentifier
=	TokenNameEQUAL
0.499f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
surroundPixels	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
stdDev	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
surroundPixels	TokenNameIdentifier
(	TokenNameLPAREN
stdDev	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
surroundPixels	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
stdDev	TokenNameIdentifier
,	TokenNameCOMMA
RenderingHints	TokenNameIdentifier
hints	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
highQuality	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
hints	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
&&	TokenNameAND_AND
RenderingHints	TokenNameIdentifier
.	TokenNameDOT
VALUE_RENDER_QUALITY	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
hints	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
RenderingHints	TokenNameIdentifier
.	TokenNameDOT
KEY_RENDERING	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
stdDev	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
highQuality	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
float	TokenNamefloat
areaSum	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
(	TokenNameLPAREN
0.5	TokenNameDoubleLiteral
/	TokenNameDIVIDE
(	TokenNameLPAREN
stdDev	TokenNameIdentifier
*	TokenNameMULTIPLY
SQRT2PI	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
areaSum	TokenNameIdentifier
<	TokenNameLESS
precision	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
areaSum	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
pow	TokenNameIdentifier
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
E	TokenNameIdentifier
,	TokenNameCOMMA
-	TokenNameMINUS
i	TokenNameIdentifier
*	TokenNameMULTIPLY
i	TokenNameIdentifier
/	TokenNameDIVIDE
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
stdDev	TokenNameIdentifier
*	TokenNameMULTIPLY
stdDev	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
stdDev	TokenNameIdentifier
*	TokenNameMULTIPLY
SQRT2PI	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
diam	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
floor	TokenNameIdentifier
(	TokenNameLPAREN
DSQRT2PI	TokenNameIdentifier
*	TokenNameMULTIPLY
stdDev	TokenNameIdentifier
+	TokenNamePLUS
0.5f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
diam	TokenNameIdentifier
%	TokenNameREMAINDER
2	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
diam	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
+	TokenNamePLUS
diam	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
return	TokenNamereturn
diam	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
+	TokenNamePLUS
diam	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
computeQualityKernelData	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
len	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
stdDev	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
kernelData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
float	TokenNamefloat
[	TokenNameLBRACKET
len	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
mid	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
float	TokenNamefloat
sum	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
kernelData	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
pow	TokenNameIdentifier
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
E	TokenNameIdentifier
,	TokenNameCOMMA
-	TokenNameMINUS
(	TokenNameLPAREN
i	TokenNameIdentifier
-	TokenNameMINUS
mid	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
(	TokenNameLPAREN
i	TokenNameIdentifier
-	TokenNameMINUS
mid	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
stdDev	TokenNameIdentifier
*	TokenNameMULTIPLY
stdDev	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
SQRT2PI	TokenNameIdentifier
*	TokenNameMULTIPLY
stdDev	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sum	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
kernelData	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
kernelData	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
/=	TokenNameDIVIDE_EQUAL
sum	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
kernelData	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Kernel	TokenNameIdentifier
makeQualityKernelX	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
len	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Kernel	TokenNameIdentifier
(	TokenNameLPAREN
len	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
computeQualityKernelData	TokenNameIdentifier
(	TokenNameLPAREN
len	TokenNameIdentifier
,	TokenNameCOMMA
stdDevX	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Kernel	TokenNameIdentifier
makeQualityKernelY	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
len	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Kernel	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
len	TokenNameIdentifier
,	TokenNameCOMMA
computeQualityKernelData	TokenNameIdentifier
(	TokenNameLPAREN
len	TokenNameIdentifier
,	TokenNameCOMMA
stdDevY	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
WritableRaster	TokenNameIdentifier
copyData	TokenNameIdentifier
(	TokenNameLPAREN
WritableRaster	TokenNameIdentifier
wr	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
CachableRed	TokenNameIdentifier
src	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
CachableRed	TokenNameIdentifier
)	TokenNameRPAREN
getSources	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Rectangle	TokenNameIdentifier
r	TokenNameIdentifier
=	TokenNameEQUAL
wr	TokenNameIdentifier
.	TokenNameDOT
getBounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
r	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
xinset	TokenNameIdentifier
;	TokenNameSEMICOLON
r	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
yinset	TokenNameIdentifier
;	TokenNameSEMICOLON
r	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
xinset	TokenNameIdentifier
;	TokenNameSEMICOLON
r	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
yinset	TokenNameIdentifier
;	TokenNameSEMICOLON
ColorModel	TokenNameIdentifier
srcCM	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getColorModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
WritableRaster	TokenNameIdentifier
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
,	TokenNameCOMMA
tmpR2	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
srcCM	TokenNameIdentifier
.	TokenNameDOT
createCompatibleWritableRaster	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
{	TokenNameLBRACE
WritableRaster	TokenNameIdentifier
fill	TokenNameIdentifier
;	TokenNameSEMICOLON
fill	TokenNameIdentifier
=	TokenNameEQUAL
tmpR1	TokenNameIdentifier
.	TokenNameDOT
createWritableTranslatedChild	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
src	TokenNameIdentifier
.	TokenNameDOT
copyData	TokenNameIdentifier
(	TokenNameLPAREN
fill	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
srcCM	TokenNameIdentifier
.	TokenNameDOT
hasAlpha	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
!	TokenNameNOT
srcCM	TokenNameIdentifier
.	TokenNameDOT
isAlphaPremultiplied	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
GraphicsUtil	TokenNameIdentifier
.	TokenNameDOT
coerceData	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
srcCM	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
skipX	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xinset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
skipX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
convOp	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
tmpR2	TokenNameIdentifier
=	TokenNameEQUAL
getColorModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
createCompatibleWritableRaster	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmpR2	TokenNameIdentifier
=	TokenNameEQUAL
convOp	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
filter	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipX	TokenNameIdentifier
=	TokenNameEQUAL
convOp	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
getKernel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getXOrigin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
WritableRaster	TokenNameIdentifier
tmp	TokenNameIdentifier
=	TokenNameEQUAL
tmpR1	TokenNameIdentifier
;	TokenNameSEMICOLON
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
tmpR2	TokenNameIdentifier
;	TokenNameSEMICOLON
tmpR2	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
dX	TokenNameIdentifier
&	TokenNameAND
0x01	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
boxFilterH	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
dX	TokenNameIdentifier
,	TokenNameCOMMA
dX	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
boxFilterH	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
dX	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
dX	TokenNameIdentifier
,	TokenNameCOMMA
dX	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
boxFilterH	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
dX	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
dX	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
dX	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipX	TokenNameIdentifier
=	TokenNameEQUAL
dX	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
+	TokenNamePLUS
dX	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
boxFilterH	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
dX	TokenNameIdentifier
,	TokenNameCOMMA
dX	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
boxFilterH	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
dX	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
dX	TokenNameIdentifier
,	TokenNameCOMMA
dX	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
boxFilterH	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
dX	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
dX	TokenNameIdentifier
,	TokenNameCOMMA
dX	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipX	TokenNameIdentifier
=	TokenNameEQUAL
dX	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
+	TokenNamePLUS
dX	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
yinset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
tmpR2	TokenNameIdentifier
=	TokenNameEQUAL
tmpR1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
convOp	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tmpR2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
tmpR2	TokenNameIdentifier
=	TokenNameEQUAL
getColorModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
createCompatibleWritableRaster	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tmpR2	TokenNameIdentifier
=	TokenNameEQUAL
convOp	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
filter	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
dY	TokenNameIdentifier
&	TokenNameAND
0x01	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
boxFilterV	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
skipX	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
dY	TokenNameIdentifier
,	TokenNameCOMMA
dY	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
boxFilterV	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
skipX	TokenNameIdentifier
,	TokenNameCOMMA
dY	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
dY	TokenNameIdentifier
,	TokenNameCOMMA
dY	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
boxFilterV	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
skipX	TokenNameIdentifier
,	TokenNameCOMMA
dY	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
dY	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
dY	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
boxFilterV	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
skipX	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
dY	TokenNameIdentifier
,	TokenNameCOMMA
dY	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
boxFilterV	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
skipX	TokenNameIdentifier
,	TokenNameCOMMA
dY	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
dY	TokenNameIdentifier
,	TokenNameCOMMA
dY	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmpR1	TokenNameIdentifier
=	TokenNameEQUAL
boxFilterV	TokenNameIdentifier
(	TokenNameLPAREN
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
tmpR1	TokenNameIdentifier
,	TokenNameCOMMA
skipX	TokenNameIdentifier
,	TokenNameCOMMA
dY	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
dY	TokenNameIdentifier
,	TokenNameCOMMA
dY	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tmpR2	TokenNameIdentifier
=	TokenNameEQUAL
tmpR1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tmpR2	TokenNameIdentifier
=	TokenNameEQUAL
tmpR2	TokenNameIdentifier
.	TokenNameDOT
createWritableTranslatedChild	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
GraphicsUtil	TokenNameIdentifier
.	TokenNameDOT
copyData	TokenNameIdentifier
(	TokenNameLPAREN
tmpR2	TokenNameIdentifier
,	TokenNameCOMMA
wr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
wr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
WritableRaster	TokenNameIdentifier
boxFilterH	TokenNameIdentifier
(	TokenNameLPAREN
Raster	TokenNameIdentifier
src	TokenNameIdentifier
,	TokenNameCOMMA
WritableRaster	TokenNameIdentifier
dest	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
skipX	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
skipY	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
boxSz	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
loc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
w	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
w	TokenNameIdentifier
<	TokenNameLESS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
skipX	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
boxSz	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
dest	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
h	TokenNameIdentifier
<	TokenNameLESS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
skipY	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
dest	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
SinglePixelPackedSampleModel	TokenNameIdentifier
srcSPPSM	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SinglePixelPackedSampleModel	TokenNameIdentifier
dstSPPSM	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
srcScanStride	TokenNameIdentifier
=	TokenNameEQUAL
srcSPPSM	TokenNameIdentifier
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
dstScanStride	TokenNameIdentifier
=	TokenNameEQUAL
dstSPPSM	TokenNameIdentifier
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DataBufferInt	TokenNameIdentifier
srcDB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DataBufferInt	TokenNameIdentifier
dstDB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
srcOff	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
srcDB	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
srcSPPSM	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
dstOff	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
dstDB	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
dstSPPSM	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dest	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
srcPixels	TokenNameIdentifier
=	TokenNameEQUAL
srcDB	TokenNameIdentifier
.	TokenNameDOT
getBankData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
destPixels	TokenNameIdentifier
=	TokenNameEQUAL
dstDB	TokenNameIdentifier
.	TokenNameDOT
getBankData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
boxSz	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
curr	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
scale	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
boxSz	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
y	TokenNameIdentifier
=	TokenNameEQUAL
skipY	TokenNameIdentifier
;	TokenNameSEMICOLON
y	TokenNameIdentifier
<	TokenNameLESS
(	TokenNameLPAREN
h	TokenNameIdentifier
-	TokenNameMINUS
skipY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
y	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
sp	TokenNameIdentifier
=	TokenNameEQUAL
srcOff	TokenNameIdentifier
+	TokenNamePLUS
y	TokenNameIdentifier
*	TokenNameMULTIPLY
srcScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
dp	TokenNameIdentifier
=	TokenNameEQUAL
dstOff	TokenNameIdentifier
+	TokenNamePLUS
y	TokenNameIdentifier
*	TokenNameMULTIPLY
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
rowEnd	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
w	TokenNameIdentifier
-	TokenNameMINUS
skipX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
sumA	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
sumR	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
sumG	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
sumB	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
skipX	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
+	TokenNamePLUS
boxSz	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
sp	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
curr	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sumA	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumR	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sumG	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sumB	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
skipX	TokenNameIdentifier
+	TokenNamePLUS
loc	TokenNameIdentifier
;	TokenNameSEMICOLON
prev	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumA	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumR	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumG	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumB	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
k	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
sp	TokenNameIdentifier
<	TokenNameLESS
rowEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
curr	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
curr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
prev	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sumA	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumR	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sumG	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sumB	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
curr	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sumA	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumR	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sumG	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sumB	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
prev	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumA	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumR	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumG	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumB	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
k	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
k	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
boxSz	TokenNameIdentifier
;	TokenNameSEMICOLON
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
dest	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
WritableRaster	TokenNameIdentifier
boxFilterV	TokenNameIdentifier
(	TokenNameLPAREN
Raster	TokenNameIdentifier
src	TokenNameIdentifier
,	TokenNameCOMMA
WritableRaster	TokenNameIdentifier
dest	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
skipX	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
skipY	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
boxSz	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
loc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
w	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
w	TokenNameIdentifier
<	TokenNameLESS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
skipX	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
dest	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
h	TokenNameIdentifier
<	TokenNameLESS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
skipY	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
boxSz	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
dest	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
SinglePixelPackedSampleModel	TokenNameIdentifier
srcSPPSM	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SinglePixelPackedSampleModel	TokenNameIdentifier
dstSPPSM	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
srcScanStride	TokenNameIdentifier
=	TokenNameEQUAL
srcSPPSM	TokenNameIdentifier
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
dstScanStride	TokenNameIdentifier
=	TokenNameEQUAL
dstSPPSM	TokenNameIdentifier
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DataBufferInt	TokenNameIdentifier
srcDB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DataBufferInt	TokenNameIdentifier
dstDB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
srcOff	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
srcDB	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
srcSPPSM	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
dstOff	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
dstDB	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
dstSPPSM	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dest	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
srcPixels	TokenNameIdentifier
=	TokenNameEQUAL
srcDB	TokenNameIdentifier
.	TokenNameDOT
getBankData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
destPixels	TokenNameIdentifier
=	TokenNameEQUAL
dstDB	TokenNameIdentifier
.	TokenNameDOT
getBankData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
boxSz	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
curr	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
scale	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
boxSz	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
x	TokenNameIdentifier
=	TokenNameEQUAL
skipX	TokenNameIdentifier
;	TokenNameSEMICOLON
x	TokenNameIdentifier
<	TokenNameLESS
(	TokenNameLPAREN
w	TokenNameIdentifier
-	TokenNameMINUS
skipX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
x	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
sp	TokenNameIdentifier
=	TokenNameEQUAL
srcOff	TokenNameIdentifier
+	TokenNamePLUS
x	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
dp	TokenNameIdentifier
=	TokenNameEQUAL
dstOff	TokenNameIdentifier
+	TokenNamePLUS
x	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
colEnd	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
h	TokenNameIdentifier
-	TokenNameMINUS
skipY	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
srcScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
sumA	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
sumR	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
sumG	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
sumB	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
skipY	TokenNameIdentifier
*	TokenNameMULTIPLY
srcScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
boxSz	TokenNameIdentifier
*	TokenNameMULTIPLY
srcScanStride	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
sp	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
curr	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sumA	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumR	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sumG	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sumB	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
sp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
srcScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
skipY	TokenNameIdentifier
+	TokenNamePLUS
loc	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
prev	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumA	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumR	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumG	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumB	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
k	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
sp	TokenNameIdentifier
<	TokenNameLESS
colEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
curr	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
curr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
prev	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sumA	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumR	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sumG	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sumB	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
curr	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
sumA	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumR	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sumG	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sumB	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
curr	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
prev	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumA	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumR	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumG	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
sumB	TokenNameIdentifier
*	TokenNameMULTIPLY
scale	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
k	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
k	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
boxSz	TokenNameIdentifier
;	TokenNameSEMICOLON
sp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
srcScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
dest	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
static	TokenNamestatic
ColorModel	TokenNameIdentifier
fixColorModel	TokenNameIdentifier
(	TokenNameLPAREN
CachableRed	TokenNameIdentifier
src	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ColorModel	TokenNameIdentifier
cm	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getColorModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
b	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getNumBands	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
masks	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
b	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
masks	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
masks	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0x00FF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
masks	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0xFF00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
masks	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0xFF0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
masks	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0x00FF00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
masks	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0x0000FF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
masks	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0x00FF0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
masks	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0x0000FF00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
masks	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0x000000FF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
masks	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0xFF000000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"GaussianBlurRed8Bit only supports one to four band images"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ColorSpace	TokenNameIdentifier
cs	TokenNameIdentifier
=	TokenNameEQUAL
cm	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
DirectColorModel	TokenNameIdentifier
(	TokenNameLPAREN
cs	TokenNameIdentifier
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
b	TokenNameIdentifier
,	TokenNameCOMMA
masks	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
masks	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
masks	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
masks	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
