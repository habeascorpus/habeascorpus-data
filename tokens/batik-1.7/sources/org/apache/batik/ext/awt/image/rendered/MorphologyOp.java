package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
rendered	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Rectangle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
RenderingHints	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
color	TokenNameIdentifier
.	TokenNameDOT
ColorSpace	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Point2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Rectangle2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
BufferedImage	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
BufferedImageOp	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
ColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBuffer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBufferInt	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DirectColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
Raster	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
RasterOp	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
SampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
SinglePixelPackedSampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
WritableRaster	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
GraphicsUtil	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
MorphologyOp	TokenNameIdentifier
implements	TokenNameimplements
BufferedImageOp	TokenNameIdentifier
,	TokenNameCOMMA
RasterOp	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
int	TokenNameint
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
doDilation	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
rangeX	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
rangeY	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
ColorSpace	TokenNameIdentifier
sRGB	TokenNameIdentifier
=	TokenNameEQUAL
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_sRGB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
ColorSpace	TokenNameIdentifier
lRGB	TokenNameIdentifier
=	TokenNameEQUAL
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_LINEAR_RGB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
MorphologyOp	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
radiusX	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
radiusY	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
radiusX	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
radiusY	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"The radius of X-axis or Y-axis should not be Zero or Negatives."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
radiusX	TokenNameIdentifier
=	TokenNameEQUAL
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
radiusY	TokenNameIdentifier
=	TokenNameEQUAL
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
doDilation	TokenNameIdentifier
=	TokenNameEQUAL
doDilation	TokenNameIdentifier
;	TokenNameSEMICOLON
rangeX	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
radiusX	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rangeY	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
radiusY	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
Rectangle2D	TokenNameIdentifier
getBounds2D	TokenNameIdentifier
(	TokenNameLPAREN
Raster	TokenNameIdentifier
src	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
checkCompatible	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Rectangle	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Rectangle2D	TokenNameIdentifier
getBounds2D	TokenNameIdentifier
(	TokenNameLPAREN
BufferedImage	TokenNameIdentifier
src	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Rectangle	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Point2D	TokenNameIdentifier
getPoint2D	TokenNameIdentifier
(	TokenNameLPAREN
Point2D	TokenNameIdentifier
srcPt	TokenNameIdentifier
,	TokenNameCOMMA
Point2D	TokenNameIdentifier
destPt	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
destPt	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
destPt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
.	TokenNameDOT
Float	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
destPt	TokenNameIdentifier
.	TokenNameDOT
setLocation	TokenNameIdentifier
(	TokenNameLPAREN
srcPt	TokenNameIdentifier
.	TokenNameDOT
getX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
srcPt	TokenNameIdentifier
.	TokenNameDOT
getY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
destPt	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
checkCompatible	TokenNameIdentifier
(	TokenNameLPAREN
ColorModel	TokenNameIdentifier
colorModel	TokenNameIdentifier
,	TokenNameCOMMA
SampleModel	TokenNameIdentifier
sampleModel	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ColorSpace	TokenNameIdentifier
cs	TokenNameIdentifier
=	TokenNameEQUAL
colorModel	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
!	TokenNameNOT
cs	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
sRGB	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
!	TokenNameNOT
cs	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
lRGB	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Expected CS_sRGB or CS_LINEAR_RGB color model"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
colorModel	TokenNameIdentifier
instanceof	TokenNameinstanceof
DirectColorModel	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"colorModel should be an instance of DirectColorModel"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sampleModel	TokenNameIdentifier
.	TokenNameDOT
getDataType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"colorModel's transferType should be DataBuffer.TYPE_INT"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DirectColorModel	TokenNameIdentifier
dcm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DirectColorModel	TokenNameIdentifier
)	TokenNameRPAREN
colorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dcm	TokenNameIdentifier
.	TokenNameDOT
getRedMask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0x00ff0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"red mask in source should be 0x00ff0000"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dcm	TokenNameIdentifier
.	TokenNameDOT
getGreenMask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0x0000ff00	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"green mask in source should be 0x0000ff00"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dcm	TokenNameIdentifier
.	TokenNameDOT
getBlueMask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"blue mask in source should be 0x000000ff"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dcm	TokenNameIdentifier
.	TokenNameDOT
getAlphaMask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0xff000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"alpha mask in source should be 0xff000000"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
isCompatible	TokenNameIdentifier
(	TokenNameLPAREN
ColorModel	TokenNameIdentifier
colorModel	TokenNameIdentifier
,	TokenNameCOMMA
SampleModel	TokenNameIdentifier
sampleModel	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ColorSpace	TokenNameIdentifier
cs	TokenNameIdentifier
=	TokenNameEQUAL
colorModel	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
cs	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_sRGB	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
cs	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_LINEAR_RGB	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
colorModel	TokenNameIdentifier
instanceof	TokenNameinstanceof
DirectColorModel	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sampleModel	TokenNameIdentifier
.	TokenNameDOT
getDataType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
DirectColorModel	TokenNameIdentifier
dcm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DirectColorModel	TokenNameIdentifier
)	TokenNameRPAREN
colorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dcm	TokenNameIdentifier
.	TokenNameDOT
getRedMask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0x00ff0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dcm	TokenNameIdentifier
.	TokenNameDOT
getGreenMask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0x0000ff00	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dcm	TokenNameIdentifier
.	TokenNameDOT
getBlueMask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dcm	TokenNameIdentifier
.	TokenNameDOT
getAlphaMask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0xff000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
checkCompatible	TokenNameIdentifier
(	TokenNameLPAREN
SampleModel	TokenNameIdentifier
model	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
model	TokenNameIdentifier
instanceof	TokenNameinstanceof
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"MorphologyOp only works with Rasters "	TokenNameStringLiteral
+	TokenNamePLUS
"using SinglePixelPackedSampleModels"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
nBands	TokenNameIdentifier
=	TokenNameEQUAL
model	TokenNameIdentifier
.	TokenNameDOT
getNumBands	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nBands	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"MorphologyOp only words with Rasters having 4 bands"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
model	TokenNameIdentifier
.	TokenNameDOT
getDataType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"MorphologyOp only works with Rasters using DataBufferInt"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bitOffsets	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
model	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getBitOffsets	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
bitOffsets	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
bitOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
%	TokenNameREMAINDER
8	TokenNameIntegerLiteral
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"MorphologyOp only works with Rasters using 8 bits "	TokenNameStringLiteral
+	TokenNamePLUS
"per band : "	TokenNameStringLiteral
+	TokenNamePLUS
i	TokenNameIdentifier
+	TokenNamePLUS
" : "	TokenNameStringLiteral
+	TokenNamePLUS
bitOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
RenderingHints	TokenNameIdentifier
getRenderingHints	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
WritableRaster	TokenNameIdentifier
createCompatibleDestRaster	TokenNameIdentifier
(	TokenNameLPAREN
Raster	TokenNameIdentifier
src	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
checkCompatible	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
src	TokenNameIdentifier
.	TokenNameDOT
createCompatibleWritableRaster	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
BufferedImage	TokenNameIdentifier
createCompatibleDestImage	TokenNameIdentifier
(	TokenNameLPAREN
BufferedImage	TokenNameIdentifier
src	TokenNameIdentifier
,	TokenNameCOMMA
ColorModel	TokenNameIdentifier
destCM	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
BufferedImage	TokenNameIdentifier
dest	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
destCM	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
destCM	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getColorModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
WritableRaster	TokenNameIdentifier
wr	TokenNameIdentifier
;	TokenNameSEMICOLON
wr	TokenNameIdentifier
=	TokenNameEQUAL
destCM	TokenNameIdentifier
.	TokenNameDOT
createCompatibleWritableRaster	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkCompatible	TokenNameIdentifier
(	TokenNameLPAREN
destCM	TokenNameIdentifier
,	TokenNameCOMMA
wr	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dest	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BufferedImage	TokenNameIdentifier
(	TokenNameLPAREN
destCM	TokenNameIdentifier
,	TokenNameCOMMA
wr	TokenNameIdentifier
,	TokenNameCOMMA
destCM	TokenNameIdentifier
.	TokenNameDOT
isAlphaPremultiplied	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
dest	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
v1	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
v2	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
boolean	TokenNameboolean
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
v1	TokenNameIdentifier
>	TokenNameGREATER
v2	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
doDilation	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
v1	TokenNameIdentifier
<	TokenNameLESS
v2	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
!	TokenNameNOT
doDilation	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
specialProcessRow	TokenNameIdentifier
(	TokenNameLPAREN
Raster	TokenNameIdentifier
src	TokenNameIdentifier
,	TokenNameCOMMA
WritableRaster	TokenNameIdentifier
dest	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
w	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DataBufferInt	TokenNameIdentifier
srcDB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DataBufferInt	TokenNameIdentifier
dstDB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SinglePixelPackedSampleModel	TokenNameIdentifier
sppsm	TokenNameIdentifier
;	TokenNameSEMICOLON
sppsm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
srcOff	TokenNameIdentifier
=	TokenNameEQUAL
srcDB	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
sppsm	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sppsm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
dstOff	TokenNameIdentifier
=	TokenNameEQUAL
dstDB	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
sppsm	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dest	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
srcScanStride	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
dstScanStride	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
srcPixels	TokenNameIdentifier
=	TokenNameEQUAL
srcDB	TokenNameIdentifier
.	TokenNameDOT
getBankData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
destPixels	TokenNameIdentifier
=	TokenNameEQUAL
dstDB	TokenNameIdentifier
.	TokenNameDOT
getBankData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
sp	TokenNameIdentifier
,	TokenNameCOMMA
dp	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bufferHead	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxIndexA	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxIndexR	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxIndexG	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxIndexB	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
pel	TokenNameIdentifier
,	TokenNameCOMMA
currentPixel	TokenNameIdentifier
,	TokenNameCOMMA
lastPixel	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
a	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
a1	TokenNameIdentifier
,	TokenNameCOMMA
r1	TokenNameIdentifier
,	TokenNameCOMMA
g1	TokenNameIdentifier
,	TokenNameCOMMA
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
w	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
radiusX	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
sp	TokenNameIdentifier
=	TokenNameEQUAL
srcOff	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
*	TokenNameMULTIPLY
srcScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
=	TokenNameEQUAL
dstOff	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
*	TokenNameMULTIPLY
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
pel	TokenNameIdentifier
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
currentPixel	TokenNameIdentifier
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferA	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
w	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
w	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferG	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
w	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferB	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
w	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
sp	TokenNameIdentifier
=	TokenNameEQUAL
srcOff	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
*	TokenNameMULTIPLY
srcScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
=	TokenNameEQUAL
dstOff	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
*	TokenNameMULTIPLY
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferHead	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pel	TokenNameIdentifier
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
a	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
r	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
g	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
b	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
currentPixel	TokenNameIdentifier
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
w	TokenNameIdentifier
-	TokenNameMINUS
radiusX	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
lastPixel	TokenNameIdentifier
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexA	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexG	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexB	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
w	TokenNameIdentifier
-	TokenNameMINUS
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
radiusX	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexA	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
a1	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexA	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexR	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
r1	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexG	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
g1	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexG	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexB	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
b1	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexB	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bufferHead	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
specialProcessColumn	TokenNameIdentifier
(	TokenNameLPAREN
Raster	TokenNameIdentifier
src	TokenNameIdentifier
,	TokenNameCOMMA
WritableRaster	TokenNameIdentifier
dest	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
w	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DataBufferInt	TokenNameIdentifier
dstDB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
dstOff	TokenNameIdentifier
=	TokenNameEQUAL
dstDB	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
dstScanStride	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
destPixels	TokenNameIdentifier
=	TokenNameEQUAL
dstDB	TokenNameIdentifier
.	TokenNameDOT
getBankData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
dp	TokenNameIdentifier
,	TokenNameCOMMA
cp	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bufferHead	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxIndexA	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxIndexR	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxIndexG	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxIndexB	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
pel	TokenNameIdentifier
,	TokenNameCOMMA
currentPixel	TokenNameIdentifier
,	TokenNameCOMMA
lastPixel	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
a	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
a1	TokenNameIdentifier
,	TokenNameCOMMA
r1	TokenNameIdentifier
,	TokenNameCOMMA
g1	TokenNameIdentifier
,	TokenNameCOMMA
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
h	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
radiusY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
dp	TokenNameIdentifier
=	TokenNameEQUAL
dstOff	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
;	TokenNameSEMICOLON
cp	TokenNameIdentifier
=	TokenNameEQUAL
dstOff	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
;	TokenNameSEMICOLON
pel	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
cp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
cp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
currentPixel	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
cp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
cp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferA	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
h	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
h	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferG	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
h	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferB	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
h	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
dp	TokenNameIdentifier
=	TokenNameEQUAL
dstOff	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
;	TokenNameSEMICOLON
cp	TokenNameIdentifier
=	TokenNameEQUAL
dstOff	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferHead	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pel	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
cp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
cp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
a	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
r	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
g	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
b	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
currentPixel	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
cp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
cp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
h	TokenNameIdentifier
-	TokenNameMINUS
radiusY	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
lastPixel	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
cp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
cp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexA	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
radiusY	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
radiusY	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexG	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
radiusY	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexB	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
radiusY	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
h	TokenNameIdentifier
-	TokenNameMINUS
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
-	TokenNameMINUS
dstScanStride	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
radiusY	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexA	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
a1	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexA	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexR	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
r1	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexG	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
g1	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexG	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexB	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
b1	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexB	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bufferHead	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
WritableRaster	TokenNameIdentifier
filter	TokenNameIdentifier
(	TokenNameLPAREN
Raster	TokenNameIdentifier
src	TokenNameIdentifier
,	TokenNameCOMMA
WritableRaster	TokenNameIdentifier
dest	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dest	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
checkCompatible	TokenNameIdentifier
(	TokenNameLPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
src	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"src should not be null when dest is null"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
dest	TokenNameIdentifier
=	TokenNameEQUAL
createCompatibleDestRaster	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
w	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DataBufferInt	TokenNameIdentifier
srcDB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DataBufferInt	TokenNameIdentifier
dstDB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
srcOff	TokenNameIdentifier
=	TokenNameEQUAL
srcDB	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
dstOff	TokenNameIdentifier
=	TokenNameEQUAL
dstDB	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
srcScanStride	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
dstScanStride	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
srcPixels	TokenNameIdentifier
=	TokenNameEQUAL
srcDB	TokenNameIdentifier
.	TokenNameDOT
getBankData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
destPixels	TokenNameIdentifier
=	TokenNameEQUAL
dstDB	TokenNameIdentifier
.	TokenNameDOT
getBankData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
sp	TokenNameIdentifier
,	TokenNameCOMMA
dp	TokenNameIdentifier
,	TokenNameCOMMA
cp	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bufferHead	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxIndexA	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxIndexR	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxIndexG	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxIndexB	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
pel	TokenNameIdentifier
,	TokenNameCOMMA
currentPixel	TokenNameIdentifier
,	TokenNameCOMMA
lastPixel	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
a	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
a1	TokenNameIdentifier
,	TokenNameCOMMA
r1	TokenNameIdentifier
,	TokenNameCOMMA
g1	TokenNameIdentifier
,	TokenNameCOMMA
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
w	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
radiusX	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
specialProcessRow	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
,	TokenNameCOMMA
dest	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferA	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
rangeX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
rangeX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferG	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
rangeX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferB	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
rangeX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
sp	TokenNameIdentifier
=	TokenNameEQUAL
srcOff	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
*	TokenNameMULTIPLY
srcScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
=	TokenNameEQUAL
dstOff	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
*	TokenNameMULTIPLY
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferHead	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pel	TokenNameIdentifier
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
a	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
r	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
g	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
b	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
currentPixel	TokenNameIdentifier
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
lastPixel	TokenNameIdentifier
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexA	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexG	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexB	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
j	TokenNameIdentifier
+	TokenNamePLUS
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
radiusX	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
w	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
-	TokenNameMINUS
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
lastPixel	TokenNameIdentifier
=	TokenNameEQUAL
srcPixels	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
maxIndexA	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
rangeX	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
a1	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexA	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexR	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
rangeX	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
r1	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexG	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
rangeX	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
g1	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexG	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexB	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
rangeX	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
b1	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexB	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferHead	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
head	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
tail	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bufferHead	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
rangeX	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
bufferHead	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
rangeX	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
w	TokenNameIdentifier
-	TokenNameMINUS
radiusX	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
head	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeX	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
maxIndexA	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
tail	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
hd	TokenNameIdentifier
=	TokenNameEQUAL
head	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
a1	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
hd	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
hd	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
hd	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
hd	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexR	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
tail	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
hd	TokenNameIdentifier
=	TokenNameEQUAL
head	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
r1	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
hd	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
hd	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
hd	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
hd	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexG	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
tail	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
hd	TokenNameIdentifier
=	TokenNameEQUAL
head	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
g1	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
hd	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
hd	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
hd	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
hd	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexB	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
tail	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
hd	TokenNameIdentifier
=	TokenNameEQUAL
head	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
b1	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
hd	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
hd	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
hd	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
hd	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferHead	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeX	TokenNameIdentifier
;	TokenNameSEMICOLON
count	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
h	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
radiusY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
specialProcessColumn	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
,	TokenNameCOMMA
dest	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferA	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
rangeY	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
rangeY	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferG	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
rangeY	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bufferB	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
rangeY	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
dp	TokenNameIdentifier
=	TokenNameEQUAL
dstOff	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
;	TokenNameSEMICOLON
cp	TokenNameIdentifier
=	TokenNameEQUAL
dstOff	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferHead	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pel	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
cp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
cp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
pel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
a	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
r	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
g	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
b	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
currentPixel	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
cp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
cp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
currentPixel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
maxI	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
lastPixel	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
cp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
cp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexA	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
maxI	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
maxI	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
maxI	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
maxI	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexG	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
maxI	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
maxI	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexB	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
maxI	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
maxI	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
radiusY	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
h	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
-	TokenNameMINUS
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
lastPixel	TokenNameIdentifier
=	TokenNameEQUAL
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
cp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
cp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
lastPixel	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
bufferHead	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
maxIndexA	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
a1	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexA	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexR	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
r1	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexG	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
g1	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexG	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexB	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
b1	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
m	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
maxIndexB	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
bufferHead	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferHead	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
head	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
tail	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bufferHead	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
radiusY	TokenNameIdentifier
:	TokenNameCOLON
bufferHead	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
rangeY	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
h	TokenNameIdentifier
-	TokenNameMINUS
radiusY	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
head	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeY	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
maxIndexA	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
tail	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
hd	TokenNameIdentifier
=	TokenNameEQUAL
head	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
a1	TokenNameIdentifier
=	TokenNameEQUAL
bufferA	TokenNameIdentifier
[	TokenNameLBRACKET
hd	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
a1	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexA	TokenNameIdentifier
=	TokenNameEQUAL
hd	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
hd	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
hd	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexR	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
tail	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
hd	TokenNameIdentifier
=	TokenNameEQUAL
head	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
r1	TokenNameIdentifier
=	TokenNameEQUAL
bufferR	TokenNameIdentifier
[	TokenNameLBRACKET
hd	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexR	TokenNameIdentifier
=	TokenNameEQUAL
hd	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
hd	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
hd	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexG	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
tail	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
hd	TokenNameIdentifier
=	TokenNameEQUAL
head	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
g1	TokenNameIdentifier
=	TokenNameEQUAL
bufferG	TokenNameIdentifier
[	TokenNameLBRACKET
hd	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
g1	TokenNameIdentifier
,	TokenNameCOMMA
g	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
g	TokenNameIdentifier
=	TokenNameEQUAL
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexG	TokenNameIdentifier
=	TokenNameEQUAL
hd	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
hd	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
hd	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxIndexB	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bufferHead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
tail	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
hd	TokenNameIdentifier
=	TokenNameEQUAL
head	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
m	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
b1	TokenNameIdentifier
=	TokenNameEQUAL
bufferB	TokenNameIdentifier
[	TokenNameLBRACKET
hd	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isBetter	TokenNameIdentifier
(	TokenNameLPAREN
b1	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
doDilation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
maxIndexB	TokenNameIdentifier
=	TokenNameEQUAL
hd	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
hd	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
hd	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
r	TokenNameIdentifier
|	TokenNameOR
g	TokenNameIdentifier
|	TokenNameOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstScanStride	TokenNameIdentifier
;	TokenNameSEMICOLON
bufferHead	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bufferHead	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
rangeY	TokenNameIdentifier
;	TokenNameSEMICOLON
count	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
dest	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
BufferedImage	TokenNameIdentifier
filter	TokenNameIdentifier
(	TokenNameLPAREN
BufferedImage	TokenNameIdentifier
src	TokenNameIdentifier
,	TokenNameCOMMA
BufferedImage	TokenNameIdentifier
dest	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
src	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
NullPointerException	TokenNameIdentifier
(	TokenNameLPAREN
"Source image should not be null"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BufferedImage	TokenNameIdentifier
origSrc	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
;	TokenNameSEMICOLON
BufferedImage	TokenNameIdentifier
finalDest	TokenNameIdentifier
=	TokenNameEQUAL
dest	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isCompatible	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getColorModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
src	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BufferedImage	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
BufferedImage	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT_ARGB_PRE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
GraphicsUtil	TokenNameIdentifier
.	TokenNameDOT
copyData	TokenNameIdentifier
(	TokenNameLPAREN
origSrc	TokenNameIdentifier
,	TokenNameCOMMA
src	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
src	TokenNameIdentifier
.	TokenNameDOT
isAlphaPremultiplied	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ColorModel	TokenNameIdentifier
srcCM	TokenNameIdentifier
,	TokenNameCOMMA
srcCMPre	TokenNameIdentifier
;	TokenNameSEMICOLON
srcCM	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
getColorModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
srcCMPre	TokenNameIdentifier
=	TokenNameEQUAL
GraphicsUtil	TokenNameIdentifier
.	TokenNameDOT
coerceColorModel	TokenNameIdentifier
(	TokenNameLPAREN
srcCM	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
src	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BufferedImage	TokenNameIdentifier
(	TokenNameLPAREN
srcCMPre	TokenNameIdentifier
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
getRaster	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
GraphicsUtil	TokenNameIdentifier
.	TokenNameDOT
copyData	TokenNameIdentifier
(	TokenNameLPAREN
origSrc	TokenNameIdentifier
,	TokenNameCOMMA
src	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
dest	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dest	TokenNameIdentifier
=	TokenNameEQUAL
createCompatibleDestImage	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
finalDest	TokenNameIdentifier
=	TokenNameEQUAL
dest	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isCompatible	TokenNameIdentifier
(	TokenNameLPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getColorModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
dest	TokenNameIdentifier
=	TokenNameEQUAL
createCompatibleDestImage	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
dest	TokenNameIdentifier
.	TokenNameDOT
isAlphaPremultiplied	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ColorModel	TokenNameIdentifier
dstCM	TokenNameIdentifier
,	TokenNameCOMMA
dstCMPre	TokenNameIdentifier
;	TokenNameSEMICOLON
dstCM	TokenNameIdentifier
=	TokenNameEQUAL
dest	TokenNameIdentifier
.	TokenNameDOT
getColorModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstCMPre	TokenNameIdentifier
=	TokenNameEQUAL
GraphicsUtil	TokenNameIdentifier
.	TokenNameDOT
coerceColorModel	TokenNameIdentifier
(	TokenNameLPAREN
dstCM	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dest	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BufferedImage	TokenNameIdentifier
(	TokenNameLPAREN
dstCMPre	TokenNameIdentifier
,	TokenNameCOMMA
finalDest	TokenNameIdentifier
.	TokenNameDOT
getRaster	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
filter	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getRaster	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dest	TokenNameIdentifier
.	TokenNameDOT
getRaster	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
getRaster	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
origSrc	TokenNameIdentifier
.	TokenNameDOT
getRaster	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
isAlphaPremultiplied	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
origSrc	TokenNameIdentifier
.	TokenNameDOT
isAlphaPremultiplied	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
GraphicsUtil	TokenNameIdentifier
.	TokenNameDOT
copyData	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
,	TokenNameCOMMA
origSrc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getRaster	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
finalDest	TokenNameIdentifier
.	TokenNameDOT
getRaster	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
isAlphaPremultiplied	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
finalDest	TokenNameIdentifier
.	TokenNameDOT
isAlphaPremultiplied	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
GraphicsUtil	TokenNameIdentifier
.	TokenNameDOT
copyData	TokenNameIdentifier
(	TokenNameLPAREN
dest	TokenNameIdentifier
,	TokenNameCOMMA
finalDest	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
finalDest	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
