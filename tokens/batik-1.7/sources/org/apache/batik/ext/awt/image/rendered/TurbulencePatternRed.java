package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
rendered	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Rectangle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
color	TokenNameIdentifier
.	TokenNameDOT
ColorSpace	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
AffineTransform	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Rectangle2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
ColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBuffer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBufferInt	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DirectColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
SinglePixelPackedSampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
WritableRaster	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
class	TokenNameclass
TurbulencePatternRed	TokenNameIdentifier
extends	TokenNameextends
AbstractRed	TokenNameIdentifier
{	TokenNameLBRACE
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
StitchInfo	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
width	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
height	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
wrapX	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
wrapY	TokenNameIdentifier
;	TokenNameSEMICOLON
StitchInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
StitchInfo	TokenNameIdentifier
(	TokenNameLPAREN
StitchInfo	TokenNameIdentifier
stitchInfo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
width	TokenNameIdentifier
=	TokenNameEQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
height	TokenNameIdentifier
=	TokenNameEQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
wrapX	TokenNameIdentifier
=	TokenNameEQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
wrapX	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
wrapY	TokenNameIdentifier
=	TokenNameEQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
wrapY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
void	TokenNamevoid
assign	TokenNameIdentifier
(	TokenNameLPAREN
StitchInfo	TokenNameIdentifier
stitchInfo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
width	TokenNameIdentifier
=	TokenNameEQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
height	TokenNameIdentifier
=	TokenNameEQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
wrapX	TokenNameIdentifier
=	TokenNameEQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
wrapX	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
wrapY	TokenNameIdentifier
=	TokenNameEQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
wrapY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
void	TokenNamevoid
doubleFrequency	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
width	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
height	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
wrapX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
wrapY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
wrapX	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
PerlinN	TokenNameIdentifier
;	TokenNameSEMICOLON
wrapY	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
PerlinN	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
StitchInfo	TokenNameIdentifier
stitchInfo	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
AffineTransform	TokenNameIdentifier
IDENTITY	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
AffineTransform	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
baseFrequencyX	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
baseFrequencyY	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
seed	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Rectangle2D	TokenNameIdentifier
tile	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
AffineTransform	TokenNameIdentifier
txf	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
isFractalNoise	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
channels	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tx	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ty	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
RAND_m	TokenNameIdentifier
=	TokenNameEQUAL
2147483647	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
RAND_a	TokenNameIdentifier
=	TokenNameEQUAL
16807	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
RAND_q	TokenNameIdentifier
=	TokenNameEQUAL
127773	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
RAND_r	TokenNameIdentifier
=	TokenNameEQUAL
2836	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
BSize	TokenNameIdentifier
=	TokenNameEQUAL
0x100	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
BM	TokenNameIdentifier
=	TokenNameEQUAL
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
double	TokenNamedouble
PerlinN	TokenNameIdentifier
=	TokenNameEQUAL
0x1000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
latticeSelector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
BSize	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
gradient	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
(	TokenNameLPAREN
BSize	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
public	TokenNamepublic
double	TokenNamedouble
getBaseFrequencyX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
baseFrequencyX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getBaseFrequencyY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
baseFrequencyY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNumOctaves	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getSeed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
seed	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Rectangle2D	TokenNameIdentifier
getTile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
Rectangle2D	TokenNameIdentifier
)	TokenNameRPAREN
tile	TokenNameIdentifier
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isFractalNoise	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
isFractalNoise	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getChannels	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
channels	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
boolean	TokenNameboolean
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
channels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
channels	TokenNameIdentifier
[	TokenNameLBRACKET
this	TokenNamethis
.	TokenNameDOT
channels	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
channels	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
int	TokenNameint
setupSeed	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
seed	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
seed	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
seed	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
(	TokenNameLPAREN
seed	TokenNameIdentifier
%	TokenNameREMAINDER
(	TokenNameLPAREN
RAND_m	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
seed	TokenNameIdentifier
>	TokenNameGREATER
RAND_m	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
seed	TokenNameIdentifier
=	TokenNameEQUAL
RAND_m	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
seed	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
int	TokenNameint
random	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
seed	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
result	TokenNameIdentifier
=	TokenNameEQUAL
RAND_a	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
seed	TokenNameIdentifier
%	TokenNameREMAINDER
RAND_q	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
RAND_r	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
seed	TokenNameIdentifier
/	TokenNameDIVIDE
RAND_q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
result	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
RAND_m	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
initLattice	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
seed	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
u	TokenNameIdentifier
,	TokenNameCOMMA
v	TokenNameIdentifier
,	TokenNameCOMMA
s	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
,	TokenNameCOMMA
j	TokenNameIdentifier
,	TokenNameCOMMA
k	TokenNameIdentifier
,	TokenNameCOMMA
s1	TokenNameIdentifier
,	TokenNameCOMMA
s2	TokenNameIdentifier
;	TokenNameSEMICOLON
seed	TokenNameIdentifier
=	TokenNameEQUAL
setupSeed	TokenNameIdentifier
(	TokenNameLPAREN
seed	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
k	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
<	TokenNameLESS
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
BSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
u	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
seed	TokenNameIdentifier
=	TokenNameEQUAL
random	TokenNameIdentifier
(	TokenNameLPAREN
seed	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
%	TokenNameREMAINDER
(	TokenNameLPAREN
BSize	TokenNameIdentifier
+	TokenNamePLUS
BSize	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
BSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
v	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
seed	TokenNameIdentifier
=	TokenNameEQUAL
random	TokenNameIdentifier
(	TokenNameLPAREN
seed	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
%	TokenNameREMAINDER
(	TokenNameLPAREN
BSize	TokenNameIdentifier
+	TokenNamePLUS
BSize	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
BSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
s	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
u	TokenNameIdentifier
*	TokenNameMULTIPLY
u	TokenNameIdentifier
+	TokenNamePLUS
v	TokenNameIdentifier
*	TokenNameMULTIPLY
v	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
*	TokenNameMULTIPLY
8	TokenNameIntegerLiteral
+	TokenNamePLUS
k	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
u	TokenNameIdentifier
*	TokenNameMULTIPLY
s	TokenNameIdentifier
;	TokenNameSEMICOLON
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
*	TokenNameMULTIPLY
8	TokenNameIntegerLiteral
+	TokenNamePLUS
k	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
v	TokenNameIdentifier
*	TokenNameMULTIPLY
s	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
BSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
k	TokenNameIdentifier
=	TokenNameEQUAL
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
seed	TokenNameIdentifier
=	TokenNameEQUAL
random	TokenNameIdentifier
(	TokenNameLPAREN
seed	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
%	TokenNameREMAINDER
BSize	TokenNameIdentifier
;	TokenNameSEMICOLON
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
s1	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
s2	TokenNameIdentifier
=	TokenNameEQUAL
j	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
s	TokenNameIdentifier
=	TokenNameEQUAL
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
s1	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
s1	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
s2	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
s2	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
s	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
BSize	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
BSize	TokenNameIdentifier
*	TokenNameMULTIPLY
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
double	TokenNamedouble
s_curve	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
double	TokenNamedouble
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
t	TokenNameIdentifier
*	TokenNameMULTIPLY
t	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
-	TokenNameMINUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
t	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
double	TokenNamedouble
lerp	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
t	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
a	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
b	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
a	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
b	TokenNameIdentifier
-	TokenNameMINUS
a	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
noise2	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
noise	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
vec0	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
vec1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
b0	TokenNameIdentifier
,	TokenNameCOMMA
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
i	TokenNameIdentifier
,	TokenNameCOMMA
j	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
rx0	TokenNameIdentifier
,	TokenNameCOMMA
rx1	TokenNameIdentifier
,	TokenNameCOMMA
ry0	TokenNameIdentifier
,	TokenNameCOMMA
ry1	TokenNameIdentifier
,	TokenNameCOMMA
sx	TokenNameIdentifier
,	TokenNameCOMMA
sy	TokenNameIdentifier
;	TokenNameSEMICOLON
vec0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
PerlinN	TokenNameIdentifier
;	TokenNameSEMICOLON
b0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
vec0	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
=	TokenNameEQUAL
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
rx0	TokenNameIdentifier
=	TokenNameEQUAL
vec0	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
vec0	TokenNameIdentifier
;	TokenNameSEMICOLON
rx1	TokenNameIdentifier
=	TokenNameEQUAL
rx0	TokenNameIdentifier
-	TokenNameMINUS
1.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
sx	TokenNameIdentifier
=	TokenNameEQUAL
s_curve	TokenNameIdentifier
(	TokenNameLPAREN
rx0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
vec1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
PerlinN	TokenNameIdentifier
;	TokenNameSEMICOLON
b0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
vec1	TokenNameIdentifier
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
j	TokenNameIdentifier
+	TokenNamePLUS
b0	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
b0	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ry0	TokenNameIdentifier
=	TokenNameEQUAL
vec1	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
vec1	TokenNameIdentifier
;	TokenNameSEMICOLON
ry1	TokenNameIdentifier
=	TokenNameEQUAL
ry0	TokenNameIdentifier
-	TokenNameMINUS
1.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
sy	TokenNameIdentifier
=	TokenNameEQUAL
s_curve	TokenNameIdentifier
(	TokenNameLPAREN
ry0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
channels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
noise	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
noise2Stitch	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
noise	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
vec0	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
vec1	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
StitchInfo	TokenNameIdentifier
stitchInfo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
b0	TokenNameIdentifier
,	TokenNameCOMMA
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
i	TokenNameIdentifier
,	TokenNameCOMMA
j	TokenNameIdentifier
,	TokenNameCOMMA
b00	TokenNameIdentifier
,	TokenNameCOMMA
b10	TokenNameIdentifier
,	TokenNameCOMMA
b01	TokenNameIdentifier
,	TokenNameCOMMA
b11	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
t	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
rx0	TokenNameIdentifier
,	TokenNameCOMMA
rx1	TokenNameIdentifier
,	TokenNameCOMMA
ry0	TokenNameIdentifier
,	TokenNameCOMMA
ry1	TokenNameIdentifier
,	TokenNameCOMMA
sx	TokenNameIdentifier
,	TokenNameCOMMA
sy	TokenNameIdentifier
;	TokenNameSEMICOLON
t	TokenNameIdentifier
=	TokenNameEQUAL
vec0	TokenNameIdentifier
+	TokenNamePLUS
PerlinN	TokenNameIdentifier
;	TokenNameSEMICOLON
b0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
t	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
b0	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
b1	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
wrapX	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
b0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
wrapX	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
b0	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
b1	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
i	TokenNameIdentifier
=	TokenNameEQUAL
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
&	TokenNameAND
BM	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
=	TokenNameEQUAL
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
&	TokenNameAND
BM	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
rx0	TokenNameIdentifier
=	TokenNameEQUAL
t	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
t	TokenNameIdentifier
;	TokenNameSEMICOLON
rx1	TokenNameIdentifier
=	TokenNameEQUAL
rx0	TokenNameIdentifier
-	TokenNameMINUS
1.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
sx	TokenNameIdentifier
=	TokenNameEQUAL
s_curve	TokenNameIdentifier
(	TokenNameLPAREN
rx0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
t	TokenNameIdentifier
=	TokenNameEQUAL
vec1	TokenNameIdentifier
+	TokenNamePLUS
PerlinN	TokenNameIdentifier
;	TokenNameSEMICOLON
b0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
t	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
b0	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
b1	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
wrapY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
b0	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
wrapY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
b0	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
b1	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
b00	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
b0	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b10	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
j	TokenNameIdentifier
+	TokenNamePLUS
b0	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b01	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
b1	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b11	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
j	TokenNameIdentifier
+	TokenNamePLUS
b1	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ry0	TokenNameIdentifier
=	TokenNameEQUAL
t	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
t	TokenNameIdentifier
;	TokenNameSEMICOLON
ry1	TokenNameIdentifier
=	TokenNameEQUAL
ry0	TokenNameIdentifier
-	TokenNameMINUS
1.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
sy	TokenNameIdentifier
=	TokenNameEQUAL
s_curve	TokenNameIdentifier
(	TokenNameLPAREN
ry0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
channels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
noise	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b00	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b00	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b10	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b10	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b01	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b01	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b11	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b11	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b00	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b00	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b10	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b10	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b01	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b01	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b11	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b11	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b00	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b00	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b10	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b10	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b01	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b01	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b11	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b11	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b00	TokenNameIdentifier
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b00	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b10	TokenNameIdentifier
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b10	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b01	TokenNameIdentifier
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b01	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b11	TokenNameIdentifier
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b11	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
turbulence_4	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
pointX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointY	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fSum	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
n	TokenNameIdentifier
,	TokenNameCOMMA
ratio	TokenNameIdentifier
=	TokenNameEQUAL
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
,	TokenNameCOMMA
j	TokenNameIdentifier
,	TokenNameCOMMA
b0	TokenNameIdentifier
,	TokenNameCOMMA
b1	TokenNameIdentifier
,	TokenNameCOMMA
nOctave	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
px	TokenNameIdentifier
,	TokenNameCOMMA
py	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
,	TokenNameCOMMA
rx1	TokenNameIdentifier
,	TokenNameCOMMA
ry0	TokenNameIdentifier
,	TokenNameCOMMA
ry1	TokenNameIdentifier
,	TokenNameCOMMA
sx	TokenNameIdentifier
,	TokenNameCOMMA
sy	TokenNameIdentifier
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
baseFrequencyX	TokenNameIdentifier
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
baseFrequencyY	TokenNameIdentifier
;	TokenNameSEMICOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
nOctave	TokenNameIdentifier
=	TokenNameEQUAL
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
px	TokenNameIdentifier
=	TokenNameEQUAL
pointX	TokenNameIdentifier
+	TokenNamePLUS
PerlinN	TokenNameIdentifier
;	TokenNameSEMICOLON
b0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
px	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
=	TokenNameEQUAL
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
rx0	TokenNameIdentifier
=	TokenNameEQUAL
px	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
px	TokenNameIdentifier
;	TokenNameSEMICOLON
rx1	TokenNameIdentifier
=	TokenNameEQUAL
rx0	TokenNameIdentifier
-	TokenNameMINUS
1.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
sx	TokenNameIdentifier
=	TokenNameEQUAL
s_curve	TokenNameIdentifier
(	TokenNameLPAREN
rx0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
py	TokenNameIdentifier
=	TokenNameEQUAL
pointY	TokenNameIdentifier
+	TokenNamePLUS
PerlinN	TokenNameIdentifier
;	TokenNameSEMICOLON
b0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
py	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
b0	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
j	TokenNameIdentifier
+	TokenNamePLUS
b0	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
b0	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ry0	TokenNameIdentifier
=	TokenNameEQUAL
py	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
py	TokenNameIdentifier
;	TokenNameSEMICOLON
ry1	TokenNameIdentifier
=	TokenNameEQUAL
ry0	TokenNameIdentifier
-	TokenNameMINUS
1.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
sy	TokenNameIdentifier
=	TokenNameEQUAL
s_curve	TokenNameIdentifier
(	TokenNameLPAREN
ry0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
=	TokenNameEQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
n	TokenNameIdentifier
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
n	TokenNameIdentifier
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
=	TokenNameEQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
n	TokenNameIdentifier
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
n	TokenNameIdentifier
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
=	TokenNameEQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
n	TokenNameIdentifier
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
n	TokenNameIdentifier
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
=	TokenNameEQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
n	TokenNameIdentifier
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
n	TokenNameIdentifier
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ratio	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
i	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
j	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
j	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
0xFF0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
j	TokenNameIdentifier
|=	TokenNameOR_EQUAL
i	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
j	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
0xFF00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
j	TokenNameIdentifier
|=	TokenNameOR_EQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
j	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
j	TokenNameIdentifier
|=	TokenNameOR_EQUAL
i	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
j	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
0xFF000000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
j	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
turbulence	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rgb	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointY	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fSum	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
noise	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
ratio	TokenNameIdentifier
=	TokenNameEQUAL
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
baseFrequencyX	TokenNameIdentifier
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
baseFrequencyY	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
channels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
nOctave	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
<	TokenNameLESS
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
noise2	TokenNameIdentifier
(	TokenNameLPAREN
noise	TokenNameIdentifier
,	TokenNameCOMMA
pointX	TokenNameIdentifier
,	TokenNameCOMMA
pointY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ratio	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
nOctave	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
<	TokenNameLESS
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
noise2	TokenNameIdentifier
(	TokenNameLPAREN
noise	TokenNameIdentifier
,	TokenNameCOMMA
pointX	TokenNameIdentifier
,	TokenNameCOMMA
pointY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ratio	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
nOctave	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
<	TokenNameLESS
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
noise2	TokenNameIdentifier
(	TokenNameLPAREN
noise	TokenNameIdentifier
,	TokenNameCOMMA
pointX	TokenNameIdentifier
,	TokenNameCOMMA
pointY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ratio	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
nOctave	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
<	TokenNameLESS
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
noise2	TokenNameIdentifier
(	TokenNameLPAREN
noise	TokenNameIdentifier
,	TokenNameCOMMA
pointX	TokenNameIdentifier
,	TokenNameCOMMA
pointY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ratio	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
turbulenceStitch	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rgb	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointY	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fSum	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
noise	TokenNameIdentifier
,	TokenNameCOMMA
StitchInfo	TokenNameIdentifier
stitchInfo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
ratio	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
baseFrequencyX	TokenNameIdentifier
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
baseFrequencyY	TokenNameIdentifier
;	TokenNameSEMICOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
channels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
nOctave	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
<	TokenNameLESS
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
noise2Stitch	TokenNameIdentifier
(	TokenNameLPAREN
noise	TokenNameIdentifier
,	TokenNameCOMMA
pointX	TokenNameIdentifier
,	TokenNameCOMMA
pointY	TokenNameIdentifier
,	TokenNameCOMMA
stitchInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ratio	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
doubleFrequency	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
nOctave	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
<	TokenNameLESS
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
noise2Stitch	TokenNameIdentifier
(	TokenNameLPAREN
noise	TokenNameIdentifier
,	TokenNameCOMMA
pointX	TokenNameIdentifier
,	TokenNameCOMMA
pointY	TokenNameIdentifier
,	TokenNameCOMMA
stitchInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ratio	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
doubleFrequency	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
nOctave	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
<	TokenNameLESS
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
noise2Stitch	TokenNameIdentifier
(	TokenNameLPAREN
noise	TokenNameIdentifier
,	TokenNameCOMMA
pointX	TokenNameIdentifier
,	TokenNameCOMMA
pointY	TokenNameIdentifier
,	TokenNameCOMMA
stitchInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ratio	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
doubleFrequency	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
nOctave	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
<	TokenNameLESS
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
noise2Stitch	TokenNameIdentifier
(	TokenNameLPAREN
noise	TokenNameIdentifier
,	TokenNameCOMMA
pointX	TokenNameIdentifier
,	TokenNameCOMMA
pointY	TokenNameIdentifier
,	TokenNameCOMMA
stitchInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-=	TokenNameMINUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ratio	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
doubleFrequency	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
turbulenceFractal_4	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
pointX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointY	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fSum	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
b0	TokenNameIdentifier
,	TokenNameCOMMA
b1	TokenNameIdentifier
,	TokenNameCOMMA
nOctave	TokenNameIdentifier
,	TokenNameCOMMA
i	TokenNameIdentifier
,	TokenNameCOMMA
j	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
px	TokenNameIdentifier
,	TokenNameCOMMA
py	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
,	TokenNameCOMMA
rx1	TokenNameIdentifier
,	TokenNameCOMMA
ry0	TokenNameIdentifier
,	TokenNameCOMMA
ry1	TokenNameIdentifier
,	TokenNameCOMMA
sx	TokenNameIdentifier
,	TokenNameCOMMA
sy	TokenNameIdentifier
,	TokenNameCOMMA
ratio	TokenNameIdentifier
=	TokenNameEQUAL
127.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
baseFrequencyX	TokenNameIdentifier
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
baseFrequencyY	TokenNameIdentifier
;	TokenNameSEMICOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
127.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
nOctave	TokenNameIdentifier
=	TokenNameEQUAL
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
px	TokenNameIdentifier
=	TokenNameEQUAL
pointX	TokenNameIdentifier
+	TokenNamePLUS
PerlinN	TokenNameIdentifier
;	TokenNameSEMICOLON
b0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
px	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
=	TokenNameEQUAL
latticeSelector	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
rx0	TokenNameIdentifier
=	TokenNameEQUAL
px	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
px	TokenNameIdentifier
;	TokenNameSEMICOLON
rx1	TokenNameIdentifier
=	TokenNameEQUAL
rx0	TokenNameIdentifier
-	TokenNameMINUS
1.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
sx	TokenNameIdentifier
=	TokenNameEQUAL
s_curve	TokenNameIdentifier
(	TokenNameLPAREN
rx0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
py	TokenNameIdentifier
=	TokenNameEQUAL
pointY	TokenNameIdentifier
+	TokenNamePLUS
PerlinN	TokenNameIdentifier
;	TokenNameSEMICOLON
b0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
py	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
b0	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
j	TokenNameIdentifier
+	TokenNamePLUS
b0	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
b0	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
BM	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ry0	TokenNameIdentifier
=	TokenNameEQUAL
py	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
py	TokenNameIdentifier
;	TokenNameSEMICOLON
ry1	TokenNameIdentifier
=	TokenNameEQUAL
ry0	TokenNameIdentifier
-	TokenNameMINUS
1.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
sy	TokenNameIdentifier
=	TokenNameEQUAL
s_curve	TokenNameIdentifier
(	TokenNameLPAREN
ry0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
;	TokenNameSEMICOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
;	TokenNameSEMICOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
;	TokenNameSEMICOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sy	TokenNameIdentifier
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
lerp	TokenNameIdentifier
(	TokenNameLPAREN
sx	TokenNameIdentifier
,	TokenNameCOMMA
rx0	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b0	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
rx1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
ry1	TokenNameIdentifier
*	TokenNameMULTIPLY
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
;	TokenNameSEMICOLON
ratio	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
i	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
j	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
j	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
0xFF0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
j	TokenNameIdentifier
|=	TokenNameOR_EQUAL
i	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
j	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
0xFF00	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
j	TokenNameIdentifier
|=	TokenNameOR_EQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
j	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
j	TokenNameIdentifier
|=	TokenNameOR_EQUAL
i	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
j	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
0xFF000000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
j	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
turbulenceFractal	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rgb	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointY	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fSum	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
noise	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
ratio	TokenNameIdentifier
=	TokenNameEQUAL
127.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
int	TokenNameint
nOctave	TokenNameIdentifier
;	TokenNameSEMICOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
127.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
baseFrequencyX	TokenNameIdentifier
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
baseFrequencyY	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
nOctave	TokenNameIdentifier
=	TokenNameEQUAL
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
noise2	TokenNameIdentifier
(	TokenNameLPAREN
noise	TokenNameIdentifier
,	TokenNameCOMMA
pointX	TokenNameIdentifier
,	TokenNameCOMMA
pointY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
channels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ratio	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
channels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
turbulenceFractalStitch	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rgb	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
pointY	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fSum	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
noise	TokenNameIdentifier
,	TokenNameCOMMA
StitchInfo	TokenNameIdentifier
stitchInfo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
ratio	TokenNameIdentifier
=	TokenNameEQUAL
127.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
int	TokenNameint
nOctave	TokenNameIdentifier
;	TokenNameSEMICOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
127.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
baseFrequencyX	TokenNameIdentifier
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
baseFrequencyY	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
nOctave	TokenNameIdentifier
=	TokenNameEQUAL
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nOctave	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
noise2Stitch	TokenNameIdentifier
(	TokenNameLPAREN
noise	TokenNameIdentifier
,	TokenNameCOMMA
pointX	TokenNameIdentifier
,	TokenNameCOMMA
pointY	TokenNameIdentifier
,	TokenNameCOMMA
stitchInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
channels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
noise	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
ratio	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ratio	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
pointX	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pointY	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
doubleFrequency	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
channels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
fSum	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFFFF00	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x80000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
WritableRaster	TokenNameIdentifier
copyData	TokenNameIdentifier
(	TokenNameLPAREN
WritableRaster	TokenNameIdentifier
dest	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dest	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Cannot generate a noise pattern into a null raster"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
w	TokenNameIdentifier
=	TokenNameEQUAL
dest	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
dest	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DataBufferInt	TokenNameIdentifier
dstDB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SinglePixelPackedSampleModel	TokenNameIdentifier
sppsm	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
minX	TokenNameIdentifier
=	TokenNameEQUAL
dest	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
minY	TokenNameIdentifier
=	TokenNameEQUAL
dest	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sppsm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
dstOff	TokenNameIdentifier
=	TokenNameEQUAL
dstDB	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
sppsm	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
minX	TokenNameIdentifier
-	TokenNameMINUS
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
minY	TokenNameIdentifier
-	TokenNameMINUS
dest	TokenNameIdentifier
.	TokenNameDOT
getSampleModelTranslateY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
destPixels	TokenNameIdentifier
=	TokenNameEQUAL
dstDB	TokenNameIdentifier
.	TokenNameDOT
getBankData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
dstAdjust	TokenNameIdentifier
=	TokenNameEQUAL
sppsm	TokenNameIdentifier
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
,	TokenNameCOMMA
dp	TokenNameIdentifier
=	TokenNameEQUAL
dstOff	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rgb	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fSum	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
noise	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
tx0	TokenNameIdentifier
,	TokenNameCOMMA
tx1	TokenNameIdentifier
,	TokenNameCOMMA
ty0	TokenNameIdentifier
,	TokenNameCOMMA
ty1	TokenNameIdentifier
;	TokenNameSEMICOLON
tx0	TokenNameIdentifier
=	TokenNameEQUAL
tx	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
tx1	TokenNameIdentifier
=	TokenNameEQUAL
tx	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ty0	TokenNameIdentifier
=	TokenNameEQUAL
ty	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-	TokenNameMINUS
(	TokenNameLPAREN
w	TokenNameIdentifier
*	TokenNameMULTIPLY
tx0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ty1	TokenNameIdentifier
=	TokenNameEQUAL
ty	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-	TokenNameMINUS
(	TokenNameLPAREN
w	TokenNameIdentifier
*	TokenNameMULTIPLY
tx1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
p	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
minX	TokenNameIdentifier
,	TokenNameCOMMA
minY	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
txf	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
(	TokenNameLPAREN
p	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
p	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
point_0	TokenNameIdentifier
=	TokenNameEQUAL
p	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
double	TokenNamedouble
point_1	TokenNameIdentifier
=	TokenNameEQUAL
p	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isFractalNoise	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
stitchInfo	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
channels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
end	TokenNameIdentifier
=	TokenNameEQUAL
dp	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
turbulenceFractal_4	TokenNameIdentifier
(	TokenNameLPAREN
point_0	TokenNameIdentifier
,	TokenNameCOMMA
point_1	TokenNameIdentifier
,	TokenNameCOMMA
fSum	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
point_0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tx0	TokenNameIdentifier
;	TokenNameSEMICOLON
point_1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tx1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
point_0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ty0	TokenNameIdentifier
;	TokenNameSEMICOLON
point_1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ty1	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstAdjust	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
end	TokenNameIdentifier
=	TokenNameEQUAL
dp	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
turbulenceFractal	TokenNameIdentifier
(	TokenNameLPAREN
rgb	TokenNameIdentifier
,	TokenNameCOMMA
point_0	TokenNameIdentifier
,	TokenNameCOMMA
point_1	TokenNameIdentifier
,	TokenNameCOMMA
fSum	TokenNameIdentifier
,	TokenNameCOMMA
noise	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
point_0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tx0	TokenNameIdentifier
;	TokenNameSEMICOLON
point_1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tx1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
point_0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ty0	TokenNameIdentifier
;	TokenNameSEMICOLON
point_1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ty1	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstAdjust	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
StitchInfo	TokenNameIdentifier
si	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StitchInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
end	TokenNameIdentifier
=	TokenNameEQUAL
dp	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
si	TokenNameIdentifier
.	TokenNameDOT
assign	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
stitchInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
turbulenceFractalStitch	TokenNameIdentifier
(	TokenNameLPAREN
rgb	TokenNameIdentifier
,	TokenNameCOMMA
point_0	TokenNameIdentifier
,	TokenNameCOMMA
point_1	TokenNameIdentifier
,	TokenNameCOMMA
fSum	TokenNameIdentifier
,	TokenNameCOMMA
noise	TokenNameIdentifier
,	TokenNameCOMMA
si	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
point_0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tx0	TokenNameIdentifier
;	TokenNameSEMICOLON
point_1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tx1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
point_0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ty0	TokenNameIdentifier
;	TokenNameSEMICOLON
point_1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ty1	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstAdjust	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
stitchInfo	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
channels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
end	TokenNameIdentifier
=	TokenNameEQUAL
dp	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
turbulence_4	TokenNameIdentifier
(	TokenNameLPAREN
point_0	TokenNameIdentifier
,	TokenNameCOMMA
point_1	TokenNameIdentifier
,	TokenNameCOMMA
fSum	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
point_0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tx0	TokenNameIdentifier
;	TokenNameSEMICOLON
point_1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tx1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
point_0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ty0	TokenNameIdentifier
;	TokenNameSEMICOLON
point_1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ty1	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstAdjust	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
end	TokenNameIdentifier
=	TokenNameEQUAL
dp	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
turbulence	TokenNameIdentifier
(	TokenNameLPAREN
rgb	TokenNameIdentifier
,	TokenNameCOMMA
point_0	TokenNameIdentifier
,	TokenNameCOMMA
point_1	TokenNameIdentifier
,	TokenNameCOMMA
fSum	TokenNameIdentifier
,	TokenNameCOMMA
noise	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
point_0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tx0	TokenNameIdentifier
;	TokenNameSEMICOLON
point_1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tx1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
point_0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ty0	TokenNameIdentifier
;	TokenNameSEMICOLON
point_1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ty1	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstAdjust	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
StitchInfo	TokenNameIdentifier
si	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StitchInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
end	TokenNameIdentifier
=	TokenNameEQUAL
dp	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
si	TokenNameIdentifier
.	TokenNameDOT
assign	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
stitchInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
turbulenceStitch	TokenNameIdentifier
(	TokenNameLPAREN
rgb	TokenNameIdentifier
,	TokenNameCOMMA
point_0	TokenNameIdentifier
,	TokenNameCOMMA
point_1	TokenNameIdentifier
,	TokenNameCOMMA
fSum	TokenNameIdentifier
,	TokenNameCOMMA
noise	TokenNameIdentifier
,	TokenNameCOMMA
si	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
destPixels	TokenNameIdentifier
[	TokenNameLBRACKET
dp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rgb	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
point_0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tx0	TokenNameIdentifier
;	TokenNameSEMICOLON
point_1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tx1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
point_0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ty0	TokenNameIdentifier
;	TokenNameSEMICOLON
point_1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ty1	TokenNameIdentifier
;	TokenNameSEMICOLON
dp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
dstAdjust	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
dest	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
TurbulencePatternRed	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
baseFrequencyX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
baseFrequencyY	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numOctaves	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
seed	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
isFractalNoise	TokenNameIdentifier
,	TokenNameCOMMA
Rectangle2D	TokenNameIdentifier
tile	TokenNameIdentifier
,	TokenNameCOMMA
AffineTransform	TokenNameIdentifier
txf	TokenNameIdentifier
,	TokenNameCOMMA
Rectangle	TokenNameIdentifier
devRect	TokenNameIdentifier
,	TokenNameCOMMA
ColorSpace	TokenNameIdentifier
cs	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
alpha	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
baseFrequencyX	TokenNameIdentifier
=	TokenNameEQUAL
baseFrequencyX	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
baseFrequencyY	TokenNameIdentifier
=	TokenNameEQUAL
baseFrequencyY	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
seed	TokenNameIdentifier
=	TokenNameEQUAL
seed	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
isFractalNoise	TokenNameIdentifier
=	TokenNameEQUAL
isFractalNoise	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
tile	TokenNameIdentifier
=	TokenNameEQUAL
tile	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
txf	TokenNameIdentifier
=	TokenNameEQUAL
txf	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
txf	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
txf	TokenNameIdentifier
=	TokenNameEQUAL
IDENTITY	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nChannels	TokenNameIdentifier
=	TokenNameEQUAL
cs	TokenNameIdentifier
.	TokenNameDOT
getNumComponents	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
alpha	TokenNameIdentifier
)	TokenNameRPAREN
nChannels	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
channels	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
nChannels	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
channels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
channels	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
txf	TokenNameIdentifier
.	TokenNameDOT
deltaTransform	TokenNameIdentifier
(	TokenNameLPAREN
tx	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
tx	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
txf	TokenNameIdentifier
.	TokenNameDOT
deltaTransform	TokenNameIdentifier
(	TokenNameLPAREN
ty	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
ty	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
vecX	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
.5	TokenNameDoubleLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
vecY	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
.5	TokenNameDoubleLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
txf	TokenNameIdentifier
.	TokenNameDOT
deltaTransform	TokenNameIdentifier
(	TokenNameLPAREN
vecX	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
vecX	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
txf	TokenNameIdentifier
.	TokenNameDOT
deltaTransform	TokenNameIdentifier
(	TokenNameLPAREN
vecY	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
vecY	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
dx	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
vecX	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
Math	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
vecY	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
maxX	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
round	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
log	TokenNameIdentifier
(	TokenNameLPAREN
dx	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
Math	TokenNameIdentifier
.	TokenNameDOT
log	TokenNameIdentifier
(	TokenNameLPAREN
baseFrequencyX	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
log	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
dy	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
vecX	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
Math	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
vecY	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
maxY	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
round	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
log	TokenNameIdentifier
(	TokenNameLPAREN
dy	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
Math	TokenNameIdentifier
.	TokenNameDOT
log	TokenNameIdentifier
(	TokenNameLPAREN
baseFrequencyY	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
Math	TokenNameIdentifier
.	TokenNameDOT
log	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
numOctaves	TokenNameIdentifier
=	TokenNameEQUAL
numOctaves	TokenNameIdentifier
>	TokenNameGREATER
maxX	TokenNameIdentifier
?	TokenNameQUESTION
maxX	TokenNameIdentifier
:	TokenNameCOLON
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
numOctaves	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
numOctaves	TokenNameIdentifier
>	TokenNameGREATER
maxY	TokenNameIdentifier
?	TokenNameQUESTION
maxY	TokenNameIdentifier
:	TokenNameCOLON
this	TokenNamethis
.	TokenNameDOT
numOctaves	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
numOctaves	TokenNameIdentifier
<	TokenNameLESS
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
numOctaves	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
numOctaves	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
numOctaves	TokenNameIdentifier
>	TokenNameGREATER
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
numOctaves	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tile	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
lowFreq	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
floor	TokenNameIdentifier
(	TokenNameLPAREN
tile	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
baseFrequencyX	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
tile	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
highFreq	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
ceil	TokenNameIdentifier
(	TokenNameLPAREN
tile	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
baseFrequencyX	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
tile	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
baseFrequencyX	TokenNameIdentifier
/	TokenNameDIVIDE
lowFreq	TokenNameIdentifier
<	TokenNameLESS
highFreq	TokenNameIdentifier
/	TokenNameDIVIDE
baseFrequencyX	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
baseFrequencyX	TokenNameIdentifier
=	TokenNameEQUAL
lowFreq	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
this	TokenNamethis
.	TokenNameDOT
baseFrequencyX	TokenNameIdentifier
=	TokenNameEQUAL
highFreq	TokenNameIdentifier
;	TokenNameSEMICOLON
lowFreq	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
floor	TokenNameIdentifier
(	TokenNameLPAREN
tile	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
baseFrequencyY	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
tile	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
highFreq	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
ceil	TokenNameIdentifier
(	TokenNameLPAREN
tile	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
baseFrequencyY	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
tile	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
baseFrequencyY	TokenNameIdentifier
/	TokenNameDIVIDE
lowFreq	TokenNameIdentifier
<	TokenNameLESS
highFreq	TokenNameIdentifier
/	TokenNameDIVIDE
baseFrequencyY	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
baseFrequencyY	TokenNameIdentifier
=	TokenNameEQUAL
lowFreq	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
this	TokenNamethis
.	TokenNameDOT
baseFrequencyY	TokenNameIdentifier
=	TokenNameEQUAL
highFreq	TokenNameIdentifier
;	TokenNameSEMICOLON
stitchInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StitchInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
tile	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
this	TokenNamethis
.	TokenNameDOT
baseFrequencyX	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
tile	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
this	TokenNamethis
.	TokenNameDOT
baseFrequencyY	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
wrapX	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
tile	TokenNameIdentifier
.	TokenNameDOT
getX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
this	TokenNamethis
.	TokenNameDOT
baseFrequencyX	TokenNameIdentifier
+	TokenNamePLUS
PerlinN	TokenNameIdentifier
+	TokenNamePLUS
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
wrapY	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
tile	TokenNameIdentifier
.	TokenNameDOT
getY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
this	TokenNamethis
.	TokenNameDOT
baseFrequencyY	TokenNameIdentifier
+	TokenNamePLUS
PerlinN	TokenNameIdentifier
+	TokenNamePLUS
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
stitchInfo	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
initLattice	TokenNameIdentifier
(	TokenNameLPAREN
seed	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ColorModel	TokenNameIdentifier
cm	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
alpha	TokenNameIdentifier
)	TokenNameRPAREN
cm	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DirectColorModel	TokenNameIdentifier
(	TokenNameLPAREN
cs	TokenNameIdentifier
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x00FF0000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0000FF00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x000000FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFF000000	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
cm	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DirectColorModel	TokenNameIdentifier
(	TokenNameLPAREN
cs	TokenNameIdentifier
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x00FF0000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0000FF00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x000000FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
tileSize	TokenNameIdentifier
=	TokenNameEQUAL
AbstractTiledRed	TokenNameIdentifier
.	TokenNameDOT
getDefaultTileSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
init	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
CachableRed	TokenNameIdentifier
)	TokenNameRPAREN
null	TokenNamenull
,	TokenNameCOMMA
devRect	TokenNameIdentifier
,	TokenNameCOMMA
cm	TokenNameIdentifier
,	TokenNameCOMMA
cm	TokenNameIdentifier
.	TokenNameDOT
createCompatibleSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
tileSize	TokenNameIdentifier
,	TokenNameCOMMA
tileSize	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
