package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Shape	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Rectangle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
AffineTransform	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Arc2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
GeneralPath	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
PathIterator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Point2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Rectangle2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Arrays	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
ExtendedGeneralPath	TokenNameIdentifier
implements	TokenNameimplements
ExtendedShape	TokenNameIdentifier
,	TokenNameCOMMA
Cloneable	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
GeneralPath	TokenNameIdentifier
path	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
numVals	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
numSeg	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
values	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
types	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
float	TokenNamefloat
mx	TokenNameIdentifier
,	TokenNameCOMMA
my	TokenNameIdentifier
,	TokenNameCOMMA
cx	TokenNameIdentifier
,	TokenNameCOMMA
cy	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ExtendedGeneralPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
path	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GeneralPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ExtendedGeneralPath	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
rule	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
path	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GeneralPath	TokenNameIdentifier
(	TokenNameLPAREN
rule	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ExtendedGeneralPath	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
rule	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
initialCapacity	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
path	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GeneralPath	TokenNameIdentifier
(	TokenNameLPAREN
rule	TokenNameIdentifier
,	TokenNameCOMMA
initialCapacity	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ExtendedGeneralPath	TokenNameIdentifier
(	TokenNameLPAREN
Shape	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
append	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
void	TokenNamevoid
arcTo	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
rx	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
ry	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
angle	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
largeArcFlag	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
sweepFlag	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
x	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
y	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
rx	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
ry	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
lineTo	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
checkMoveTo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
x0	TokenNameIdentifier
=	TokenNameEQUAL
cx	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
y0	TokenNameIdentifier
=	TokenNameEQUAL
cy	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
x0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
x	TokenNameIdentifier
&&	TokenNameAND_AND
y0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
y	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Arc2D	TokenNameIdentifier
arc	TokenNameIdentifier
=	TokenNameEQUAL
computeArc	TokenNameIdentifier
(	TokenNameLPAREN
x0	TokenNameIdentifier
,	TokenNameCOMMA
y0	TokenNameIdentifier
,	TokenNameCOMMA
rx	TokenNameIdentifier
,	TokenNameCOMMA
ry	TokenNameIdentifier
,	TokenNameCOMMA
angle	TokenNameIdentifier
,	TokenNameCOMMA
largeArcFlag	TokenNameIdentifier
,	TokenNameCOMMA
sweepFlag	TokenNameIdentifier
,	TokenNameCOMMA
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
arc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
AffineTransform	TokenNameIdentifier
t	TokenNameIdentifier
=	TokenNameEQUAL
AffineTransform	TokenNameIdentifier
.	TokenNameDOT
getRotateInstance	TokenNameIdentifier
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
toRadians	TokenNameIdentifier
(	TokenNameLPAREN
angle	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
arc	TokenNameIdentifier
.	TokenNameDOT
getCenterX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
arc	TokenNameIdentifier
.	TokenNameDOT
getCenterY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Shape	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
t	TokenNameIdentifier
.	TokenNameDOT
createTransformedShape	TokenNameIdentifier
(	TokenNameLPAREN
arc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
path	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
makeRoom	TokenNameIdentifier
(	TokenNameLPAREN
7	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
types	TokenNameIdentifier
[	TokenNameLBRACKET
numSeg	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
ExtendedPathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_ARCTO	TokenNameIdentifier
;	TokenNameSEMICOLON
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
rx	TokenNameIdentifier
;	TokenNameSEMICOLON
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
ry	TokenNameIdentifier
;	TokenNameSEMICOLON
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
angle	TokenNameIdentifier
;	TokenNameSEMICOLON
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
largeArcFlag	TokenNameIdentifier
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
sweepFlag	TokenNameIdentifier
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
cx	TokenNameIdentifier
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
x	TokenNameIdentifier
;	TokenNameSEMICOLON
cy	TokenNameIdentifier
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
Arc2D	TokenNameIdentifier
computeArc	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
x0	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
y0	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
rx	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
ry	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
angle	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
largeArcFlag	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
sweepFlag	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
x	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
y	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
dx2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
x0	TokenNameIdentifier
-	TokenNameMINUS
x	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
2.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
dy2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
y0	TokenNameIdentifier
-	TokenNameMINUS
y	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
2.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
angle	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
toRadians	TokenNameIdentifier
(	TokenNameLPAREN
angle	TokenNameIdentifier
%	TokenNameREMAINDER
360.0	TokenNameDoubleLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
cosAngle	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
cos	TokenNameIdentifier
(	TokenNameLPAREN
angle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
sinAngle	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
sin	TokenNameIdentifier
(	TokenNameLPAREN
angle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
x1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
cosAngle	TokenNameIdentifier
*	TokenNameMULTIPLY
dx2	TokenNameIdentifier
+	TokenNamePLUS
sinAngle	TokenNameIdentifier
*	TokenNameMULTIPLY
dy2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
y1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
-	TokenNameMINUS
sinAngle	TokenNameIdentifier
*	TokenNameMULTIPLY
dx2	TokenNameIdentifier
+	TokenNamePLUS
cosAngle	TokenNameIdentifier
*	TokenNameMULTIPLY
dy2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
rx	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
rx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ry	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
ry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
Prx	TokenNameIdentifier
=	TokenNameEQUAL
rx	TokenNameIdentifier
*	TokenNameMULTIPLY
rx	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
Pry	TokenNameIdentifier
=	TokenNameEQUAL
ry	TokenNameIdentifier
*	TokenNameMULTIPLY
ry	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
Px1	TokenNameIdentifier
=	TokenNameEQUAL
x1	TokenNameIdentifier
*	TokenNameMULTIPLY
x1	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
Py1	TokenNameIdentifier
=	TokenNameEQUAL
y1	TokenNameIdentifier
*	TokenNameMULTIPLY
y1	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
radiiCheck	TokenNameIdentifier
=	TokenNameEQUAL
Px1	TokenNameIdentifier
/	TokenNameDIVIDE
Prx	TokenNameIdentifier
+	TokenNamePLUS
Py1	TokenNameIdentifier
/	TokenNameDIVIDE
Pry	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
radiiCheck	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
rx	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
radiiCheck	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
rx	TokenNameIdentifier
;	TokenNameSEMICOLON
ry	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
radiiCheck	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
ry	TokenNameIdentifier
;	TokenNameSEMICOLON
Prx	TokenNameIdentifier
=	TokenNameEQUAL
rx	TokenNameIdentifier
*	TokenNameMULTIPLY
rx	TokenNameIdentifier
;	TokenNameSEMICOLON
Pry	TokenNameIdentifier
=	TokenNameEQUAL
ry	TokenNameIdentifier
*	TokenNameMULTIPLY
ry	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
double	TokenNamedouble
sign	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
largeArcFlag	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
sweepFlag	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
sq	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
Prx	TokenNameIdentifier
*	TokenNameMULTIPLY
Pry	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
Prx	TokenNameIdentifier
*	TokenNameMULTIPLY
Py1	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
Pry	TokenNameIdentifier
*	TokenNameMULTIPLY
Px1	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
(	TokenNameLPAREN
Prx	TokenNameIdentifier
*	TokenNameMULTIPLY
Py1	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
Pry	TokenNameIdentifier
*	TokenNameMULTIPLY
Px1	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sq	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
sq	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
sq	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
coef	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
sign	TokenNameIdentifier
*	TokenNameMULTIPLY
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
sq	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
cx1	TokenNameIdentifier
=	TokenNameEQUAL
coef	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
rx	TokenNameIdentifier
*	TokenNameMULTIPLY
y1	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
ry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
cy1	TokenNameIdentifier
=	TokenNameEQUAL
coef	TokenNameIdentifier
*	TokenNameMULTIPLY
-	TokenNameMINUS
(	TokenNameLPAREN
(	TokenNameLPAREN
ry	TokenNameIdentifier
*	TokenNameMULTIPLY
x1	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
rx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
sx2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
x0	TokenNameIdentifier
+	TokenNamePLUS
x	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
2.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
sy2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
y0	TokenNameIdentifier
+	TokenNamePLUS
y	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
2.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
cx	TokenNameIdentifier
=	TokenNameEQUAL
sx2	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
cosAngle	TokenNameIdentifier
*	TokenNameMULTIPLY
cx1	TokenNameIdentifier
-	TokenNameMINUS
sinAngle	TokenNameIdentifier
*	TokenNameMULTIPLY
cy1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
cy	TokenNameIdentifier
=	TokenNameEQUAL
sy2	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
sinAngle	TokenNameIdentifier
*	TokenNameMULTIPLY
cx1	TokenNameIdentifier
+	TokenNamePLUS
cosAngle	TokenNameIdentifier
*	TokenNameMULTIPLY
cy1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
ux	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
x1	TokenNameIdentifier
-	TokenNameMINUS
cx1	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
rx	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
uy	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
y1	TokenNameIdentifier
-	TokenNameMINUS
cy1	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
ry	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
vx	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
-	TokenNameMINUS
x1	TokenNameIdentifier
-	TokenNameMINUS
cx1	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
rx	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
vy	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
-	TokenNameMINUS
y1	TokenNameIdentifier
-	TokenNameMINUS
cy1	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
ry	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
p	TokenNameIdentifier
,	TokenNameCOMMA
n	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
ux	TokenNameIdentifier
*	TokenNameMULTIPLY
ux	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
uy	TokenNameIdentifier
*	TokenNameMULTIPLY
uy	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
p	TokenNameIdentifier
=	TokenNameEQUAL
ux	TokenNameIdentifier
;	TokenNameSEMICOLON
sign	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
uy	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
-	TokenNameMINUS
1.0	TokenNameDoubleLiteral
:	TokenNameCOLON
1.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
angleStart	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
toDegrees	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
*	TokenNameMULTIPLY
Math	TokenNameIdentifier
.	TokenNameDOT
acos	TokenNameIdentifier
(	TokenNameLPAREN
p	TokenNameIdentifier
/	TokenNameDIVIDE
n	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
ux	TokenNameIdentifier
*	TokenNameMULTIPLY
ux	TokenNameIdentifier
+	TokenNamePLUS
uy	TokenNameIdentifier
*	TokenNameMULTIPLY
uy	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
(	TokenNameLPAREN
vx	TokenNameIdentifier
*	TokenNameMULTIPLY
vx	TokenNameIdentifier
+	TokenNamePLUS
vy	TokenNameIdentifier
*	TokenNameMULTIPLY
vy	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
p	TokenNameIdentifier
=	TokenNameEQUAL
ux	TokenNameIdentifier
*	TokenNameMULTIPLY
vx	TokenNameIdentifier
+	TokenNamePLUS
uy	TokenNameIdentifier
*	TokenNameMULTIPLY
vy	TokenNameIdentifier
;	TokenNameSEMICOLON
sign	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ux	TokenNameIdentifier
*	TokenNameMULTIPLY
vy	TokenNameIdentifier
-	TokenNameMINUS
uy	TokenNameIdentifier
*	TokenNameMULTIPLY
vx	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
-	TokenNameMINUS
1.0	TokenNameDoubleLiteral
:	TokenNameCOLON
1.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
angleExtent	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
toDegrees	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
*	TokenNameMULTIPLY
Math	TokenNameIdentifier
.	TokenNameDOT
acos	TokenNameIdentifier
(	TokenNameLPAREN
p	TokenNameIdentifier
/	TokenNameDIVIDE
n	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
sweepFlag	TokenNameIdentifier
&&	TokenNameAND_AND
angleExtent	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
angleExtent	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
360f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sweepFlag	TokenNameIdentifier
&&	TokenNameAND_AND
angleExtent	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
angleExtent	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
360f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
angleExtent	TokenNameIdentifier
%=	TokenNameREMAINDER_EQUAL
360f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
angleStart	TokenNameIdentifier
%=	TokenNameREMAINDER_EQUAL
360f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
Arc2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
arc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Arc2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
arc	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
=	TokenNameEQUAL
cx	TokenNameIdentifier
-	TokenNameMINUS
rx	TokenNameIdentifier
;	TokenNameSEMICOLON
arc	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
=	TokenNameEQUAL
cy	TokenNameIdentifier
-	TokenNameMINUS
ry	TokenNameIdentifier
;	TokenNameSEMICOLON
arc	TokenNameIdentifier
.	TokenNameDOT
width	TokenNameIdentifier
=	TokenNameEQUAL
rx	TokenNameIdentifier
*	TokenNameMULTIPLY
2.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
arc	TokenNameIdentifier
.	TokenNameDOT
height	TokenNameIdentifier
=	TokenNameEQUAL
ry	TokenNameIdentifier
*	TokenNameMULTIPLY
2.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
arc	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
angleStart	TokenNameIdentifier
;	TokenNameSEMICOLON
arc	TokenNameIdentifier
.	TokenNameDOT
extent	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
angleExtent	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
arc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
void	TokenNamevoid
moveTo	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
x	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
y	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
makeRoom	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
types	TokenNameIdentifier
[	TokenNameLBRACKET
numSeg	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_MOVETO	TokenNameIdentifier
;	TokenNameSEMICOLON
cx	TokenNameIdentifier
=	TokenNameEQUAL
mx	TokenNameIdentifier
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
x	TokenNameIdentifier
;	TokenNameSEMICOLON
cy	TokenNameIdentifier
=	TokenNameEQUAL
my	TokenNameIdentifier
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
void	TokenNamevoid
lineTo	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
x	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
y	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
checkMoveTo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
path	TokenNameIdentifier
.	TokenNameDOT
lineTo	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
makeRoom	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
types	TokenNameIdentifier
[	TokenNameLBRACKET
numSeg	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_LINETO	TokenNameIdentifier
;	TokenNameSEMICOLON
cx	TokenNameIdentifier
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
x	TokenNameIdentifier
;	TokenNameSEMICOLON
cy	TokenNameIdentifier
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
void	TokenNamevoid
quadTo	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
x1	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
y1	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
x2	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
y2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
checkMoveTo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
path	TokenNameIdentifier
.	TokenNameDOT
quadTo	TokenNameIdentifier
(	TokenNameLPAREN
x1	TokenNameIdentifier
,	TokenNameCOMMA
y1	TokenNameIdentifier
,	TokenNameCOMMA
x2	TokenNameIdentifier
,	TokenNameCOMMA
y2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
makeRoom	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
types	TokenNameIdentifier
[	TokenNameLBRACKET
numSeg	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_QUADTO	TokenNameIdentifier
;	TokenNameSEMICOLON
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
x1	TokenNameIdentifier
;	TokenNameSEMICOLON
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
y1	TokenNameIdentifier
;	TokenNameSEMICOLON
cx	TokenNameIdentifier
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
x2	TokenNameIdentifier
;	TokenNameSEMICOLON
cy	TokenNameIdentifier
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
y2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
void	TokenNamevoid
curveTo	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
x1	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
y1	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
x2	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
y2	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
x3	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
y3	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
checkMoveTo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
path	TokenNameIdentifier
.	TokenNameDOT
curveTo	TokenNameIdentifier
(	TokenNameLPAREN
x1	TokenNameIdentifier
,	TokenNameCOMMA
y1	TokenNameIdentifier
,	TokenNameCOMMA
x2	TokenNameIdentifier
,	TokenNameCOMMA
y2	TokenNameIdentifier
,	TokenNameCOMMA
x3	TokenNameIdentifier
,	TokenNameCOMMA
y3	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
makeRoom	TokenNameIdentifier
(	TokenNameLPAREN
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
types	TokenNameIdentifier
[	TokenNameLBRACKET
numSeg	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_CUBICTO	TokenNameIdentifier
;	TokenNameSEMICOLON
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
x1	TokenNameIdentifier
;	TokenNameSEMICOLON
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
y1	TokenNameIdentifier
;	TokenNameSEMICOLON
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
x2	TokenNameIdentifier
;	TokenNameSEMICOLON
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
y2	TokenNameIdentifier
;	TokenNameSEMICOLON
cx	TokenNameIdentifier
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
x3	TokenNameIdentifier
;	TokenNameSEMICOLON
cy	TokenNameIdentifier
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
y3	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
void	TokenNamevoid
closePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
numSeg	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
types	TokenNameIdentifier
[	TokenNameLBRACKET
numSeg	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_CLOSE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
numSeg	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
types	TokenNameIdentifier
[	TokenNameLBRACKET
numSeg	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_MOVETO	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
path	TokenNameIdentifier
.	TokenNameDOT
closePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
makeRoom	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
types	TokenNameIdentifier
[	TokenNameLBRACKET
numSeg	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_CLOSE	TokenNameIdentifier
;	TokenNameSEMICOLON
cx	TokenNameIdentifier
=	TokenNameEQUAL
mx	TokenNameIdentifier
;	TokenNameSEMICOLON
cy	TokenNameIdentifier
=	TokenNameEQUAL
my	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
checkMoveTo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
numSeg	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
types	TokenNameIdentifier
[	TokenNameLBRACKET
numSeg	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_MOVETO	TokenNameIdentifier
:	TokenNameCOLON
path	TokenNameIdentifier
.	TokenNameDOT
moveTo	TokenNameIdentifier
(	TokenNameLPAREN
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_CLOSE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
numSeg	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
types	TokenNameIdentifier
[	TokenNameLBRACKET
numSeg	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_MOVETO	TokenNameIdentifier
)	TokenNameRPAREN
path	TokenNameIdentifier
.	TokenNameDOT
moveTo	TokenNameIdentifier
(	TokenNameLPAREN
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
values	TokenNameIdentifier
[	TokenNameLBRACKET
numVals	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
append	TokenNameIdentifier
(	TokenNameLPAREN
Shape	TokenNameIdentifier
s	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
connect	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
append	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
getPathIterator	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
AffineTransform	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
connect	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
append	TokenNameIdentifier
(	TokenNameLPAREN
PathIterator	TokenNameIdentifier
pi	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
connect	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
vals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
!	TokenNameNOT
pi	TokenNameIdentifier
.	TokenNameDOT
isDone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Arrays	TokenNameIdentifier
.	TokenNameDOT
fill	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
pi	TokenNameIdentifier
.	TokenNameDOT
currentSegment	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pi	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
connect	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
numVals	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_MOVETO	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
x	TokenNameIdentifier
=	TokenNameEQUAL
vals	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
double	TokenNamedouble
y	TokenNameIdentifier
=	TokenNameEQUAL
vals	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
x	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
cx	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
y	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
cy	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_LINETO	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
pi	TokenNameIdentifier
.	TokenNameDOT
isDone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
pi	TokenNameIdentifier
.	TokenNameDOT
currentSegment	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pi	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
connect	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_CLOSE	TokenNameIdentifier
:	TokenNameCOLON
closePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_MOVETO	TokenNameIdentifier
:	TokenNameCOLON
moveTo	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_LINETO	TokenNameIdentifier
:	TokenNameCOLON
lineTo	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_QUADTO	TokenNameIdentifier
:	TokenNameCOLON
quadTo	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_CUBICTO	TokenNameIdentifier
:	TokenNameCOLON
curveTo	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
append	TokenNameIdentifier
(	TokenNameLPAREN
ExtendedPathIterator	TokenNameIdentifier
epi	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
connect	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
vals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
float	TokenNamefloat
[	TokenNameLBRACKET
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
!	TokenNameNOT
epi	TokenNameIdentifier
.	TokenNameDOT
isDone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Arrays	TokenNameIdentifier
.	TokenNameDOT
fill	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
epi	TokenNameIdentifier
.	TokenNameDOT
currentSegment	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
epi	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
connect	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
numVals	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_MOVETO	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
vals	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
vals	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
x	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
cx	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
y	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
cy	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_LINETO	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
epi	TokenNameIdentifier
.	TokenNameDOT
isDone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
epi	TokenNameIdentifier
.	TokenNameDOT
currentSegment	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
epi	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
connect	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_CLOSE	TokenNameIdentifier
:	TokenNameCOLON
closePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_MOVETO	TokenNameIdentifier
:	TokenNameCOLON
moveTo	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_LINETO	TokenNameIdentifier
:	TokenNameCOLON
lineTo	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_QUADTO	TokenNameIdentifier
:	TokenNameCOLON
quadTo	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_CUBICTO	TokenNameIdentifier
:	TokenNameCOLON
curveTo	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ExtendedPathIterator	TokenNameIdentifier
.	TokenNameDOT
SEG_ARCTO	TokenNameIdentifier
:	TokenNameCOLON
arcTo	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
int	TokenNameint
getWindingRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
getWindingRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setWindingRule	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
rule	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
path	TokenNameIdentifier
.	TokenNameDOT
setWindingRule	TokenNameIdentifier
(	TokenNameLPAREN
rule	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
Point2D	TokenNameIdentifier
getCurrentPoint	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
numVals	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Point2D	TokenNameIdentifier
.	TokenNameDOT
Double	TokenNameIdentifier
(	TokenNameLPAREN
cx	TokenNameIdentifier
,	TokenNameCOMMA
cy	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
path	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
numSeg	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
numVals	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
values	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
types	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
transform	TokenNameIdentifier
(	TokenNameLPAREN
AffineTransform	TokenNameIdentifier
at	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
at	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
AffineTransform	TokenNameIdentifier
.	TokenNameDOT
TYPE_IDENTITY	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"ExtendedGeneralPaths can not be transformed"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
Shape	TokenNameIdentifier
createTransformedShape	TokenNameIdentifier
(	TokenNameLPAREN
AffineTransform	TokenNameIdentifier
at	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
createTransformedShape	TokenNameIdentifier
(	TokenNameLPAREN
at	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
Rectangle	TokenNameIdentifier
getBounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
getBounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
Rectangle2D	TokenNameIdentifier
getBounds2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
getBounds2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
contains	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
x	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
y	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
contains	TokenNameIdentifier
(	TokenNameLPAREN
Point2D	TokenNameIdentifier
p	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
contains	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
x	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
y	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
w	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
h	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
,	TokenNameCOMMA
w	TokenNameIdentifier
,	TokenNameCOMMA
h	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
contains	TokenNameIdentifier
(	TokenNameLPAREN
Rectangle2D	TokenNameIdentifier
r	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
intersects	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
x	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
y	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
w	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
h	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
intersects	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
,	TokenNameCOMMA
w	TokenNameIdentifier
,	TokenNameCOMMA
h	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
intersects	TokenNameIdentifier
(	TokenNameLPAREN
Rectangle2D	TokenNameIdentifier
r	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
intersects	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
PathIterator	TokenNameIdentifier
getPathIterator	TokenNameIdentifier
(	TokenNameLPAREN
AffineTransform	TokenNameIdentifier
at	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
getPathIterator	TokenNameIdentifier
(	TokenNameLPAREN
at	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
PathIterator	TokenNameIdentifier
getPathIterator	TokenNameIdentifier
(	TokenNameLPAREN
AffineTransform	TokenNameIdentifier
at	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
flatness	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
getPathIterator	TokenNameIdentifier
(	TokenNameLPAREN
at	TokenNameIdentifier
,	TokenNameCOMMA
flatness	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ExtendedPathIterator	TokenNameIdentifier
getExtendedPathIterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
EPI	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
class	TokenNameclass
EPI	TokenNameIdentifier
implements	TokenNameimplements
ExtendedPathIterator	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
segNum	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
valsIdx	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
int	TokenNameint
currentSegment	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
types	TokenNameIdentifier
[	TokenNameLBRACKET
segNum	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
currentSegment	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
coords	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
ret	TokenNameIdentifier
=	TokenNameEQUAL
types	TokenNameIdentifier
[	TokenNameLBRACKET
segNum	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
ret	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
SEG_CLOSE	TokenNameIdentifier
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SEG_MOVETO	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
SEG_LINETO	TokenNameIdentifier
:	TokenNameCOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SEG_QUADTO	TokenNameIdentifier
:	TokenNameCOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SEG_CUBICTO	TokenNameIdentifier
:	TokenNameCOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SEG_ARCTO	TokenNameIdentifier
:	TokenNameCOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
currentSegment	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
coords	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
ret	TokenNameIdentifier
=	TokenNameEQUAL
types	TokenNameIdentifier
[	TokenNameLBRACKET
segNum	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
ret	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
SEG_CLOSE	TokenNameIdentifier
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SEG_MOVETO	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
SEG_LINETO	TokenNameIdentifier
:	TokenNameCOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
coords	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
valsIdx	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SEG_QUADTO	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
values	TokenNameIdentifier
,	TokenNameCOMMA
valsIdx	TokenNameIdentifier
,	TokenNameCOMMA
coords	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SEG_CUBICTO	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
values	TokenNameIdentifier
,	TokenNameCOMMA
valsIdx	TokenNameIdentifier
,	TokenNameCOMMA
coords	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SEG_ARCTO	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
values	TokenNameIdentifier
,	TokenNameCOMMA
valsIdx	TokenNameIdentifier
,	TokenNameCOMMA
coords	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getWindingRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
path	TokenNameIdentifier
.	TokenNameDOT
getWindingRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isDone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
segNum	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
numSeg	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
types	TokenNameIdentifier
[	TokenNameLBRACKET
segNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
SEG_CLOSE	TokenNameIdentifier
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SEG_MOVETO	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
SEG_LINETO	TokenNameIdentifier
:	TokenNameCOLON
valsIdx	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SEG_QUADTO	TokenNameIdentifier
:	TokenNameCOLON
valsIdx	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SEG_CUBICTO	TokenNameIdentifier
:	TokenNameCOLON
valsIdx	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SEG_ARCTO	TokenNameIdentifier
:	TokenNameCOLON
valsIdx	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
ExtendedGeneralPath	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ExtendedGeneralPath	TokenNameIdentifier
)	TokenNameRPAREN
super	TokenNamesuper
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
path	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
GeneralPath	TokenNameIdentifier
)	TokenNameRPAREN
path	TokenNameIdentifier
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
values	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
float	TokenNamefloat
[	TokenNameLBRACKET
values	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
values	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
values	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
result	TokenNameIdentifier
.	TokenNameDOT
numVals	TokenNameIdentifier
=	TokenNameEQUAL
numVals	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
types	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
types	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
types	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
types	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
types	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
types	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
result	TokenNameIdentifier
.	TokenNameDOT
numSeg	TokenNameIdentifier
=	TokenNameEQUAL
numSeg	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
CloneNotSupportedException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
makeRoom	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
numValues	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
values	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
values	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
float	TokenNamefloat
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
numValues	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
types	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
numVals	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
numSeg	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
newSize	TokenNameIdentifier
=	TokenNameEQUAL
numVals	TokenNameIdentifier
+	TokenNamePLUS
numValues	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
newSize	TokenNameIdentifier
>	TokenNameGREATER
values	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nlen	TokenNameIdentifier
=	TokenNameEQUAL
values	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nlen	TokenNameIdentifier
<	TokenNameLESS
newSize	TokenNameIdentifier
)	TokenNameRPAREN
nlen	TokenNameIdentifier
=	TokenNameEQUAL
newSize	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
nvals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
float	TokenNamefloat
[	TokenNameLBRACKET
nlen	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
values	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
nvals	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numVals	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
values	TokenNameIdentifier
=	TokenNameEQUAL
nvals	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
numSeg	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
types	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ntypes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
types	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
types	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
ntypes	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
types	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
types	TokenNameIdentifier
=	TokenNameEQUAL
ntypes	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
