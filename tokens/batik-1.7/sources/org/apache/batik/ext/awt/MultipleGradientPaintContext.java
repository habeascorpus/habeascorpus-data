package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Color	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
PaintContext	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Rectangle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
RenderingHints	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
color	TokenNameIdentifier
.	TokenNameDOT
ColorSpace	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
AffineTransform	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
NoninvertibleTransformException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Rectangle2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
ColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBuffer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DataBufferInt	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
DirectColorModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
Raster	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
SinglePixelPackedSampleModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
WritableRaster	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
ref	TokenNameIdentifier
.	TokenNameDOT
WeakReference	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
image	TokenNameIdentifier
.	TokenNameDOT
GraphicsUtil	TokenNameIdentifier
;	TokenNameSEMICOLON
abstract	TokenNameabstract
class	TokenNameclass
MultipleGradientPaintContext	TokenNameIdentifier
implements	TokenNameimplements
PaintContext	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
DEBUG	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
protected	TokenNameprotected
ColorModel	TokenNameIdentifier
dataModel	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
ColorModel	TokenNameIdentifier
model	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
ColorModel	TokenNameIdentifier
lrgbmodel_NA	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DirectColorModel	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_LINEAR_RGB	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xff0000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFF00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
ColorModel	TokenNameIdentifier
srgbmodel_NA	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DirectColorModel	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_sRGB	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xff0000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFF00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
ColorModel	TokenNameIdentifier
lrgbmodel_A	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DirectColorModel	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_LINEAR_RGB	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xff0000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFF00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFF000000	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
ColorModel	TokenNameIdentifier
srgbmodel_A	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DirectColorModel	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_sRGB	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xff0000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFF00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFF000000	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
DataBuffer	TokenNameIdentifier
.	TokenNameDOT
TYPE_INT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
ColorModel	TokenNameIdentifier
cachedModel	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
WeakReference	TokenNameIdentifier
cached	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
WritableRaster	TokenNameIdentifier
saved	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
MultipleGradientPaint	TokenNameIdentifier
.	TokenNameDOT
CycleMethodEnum	TokenNameIdentifier
cycleMethod	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
MultipleGradientPaint	TokenNameIdentifier
.	TokenNameDOT
ColorSpaceEnum	TokenNameIdentifier
colorSpace	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
float	TokenNamefloat
a00	TokenNameIdentifier
,	TokenNameCOMMA
a01	TokenNameIdentifier
,	TokenNameCOMMA
a10	TokenNameIdentifier
,	TokenNameCOMMA
a11	TokenNameIdentifier
,	TokenNameCOMMA
a02	TokenNameIdentifier
,	TokenNameCOMMA
a12	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
boolean	TokenNameboolean
isSimpleLookup	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
protected	TokenNameprotected
boolean	TokenNameboolean
hasDiscontinuity	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
fastGradientArraySize	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
gradient	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
gradients	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
gradientAverage	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
gradientUnderflow	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
gradientOverflow	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
gradientsLength	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
normalizedIntervals	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fractions	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
transparencyTest	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
SRGBtoLinearRGB	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
256	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
LinearRGBtoSRGB	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
256	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
<	TokenNameLESS
256	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
SRGBtoLinearRGB	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
convertSRGBtoLinearRGB	TokenNameIdentifier
(	TokenNameLPAREN
k	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LinearRGBtoSRGB	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
convertLinearRGBtoSRGB	TokenNameIdentifier
(	TokenNameLPAREN
k	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
GRADIENT_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
256	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
GRADIENT_SIZE_INDEX	TokenNameIdentifier
=	TokenNameEQUAL
GRADIENT_SIZE	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MAX_GRADIENT_ARRAY_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
5000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
MultipleGradientPaintContext	TokenNameIdentifier
(	TokenNameLPAREN
ColorModel	TokenNameIdentifier
cm	TokenNameIdentifier
,	TokenNameCOMMA
Rectangle	TokenNameIdentifier
deviceBounds	TokenNameIdentifier
,	TokenNameCOMMA
Rectangle2D	TokenNameIdentifier
userBounds	TokenNameIdentifier
,	TokenNameCOMMA
AffineTransform	TokenNameIdentifier
t	TokenNameIdentifier
,	TokenNameCOMMA
RenderingHints	TokenNameIdentifier
hints	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fractions	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
colors	TokenNameIdentifier
,	TokenNameCOMMA
MultipleGradientPaint	TokenNameIdentifier
.	TokenNameDOT
CycleMethodEnum	TokenNameIdentifier
cycleMethod	TokenNameIdentifier
,	TokenNameCOMMA
MultipleGradientPaint	TokenNameIdentifier
.	TokenNameDOT
ColorSpaceEnum	TokenNameIdentifier
colorSpace	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
NoninvertibleTransformException	TokenNameIdentifier
{	TokenNameLBRACE
boolean	TokenNameboolean
fixFirst	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
boolean	TokenNameboolean
fixLast	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
fractions	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
0f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fixFirst	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
len	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
fractions	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
1.0f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fixLast	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
len	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fractions	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
if	TokenNameif
(	TokenNameLPAREN
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
len	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
fractions	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
float	TokenNamefloat
[	TokenNameLBRACKET
len	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
Color	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
loColors	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Color	TokenNameIdentifier
[	TokenNameLBRACKET
len	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
Color	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
hiColors	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Color	TokenNameIdentifier
[	TokenNameLBRACKET
len	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
normalizedIntervals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
float	TokenNamefloat
[	TokenNameLBRACKET
len	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
gradientUnderflow	TokenNameIdentifier
=	TokenNameEQUAL
colors	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
getRGB	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
gradientOverflow	TokenNameIdentifier
=	TokenNameEQUAL
colors	TokenNameIdentifier
[	TokenNameLBRACKET
colors	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
getRGB	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
idx	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fixFirst	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
loColors	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
colors	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
hiColors	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
colors	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
idx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fractions	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
colors	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
colors	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
hasDiscontinuity	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
idx	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
loColors	TokenNameIdentifier
[	TokenNameLBRACKET
idx	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
colors	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
hiColors	TokenNameIdentifier
[	TokenNameLBRACKET
idx	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
colors	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
idx	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-	TokenNameMINUS
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
idx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
idx	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
fractions	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fixLast	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
loColors	TokenNameIdentifier
[	TokenNameLBRACKET
idx	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
hiColors	TokenNameIdentifier
[	TokenNameLBRACKET
idx	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
colors	TokenNameIdentifier
[	TokenNameLBRACKET
colors	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
idx	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
-	TokenNameMINUS
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
fractions	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
idx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
idx	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
AffineTransform	TokenNameIdentifier
tInv	TokenNameIdentifier
=	TokenNameEQUAL
t	TokenNameIdentifier
.	TokenNameDOT
createInverse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
m	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
tInv	TokenNameIdentifier
.	TokenNameDOT
getMatrix	TokenNameIdentifier
(	TokenNameLPAREN
m	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
a00	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
m	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a10	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
m	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a01	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
m	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a11	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
m	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a02	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
m	TokenNameIdentifier
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
a12	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
m	TokenNameIdentifier
[	TokenNameLBRACKET
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
cycleMethod	TokenNameIdentifier
=	TokenNameEQUAL
cycleMethod	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
colorSpace	TokenNameIdentifier
=	TokenNameEQUAL
colorSpace	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cm	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
lrgbmodel_A	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
dataModel	TokenNameIdentifier
=	TokenNameEQUAL
lrgbmodel_A	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
cm	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
srgbmodel_A	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
dataModel	TokenNameIdentifier
=	TokenNameEQUAL
srgbmodel_A	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Unsupported ColorSpace for interpolation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calculateGradientFractions	TokenNameIdentifier
(	TokenNameLPAREN
loColors	TokenNameIdentifier
,	TokenNameCOMMA
hiColors	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
=	TokenNameEQUAL
GraphicsUtil	TokenNameIdentifier
.	TokenNameDOT
coerceColorModel	TokenNameIdentifier
(	TokenNameLPAREN
dataModel	TokenNameIdentifier
,	TokenNameCOMMA
cm	TokenNameIdentifier
.	TokenNameDOT
isAlphaPremultiplied	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
void	TokenNamevoid
calculateGradientFractions	TokenNameIdentifier
(	TokenNameLPAREN
Color	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
loColors	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
hiColors	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
colorSpace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LinearGradientPaint	TokenNameIdentifier
.	TokenNameDOT
LINEAR_RGB	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
workTbl	TokenNameIdentifier
=	TokenNameEQUAL
SRGBtoLinearRGB	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
loColors	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
loColors	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
interpolateColor	TokenNameIdentifier
(	TokenNameLPAREN
workTbl	TokenNameIdentifier
,	TokenNameCOMMA
loColors	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hiColors	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
interpolateColor	TokenNameIdentifier
(	TokenNameLPAREN
workTbl	TokenNameIdentifier
,	TokenNameCOMMA
hiColors	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
transparencyTest	TokenNameIdentifier
=	TokenNameEQUAL
0xff000000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cycleMethod	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
MultipleGradientPaint	TokenNameIdentifier
.	TokenNameDOT
NO_CYCLE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
transparencyTest	TokenNameIdentifier
&=	TokenNameAND_EQUAL
gradientUnderflow	TokenNameIdentifier
;	TokenNameSEMICOLON
transparencyTest	TokenNameIdentifier
&=	TokenNameAND_EQUAL
gradientOverflow	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
gradients	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
fractions	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
gradientsLength	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
normalizedIntervals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
Imin	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
workTbl	TokenNameIdentifier
=	TokenNameEQUAL
normalizedIntervals	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
n	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
Imin	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Imin	TokenNameIdentifier
>	TokenNameGREATER
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
?	TokenNameQUESTION
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
Imin	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
estimatedSize	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
Imin	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
estimatedSize	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
hasDiscontinuity	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
workTbl	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
estimatedSize	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
/	TokenNameDIVIDE
Imin	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
GRADIENT_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
estimatedSize	TokenNameIdentifier
>	TokenNameGREATER
MAX_GRADIENT_ARRAY_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
calculateMultipleArrayGradient	TokenNameIdentifier
(	TokenNameLPAREN
loColors	TokenNameIdentifier
,	TokenNameCOMMA
hiColors	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
cycleMethod	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
MultipleGradientPaint	TokenNameIdentifier
.	TokenNameDOT
REPEAT	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
gradients	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
GRADIENT_SIZE_INDEX	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
hasDiscontinuity	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
calculateSingleArrayGradient	TokenNameIdentifier
(	TokenNameLPAREN
loColors	TokenNameIdentifier
,	TokenNameCOMMA
hiColors	TokenNameIdentifier
,	TokenNameCOMMA
Imin	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
cycleMethod	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
MultipleGradientPaint	TokenNameIdentifier
.	TokenNameDOT
REPEAT	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
fastGradientArraySize	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
hasDiscontinuity	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
transparencyTest	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dataModel	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
lrgbmodel_NA	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
dataModel	TokenNameIdentifier
=	TokenNameEQUAL
lrgbmodel_NA	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dataModel	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
srgbmodel_NA	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
dataModel	TokenNameIdentifier
=	TokenNameEQUAL
srgbmodel_NA	TokenNameIdentifier
;	TokenNameSEMICOLON
model	TokenNameIdentifier
=	TokenNameEQUAL
dataModel	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
Color	TokenNameIdentifier
interpolateColor	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
workTbl	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
inColor	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
oldColor	TokenNameIdentifier
=	TokenNameEQUAL
inColor	TokenNameIdentifier
.	TokenNameDOT
getRGB	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
newColorValue	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
oldColor	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
oldColor	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
oldColor	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
oldColor	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Color	TokenNameIdentifier
(	TokenNameLPAREN
newColorValue	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
calculateSingleArrayGradient	TokenNameIdentifier
(	TokenNameLPAREN
Color	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
loColors	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
hiColors	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
Imin	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
isSimpleLookup	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
int	TokenNameint
gradientsTot	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
aveA	TokenNameIdentifier
=	TokenNameEQUAL
0x008000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
aveR	TokenNameIdentifier
=	TokenNameEQUAL
0x008000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
aveG	TokenNameIdentifier
=	TokenNameEQUAL
0x008000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
aveB	TokenNameIdentifier
=	TokenNameEQUAL
0x008000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
gradients	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nGradients	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
/	TokenNameDIVIDE
Imin	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
255f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
gradientsTot	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
nGradients	TokenNameIdentifier
;	TokenNameSEMICOLON
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
nGradients	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
rgb1	TokenNameIdentifier
=	TokenNameEQUAL
loColors	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
getRGB	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
rgb2	TokenNameIdentifier
=	TokenNameEQUAL
hiColors	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
getRGB	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
interpolate	TokenNameIdentifier
(	TokenNameLPAREN
rgb1	TokenNameIdentifier
,	TokenNameCOMMA
rgb2	TokenNameIdentifier
,	TokenNameCOMMA
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
argb	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
GRADIENT_SIZE	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
float	TokenNamefloat
norm	TokenNameIdentifier
=	TokenNameEQUAL
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
aveA	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
argb	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
aveR	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
argb	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
aveG	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
argb	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
aveB	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
argb	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
transparencyTest	TokenNameIdentifier
&=	TokenNameAND_EQUAL
rgb1	TokenNameIdentifier
&	TokenNameAND
rgb2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
gradientAverage	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
aveA	TokenNameIdentifier
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
aveR	TokenNameIdentifier
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
aveG	TokenNameIdentifier
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
aveB	TokenNameIdentifier
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
gradient	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
gradientsTot	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
curOffset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
gradients	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
gradient	TokenNameIdentifier
,	TokenNameCOMMA
curOffset	TokenNameIdentifier
,	TokenNameCOMMA
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
curOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
gradient	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
hiColors	TokenNameIdentifier
[	TokenNameLBRACKET
hiColors	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
getRGB	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
colorSpace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LinearGradientPaint	TokenNameIdentifier
.	TokenNameDOT
LINEAR_RGB	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dataModel	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_sRGB	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
gradient	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
convertEntireColorLinearRGBtoSRGB	TokenNameIdentifier
(	TokenNameLPAREN
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
gradientAverage	TokenNameIdentifier
=	TokenNameEQUAL
convertEntireColorLinearRGBtoSRGB	TokenNameIdentifier
(	TokenNameLPAREN
gradientAverage	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dataModel	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_LINEAR_RGB	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
gradient	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
convertEntireColorSRGBtoLinearRGB	TokenNameIdentifier
(	TokenNameLPAREN
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
gradientAverage	TokenNameIdentifier
=	TokenNameEQUAL
convertEntireColorSRGBtoLinearRGB	TokenNameIdentifier
(	TokenNameLPAREN
gradientAverage	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
fastGradientArraySize	TokenNameIdentifier
=	TokenNameEQUAL
gradient	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
calculateMultipleArrayGradient	TokenNameIdentifier
(	TokenNameLPAREN
Color	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
loColors	TokenNameIdentifier
,	TokenNameCOMMA
Color	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
hiColors	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
isSimpleLookup	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
rgb1	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
rgb2	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
aveA	TokenNameIdentifier
=	TokenNameEQUAL
0x008000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
aveR	TokenNameIdentifier
=	TokenNameEQUAL
0x008000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
aveG	TokenNameIdentifier
=	TokenNameEQUAL
0x008000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
aveB	TokenNameIdentifier
=	TokenNameEQUAL
0x008000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
gradients	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
continue	TokenNamecontinue
;	TokenNameSEMICOLON
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
GRADIENT_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
rgb1	TokenNameIdentifier
=	TokenNameEQUAL
loColors	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
getRGB	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
rgb2	TokenNameIdentifier
=	TokenNameEQUAL
hiColors	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
getRGB	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
interpolate	TokenNameIdentifier
(	TokenNameLPAREN
rgb1	TokenNameIdentifier
,	TokenNameCOMMA
rgb2	TokenNameIdentifier
,	TokenNameCOMMA
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
argb	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
GRADIENT_SIZE	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
float	TokenNamefloat
norm	TokenNameIdentifier
=	TokenNameEQUAL
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
aveA	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
argb	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
aveR	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
argb	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
aveG	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
argb	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
aveB	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
argb	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
transparencyTest	TokenNameIdentifier
&=	TokenNameAND_EQUAL
rgb1	TokenNameIdentifier
;	TokenNameSEMICOLON
transparencyTest	TokenNameIdentifier
&=	TokenNameAND_EQUAL
rgb2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
gradientAverage	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
aveA	TokenNameIdentifier
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
aveR	TokenNameIdentifier
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
aveG	TokenNameIdentifier
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
aveB	TokenNameIdentifier
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
colorSpace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LinearGradientPaint	TokenNameIdentifier
.	TokenNameDOT
LINEAR_RGB	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dataModel	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_sRGB	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
gradients	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
convertEntireColorLinearRGBtoSRGB	TokenNameIdentifier
(	TokenNameLPAREN
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
gradientAverage	TokenNameIdentifier
=	TokenNameEQUAL
convertEntireColorLinearRGBtoSRGB	TokenNameIdentifier
(	TokenNameLPAREN
gradientAverage	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dataModel	TokenNameIdentifier
.	TokenNameDOT
getColorSpace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
ColorSpace	TokenNameIdentifier
.	TokenNameDOT
CS_LINEAR_RGB	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
gradients	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
convertEntireColorSRGBtoLinearRGB	TokenNameIdentifier
(	TokenNameLPAREN
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
gradientAverage	TokenNameIdentifier
=	TokenNameEQUAL
convertEntireColorSRGBtoLinearRGB	TokenNameIdentifier
(	TokenNameLPAREN
gradientAverage	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
interpolate	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
rgb1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
rgb2	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
output	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nSteps	TokenNameIdentifier
=	TokenNameEQUAL
output	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
stepSize	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
/	TokenNameDIVIDE
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
nSteps	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
a1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rgb1	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
r1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rgb1	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
g1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rgb1	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
b1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rgb1	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
da	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb2	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
dr	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb2	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
dg	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb2	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
g1	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
db	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rgb2	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
tempA	TokenNameIdentifier
=	TokenNameEQUAL
2.0f	TokenNameFloatingPointLiteral
*	TokenNameMULTIPLY
da	TokenNameIdentifier
*	TokenNameMULTIPLY
stepSize	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
tempR	TokenNameIdentifier
=	TokenNameEQUAL
2.0f	TokenNameFloatingPointLiteral
*	TokenNameMULTIPLY
dr	TokenNameIdentifier
*	TokenNameMULTIPLY
stepSize	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
tempG	TokenNameIdentifier
=	TokenNameEQUAL
2.0f	TokenNameFloatingPointLiteral
*	TokenNameMULTIPLY
dg	TokenNameIdentifier
*	TokenNameMULTIPLY
stepSize	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
tempB	TokenNameIdentifier
=	TokenNameEQUAL
2.0f	TokenNameFloatingPointLiteral
*	TokenNameMULTIPLY
db	TokenNameIdentifier
*	TokenNameMULTIPLY
stepSize	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
rgb1	TokenNameIdentifier
;	TokenNameSEMICOLON
nSteps	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
nSteps	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
rgb2	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nSteps	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
float	TokenNamefloat
fI	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
a1	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fI	TokenNameIdentifier
*	TokenNameMULTIPLY
tempA	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
r1	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fI	TokenNameIdentifier
*	TokenNameMULTIPLY
tempR	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
g1	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fI	TokenNameIdentifier
*	TokenNameMULTIPLY
tempG	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
b1	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
fI	TokenNameIdentifier
*	TokenNameMULTIPLY
tempB	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
convertEntireColorLinearRGBtoSRGB	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
rgb	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
a1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rgb	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
r1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rgb	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
g1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rgb	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
b1	TokenNameIdentifier
=	TokenNameEQUAL
rgb	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
workTbl	TokenNameIdentifier
=	TokenNameEQUAL
LinearRGBtoSRGB	TokenNameIdentifier
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
r1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
g1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
a1	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
r1	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
g1	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
b1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
convertEntireColorSRGBtoLinearRGB	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
rgb	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
a1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rgb	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
r1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rgb	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
g1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rgb	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
b1	TokenNameIdentifier
=	TokenNameEQUAL
rgb	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
workTbl	TokenNameIdentifier
=	TokenNameEQUAL
SRGBtoLinearRGB	TokenNameIdentifier
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
=	TokenNameEQUAL
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
r1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
g1	TokenNameIdentifier
=	TokenNameEQUAL
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
g1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
workTbl	TokenNameIdentifier
[	TokenNameLBRACKET
b1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
a1	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
r1	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
g1	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
b1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
int	TokenNameint
indexIntoGradientsArrays	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
position	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cycleMethod	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
MultipleGradientPaint	TokenNameIdentifier
.	TokenNameDOT
NO_CYCLE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
position	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
gradientOverflow	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
position	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
gradientUnderflow	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
cycleMethod	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
MultipleGradientPaint	TokenNameIdentifier
.	TokenNameDOT
REPEAT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
position	TokenNameIdentifier
=	TokenNameEQUAL
position	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
position	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
position	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
position	TokenNameIdentifier
=	TokenNameEQUAL
position	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
w	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
c1	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
c2	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isSimpleLookup	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
position	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
gradient	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
idx1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
position	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
idx1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
gradient	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
idx1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
w	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
position	TokenNameIdentifier
-	TokenNameMINUS
idx1	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
c1	TokenNameIdentifier
=	TokenNameEQUAL
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
idx1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
c2	TokenNameIdentifier
=	TokenNameEQUAL
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
gradientsLength	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
position	TokenNameIdentifier
<	TokenNameLESS
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
float	TokenNamefloat
delta	TokenNameIdentifier
=	TokenNameEQUAL
position	TokenNameIdentifier
-	TokenNameMINUS
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
delta	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
delta	TokenNameIdentifier
/	TokenNameDIVIDE
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
*	TokenNameMULTIPLY
GRADIENT_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
delta	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
index	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
gradientsLength	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
w	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
delta	TokenNameIdentifier
-	TokenNameMINUS
index	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
c1	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
c2	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
c1	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
c2	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
(	TokenNameLPAREN
c1	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
w	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
c1	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
c2	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
(	TokenNameLPAREN
c1	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
w	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
c1	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
c2	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
(	TokenNameLPAREN
c1	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
w	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
c1	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
c2	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
(	TokenNameLPAREN
c1	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
w	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
&	TokenNameAND
0xFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
position	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
position	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
position	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
part	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
position	TokenNameIdentifier
;	TokenNameSEMICOLON
position	TokenNameIdentifier
=	TokenNameEQUAL
position	TokenNameIdentifier
-	TokenNameMINUS
part	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
part	TokenNameIdentifier
&	TokenNameAND
0x00000001	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
position	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
-	TokenNameMINUS
position	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isSimpleLookup	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
position	TokenNameIdentifier
*	TokenNameMULTIPLY
fastGradientArraySize	TokenNameIdentifier
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
gradientsLength	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
position	TokenNameIdentifier
<	TokenNameLESS
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
float	TokenNamefloat
delta	TokenNameIdentifier
=	TokenNameEQUAL
position	TokenNameIdentifier
-	TokenNameMINUS
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
delta	TokenNameIdentifier
/	TokenNameDIVIDE
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
*	TokenNameMULTIPLY
(	TokenNameLPAREN
GRADIENT_SIZE_INDEX	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
gradientOverflow	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
int	TokenNameint
indexGradientAntiAlias	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
position	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
sz	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cycleMethod	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
MultipleGradientPaint	TokenNameIdentifier
.	TokenNameDOT
NO_CYCLE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"NO_CYCLE"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
p1	TokenNameIdentifier
=	TokenNameEQUAL
position	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
sz	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
p2	TokenNameIdentifier
=	TokenNameEQUAL
position	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
sz	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p1	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
gradientOverflow	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p2	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
gradientUnderflow	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
interior	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
top_weight	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
bottom_weight	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
frac	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p2	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
top_weight	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
p2	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
sz	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p1	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bottom_weight	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
p1	TokenNameIdentifier
/	TokenNameDIVIDE
sz	TokenNameIdentifier
;	TokenNameSEMICOLON
frac	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
interior	TokenNameIdentifier
=	TokenNameEQUAL
gradientAverage	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
frac	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
-	TokenNameMINUS
p1	TokenNameIdentifier
;	TokenNameSEMICOLON
interior	TokenNameIdentifier
=	TokenNameEQUAL
getAntiAlias	TokenNameIdentifier
(	TokenNameLPAREN
p1	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
-	TokenNameMINUS
p1	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
p1	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bottom_weight	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
p1	TokenNameIdentifier
/	TokenNameDIVIDE
sz	TokenNameIdentifier
;	TokenNameSEMICOLON
frac	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
;	TokenNameSEMICOLON
interior	TokenNameIdentifier
=	TokenNameEQUAL
getAntiAlias	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
p2	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
p2	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
return	TokenNamereturn
getAntiAlias	TokenNameIdentifier
(	TokenNameLPAREN
p1	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
p2	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
sz	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
frac	TokenNameIdentifier
/	TokenNameDIVIDE
sz	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
pA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
interior	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
pR	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
interior	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
pG	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
interior	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
pB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
interior	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
bottom_weight	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
bPix	TokenNameIdentifier
=	TokenNameEQUAL
gradientUnderflow	TokenNameIdentifier
;	TokenNameSEMICOLON
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
bottom_weight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pA	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
bPix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pR	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
bPix	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pG	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
bPix	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pB	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
bPix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
top_weight	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
tPix	TokenNameIdentifier
=	TokenNameEQUAL
gradientOverflow	TokenNameIdentifier
;	TokenNameSEMICOLON
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
top_weight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pA	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
tPix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pR	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
tPix	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pG	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
tPix	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pB	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
tPix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pA	TokenNameIdentifier
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
pR	TokenNameIdentifier
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
pG	TokenNameIdentifier
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
pB	TokenNameIdentifier
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
intSz	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
sz	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
weight	TokenNameIdentifier
=	TokenNameEQUAL
1.0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
intSz	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sz	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
intSz	TokenNameIdentifier
;	TokenNameSEMICOLON
weight	TokenNameIdentifier
=	TokenNameEQUAL
sz	TokenNameIdentifier
/	TokenNameDIVIDE
(	TokenNameLPAREN
intSz	TokenNameIdentifier
+	TokenNamePLUS
sz	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
weight	TokenNameIdentifier
<	TokenNameLESS
0.1	TokenNameDoubleLiteral
)	TokenNameRPAREN
return	TokenNamereturn
gradientAverage	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sz	TokenNameIdentifier
>	TokenNameGREATER
0.99	TokenNameDoubleLiteral
)	TokenNameRPAREN
return	TokenNamereturn
gradientAverage	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
p1	TokenNameIdentifier
=	TokenNameEQUAL
position	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
sz	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
p2	TokenNameIdentifier
=	TokenNameEQUAL
position	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
sz	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"P1: "	TokenNameStringLiteral
+	TokenNamePLUS
p1	TokenNameIdentifier
+	TokenNamePLUS
" P2: "	TokenNameStringLiteral
+	TokenNamePLUS
p2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
p1_up	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
boolean	TokenNameboolean
p2_up	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cycleMethod	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
MultipleGradientPaint	TokenNameIdentifier
.	TokenNameDOT
REPEAT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"REPEAT"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
p1	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
p1	TokenNameIdentifier
;	TokenNameSEMICOLON
p2	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
p2	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p1	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
p1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p2	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
p2	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"REFLECT"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p2	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
p1	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
p1	TokenNameIdentifier
;	TokenNameSEMICOLON
p1_up	TokenNameIdentifier
=	TokenNameEQUAL
!	TokenNameNOT
p1_up	TokenNameIdentifier
;	TokenNameSEMICOLON
p2	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
p2	TokenNameIdentifier
;	TokenNameSEMICOLON
p2_up	TokenNameIdentifier
=	TokenNameEQUAL
!	TokenNameNOT
p2_up	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
p1	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
p1	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
p1	TokenNameIdentifier
;	TokenNameSEMICOLON
p1_up	TokenNameIdentifier
=	TokenNameEQUAL
!	TokenNameNOT
p1_up	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
part1	TokenNameIdentifier
,	TokenNameCOMMA
part2	TokenNameIdentifier
;	TokenNameSEMICOLON
part1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
p1	TokenNameIdentifier
;	TokenNameSEMICOLON
p1	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
-	TokenNameMINUS
part1	TokenNameIdentifier
;	TokenNameSEMICOLON
part2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
p2	TokenNameIdentifier
;	TokenNameSEMICOLON
p2	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
-	TokenNameMINUS
part2	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
part1	TokenNameIdentifier
&	TokenNameAND
0x01	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
p1	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
-	TokenNameMINUS
p1	TokenNameIdentifier
;	TokenNameSEMICOLON
p1_up	TokenNameIdentifier
=	TokenNameEQUAL
!	TokenNameNOT
p1_up	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
part2	TokenNameIdentifier
&	TokenNameAND
0x01	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
p2	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
-	TokenNameMINUS
p2	TokenNameIdentifier
;	TokenNameSEMICOLON
p2_up	TokenNameIdentifier
=	TokenNameEQUAL
!	TokenNameNOT
p2_up	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
p1	TokenNameIdentifier
>	TokenNameGREATER
p2	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
!	TokenNameNOT
p1_up	TokenNameIdentifier
&&	TokenNameAND_AND
p2_up	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
float	TokenNamefloat
t	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
;	TokenNameSEMICOLON
p1	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
;	TokenNameSEMICOLON
p2	TokenNameIdentifier
=	TokenNameEQUAL
t	TokenNameIdentifier
;	TokenNameSEMICOLON
p1_up	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
p2_up	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
getAntiAlias	TokenNameIdentifier
(	TokenNameLPAREN
p1	TokenNameIdentifier
,	TokenNameCOMMA
p1_up	TokenNameIdentifier
,	TokenNameCOMMA
p2	TokenNameIdentifier
,	TokenNameCOMMA
p2_up	TokenNameIdentifier
,	TokenNameCOMMA
sz	TokenNameIdentifier
,	TokenNameCOMMA
weight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
getAntiAlias	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
p1	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
p1_up	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
p2	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
p2_up	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
sz	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
weight	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
ach	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
rch	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
gch	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
bch	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isSimpleLookup	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
p1	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
fastGradientArraySize	TokenNameIdentifier
;	TokenNameSEMICOLON
p2	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
fastGradientArraySize	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
idx1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
p1	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
idx2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
p2	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
,	TokenNameCOMMA
pix	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p1_up	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
p2_up	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
idx1	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
idx2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
idx1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
idx2	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
idx1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
idx1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
idx2	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
iStart	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
iEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p1_up	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
iStart	TokenNameIdentifier
=	TokenNameEQUAL
idx1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
iEnd	TokenNameIdentifier
=	TokenNameEQUAL
fastGradientArraySize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
iStart	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
iEnd	TokenNameIdentifier
=	TokenNameEQUAL
idx1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
iStart	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
iEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
p2_up	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
iStart	TokenNameIdentifier
=	TokenNameEQUAL
idx2	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
iEnd	TokenNameIdentifier
=	TokenNameEQUAL
fastGradientArraySize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
iStart	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
iEnd	TokenNameIdentifier
=	TokenNameEQUAL
idx2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
iStart	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
iEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
norm	TokenNameIdentifier
,	TokenNameCOMMA
isz	TokenNameIdentifier
;	TokenNameSEMICOLON
isz	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
sz	TokenNameIdentifier
*	TokenNameMULTIPLY
fastGradientArraySize	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ach	TokenNameIdentifier
*	TokenNameMULTIPLY
isz	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rch	TokenNameIdentifier
*	TokenNameMULTIPLY
isz	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
gch	TokenNameIdentifier
*	TokenNameMULTIPLY
isz	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bch	TokenNameIdentifier
*	TokenNameMULTIPLY
isz	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p1_up	TokenNameIdentifier
)	TokenNameRPAREN
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
-	TokenNameMINUS
(	TokenNameLPAREN
p1	TokenNameIdentifier
-	TokenNameMINUS
idx1	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
isz	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
p1	TokenNameIdentifier
-	TokenNameMINUS
idx1	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
isz	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
idx1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p2_up	TokenNameIdentifier
)	TokenNameRPAREN
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
-	TokenNameMINUS
(	TokenNameLPAREN
p2	TokenNameIdentifier
-	TokenNameMINUS
idx2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
isz	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
p2	TokenNameIdentifier
-	TokenNameMINUS
idx2	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
isz	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradient	TokenNameIdentifier
[	TokenNameLBRACKET
idx2	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ach	TokenNameIdentifier
+	TokenNamePLUS
0x08	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rch	TokenNameIdentifier
+	TokenNamePLUS
0x08	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
gch	TokenNameIdentifier
+	TokenNamePLUS
0x08	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bch	TokenNameIdentifier
+	TokenNamePLUS
0x08	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
idx1	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
idx2	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
i1	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
i2	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
float	TokenNamefloat
f1	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
f2	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
gradientsLength	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
p1	TokenNameIdentifier
<	TokenNameLESS
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
i1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
i1	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
f1	TokenNameIdentifier
=	TokenNameEQUAL
p1	TokenNameIdentifier
-	TokenNameMINUS
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
f1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
f1	TokenNameIdentifier
/	TokenNameDIVIDE
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
*	TokenNameMULTIPLY
GRADIENT_SIZE_INDEX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
idx1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
f1	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i2	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
p2	TokenNameIdentifier
<	TokenNameLESS
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
i2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
i2	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
f2	TokenNameIdentifier
=	TokenNameEQUAL
p2	TokenNameIdentifier
-	TokenNameMINUS
fractions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
f2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
f2	TokenNameIdentifier
/	TokenNameDIVIDE
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
*	TokenNameMULTIPLY
GRADIENT_SIZE_INDEX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
idx2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
f2	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
i1	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
f1	TokenNameIdentifier
=	TokenNameEQUAL
idx1	TokenNameIdentifier
=	TokenNameEQUAL
GRADIENT_SIZE_INDEX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
i2	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
f2	TokenNameIdentifier
=	TokenNameEQUAL
idx2	TokenNameIdentifier
=	TokenNameEQUAL
GRADIENT_SIZE_INDEX	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"I1: "	TokenNameStringLiteral
+	TokenNamePLUS
i1	TokenNameIdentifier
+	TokenNamePLUS
" Idx1: "	TokenNameStringLiteral
+	TokenNamePLUS
idx1	TokenNameIdentifier
+	TokenNamePLUS
" I2: "	TokenNameStringLiteral
+	TokenNamePLUS
i2	TokenNameIdentifier
+	TokenNamePLUS
" Idx2: "	TokenNameStringLiteral
+	TokenNamePLUS
idx2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
i2	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
idx1	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
idx2	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
p1_up	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
p2_up	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
(	TokenNameLPAREN
idx1	TokenNameIdentifier
+	TokenNamePLUS
idx2	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
pix	TokenNameIdentifier
,	TokenNameCOMMA
norm	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
base	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
sz	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i1	TokenNameIdentifier
<	TokenNameLESS
i2	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
p1_up	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
p2_up	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
base	TokenNameIdentifier
*	TokenNameMULTIPLY
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
(	TokenNameLPAREN
GRADIENT_SIZE_INDEX	TokenNameIdentifier
-	TokenNameMINUS
f1	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
GRADIENT_SIZE_INDEX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
(	TokenNameLPAREN
idx1	TokenNameIdentifier
+	TokenNamePLUS
GRADIENT_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
i1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
i2	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
base	TokenNameIdentifier
*	TokenNameMULTIPLY
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
GRADIENT_SIZE	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
base	TokenNameIdentifier
*	TokenNameMULTIPLY
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
f2	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
GRADIENT_SIZE_INDEX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
(	TokenNameLPAREN
idx2	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
p1_up	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
base	TokenNameIdentifier
*	TokenNameMULTIPLY
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
(	TokenNameLPAREN
GRADIENT_SIZE_INDEX	TokenNameIdentifier
-	TokenNameMINUS
f1	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
GRADIENT_SIZE_INDEX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
(	TokenNameLPAREN
idx1	TokenNameIdentifier
+	TokenNamePLUS
GRADIENT_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
base	TokenNameIdentifier
*	TokenNameMULTIPLY
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
f1	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
GRADIENT_SIZE_INDEX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
(	TokenNameLPAREN
idx1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ach	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p2_up	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
base	TokenNameIdentifier
*	TokenNameMULTIPLY
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
(	TokenNameLPAREN
GRADIENT_SIZE_INDEX	TokenNameIdentifier
-	TokenNameMINUS
f2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
GRADIENT_SIZE_INDEX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
(	TokenNameLPAREN
idx2	TokenNameIdentifier
+	TokenNamePLUS
GRADIENT_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
base	TokenNameIdentifier
*	TokenNameMULTIPLY
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
f2	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
GRADIENT_SIZE_INDEX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
(	TokenNameLPAREN
idx2	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ach	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
iStart	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
iEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p1_up	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
iStart	TokenNameIdentifier
=	TokenNameEQUAL
i1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
iEnd	TokenNameIdentifier
=	TokenNameEQUAL
gradientsLength	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
iStart	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
iEnd	TokenNameIdentifier
=	TokenNameEQUAL
i1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
iStart	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
iEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
base	TokenNameIdentifier
*	TokenNameMULTIPLY
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
GRADIENT_SIZE	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
p2_up	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
iStart	TokenNameIdentifier
=	TokenNameEQUAL
i2	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
iEnd	TokenNameIdentifier
=	TokenNameEQUAL
gradientsLength	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
iStart	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
iEnd	TokenNameIdentifier
=	TokenNameEQUAL
i2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
iStart	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
iEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
norm	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
base	TokenNameIdentifier
*	TokenNameMULTIPLY
normalizedIntervals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pix	TokenNameIdentifier
=	TokenNameEQUAL
gradients	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
GRADIENT_SIZE	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
pix	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF0	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
norm	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
ach	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ach	TokenNameIdentifier
+	TokenNamePLUS
0x08	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rch	TokenNameIdentifier
+	TokenNamePLUS
0x08	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
gch	TokenNameIdentifier
+	TokenNamePLUS
0x08	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bch	TokenNameIdentifier
+	TokenNamePLUS
0x08	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Pix: ["	TokenNameStringLiteral
+	TokenNamePLUS
ach	TokenNameIdentifier
+	TokenNamePLUS
", "	TokenNameStringLiteral
+	TokenNamePLUS
rch	TokenNameIdentifier
+	TokenNamePLUS
", "	TokenNameStringLiteral
+	TokenNamePLUS
gch	TokenNameIdentifier
+	TokenNamePLUS
", "	TokenNameStringLiteral
+	TokenNamePLUS
bch	TokenNameIdentifier
+	TokenNamePLUS
']'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
weight	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
aveW	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
-	TokenNameMINUS
weight	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
aveA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
gradientAverage	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
aveW	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
aveR	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
gradientAverage	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
aveW	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
aveG	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
gradientAverage	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
aveW	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
aveB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
gradientAverage	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
aveW	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
iw	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
weight	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ach	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
ach	TokenNameIdentifier
*	TokenNameMULTIPLY
iw	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
aveA	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
rch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
rch	TokenNameIdentifier
*	TokenNameMULTIPLY
iw	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
aveR	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
gch	TokenNameIdentifier
*	TokenNameMULTIPLY
iw	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
aveG	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
bch	TokenNameIdentifier
*	TokenNameMULTIPLY
iw	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
aveB	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
ach	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
rch	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
gch	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
bch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
convertSRGBtoLinearRGB	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
color	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
float	TokenNamefloat
output	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
input	TokenNameIdentifier
=	TokenNameEQUAL
color	TokenNameIdentifier
/	TokenNameDIVIDE
255.0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0.04045f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
/	TokenNameDIVIDE
12.92f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
output	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
pow	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
input	TokenNameIdentifier
+	TokenNamePLUS
0.055	TokenNameDoubleLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
1.055	TokenNameDoubleLiteral
,	TokenNameCOMMA
2.4	TokenNameDoubleLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
o	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
round	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
*	TokenNameMULTIPLY
255.0f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
o	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
convertLinearRGBtoSRGB	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
color	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
float	TokenNamefloat
output	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
input	TokenNameIdentifier
=	TokenNameEQUAL
color	TokenNameIdentifier
/	TokenNameDIVIDE
255.0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0.0031308f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
*	TokenNameMULTIPLY
12.92f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
output	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
1.055f	TokenNameFloatingPointLiteral
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
pow	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
1.0	TokenNameDoubleLiteral
/	TokenNameDIVIDE
2.4	TokenNameDoubleLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
0.055f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
o	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
round	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
*	TokenNameMULTIPLY
255.0f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
o	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
Raster	TokenNameIdentifier
getRaster	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
x	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
y	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
w	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
h	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
w	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
h	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
WritableRaster	TokenNameIdentifier
raster	TokenNameIdentifier
=	TokenNameEQUAL
saved	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
raster	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
raster	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
w	TokenNameIdentifier
||	TokenNameOR_OR
raster	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
h	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
raster	TokenNameIdentifier
=	TokenNameEQUAL
getCachedRaster	TokenNameIdentifier
(	TokenNameLPAREN
dataModel	TokenNameIdentifier
,	TokenNameCOMMA
w	TokenNameIdentifier
,	TokenNameCOMMA
h	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
saved	TokenNameIdentifier
=	TokenNameEQUAL
raster	TokenNameIdentifier
;	TokenNameSEMICOLON
raster	TokenNameIdentifier
=	TokenNameEQUAL
raster	TokenNameIdentifier
.	TokenNameDOT
createWritableChild	TokenNameIdentifier
(	TokenNameLPAREN
raster	TokenNameIdentifier
.	TokenNameDOT
getMinX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
raster	TokenNameIdentifier
.	TokenNameDOT
getMinY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
w	TokenNameIdentifier
,	TokenNameCOMMA
h	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
DataBufferInt	TokenNameIdentifier
rasterDB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DataBufferInt	TokenNameIdentifier
)	TokenNameRPAREN
raster	TokenNameIdentifier
.	TokenNameDOT
getDataBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
pixels	TokenNameIdentifier
=	TokenNameEQUAL
rasterDB	TokenNameIdentifier
.	TokenNameDOT
getBankData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
off	TokenNameIdentifier
=	TokenNameEQUAL
rasterDB	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
scanlineStride	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
SinglePixelPackedSampleModel	TokenNameIdentifier
)	TokenNameRPAREN
raster	TokenNameIdentifier
.	TokenNameDOT
getSampleModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getScanlineStride	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
adjust	TokenNameIdentifier
=	TokenNameEQUAL
scanlineStride	TokenNameIdentifier
-	TokenNameMINUS
w	TokenNameIdentifier
;	TokenNameSEMICOLON
fillRaster	TokenNameIdentifier
(	TokenNameLPAREN
pixels	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
,	TokenNameCOMMA
adjust	TokenNameIdentifier
,	TokenNameCOMMA
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
,	TokenNameCOMMA
w	TokenNameIdentifier
,	TokenNameCOMMA
h	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
GraphicsUtil	TokenNameIdentifier
.	TokenNameDOT
coerceData	TokenNameIdentifier
(	TokenNameLPAREN
raster	TokenNameIdentifier
,	TokenNameCOMMA
dataModel	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
isAlphaPremultiplied	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
raster	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
abstract	TokenNameabstract
void	TokenNamevoid
fillRaster	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
pixels	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
off	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
adjust	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
x	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
y	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
w	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
h	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
synchronized	TokenNamesynchronized
WritableRaster	TokenNameIdentifier
getCachedRaster	TokenNameIdentifier
(	TokenNameLPAREN
ColorModel	TokenNameIdentifier
cm	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
w	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
h	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cm	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
cachedModel	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cached	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
WritableRaster	TokenNameIdentifier
ras	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
WritableRaster	TokenNameIdentifier
)	TokenNameRPAREN
cached	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ras	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
ras	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
w	TokenNameIdentifier
&&	TokenNameAND_AND
ras	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
h	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
cached	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
ras	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
w	TokenNameIdentifier
<	TokenNameLESS
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
w	TokenNameIdentifier
=	TokenNameEQUAL
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
h	TokenNameIdentifier
<	TokenNameLESS
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
h	TokenNameIdentifier
=	TokenNameEQUAL
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
cm	TokenNameIdentifier
.	TokenNameDOT
createCompatibleWritableRaster	TokenNameIdentifier
(	TokenNameLPAREN
w	TokenNameIdentifier
,	TokenNameCOMMA
h	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
synchronized	TokenNamesynchronized
void	TokenNamevoid
putCachedRaster	TokenNameIdentifier
(	TokenNameLPAREN
ColorModel	TokenNameIdentifier
cm	TokenNameIdentifier
,	TokenNameCOMMA
WritableRaster	TokenNameIdentifier
ras	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cached	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
WritableRaster	TokenNameIdentifier
cras	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
WritableRaster	TokenNameIdentifier
)	TokenNameRPAREN
cached	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cras	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
cw	TokenNameIdentifier
=	TokenNameEQUAL
cras	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ch	TokenNameIdentifier
=	TokenNameEQUAL
cras	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
iw	TokenNameIdentifier
=	TokenNameEQUAL
ras	TokenNameIdentifier
.	TokenNameDOT
getWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ih	TokenNameIdentifier
=	TokenNameEQUAL
ras	TokenNameIdentifier
.	TokenNameDOT
getHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cw	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
iw	TokenNameIdentifier
&&	TokenNameAND_AND
ch	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
ih	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
cw	TokenNameIdentifier
*	TokenNameMULTIPLY
ch	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
iw	TokenNameIdentifier
*	TokenNameMULTIPLY
ih	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
cachedModel	TokenNameIdentifier
=	TokenNameEQUAL
cm	TokenNameIdentifier
;	TokenNameSEMICOLON
cached	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
WeakReference	TokenNameIdentifier
(	TokenNameLPAREN
ras	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
dispose	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
saved	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
putCachedRaster	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
saved	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
saved	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
ColorModel	TokenNameIdentifier
getColorModel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
model	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
