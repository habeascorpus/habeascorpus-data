package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
g2d	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
AffineTransform	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
abstract	TokenNameabstract
class	TokenNameclass
TransformStackElement	TokenNameIdentifier
implements	TokenNameimplements
Cloneable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
TransformType	TokenNameIdentifier
type	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
transformParameters	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
TransformStackElement	TokenNameIdentifier
(	TokenNameLPAREN
TransformType	TokenNameIdentifier
type	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
transformParameters	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
transformParameters	TokenNameIdentifier
=	TokenNameEQUAL
transformParameters	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
TransformStackElement	TokenNameIdentifier
newElement	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
newElement	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
TransformStackElement	TokenNameIdentifier
)	TokenNameRPAREN
super	TokenNamesuper
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
CloneNotSupportedException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
transformParameters	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
this	TokenNamethis
.	TokenNameDOT
transformParameters	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
transformParameters	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
transformParameters	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
transformParameters	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newElement	TokenNameIdentifier
.	TokenNameDOT
transformParameters	TokenNameIdentifier
=	TokenNameEQUAL
transformParameters	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
newElement	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
TransformStackElement	TokenNameIdentifier
createTranslateElement	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
tx	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
ty	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
TransformStackElement	TokenNameIdentifier
(	TokenNameLPAREN
TransformType	TokenNameIdentifier
.	TokenNameDOT
TRANSLATE	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
tx	TokenNameIdentifier
,	TokenNameCOMMA
ty	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
isIdentity	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
parameters	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
parameters	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
parameters	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
TransformStackElement	TokenNameIdentifier
createRotateElement	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
theta	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
TransformStackElement	TokenNameIdentifier
(	TokenNameLPAREN
TransformType	TokenNameIdentifier
.	TokenNameDOT
ROTATE	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
theta	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
isIdentity	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
parameters	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
Math	TokenNameIdentifier
.	TokenNameDOT
cos	TokenNameIdentifier
(	TokenNameLPAREN
parameters	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
TransformStackElement	TokenNameIdentifier
createScaleElement	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
scaleX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
scaleY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
TransformStackElement	TokenNameIdentifier
(	TokenNameLPAREN
TransformType	TokenNameIdentifier
.	TokenNameDOT
SCALE	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
scaleX	TokenNameIdentifier
,	TokenNameCOMMA
scaleY	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
isIdentity	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
parameters	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
parameters	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
parameters	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
TransformStackElement	TokenNameIdentifier
createShearElement	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
shearX	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
shearY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
TransformStackElement	TokenNameIdentifier
(	TokenNameLPAREN
TransformType	TokenNameIdentifier
.	TokenNameDOT
SHEAR	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
shearX	TokenNameIdentifier
,	TokenNameCOMMA
shearY	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
isIdentity	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
parameters	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
parameters	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
parameters	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
TransformStackElement	TokenNameIdentifier
createGeneralTransformElement	TokenNameIdentifier
(	TokenNameLPAREN
AffineTransform	TokenNameIdentifier
txf	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
matrix	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
txf	TokenNameIdentifier
.	TokenNameDOT
getMatrix	TokenNameIdentifier
(	TokenNameLPAREN
matrix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
TransformStackElement	TokenNameIdentifier
(	TokenNameLPAREN
TransformType	TokenNameIdentifier
.	TokenNameDOT
GENERAL	TokenNameIdentifier
,	TokenNameCOMMA
matrix	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
isIdentity	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
m	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
m	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
m	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
m	TokenNameIdentifier
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
m	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
m	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
m	TokenNameIdentifier
[	TokenNameLBRACKET
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
abstract	TokenNameabstract
boolean	TokenNameboolean
isIdentity	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
parameters	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
boolean	TokenNameboolean
isIdentity	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
isIdentity	TokenNameIdentifier
(	TokenNameLPAREN
transformParameters	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getTransformParameters	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
transformParameters	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
TransformType	TokenNameIdentifier
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
type	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
concatenate	TokenNameIdentifier
(	TokenNameLPAREN
TransformStackElement	TokenNameIdentifier
stackElement	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
canConcatenate	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
toInt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
stackElement	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
.	TokenNameDOT
toInt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
canConcatenate	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
toInt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
TransformType	TokenNameIdentifier
.	TokenNameDOT
TRANSFORM_TRANSLATE	TokenNameIdentifier
:	TokenNameCOLON
transformParameters	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
stackElement	TokenNameIdentifier
.	TokenNameDOT
transformParameters	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
transformParameters	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
stackElement	TokenNameIdentifier
.	TokenNameDOT
transformParameters	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TransformType	TokenNameIdentifier
.	TokenNameDOT
TRANSFORM_ROTATE	TokenNameIdentifier
:	TokenNameCOLON
transformParameters	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
stackElement	TokenNameIdentifier
.	TokenNameDOT
transformParameters	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TransformType	TokenNameIdentifier
.	TokenNameDOT
TRANSFORM_SCALE	TokenNameIdentifier
:	TokenNameCOLON
transformParameters	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
stackElement	TokenNameIdentifier
.	TokenNameDOT
transformParameters	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
transformParameters	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
*=	TokenNameMULTIPLY_EQUAL
stackElement	TokenNameIdentifier
.	TokenNameDOT
transformParameters	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TransformType	TokenNameIdentifier
.	TokenNameDOT
TRANSFORM_GENERAL	TokenNameIdentifier
:	TokenNameCOLON
transformParameters	TokenNameIdentifier
=	TokenNameEQUAL
matrixMultiply	TokenNameIdentifier
(	TokenNameLPAREN
transformParameters	TokenNameIdentifier
,	TokenNameCOMMA
stackElement	TokenNameIdentifier
.	TokenNameDOT
transformParameters	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
canConcatenate	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
canConcatenate	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
matrixMultiply	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
matrix1	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
matrix2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
product	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
AffineTransform	TokenNameIdentifier
transform1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
AffineTransform	TokenNameIdentifier
(	TokenNameLPAREN
matrix1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
transform1	TokenNameIdentifier
.	TokenNameDOT
concatenate	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
AffineTransform	TokenNameIdentifier
(	TokenNameLPAREN
matrix2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
transform1	TokenNameIdentifier
.	TokenNameDOT
getMatrix	TokenNameIdentifier
(	TokenNameLPAREN
product	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
product	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
