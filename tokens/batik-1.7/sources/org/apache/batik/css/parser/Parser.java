package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
InputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Reader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
MissingResourceException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
StringTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
i18n	TokenNameIdentifier
.	TokenNameDOT
Localizable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
i18n	TokenNameIdentifier
.	TokenNameDOT
LocalizableSupport	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
CSSConstants	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ParsedURL	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
CSSException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
CSSParseException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
Condition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
ConditionFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
DocumentHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
ErrorHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
InputSource	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
LexicalUnit	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
SACMediaList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
Selector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
SelectorFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
SelectorList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
sac	TokenNameIdentifier
.	TokenNameDOT
SimpleSelector	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Parser	TokenNameIdentifier
implements	TokenNameimplements
ExtendedParser	TokenNameIdentifier
,	TokenNameCOMMA
Localizable	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
BUNDLE_CLASSNAME	TokenNameIdentifier
=	TokenNameEQUAL
"org.apache.batik.css.parser.resources.Messages"	TokenNameStringLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
LocalizableSupport	TokenNameIdentifier
localizableSupport	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LocalizableSupport	TokenNameIdentifier
(	TokenNameLPAREN
BUNDLE_CLASSNAME	TokenNameIdentifier
,	TokenNameCOMMA
Parser	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
.	TokenNameDOT
getClassLoader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
Scanner	TokenNameIdentifier
scanner	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
current	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
DocumentHandler	TokenNameIdentifier
documentHandler	TokenNameIdentifier
=	TokenNameEQUAL
DefaultDocumentHandler	TokenNameIdentifier
.	TokenNameDOT
INSTANCE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
SelectorFactory	TokenNameIdentifier
selectorFactory	TokenNameIdentifier
=	TokenNameEQUAL
DefaultSelectorFactory	TokenNameIdentifier
.	TokenNameDOT
INSTANCE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
ConditionFactory	TokenNameIdentifier
conditionFactory	TokenNameIdentifier
=	TokenNameEQUAL
DefaultConditionFactory	TokenNameIdentifier
.	TokenNameDOT
INSTANCE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
ErrorHandler	TokenNameIdentifier
errorHandler	TokenNameIdentifier
=	TokenNameEQUAL
DefaultErrorHandler	TokenNameIdentifier
.	TokenNameDOT
INSTANCE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
pseudoElement	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
documentURI	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
String	TokenNameIdentifier
getParserVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"http://www.w3.org/TR/REC-CSS2"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setLocale	TokenNameIdentifier
(	TokenNameLPAREN
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
{	TokenNameLBRACE
localizableSupport	TokenNameIdentifier
.	TokenNameDOT
setLocale	TokenNameIdentifier
(	TokenNameLPAREN
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Locale	TokenNameIdentifier
getLocale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
localizableSupport	TokenNameIdentifier
.	TokenNameDOT
getLocale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
formatMessage	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
args	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MissingResourceException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
localizableSupport	TokenNameIdentifier
.	TokenNameDOT
formatMessage	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
args	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setDocumentHandler	TokenNameIdentifier
(	TokenNameLPAREN
DocumentHandler	TokenNameIdentifier
handler	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
documentHandler	TokenNameIdentifier
=	TokenNameEQUAL
handler	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setSelectorFactory	TokenNameIdentifier
(	TokenNameLPAREN
SelectorFactory	TokenNameIdentifier
factory	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
selectorFactory	TokenNameIdentifier
=	TokenNameEQUAL
factory	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setConditionFactory	TokenNameIdentifier
(	TokenNameLPAREN
ConditionFactory	TokenNameIdentifier
factory	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
conditionFactory	TokenNameIdentifier
=	TokenNameEQUAL
factory	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setErrorHandler	TokenNameIdentifier
(	TokenNameLPAREN
ErrorHandler	TokenNameIdentifier
handler	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
errorHandler	TokenNameIdentifier
=	TokenNameEQUAL
handler	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
parseStyleSheet	TokenNameIdentifier
(	TokenNameLPAREN
InputSource	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
scanner	TokenNameIdentifier
=	TokenNameEQUAL
createScanner	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
startDocument	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
current	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
CHARSET_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
STRING	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"charset.string"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
SEMI_COLON	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"semicolon"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
COMMENT	TokenNameIdentifier
:	TokenNameCOLON
documentHandler	TokenNameIdentifier
.	TokenNameDOT
comment	TokenNameIdentifier
(	TokenNameLPAREN
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
skipSpacesAndCDOCDC	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IMPORT_SYMBOL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseImportRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
loop	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
PAGE_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parsePageRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
MEDIA_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseMediaRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
FONT_FACE_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseFontFaceRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
AT_KEYWORD	TokenNameIdentifier
:	TokenNameCOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseAtRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
EOF	TokenNameIdentifier
:	TokenNameCOLON
break	TokenNamebreak
loop	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
parseRuleSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
skipSpacesAndCDOCDC	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
endDocument	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
scanner	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
parseStyleSheet	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
uri	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
parseStyleSheet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
InputSource	TokenNameIdentifier
(	TokenNameLPAREN
uri	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
parseStyleDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
InputSource	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
scanner	TokenNameIdentifier
=	TokenNameEQUAL
createScanner	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseStyleDeclarationInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseStyleDeclarationInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
parseStyleDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
CSSParseException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
scanner	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
parseRule	TokenNameIdentifier
(	TokenNameLPAREN
InputSource	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
scanner	TokenNameIdentifier
=	TokenNameEQUAL
createScanner	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseRuleInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseRuleInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
scanner	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
SelectorList	TokenNameIdentifier
parseSelectors	TokenNameIdentifier
(	TokenNameLPAREN
InputSource	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
scanner	TokenNameIdentifier
=	TokenNameEQUAL
createScanner	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
parseSelectorsInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
SelectorList	TokenNameIdentifier
parseSelectorsInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SelectorList	TokenNameIdentifier
ret	TokenNameIdentifier
=	TokenNameEQUAL
parseSelectorList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
scanner	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
LexicalUnit	TokenNameIdentifier
parsePropertyValue	TokenNameIdentifier
(	TokenNameLPAREN
InputSource	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
scanner	TokenNameIdentifier
=	TokenNameEQUAL
createScanner	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
parsePropertyValueInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
LexicalUnit	TokenNameIdentifier
parsePropertyValueInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LexicalUnit	TokenNameIdentifier
exp	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
exp	TokenNameIdentifier
=	TokenNameEQUAL
parseExpression	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
CSSParseException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
e	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
CSSParseException	TokenNameIdentifier
exception	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
EOF	TokenNameIdentifier
)	TokenNameRPAREN
exception	TokenNameIdentifier
=	TokenNameEQUAL
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"eof.expected"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
scanner	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
exception	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
errorHandler	TokenNameIdentifier
.	TokenNameDOT
fatalError	TokenNameIdentifier
(	TokenNameLPAREN
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
exp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
parsePriority	TokenNameIdentifier
(	TokenNameLPAREN
InputSource	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
scanner	TokenNameIdentifier
=	TokenNameEQUAL
createScanner	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
parsePriorityInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
parsePriorityInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
scanner	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
EOF	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IMPORT_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"token"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
scanner	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IMPORT_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseImportRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
AT_KEYWORD	TokenNameIdentifier
:	TokenNameCOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseAtRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
FONT_FACE_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseFontFaceRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
MEDIA_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseMediaRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
PAGE_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parsePageRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
parseRuleSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseAtRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
scanner	TokenNameIdentifier
.	TokenNameDOT
scanAtRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
documentHandler	TokenNameIdentifier
.	TokenNameDOT
ignorableAtRule	TokenNameIdentifier
(	TokenNameLPAREN
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseImportRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
uri	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"string.or.uri"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
STRING	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
URI	TokenNameIdentifier
:	TokenNameCOLON
uri	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
CSSSACMediaList	TokenNameIdentifier
ml	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ml	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CSSSACMediaList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ml	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"all"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ml	TokenNameIdentifier
=	TokenNameEQUAL
parseMediaList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
importStyle	TokenNameIdentifier
(	TokenNameLPAREN
uri	TokenNameIdentifier
,	TokenNameCOMMA
ml	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
SEMI_COLON	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"semicolon"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
CSSSACMediaList	TokenNameIdentifier
parseMediaList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
CSSSACMediaList	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CSSSACMediaList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
current	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
COMMA	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"identifier"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
:	TokenNameCOLON
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseFontFaceRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
startFontFace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
LEFT_CURLY_BRACE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"left.curly.brace"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
parseStyleDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
CSSParseException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
endFontFace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parsePageRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
page	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
ppage	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
page	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
COLON	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"identifier"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ppage	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
startPage	TokenNameIdentifier
(	TokenNameLPAREN
page	TokenNameIdentifier
,	TokenNameCOMMA
ppage	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
LEFT_CURLY_BRACE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"left.curly.brace"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
parseStyleDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
CSSParseException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
endPage	TokenNameIdentifier
(	TokenNameLPAREN
page	TokenNameIdentifier
,	TokenNameCOMMA
ppage	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseMediaRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"identifier"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
CSSSACMediaList	TokenNameIdentifier
ml	TokenNameIdentifier
=	TokenNameEQUAL
parseMediaList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
startMedia	TokenNameIdentifier
(	TokenNameLPAREN
ml	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
LEFT_CURLY_BRACE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"left.curly.brace"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
EOF	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
RIGHT_CURLY_BRACE	TokenNameIdentifier
:	TokenNameCOLON
break	TokenNamebreak
loop	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
parseRuleSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
endMedia	TokenNameIdentifier
(	TokenNameLPAREN
ml	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseRuleSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
SelectorList	TokenNameIdentifier
sl	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
sl	TokenNameIdentifier
=	TokenNameEQUAL
parseSelectorList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
CSSParseException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
startSelector	TokenNameIdentifier
(	TokenNameLPAREN
sl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
LEFT_CURLY_BRACE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"left.curly.brace"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
RIGHT_CURLY_BRACE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
parseStyleDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
CSSParseException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
endSelector	TokenNameIdentifier
(	TokenNameLPAREN
sl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
SelectorList	TokenNameIdentifier
parseSelectorList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
CSSSelectorList	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CSSSelectorList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
parseSelector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
COMMA	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
parseSelector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
Selector	TokenNameIdentifier
parseSelector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
pseudoElement	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Selector	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
parseSimpleSelector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
ANY	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
HASH	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
DOT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
LEFT_BRACKET	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
COLON	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
pseudoElement	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"pseudo.element.position"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
selectorFactory	TokenNameIdentifier
.	TokenNameDOT
createDescendantSelector	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
parseSimpleSelector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
PLUS	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
pseudoElement	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"pseudo.element.position"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
selectorFactory	TokenNameIdentifier
.	TokenNameDOT
createDirectAdjacentSelector	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
,	TokenNameCOMMA
parseSimpleSelector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
PRECEDE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
pseudoElement	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"pseudo.element.position"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
selectorFactory	TokenNameIdentifier
.	TokenNameDOT
createChildSelector	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
parseSimpleSelector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
pseudoElement	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
selectorFactory	TokenNameIdentifier
.	TokenNameDOT
createChildSelector	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
selectorFactory	TokenNameIdentifier
.	TokenNameDOT
createPseudoElementSelector	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
pseudoElement	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
SimpleSelector	TokenNameIdentifier
parseSimpleSelector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
SimpleSelector	TokenNameIdentifier
result	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
:	TokenNameCOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
selectorFactory	TokenNameIdentifier
.	TokenNameDOT
createElementSelector	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
ANY	TokenNameIdentifier
:	TokenNameCOLON
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
selectorFactory	TokenNameIdentifier
.	TokenNameDOT
createElementSelector	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Condition	TokenNameIdentifier
cond	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
loop	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
Condition	TokenNameIdentifier
c	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
HASH	TokenNameIdentifier
:	TokenNameCOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
conditionFactory	TokenNameIdentifier
.	TokenNameDOT
createIdCondition	TokenNameIdentifier
(	TokenNameLPAREN
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
DOT	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"identifier"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
conditionFactory	TokenNameIdentifier
.	TokenNameDOT
createClassCondition	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
LEFT_BRACKET	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"identifier"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
op	TokenNameIdentifier
=	TokenNameEQUAL
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
op	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"right.bracket"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
RIGHT_BRACKET	TokenNameIdentifier
:	TokenNameCOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
conditionFactory	TokenNameIdentifier
.	TokenNameDOT
createAttributeCondition	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
INCLUDES	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
DASHMATCH	TokenNameIdentifier
:	TokenNameCOLON
String	TokenNameIdentifier
val	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"identifier.or.string"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
STRING	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
:	TokenNameCOLON
val	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
RIGHT_BRACKET	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"right.bracket"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
op	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
:	TokenNameCOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
conditionFactory	TokenNameIdentifier
.	TokenNameDOT
createAttributeCondition	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
val	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
INCLUDES	TokenNameIdentifier
:	TokenNameCOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
conditionFactory	TokenNameIdentifier
.	TokenNameDOT
createOneOfAttributeCondition	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
val	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
conditionFactory	TokenNameIdentifier
.	TokenNameDOT
createBeginHyphenAttributeCondition	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
val	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
COLON	TokenNameIdentifier
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
:	TokenNameCOLON
String	TokenNameIdentifier
val	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isPseudoElement	TokenNameIdentifier
(	TokenNameLPAREN
val	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
pseudoElement	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"duplicate.pseudo.element"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pseudoElement	TokenNameIdentifier
=	TokenNameEQUAL
val	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
conditionFactory	TokenNameIdentifier
.	TokenNameDOT
createPseudoClassCondition	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
val	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
FUNCTION	TokenNameIdentifier
:	TokenNameCOLON
String	TokenNameIdentifier
func	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"identifier"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
lang	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
RIGHT_BRACE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"right.brace"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
func	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"lang"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"pseudo.function"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
conditionFactory	TokenNameIdentifier
.	TokenNameDOT
createLangCondition	TokenNameIdentifier
(	TokenNameLPAREN
lang	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"identifier"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cond	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
cond	TokenNameIdentifier
=	TokenNameEQUAL
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
cond	TokenNameIdentifier
=	TokenNameEQUAL
conditionFactory	TokenNameIdentifier
.	TokenNameDOT
createAndCondition	TokenNameIdentifier
(	TokenNameLPAREN
cond	TokenNameIdentifier
,	TokenNameCOMMA
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cond	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
selectorFactory	TokenNameIdentifier
.	TokenNameDOT
createConditionalSelector	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
cond	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
isPseudoElement	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'a'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'A'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
s	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"after"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
'b'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'B'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
s	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"before"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
'f'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'F'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
s	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"first-letter"	TokenNameStringLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
s	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"first-line"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseStyleDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
inSheet	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
EOF	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
inSheet	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"eof"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
RIGHT_CURLY_BRACE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
inSheet	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"eof.expected"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
SEMI_COLON	TokenNameIdentifier
:	TokenNameCOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"identifier"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
:	TokenNameCOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
COLON	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"colon"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LexicalUnit	TokenNameIdentifier
exp	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
exp	TokenNameIdentifier
=	TokenNameEQUAL
parseExpression	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
CSSParseException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
exp	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
important	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IMPORTANT_SYMBOL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
important	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
property	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
exp	TokenNameIdentifier
,	TokenNameCOMMA
important	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
LexicalUnit	TokenNameIdentifier
parseExpression	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
param	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
LexicalUnit	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
parseTerm	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LexicalUnit	TokenNameIdentifier
curr	TokenNameIdentifier
=	TokenNameEQUAL
result	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
op	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
COMMA	TokenNameIdentifier
:	TokenNameCOLON
op	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
curr	TokenNameIdentifier
=	TokenNameEQUAL
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createSimple	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
,	TokenNameCOMMA
curr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
DIVIDE	TokenNameIdentifier
:	TokenNameCOLON
op	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
curr	TokenNameIdentifier
=	TokenNameEQUAL
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createSimple	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_SLASH	TokenNameIdentifier
,	TokenNameCOMMA
curr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
param	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
RIGHT_BRACE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
op	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"token"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
curr	TokenNameIdentifier
=	TokenNameEQUAL
parseTerm	TokenNameIdentifier
(	TokenNameLPAREN
curr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IMPORTANT_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
SEMI_COLON	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
RIGHT_CURLY_BRACE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
EOF	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
op	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"token"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
curr	TokenNameIdentifier
=	TokenNameEQUAL
parseTerm	TokenNameIdentifier
(	TokenNameLPAREN
curr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
LexicalUnit	TokenNameIdentifier
parseTerm	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
prev	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
plus	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
boolean	TokenNameboolean
sgn	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
MINUS	TokenNameIdentifier
:	TokenNameCOLON
plus	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
PLUS	TokenNameIdentifier
:	TokenNameCOLON
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sgn	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
INTEGER	TokenNameIdentifier
:	TokenNameCOLON
String	TokenNameIdentifier
sval	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
plus	TokenNameIdentifier
)	TokenNameRPAREN
sval	TokenNameIdentifier
=	TokenNameEQUAL
"-"	TokenNameStringLiteral
+	TokenNamePLUS
sval	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
lVal	TokenNameIdentifier
=	TokenNameEQUAL
Long	TokenNameIdentifier
.	TokenNameDOT
parseLong	TokenNameIdentifier
(	TokenNameLPAREN
sval	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lVal	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
&&	TokenNameAND_AND
lVal	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
iVal	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
lVal	TokenNameIdentifier
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createInteger	TokenNameIdentifier
(	TokenNameLPAREN
iVal	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
REAL	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_REAL	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
PERCENTAGE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PERCENTAGE	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
PT	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_POINT	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
PC	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PICA	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
PX	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PIXEL	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
CM	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_CENTIMETER	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
MM	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_MILLIMETER	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IN	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INCH	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
EM	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_EM	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
EX	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_EX	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
DEG	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_DEGREE	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
RAD	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_RADIAN	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
GRAD	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_GRADIAN	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
S	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_SECOND	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
MS	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_MILLISECOND	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
HZ	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_HERTZ	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
KHZ	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFloat	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_KILOHERTZ	TokenNameIdentifier
,	TokenNameCOMMA
number	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
DIMENSION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
dimension	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
FUNCTION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
parseFunction	TokenNameIdentifier
(	TokenNameLPAREN
plus	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sgn	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"token"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
STRING	TokenNameIdentifier
:	TokenNameCOLON
String	TokenNameIdentifier
val	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createString	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_STRING_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
val	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
IDENTIFIER	TokenNameIdentifier
:	TokenNameCOLON
val	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
val	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"inherit"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createSimple	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INHERIT	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createString	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_IDENT	TokenNameIdentifier
,	TokenNameCOMMA
val	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
URI	TokenNameIdentifier
:	TokenNameCOLON
val	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createString	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_URI	TokenNameIdentifier
,	TokenNameCOMMA
val	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
HASH	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
hexcolor	TokenNameIdentifier
(	TokenNameLPAREN
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"token"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
LexicalUnit	TokenNameIdentifier
parseFunction	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
positive	TokenNameIdentifier
,	TokenNameCOMMA
LexicalUnit	TokenNameIdentifier
prev	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LexicalUnit	TokenNameIdentifier
params	TokenNameIdentifier
=	TokenNameEQUAL
parseExpression	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
RIGHT_BRACE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"token"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
predefined	TokenNameIdentifier
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
name	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'r'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'R'	TokenNameCharacterLiteral
:	TokenNameCOLON
LexicalUnit	TokenNameIdentifier
lu	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"rgb"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
params	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INTEGER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PERCENTAGE	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INTEGER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PERCENTAGE	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INTEGER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PERCENTAGE	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createPredefinedFunction	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_RGBCOLOR	TokenNameIdentifier
,	TokenNameCOMMA
params	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"rect"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
params	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INTEGER	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getIntegerValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_IDENT	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
lu	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"auto"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_EM	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_EX	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PIXEL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_CENTIMETER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_MILLIMETER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INCH	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_POINT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PICA	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PERCENTAGE	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INTEGER	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getIntegerValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_IDENT	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
lu	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"auto"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_EM	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_EX	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PIXEL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_CENTIMETER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_MILLIMETER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INCH	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_POINT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PICA	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PERCENTAGE	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INTEGER	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getIntegerValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_IDENT	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
lu	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"auto"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_EM	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_EX	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PIXEL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_CENTIMETER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_MILLIMETER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INCH	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_POINT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PICA	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PERCENTAGE	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INTEGER	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getIntegerValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_IDENT	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
lu	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"auto"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_EM	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_EX	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PIXEL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_CENTIMETER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_MILLIMETER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_INCH	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_POINT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PICA	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_PERCENTAGE	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createPredefinedFunction	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_RECT_FUNCTION	TokenNameIdentifier
,	TokenNameCOMMA
params	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'c'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'C'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"counter"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
params	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_IDENT	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_IDENT	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createPredefinedFunction	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_COUNTER_FUNCTION	TokenNameIdentifier
,	TokenNameCOMMA
params	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"counters"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
params	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_IDENT	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_STRING_VALUE	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_IDENT	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createPredefinedFunction	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_COUNTERS_FUNCTION	TokenNameIdentifier
,	TokenNameCOMMA
params	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'a'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'A'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"attr"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
lu	TokenNameIdentifier
=	TokenNameEQUAL
params	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
lu	TokenNameIdentifier
.	TokenNameDOT
getLexicalUnitType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
predefined	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_IDENT	TokenNameIdentifier
:	TokenNameCOLON
lu	TokenNameIdentifier
=	TokenNameEQUAL
lu	TokenNameIdentifier
.	TokenNameDOT
getNextLexicalUnit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lu	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createString	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_ATTR	TokenNameIdentifier
,	TokenNameCOMMA
params	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createFunction	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
params	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
LexicalUnit	TokenNameIdentifier
hexcolor	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
prev	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
val	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
val	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LexicalUnit	TokenNameIdentifier
params	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
len	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
char	TokenNamechar
rc	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
val	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
gc	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
val	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
bc	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
val	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ScannerUtilities	TokenNameIdentifier
.	TokenNameDOT
isCSSHexadecimalCharacter	TokenNameIdentifier
(	TokenNameLPAREN
rc	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
ScannerUtilities	TokenNameIdentifier
.	TokenNameDOT
isCSSHexadecimalCharacter	TokenNameIdentifier
(	TokenNameLPAREN
gc	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
ScannerUtilities	TokenNameIdentifier
.	TokenNameDOT
isCSSHexadecimalCharacter	TokenNameIdentifier
(	TokenNameLPAREN
bc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"rgb.color"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
val	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
t	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
r	TokenNameIdentifier
=	TokenNameEQUAL
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rc	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
rc	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
rc	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
rc	TokenNameIdentifier
-	TokenNameMINUS
'a'	TokenNameCharacterLiteral
+	TokenNamePLUS
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
t	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
|=	TokenNameOR_EQUAL
t	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
g	TokenNameIdentifier
=	TokenNameEQUAL
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
gc	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
gc	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
gc	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
gc	TokenNameIdentifier
-	TokenNameMINUS
'a'	TokenNameCharacterLiteral
+	TokenNamePLUS
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
t	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g	TokenNameIdentifier
|=	TokenNameOR_EQUAL
t	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
b	TokenNameIdentifier
=	TokenNameEQUAL
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bc	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
bc	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
bc	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
bc	TokenNameIdentifier
-	TokenNameMINUS
'a'	TokenNameCharacterLiteral
+	TokenNamePLUS
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
t	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b	TokenNameIdentifier
|=	TokenNameOR_EQUAL
t	TokenNameIdentifier
;	TokenNameSEMICOLON
params	TokenNameIdentifier
=	TokenNameEQUAL
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createInteger	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LexicalUnit	TokenNameIdentifier
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createSimple	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
,	TokenNameCOMMA
params	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createInteger	TokenNameIdentifier
(	TokenNameLPAREN
g	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createSimple	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createInteger	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
6	TokenNameIntegerLiteral
:	TokenNameCOLON
char	TokenNamechar
rc1	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
val	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
rc2	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
val	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
gc1	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
val	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
gc2	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
val	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
bc1	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
val	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
bc2	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
val	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ScannerUtilities	TokenNameIdentifier
.	TokenNameDOT
isCSSHexadecimalCharacter	TokenNameIdentifier
(	TokenNameLPAREN
rc1	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
ScannerUtilities	TokenNameIdentifier
.	TokenNameDOT
isCSSHexadecimalCharacter	TokenNameIdentifier
(	TokenNameLPAREN
rc2	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
ScannerUtilities	TokenNameIdentifier
.	TokenNameDOT
isCSSHexadecimalCharacter	TokenNameIdentifier
(	TokenNameLPAREN
gc1	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
ScannerUtilities	TokenNameIdentifier
.	TokenNameDOT
isCSSHexadecimalCharacter	TokenNameIdentifier
(	TokenNameLPAREN
gc2	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
ScannerUtilities	TokenNameIdentifier
.	TokenNameDOT
isCSSHexadecimalCharacter	TokenNameIdentifier
(	TokenNameLPAREN
bc1	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
ScannerUtilities	TokenNameIdentifier
.	TokenNameDOT
isCSSHexadecimalCharacter	TokenNameIdentifier
(	TokenNameLPAREN
bc2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"rgb.color"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rc1	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
rc1	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
rc1	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
rc1	TokenNameIdentifier
-	TokenNameMINUS
'a'	TokenNameCharacterLiteral
+	TokenNamePLUS
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
rc2	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
rc2	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
rc2	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
rc2	TokenNameIdentifier
-	TokenNameMINUS
'a'	TokenNameCharacterLiteral
+	TokenNamePLUS
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
gc1	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
gc1	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
gc1	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
gc1	TokenNameIdentifier
-	TokenNameMINUS
'a'	TokenNameCharacterLiteral
+	TokenNamePLUS
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
g	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
gc2	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
gc2	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
gc2	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
gc2	TokenNameIdentifier
-	TokenNameMINUS
'a'	TokenNameCharacterLiteral
+	TokenNamePLUS
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bc1	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
bc1	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
bc1	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
bc1	TokenNameIdentifier
-	TokenNameMINUS
'a'	TokenNameCharacterLiteral
+	TokenNamePLUS
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
b	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
bc2	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
bc2	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
bc2	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
bc2	TokenNameIdentifier
-	TokenNameMINUS
'a'	TokenNameCharacterLiteral
+	TokenNamePLUS
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
params	TokenNameIdentifier
=	TokenNameEQUAL
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createInteger	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createSimple	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
,	TokenNameCOMMA
params	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createInteger	TokenNameIdentifier
(	TokenNameLPAREN
g	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createSimple	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_OPERATOR_COMMA	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createInteger	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"rgb.color"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
val	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createPredefinedFunction	TokenNameIdentifier
(	TokenNameLPAREN
LexicalUnit	TokenNameIdentifier
.	TokenNameDOT
SAC_RGBCOLOR	TokenNameIdentifier
,	TokenNameCOMMA
params	TokenNameIdentifier
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Scanner	TokenNameIdentifier
createScanner	TokenNameIdentifier
(	TokenNameLPAREN
InputSource	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
documentURI	TokenNameIdentifier
=	TokenNameEQUAL
source	TokenNameIdentifier
.	TokenNameDOT
getURI	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
documentURI	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
documentURI	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Reader	TokenNameIdentifier
r	TokenNameIdentifier
=	TokenNameEQUAL
source	TokenNameIdentifier
.	TokenNameDOT
getCharacterStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
r	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Scanner	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
InputStream	TokenNameIdentifier
is	TokenNameIdentifier
=	TokenNameEQUAL
source	TokenNameIdentifier
.	TokenNameDOT
getByteStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
is	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Scanner	TokenNameIdentifier
(	TokenNameLPAREN
is	TokenNameIdentifier
,	TokenNameCOMMA
source	TokenNameIdentifier
.	TokenNameDOT
getEncoding	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
uri	TokenNameIdentifier
=	TokenNameEQUAL
source	TokenNameIdentifier
.	TokenNameDOT
getURI	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
uri	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
CSSException	TokenNameIdentifier
(	TokenNameLPAREN
formatMessage	TokenNameIdentifier
(	TokenNameLPAREN
"empty.source"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
ParsedURL	TokenNameIdentifier
purl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ParsedURL	TokenNameIdentifier
(	TokenNameLPAREN
uri	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
is	TokenNameIdentifier
=	TokenNameEQUAL
purl	TokenNameIdentifier
.	TokenNameDOT
openStreamRaw	TokenNameIdentifier
(	TokenNameLPAREN
CSSConstants	TokenNameIdentifier
.	TokenNameDOT
CSS_MIME_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Scanner	TokenNameIdentifier
(	TokenNameLPAREN
is	TokenNameIdentifier
,	TokenNameCOMMA
source	TokenNameIdentifier
.	TokenNameDOT
getEncoding	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
CSSException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
lex	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
lex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
SPACE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
lex	TokenNameIdentifier
=	TokenNameEQUAL
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
lex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
skipSpacesAndCDOCDC	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
loop	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
COMMENT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
SPACE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
CDO	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
CDC	TokenNameIdentifier
:	TokenNameCOLON
}	TokenNameRBRACE
scanner	TokenNameIdentifier
.	TokenNameDOT
clearBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
current	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
float	TokenNamefloat
number	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
positive	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
float	TokenNamefloat
sgn	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
positive	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
val	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
sgn	TokenNameIdentifier
*	TokenNameMULTIPLY
Float	TokenNameIdentifier
.	TokenNameDOT
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
val	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NumberFormatException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"number.format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
LexicalUnit	TokenNameIdentifier
dimension	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
positive	TokenNameIdentifier
,	TokenNameCOMMA
LexicalUnit	TokenNameIdentifier
prev	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
float	TokenNamefloat
sgn	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
positive	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
val	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
;	TokenNameSEMICOLON
loop	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
val	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
val	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
CSSLexicalUnit	TokenNameIdentifier
.	TokenNameDOT
createDimension	TokenNameIdentifier
(	TokenNameLPAREN
sgn	TokenNameIdentifier
*	TokenNameMULTIPLY
Float	TokenNameIdentifier
.	TokenNameDOT
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
val	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
val	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
prev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NumberFormatException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
"number.format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
scanner	TokenNameIdentifier
.	TokenNameDOT
clearBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
current	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
COMMENT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
documentHandler	TokenNameIdentifier
.	TokenNameDOT
comment	TokenNameIdentifier
(	TokenNameLPAREN
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
current	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ParseException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
current	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
loop	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
scanner	TokenNameIdentifier
.	TokenNameDOT
clearBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
current	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
COMMENT	TokenNameIdentifier
:	TokenNameCOLON
documentHandler	TokenNameIdentifier
.	TokenNameDOT
comment	TokenNameIdentifier
(	TokenNameLPAREN
scanner	TokenNameIdentifier
.	TokenNameDOT
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
loop	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
SPACE	TokenNameIdentifier
:	TokenNameCOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
current	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ParseException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
errorHandler	TokenNameIdentifier
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
current	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
reportError	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
reportError	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
params	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
params	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
reportError	TokenNameIdentifier
(	TokenNameLPAREN
CSSParseException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
errorHandler	TokenNameIdentifier
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
cbraces	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
EOF	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
SEMI_COLON	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
RIGHT_CURLY_BRACE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
--	TokenNameMINUS_MINUS
cbraces	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
LexicalUnits	TokenNameIdentifier
.	TokenNameDOT
LEFT_CURLY_BRACE	TokenNameIdentifier
:	TokenNameCOLON
cbraces	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nextIgnoreSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
CSSParseException	TokenNameIdentifier
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
CSSParseException	TokenNameIdentifier
createCSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
params	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
CSSParseException	TokenNameIdentifier
(	TokenNameLPAREN
formatMessage	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
params	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
documentURI	TokenNameIdentifier
,	TokenNameCOMMA
scanner	TokenNameIdentifier
.	TokenNameDOT
getLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
scanner	TokenNameIdentifier
.	TokenNameDOT
getColumn	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
parseStyleDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
scanner	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Scanner	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseStyleDeclarationInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
parseRule	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
scanner	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Scanner	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parseRuleInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
SelectorList	TokenNameIdentifier
parseSelectors	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
scanner	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Scanner	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
parseSelectorsInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
LexicalUnit	TokenNameIdentifier
parsePropertyValue	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
scanner	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Scanner	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
parsePropertyValueInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
parsePriority	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
scanner	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Scanner	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
parsePriorityInternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
SACMediaList	TokenNameIdentifier
parseMedia	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
mediaText	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
CSSException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
CSSSACMediaList	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CSSSACMediaList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
"all"	TokenNameStringLiteral
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
mediaText	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
StringTokenizer	TokenNameIdentifier
st	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
mediaText	TokenNameIdentifier
,	TokenNameCOMMA
" ,"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
st	TokenNameIdentifier
.	TokenNameDOT
hasMoreTokens	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
st	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
