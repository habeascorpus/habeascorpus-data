package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
css	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
ScannerUtilities	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
IDENTIFIER_START	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0x0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x87FFFFFE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7FFFFFE	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
NAME	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3FF2000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x87FFFFFE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7FFFFFE	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
HEXADECIMAL	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3FF0000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7E	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
STRING	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0x200	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFFFFFF7B	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFFFFFFFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7FFFFFFF	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
URI	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0x0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFFFFFC7A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFFFFFFFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7FFFFFFF	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
protected	TokenNameprotected
ScannerUtilities	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isCSSSpace	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0x0020	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
'\n'	TokenNameCharacterLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
'\r'	TokenNameCharacterLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
'\f'	TokenNameCharacterLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
0x0020	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
c	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
1L	TokenNameLongLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isCSSIdentifierStartCharacter	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
128	TokenNameIntegerLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
IDENTIFIER_START	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
c	TokenNameIdentifier
&	TokenNameAND
0x1F	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isCSSNameCharacter	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
128	TokenNameIntegerLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
NAME	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
c	TokenNameIdentifier
&	TokenNameAND
0x1F	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isCSSHexadecimalCharacter	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
<	TokenNameLESS
128	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
(	TokenNameLPAREN
HEXADECIMAL	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
c	TokenNameIdentifier
&	TokenNameAND
0x1F	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isCSSStringCharacter	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
128	TokenNameIntegerLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
STRING	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
c	TokenNameIdentifier
&	TokenNameAND
0x1F	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isCSSURICharacter	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
128	TokenNameIntegerLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
URI	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
c	TokenNameIdentifier
&	TokenNameAND
0x1F	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
