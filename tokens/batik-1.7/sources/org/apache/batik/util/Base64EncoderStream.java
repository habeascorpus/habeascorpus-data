package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
OutputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
PrintStream	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Base64EncoderStream	TokenNameIdentifier
extends	TokenNameextends
OutputStream	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
pem_array	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
'A'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'B'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'C'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'D'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'E'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'F'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'G'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'H'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'I'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'J'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'K'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'L'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'M'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'N'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'O'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'P'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Q'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'R'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'S'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'T'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'U'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'V'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'W'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'X'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Y'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Z'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'a'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'b'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'c'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'd'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'e'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'f'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'g'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'h'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'i'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'j'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'k'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'l'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'm'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'n'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'o'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'p'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'q'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'r'	TokenNameCharacterLiteral
,	TokenNameCOMMA
's'	TokenNameCharacterLiteral
,	TokenNameCOMMA
't'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'u'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'v'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'w'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'x'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'y'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'z'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'0'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'1'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'2'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'3'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'4'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'5'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'6'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'7'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'8'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'9'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'+'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'/'	TokenNameCharacterLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
atom	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
atomLen	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
encodeBuf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
lineLen	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
PrintStream	TokenNameIdentifier
out	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
closeOutOnClose	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Base64EncoderStream	TokenNameIdentifier
(	TokenNameLPAREN
OutputStream	TokenNameIdentifier
out	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PrintStream	TokenNameIdentifier
(	TokenNameLPAREN
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
closeOutOnClose	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Base64EncoderStream	TokenNameIdentifier
(	TokenNameLPAREN
OutputStream	TokenNameIdentifier
out	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
closeOutOnClose	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PrintStream	TokenNameIdentifier
(	TokenNameLPAREN
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
closeOutOnClose	TokenNameIdentifier
=	TokenNameEQUAL
closeOutOnClose	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
out	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
encodeAtom	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
.	TokenNameDOT
flush	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
closeOutOnClose	TokenNameIdentifier
)	TokenNameRPAREN
out	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
flush	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
flush	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
write	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
b	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
atom	TokenNameIdentifier
[	TokenNameLBRACKET
atomLen	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
b	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
atomLen	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
encodeAtom	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
write	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
data	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
encodeFromArray	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
data	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
write	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
data	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
off	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
len	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
encodeFromArray	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
encodeAtom	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
byte	TokenNamebyte
a	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
c	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
atomLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
0	TokenNameIntegerLiteral
:	TokenNameCOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
atom	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
a	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x3F	TokenNameIntegerLiteral
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x30	TokenNameIntegerLiteral
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
'='	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
atom	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
atom	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
a	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x3F	TokenNameIntegerLiteral
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x30	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
b	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x0F	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
b	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x3C	TokenNameIntegerLiteral
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
'='	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
atom	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
atom	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
atom	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
a	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x3F	TokenNameIntegerLiteral
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x30	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
b	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x0F	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
b	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x3C	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x03	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
&	TokenNameAND
0x3F	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lineLen	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
64	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lineLen	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
out	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
encodeBuf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lineLen	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
atomLen	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
encodeFromArray	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
data	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
offset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
len	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
byte	TokenNamebyte
a	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
c	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
len	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
atomLen	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
atomLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
atom	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
len	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
atomLen	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
len	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
atom	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
len	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
atomLen	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
atom	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
len	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
atomLen	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
}	TokenNameRBRACE
encodeAtom	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
len	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
a	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x3F	TokenNameIntegerLiteral
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
a	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x30	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
b	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x0F	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
b	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x3C	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x03	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
encodeBuf	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pem_array	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
&	TokenNameAND
0x3F	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
out	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
encodeBuf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lineLen	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lineLen	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
64	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lineLen	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
len	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
len	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
atom	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
atom	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
atom	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
}	TokenNameRBRACE
atomLen	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
