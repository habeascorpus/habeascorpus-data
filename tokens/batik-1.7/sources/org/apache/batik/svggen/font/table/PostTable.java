package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
svggen	TokenNameIdentifier
.	TokenNameDOT
font	TokenNameIdentifier
.	TokenNameDOT
table	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
RandomAccessFile	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
PostTable	TokenNameIdentifier
implements	TokenNameimplements
Table	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
macGlyphName	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
".notdef"	TokenNameStringLiteral
,	TokenNameCOMMA
"null"	TokenNameStringLiteral
,	TokenNameCOMMA
"CR"	TokenNameStringLiteral
,	TokenNameCOMMA
"space"	TokenNameStringLiteral
,	TokenNameCOMMA
"exclam"	TokenNameStringLiteral
,	TokenNameCOMMA
"quotedbl"	TokenNameStringLiteral
,	TokenNameCOMMA
"numbersign"	TokenNameStringLiteral
,	TokenNameCOMMA
"dollar"	TokenNameStringLiteral
,	TokenNameCOMMA
"percent"	TokenNameStringLiteral
,	TokenNameCOMMA
"ampersand"	TokenNameStringLiteral
,	TokenNameCOMMA
"quotesingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"parenleft"	TokenNameStringLiteral
,	TokenNameCOMMA
"parenright"	TokenNameStringLiteral
,	TokenNameCOMMA
"asterisk"	TokenNameStringLiteral
,	TokenNameCOMMA
"plus"	TokenNameStringLiteral
,	TokenNameCOMMA
"comma"	TokenNameStringLiteral
,	TokenNameCOMMA
"hyphen"	TokenNameStringLiteral
,	TokenNameCOMMA
"period"	TokenNameStringLiteral
,	TokenNameCOMMA
"slash"	TokenNameStringLiteral
,	TokenNameCOMMA
"zero"	TokenNameStringLiteral
,	TokenNameCOMMA
"one"	TokenNameStringLiteral
,	TokenNameCOMMA
"two"	TokenNameStringLiteral
,	TokenNameCOMMA
"three"	TokenNameStringLiteral
,	TokenNameCOMMA
"four"	TokenNameStringLiteral
,	TokenNameCOMMA
"five"	TokenNameStringLiteral
,	TokenNameCOMMA
"six"	TokenNameStringLiteral
,	TokenNameCOMMA
"seven"	TokenNameStringLiteral
,	TokenNameCOMMA
"eight"	TokenNameStringLiteral
,	TokenNameCOMMA
"nine"	TokenNameStringLiteral
,	TokenNameCOMMA
"colon"	TokenNameStringLiteral
,	TokenNameCOMMA
"semicolon"	TokenNameStringLiteral
,	TokenNameCOMMA
"less"	TokenNameStringLiteral
,	TokenNameCOMMA
"equal"	TokenNameStringLiteral
,	TokenNameCOMMA
"greater"	TokenNameStringLiteral
,	TokenNameCOMMA
"question"	TokenNameStringLiteral
,	TokenNameCOMMA
"at"	TokenNameStringLiteral
,	TokenNameCOMMA
"A"	TokenNameStringLiteral
,	TokenNameCOMMA
"B"	TokenNameStringLiteral
,	TokenNameCOMMA
"C"	TokenNameStringLiteral
,	TokenNameCOMMA
"D"	TokenNameStringLiteral
,	TokenNameCOMMA
"E"	TokenNameStringLiteral
,	TokenNameCOMMA
"F"	TokenNameStringLiteral
,	TokenNameCOMMA
"G"	TokenNameStringLiteral
,	TokenNameCOMMA
"H"	TokenNameStringLiteral
,	TokenNameCOMMA
"I"	TokenNameStringLiteral
,	TokenNameCOMMA
"J"	TokenNameStringLiteral
,	TokenNameCOMMA
"K"	TokenNameStringLiteral
,	TokenNameCOMMA
"L"	TokenNameStringLiteral
,	TokenNameCOMMA
"M"	TokenNameStringLiteral
,	TokenNameCOMMA
"N"	TokenNameStringLiteral
,	TokenNameCOMMA
"O"	TokenNameStringLiteral
,	TokenNameCOMMA
"P"	TokenNameStringLiteral
,	TokenNameCOMMA
"Q"	TokenNameStringLiteral
,	TokenNameCOMMA
"R"	TokenNameStringLiteral
,	TokenNameCOMMA
"S"	TokenNameStringLiteral
,	TokenNameCOMMA
"T"	TokenNameStringLiteral
,	TokenNameCOMMA
"U"	TokenNameStringLiteral
,	TokenNameCOMMA
"V"	TokenNameStringLiteral
,	TokenNameCOMMA
"W"	TokenNameStringLiteral
,	TokenNameCOMMA
"X"	TokenNameStringLiteral
,	TokenNameCOMMA
"Y"	TokenNameStringLiteral
,	TokenNameCOMMA
"Z"	TokenNameStringLiteral
,	TokenNameCOMMA
"bracketleft"	TokenNameStringLiteral
,	TokenNameCOMMA
"backslash"	TokenNameStringLiteral
,	TokenNameCOMMA
"bracketright"	TokenNameStringLiteral
,	TokenNameCOMMA
"asciicircum"	TokenNameStringLiteral
,	TokenNameCOMMA
"underscore"	TokenNameStringLiteral
,	TokenNameCOMMA
"grave"	TokenNameStringLiteral
,	TokenNameCOMMA
"a"	TokenNameStringLiteral
,	TokenNameCOMMA
"b"	TokenNameStringLiteral
,	TokenNameCOMMA
"c"	TokenNameStringLiteral
,	TokenNameCOMMA
"d"	TokenNameStringLiteral
,	TokenNameCOMMA
"e"	TokenNameStringLiteral
,	TokenNameCOMMA
"f"	TokenNameStringLiteral
,	TokenNameCOMMA
"g"	TokenNameStringLiteral
,	TokenNameCOMMA
"h"	TokenNameStringLiteral
,	TokenNameCOMMA
"i"	TokenNameStringLiteral
,	TokenNameCOMMA
"j"	TokenNameStringLiteral
,	TokenNameCOMMA
"k"	TokenNameStringLiteral
,	TokenNameCOMMA
"l"	TokenNameStringLiteral
,	TokenNameCOMMA
"m"	TokenNameStringLiteral
,	TokenNameCOMMA
"n"	TokenNameStringLiteral
,	TokenNameCOMMA
"o"	TokenNameStringLiteral
,	TokenNameCOMMA
"p"	TokenNameStringLiteral
,	TokenNameCOMMA
"q"	TokenNameStringLiteral
,	TokenNameCOMMA
"r"	TokenNameStringLiteral
,	TokenNameCOMMA
"s"	TokenNameStringLiteral
,	TokenNameCOMMA
"t"	TokenNameStringLiteral
,	TokenNameCOMMA
"u"	TokenNameStringLiteral
,	TokenNameCOMMA
"v"	TokenNameStringLiteral
,	TokenNameCOMMA
"w"	TokenNameStringLiteral
,	TokenNameCOMMA
"x"	TokenNameStringLiteral
,	TokenNameCOMMA
"y"	TokenNameStringLiteral
,	TokenNameCOMMA
"z"	TokenNameStringLiteral
,	TokenNameCOMMA
"braceleft"	TokenNameStringLiteral
,	TokenNameCOMMA
"bar"	TokenNameStringLiteral
,	TokenNameCOMMA
"braceright"	TokenNameStringLiteral
,	TokenNameCOMMA
"asciitilde"	TokenNameStringLiteral
,	TokenNameCOMMA
"Adieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"Aring"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ccedilla"	TokenNameStringLiteral
,	TokenNameCOMMA
"Eacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ntilde"	TokenNameStringLiteral
,	TokenNameCOMMA
"Odieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"Udieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"aacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"agrave"	TokenNameStringLiteral
,	TokenNameCOMMA
"acircumflex"	TokenNameStringLiteral
,	TokenNameCOMMA
"adieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"atilde"	TokenNameStringLiteral
,	TokenNameCOMMA
"aring"	TokenNameStringLiteral
,	TokenNameCOMMA
"ccedilla"	TokenNameStringLiteral
,	TokenNameCOMMA
"eacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"egrave"	TokenNameStringLiteral
,	TokenNameCOMMA
"ecircumflex"	TokenNameStringLiteral
,	TokenNameCOMMA
"edieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"iacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"igrave"	TokenNameStringLiteral
,	TokenNameCOMMA
"icircumflex"	TokenNameStringLiteral
,	TokenNameCOMMA
"idieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"ntilde"	TokenNameStringLiteral
,	TokenNameCOMMA
"oacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"ograve"	TokenNameStringLiteral
,	TokenNameCOMMA
"ocircumflex"	TokenNameStringLiteral
,	TokenNameCOMMA
"odieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"otilde"	TokenNameStringLiteral
,	TokenNameCOMMA
"uacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"ugrave"	TokenNameStringLiteral
,	TokenNameCOMMA
"ucircumflex"	TokenNameStringLiteral
,	TokenNameCOMMA
"udieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"dagger"	TokenNameStringLiteral
,	TokenNameCOMMA
"degree"	TokenNameStringLiteral
,	TokenNameCOMMA
"cent"	TokenNameStringLiteral
,	TokenNameCOMMA
"sterling"	TokenNameStringLiteral
,	TokenNameCOMMA
"section"	TokenNameStringLiteral
,	TokenNameCOMMA
"bullet"	TokenNameStringLiteral
,	TokenNameCOMMA
"paragraph"	TokenNameStringLiteral
,	TokenNameCOMMA
"germandbls"	TokenNameStringLiteral
,	TokenNameCOMMA
"registered"	TokenNameStringLiteral
,	TokenNameCOMMA
"copyright"	TokenNameStringLiteral
,	TokenNameCOMMA
"trademark"	TokenNameStringLiteral
,	TokenNameCOMMA
"acute"	TokenNameStringLiteral
,	TokenNameCOMMA
"dieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"notequal"	TokenNameStringLiteral
,	TokenNameCOMMA
"AE"	TokenNameStringLiteral
,	TokenNameCOMMA
"Oslash"	TokenNameStringLiteral
,	TokenNameCOMMA
"infinity"	TokenNameStringLiteral
,	TokenNameCOMMA
"plusminus"	TokenNameStringLiteral
,	TokenNameCOMMA
"lessequal"	TokenNameStringLiteral
,	TokenNameCOMMA
"greaterequal"	TokenNameStringLiteral
,	TokenNameCOMMA
"yen"	TokenNameStringLiteral
,	TokenNameCOMMA
"mu"	TokenNameStringLiteral
,	TokenNameCOMMA
"partialdiff"	TokenNameStringLiteral
,	TokenNameCOMMA
"summation"	TokenNameStringLiteral
,	TokenNameCOMMA
"product"	TokenNameStringLiteral
,	TokenNameCOMMA
"pi"	TokenNameStringLiteral
,	TokenNameCOMMA
"integral'"	TokenNameStringLiteral
,	TokenNameCOMMA
"ordfeminine"	TokenNameStringLiteral
,	TokenNameCOMMA
"ordmasculine"	TokenNameStringLiteral
,	TokenNameCOMMA
"Omega"	TokenNameStringLiteral
,	TokenNameCOMMA
"ae"	TokenNameStringLiteral
,	TokenNameCOMMA
"oslash"	TokenNameStringLiteral
,	TokenNameCOMMA
"questiondown"	TokenNameStringLiteral
,	TokenNameCOMMA
"exclamdown"	TokenNameStringLiteral
,	TokenNameCOMMA
"logicalnot"	TokenNameStringLiteral
,	TokenNameCOMMA
"radical"	TokenNameStringLiteral
,	TokenNameCOMMA
"florin"	TokenNameStringLiteral
,	TokenNameCOMMA
"approxequal"	TokenNameStringLiteral
,	TokenNameCOMMA
"increment"	TokenNameStringLiteral
,	TokenNameCOMMA
"guillemotleft"	TokenNameStringLiteral
,	TokenNameCOMMA
"guillemotright"	TokenNameStringLiteral
,	TokenNameCOMMA
"ellipsis"	TokenNameStringLiteral
,	TokenNameCOMMA
"nbspace"	TokenNameStringLiteral
,	TokenNameCOMMA
"Agrave"	TokenNameStringLiteral
,	TokenNameCOMMA
"Atilde"	TokenNameStringLiteral
,	TokenNameCOMMA
"Otilde"	TokenNameStringLiteral
,	TokenNameCOMMA
"OE"	TokenNameStringLiteral
,	TokenNameCOMMA
"oe"	TokenNameStringLiteral
,	TokenNameCOMMA
"endash"	TokenNameStringLiteral
,	TokenNameCOMMA
"emdash"	TokenNameStringLiteral
,	TokenNameCOMMA
"quotedblleft"	TokenNameStringLiteral
,	TokenNameCOMMA
"quotedblright"	TokenNameStringLiteral
,	TokenNameCOMMA
"quoteleft"	TokenNameStringLiteral
,	TokenNameCOMMA
"quoteright"	TokenNameStringLiteral
,	TokenNameCOMMA
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
"lozenge"	TokenNameStringLiteral
,	TokenNameCOMMA
"ydieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ydieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"fraction"	TokenNameStringLiteral
,	TokenNameCOMMA
"currency"	TokenNameStringLiteral
,	TokenNameCOMMA
"guilsinglleft"	TokenNameStringLiteral
,	TokenNameCOMMA
"guilsinglright"	TokenNameStringLiteral
,	TokenNameCOMMA
"fi"	TokenNameStringLiteral
,	TokenNameCOMMA
"fl"	TokenNameStringLiteral
,	TokenNameCOMMA
"daggerdbl"	TokenNameStringLiteral
,	TokenNameCOMMA
"middot"	TokenNameStringLiteral
,	TokenNameCOMMA
"quotesinglbase"	TokenNameStringLiteral
,	TokenNameCOMMA
"quotedblbase"	TokenNameStringLiteral
,	TokenNameCOMMA
"perthousand"	TokenNameStringLiteral
,	TokenNameCOMMA
"Acircumflex"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ecircumflex"	TokenNameStringLiteral
,	TokenNameCOMMA
"Aacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"Edieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"Egrave"	TokenNameStringLiteral
,	TokenNameCOMMA
"Iacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"Icircumflex"	TokenNameStringLiteral
,	TokenNameCOMMA
"Idieresis"	TokenNameStringLiteral
,	TokenNameCOMMA
"Igrave"	TokenNameStringLiteral
,	TokenNameCOMMA
"Oacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ocircumflex"	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
"Ograve"	TokenNameStringLiteral
,	TokenNameCOMMA
"Uacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ucircumflex"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ugrave"	TokenNameStringLiteral
,	TokenNameCOMMA
"dotlessi"	TokenNameStringLiteral
,	TokenNameCOMMA
"circumflex"	TokenNameStringLiteral
,	TokenNameCOMMA
"tilde"	TokenNameStringLiteral
,	TokenNameCOMMA
"overscore"	TokenNameStringLiteral
,	TokenNameCOMMA
"breve"	TokenNameStringLiteral
,	TokenNameCOMMA
"dotaccent"	TokenNameStringLiteral
,	TokenNameCOMMA
"ring"	TokenNameStringLiteral
,	TokenNameCOMMA
"cedilla"	TokenNameStringLiteral
,	TokenNameCOMMA
"hungarumlaut"	TokenNameStringLiteral
,	TokenNameCOMMA
"ogonek"	TokenNameStringLiteral
,	TokenNameCOMMA
"caron"	TokenNameStringLiteral
,	TokenNameCOMMA
"Lslash"	TokenNameStringLiteral
,	TokenNameCOMMA
"lslash"	TokenNameStringLiteral
,	TokenNameCOMMA
"Scaron"	TokenNameStringLiteral
,	TokenNameCOMMA
"scaron"	TokenNameStringLiteral
,	TokenNameCOMMA
"Zcaron"	TokenNameStringLiteral
,	TokenNameCOMMA
"zcaron"	TokenNameStringLiteral
,	TokenNameCOMMA
"brokenbar"	TokenNameStringLiteral
,	TokenNameCOMMA
"Eth"	TokenNameStringLiteral
,	TokenNameCOMMA
"eth"	TokenNameStringLiteral
,	TokenNameCOMMA
"Yacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"yacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"Thorn"	TokenNameStringLiteral
,	TokenNameCOMMA
"thorn"	TokenNameStringLiteral
,	TokenNameCOMMA
"minus"	TokenNameStringLiteral
,	TokenNameCOMMA
"multiply"	TokenNameStringLiteral
,	TokenNameCOMMA
"onesuperior"	TokenNameStringLiteral
,	TokenNameCOMMA
"twosuperior"	TokenNameStringLiteral
,	TokenNameCOMMA
"threesuperior"	TokenNameStringLiteral
,	TokenNameCOMMA
"onehalf"	TokenNameStringLiteral
,	TokenNameCOMMA
"onequarter"	TokenNameStringLiteral
,	TokenNameCOMMA
"threequarters"	TokenNameStringLiteral
,	TokenNameCOMMA
"franc"	TokenNameStringLiteral
,	TokenNameCOMMA
"Gbreve"	TokenNameStringLiteral
,	TokenNameCOMMA
"gbreve"	TokenNameStringLiteral
,	TokenNameCOMMA
"Idot"	TokenNameStringLiteral
,	TokenNameCOMMA
"Scedilla"	TokenNameStringLiteral
,	TokenNameCOMMA
"scedilla"	TokenNameStringLiteral
,	TokenNameCOMMA
"Cacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"cacute"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ccaron"	TokenNameStringLiteral
,	TokenNameCOMMA
"ccaron"	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
version	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
italicAngle	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
short	TokenNameshort
underlinePosition	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
short	TokenNameshort
underlineThickness	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
isFixedPitch	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
minMemType42	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
maxMemType42	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
minMemType1	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
maxMemType1	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
numGlyphs	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
glyphNameIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
psGlyphName	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
PostTable	TokenNameIdentifier
(	TokenNameLPAREN
DirectoryEntry	TokenNameIdentifier
de	TokenNameIdentifier
,	TokenNameCOMMA
RandomAccessFile	TokenNameIdentifier
raf	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
raf	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
de	TokenNameIdentifier
.	TokenNameDOT
getOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
version	TokenNameIdentifier
=	TokenNameEQUAL
raf	TokenNameIdentifier
.	TokenNameDOT
readInt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
italicAngle	TokenNameIdentifier
=	TokenNameEQUAL
raf	TokenNameIdentifier
.	TokenNameDOT
readInt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
underlinePosition	TokenNameIdentifier
=	TokenNameEQUAL
raf	TokenNameIdentifier
.	TokenNameDOT
readShort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
underlineThickness	TokenNameIdentifier
=	TokenNameEQUAL
raf	TokenNameIdentifier
.	TokenNameDOT
readShort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isFixedPitch	TokenNameIdentifier
=	TokenNameEQUAL
raf	TokenNameIdentifier
.	TokenNameDOT
readInt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
minMemType42	TokenNameIdentifier
=	TokenNameEQUAL
raf	TokenNameIdentifier
.	TokenNameDOT
readInt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
maxMemType42	TokenNameIdentifier
=	TokenNameEQUAL
raf	TokenNameIdentifier
.	TokenNameDOT
readInt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
minMemType1	TokenNameIdentifier
=	TokenNameEQUAL
raf	TokenNameIdentifier
.	TokenNameDOT
readInt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
maxMemType1	TokenNameIdentifier
=	TokenNameEQUAL
raf	TokenNameIdentifier
.	TokenNameDOT
readInt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
version	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x00020000	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
numGlyphs	TokenNameIdentifier
=	TokenNameEQUAL
raf	TokenNameIdentifier
.	TokenNameDOT
readUnsignedShort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
glyphNameIndex	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
numGlyphs	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numGlyphs	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
glyphNameIndex	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
raf	TokenNameIdentifier
.	TokenNameDOT
readUnsignedShort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
highestGlyphNameIndex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
h	TokenNameIdentifier
>	TokenNameGREATER
257	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
h	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
257	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
psGlyphName	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
h	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
raf	TokenNameIdentifier
.	TokenNameDOT
readUnsignedByte	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
len	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
raf	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
psGlyphName	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
version	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x00020005	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
highestGlyphNameIndex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
high	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numGlyphs	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
high	TokenNameIdentifier
<	TokenNameLESS
glyphNameIndex	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
high	TokenNameIdentifier
=	TokenNameEQUAL
glyphNameIndex	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
high	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getGlyphName	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
version	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x00020000	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
glyphNameIndex	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
>	TokenNameGREATER
257	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
psGlyphName	TokenNameIdentifier
[	TokenNameLBRACKET
glyphNameIndex	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
-	TokenNameMINUS
258	TokenNameIntegerLiteral
]	TokenNameRBRACKET
:	TokenNameCOLON
macGlyphName	TokenNameIdentifier
[	TokenNameLBRACKET
glyphNameIndex	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
post	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
