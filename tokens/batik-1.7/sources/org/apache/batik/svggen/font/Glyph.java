package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
svggen	TokenNameIdentifier
.	TokenNameDOT
font	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
svggen	TokenNameIdentifier
.	TokenNameDOT
font	TokenNameIdentifier
.	TokenNameDOT
table	TokenNameIdentifier
.	TokenNameDOT
GlyfDescript	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
svggen	TokenNameIdentifier
.	TokenNameDOT
font	TokenNameIdentifier
.	TokenNameDOT
table	TokenNameIdentifier
.	TokenNameDOT
GlyphDescription	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Glyph	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
short	TokenNameshort
leftSideBearing	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
advanceWidth	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Point	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
points	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Glyph	TokenNameIdentifier
(	TokenNameLPAREN
GlyphDescription	TokenNameIdentifier
gd	TokenNameIdentifier
,	TokenNameCOMMA
short	TokenNameshort
lsb	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
advance	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
leftSideBearing	TokenNameIdentifier
=	TokenNameEQUAL
lsb	TokenNameIdentifier
;	TokenNameSEMICOLON
advanceWidth	TokenNameIdentifier
=	TokenNameEQUAL
advance	TokenNameIdentifier
;	TokenNameSEMICOLON
describe	TokenNameIdentifier
(	TokenNameLPAREN
gd	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getAdvanceWidth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
advanceWidth	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
short	TokenNameshort
getLeftSideBearing	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
leftSideBearing	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Point	TokenNameIdentifier
getPoint	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
points	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getPointCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
points	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
scale	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
factor	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
points	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
points	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
x	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
points	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
x	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
factor	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
26	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
points	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
y	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
points	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
y	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
factor	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
26	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
leftSideBearing	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
leftSideBearing	TokenNameIdentifier
*	TokenNameMULTIPLY
factor	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
advanceWidth	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
advanceWidth	TokenNameIdentifier
*	TokenNameMULTIPLY
factor	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
describe	TokenNameIdentifier
(	TokenNameLPAREN
GlyphDescription	TokenNameIdentifier
gd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
endPtIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
points	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point	TokenNameIdentifier
[	TokenNameLBRACKET
gd	TokenNameIdentifier
.	TokenNameDOT
getPointCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
gd	TokenNameIdentifier
.	TokenNameDOT
getPointCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
endPt	TokenNameIdentifier
=	TokenNameEQUAL
gd	TokenNameIdentifier
.	TokenNameDOT
getEndPtOfContours	TokenNameIdentifier
(	TokenNameLPAREN
endPtIndex	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
endPt	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
endPtIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
points	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
Point	TokenNameIdentifier
(	TokenNameLPAREN
gd	TokenNameIdentifier
.	TokenNameDOT
getXCoordinate	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
gd	TokenNameIdentifier
.	TokenNameDOT
getYCoordinate	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
gd	TokenNameIdentifier
.	TokenNameDOT
getFlags	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
GlyfDescript	TokenNameIdentifier
.	TokenNameDOT
onCurve	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
endPt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
points	TokenNameIdentifier
[	TokenNameLBRACKET
gd	TokenNameIdentifier
.	TokenNameDOT
getPointCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
Point	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
points	TokenNameIdentifier
[	TokenNameLBRACKET
gd	TokenNameIdentifier
.	TokenNameDOT
getPointCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
Point	TokenNameIdentifier
(	TokenNameLPAREN
advanceWidth	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
