package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
apps	TokenNameIdentifier
.	TokenNameDOT
svgbrowser	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
apps	TokenNameIdentifier
.	TokenNameDOT
svgbrowser	TokenNameIdentifier
.	TokenNameDOT
HistoryBrowser	TokenNameIdentifier
.	TokenNameDOT
CommandController	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
apps	TokenNameIdentifier
.	TokenNameDOT
svgbrowser	TokenNameIdentifier
.	TokenNameDOT
HistoryBrowser	TokenNameIdentifier
.	TokenNameDOT
HistoryBrowserEvent	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
DOMUtilities	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SVGConstants	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Element	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Node	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
HistoryBrowserInterface	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ATTRIBUTE_ADDED_COMMAND	TokenNameIdentifier
=	TokenNameEQUAL
"Attribute added: "	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ATTRIBUTE_REMOVED_COMMAND	TokenNameIdentifier
=	TokenNameEQUAL
"Attribute removed: "	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ATTRIBUTE_MODIFIED_COMMAND	TokenNameIdentifier
=	TokenNameEQUAL
"Attribute modified: "	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
NODE_INSERTED_COMMAND	TokenNameIdentifier
=	TokenNameEQUAL
"Node inserted: "	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
NODE_REMOVED_COMMAND	TokenNameIdentifier
=	TokenNameEQUAL
"Node removed: "	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
CHAR_DATA_MODIFIED_COMMAND	TokenNameIdentifier
=	TokenNameEQUAL
"Node value changed: "	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
OUTER_EDIT_COMMAND	TokenNameIdentifier
=	TokenNameEQUAL
"Document changed outside DOM Viewer"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
COMPOUND_TREE_NODE_DROP	TokenNameIdentifier
=	TokenNameEQUAL
"Node moved"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
REMOVE_SELECTED_NODES	TokenNameIdentifier
=	TokenNameEQUAL
"Nodes removed"	TokenNameStringLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
HistoryBrowser	TokenNameIdentifier
historyBrowser	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
AbstractCompoundCommand	TokenNameIdentifier
currentCompoundCommand	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
HistoryBrowserInterface	TokenNameIdentifier
(	TokenNameLPAREN
CommandController	TokenNameIdentifier
commandController	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HistoryBrowser	TokenNameIdentifier
(	TokenNameLPAREN
commandController	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setCommmandController	TokenNameIdentifier
(	TokenNameLPAREN
CommandController	TokenNameIdentifier
newCommandController	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
setCommandController	TokenNameIdentifier
(	TokenNameLPAREN
newCommandController	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
CompoundUpdateCommand	TokenNameIdentifier
createCompoundUpdateCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
CompoundUpdateCommand	TokenNameIdentifier
cmd	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CompoundUpdateCommand	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
cmd	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
CompoundUpdateCommand	TokenNameIdentifier
createNodeChangedCommand	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
node	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
CompoundUpdateCommand	TokenNameIdentifier
(	TokenNameLPAREN
getNodeChangedCommandName	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
CompoundUpdateCommand	TokenNameIdentifier
createNodesDroppedCommand	TokenNameIdentifier
(	TokenNameLPAREN
ArrayList	TokenNameIdentifier
nodes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
CompoundUpdateCommand	TokenNameIdentifier
(	TokenNameLPAREN
COMPOUND_TREE_NODE_DROP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
CompoundUpdateCommand	TokenNameIdentifier
createRemoveSelectedTreeNodesCommand	TokenNameIdentifier
(	TokenNameLPAREN
ArrayList	TokenNameIdentifier
nodes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
CompoundUpdateCommand	TokenNameIdentifier
(	TokenNameLPAREN
REMOVE_SELECTED_NODES	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
performCompoundUpdateCommand	TokenNameIdentifier
(	TokenNameLPAREN
UndoableCommand	TokenNameIdentifier
command	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
command	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
CompoundUpdateCommand	TokenNameIdentifier
extends	TokenNameextends
AbstractCompoundCommand	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
CompoundUpdateCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setName	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
HistoryBrowser	TokenNameIdentifier
getHistoryBrowser	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
historyBrowser	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
nodeInserted	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
newParent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
newSibling	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
createNodeInsertedCommand	TokenNameIdentifier
(	TokenNameLPAREN
newParent	TokenNameIdentifier
,	TokenNameCOMMA
newSibling	TokenNameIdentifier
,	TokenNameCOMMA
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
NodeInsertedCommand	TokenNameIdentifier
createNodeInsertedCommand	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
newParent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
newSibling	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
NodeInsertedCommand	TokenNameIdentifier
(	TokenNameLPAREN
NODE_INSERTED_COMMAND	TokenNameIdentifier
+	TokenNamePLUS
getBracketedNodeName	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
newParent	TokenNameIdentifier
,	TokenNameCOMMA
newSibling	TokenNameIdentifier
,	TokenNameCOMMA
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
NodeInsertedCommand	TokenNameIdentifier
extends	TokenNameextends
AbstractUndoableCommand	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Node	TokenNameIdentifier
newSibling	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
newParent	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
NodeInsertedCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
sibling	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setName	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
newParent	TokenNameIdentifier
=	TokenNameEQUAL
parent	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
contextNode	TokenNameIdentifier
=	TokenNameEQUAL
contextNode	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
newSibling	TokenNameIdentifier
=	TokenNameEQUAL
sibling	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
undo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
newParent	TokenNameIdentifier
.	TokenNameDOT
removeChild	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
redo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
newSibling	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
newParent	TokenNameIdentifier
.	TokenNameDOT
insertBefore	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
newSibling	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
newParent	TokenNameIdentifier
.	TokenNameDOT
appendChild	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
shouldExecute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
newParent	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
contextNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
nodeRemoved	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
oldParent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
oldSibling	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
createNodeRemovedCommand	TokenNameIdentifier
(	TokenNameLPAREN
oldParent	TokenNameIdentifier
,	TokenNameCOMMA
oldSibling	TokenNameIdentifier
,	TokenNameCOMMA
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
NodeRemovedCommand	TokenNameIdentifier
createNodeRemovedCommand	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
oldParent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
oldSibling	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
NodeRemovedCommand	TokenNameIdentifier
(	TokenNameLPAREN
NODE_REMOVED_COMMAND	TokenNameIdentifier
+	TokenNamePLUS
getBracketedNodeName	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
oldParent	TokenNameIdentifier
,	TokenNameCOMMA
oldSibling	TokenNameIdentifier
,	TokenNameCOMMA
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
NodeRemovedCommand	TokenNameIdentifier
extends	TokenNameextends
AbstractUndoableCommand	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Node	TokenNameIdentifier
oldSibling	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
oldParent	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
NodeRemovedCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
oldParent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
oldSibling	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setName	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
oldParent	TokenNameIdentifier
=	TokenNameEQUAL
oldParent	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
contextNode	TokenNameIdentifier
=	TokenNameEQUAL
contextNode	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
oldSibling	TokenNameIdentifier
=	TokenNameEQUAL
oldSibling	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
undo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
oldSibling	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
oldParent	TokenNameIdentifier
.	TokenNameDOT
insertBefore	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
oldSibling	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
oldParent	TokenNameIdentifier
.	TokenNameDOT
appendChild	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
redo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
oldParent	TokenNameIdentifier
.	TokenNameDOT
removeChild	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
shouldExecute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
oldParent	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
contextNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
attributeAdded	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
createAttributeAddedCommand	TokenNameIdentifier
(	TokenNameLPAREN
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
newAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
AttributeAddedCommand	TokenNameIdentifier
createAttributeAddedCommand	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
AttributeAddedCommand	TokenNameIdentifier
(	TokenNameLPAREN
ATTRIBUTE_ADDED_COMMAND	TokenNameIdentifier
+	TokenNamePLUS
getBracketedNodeName	TokenNameIdentifier
(	TokenNameLPAREN
contextElement	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
newAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
AttributeAddedCommand	TokenNameIdentifier
extends	TokenNameextends
AbstractUndoableCommand	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Element	TokenNameIdentifier
contextElement	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
newValue	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
AttributeAddedCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setName	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
contextElement	TokenNameIdentifier
=	TokenNameEQUAL
contextElement	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
attributeName	TokenNameIdentifier
=	TokenNameEQUAL
attributeName	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
newValue	TokenNameIdentifier
=	TokenNameEQUAL
newAttributeValue	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
namespaceURI	TokenNameIdentifier
=	TokenNameEQUAL
namespaceURI	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
undo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
contextElement	TokenNameIdentifier
.	TokenNameDOT
removeAttributeNS	TokenNameIdentifier
(	TokenNameLPAREN
namespaceURI	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
redo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
contextElement	TokenNameIdentifier
.	TokenNameDOT
setAttributeNS	TokenNameIdentifier
(	TokenNameLPAREN
namespaceURI	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
newValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
shouldExecute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
contextElement	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
attributeName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
attributeRemoved	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
prevAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
createAttributeRemovedCommand	TokenNameIdentifier
(	TokenNameLPAREN
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
prevAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
AttributeRemovedCommand	TokenNameIdentifier
createAttributeRemovedCommand	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
prevAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
AttributeRemovedCommand	TokenNameIdentifier
(	TokenNameLPAREN
ATTRIBUTE_REMOVED_COMMAND	TokenNameIdentifier
+	TokenNamePLUS
getBracketedNodeName	TokenNameIdentifier
(	TokenNameLPAREN
contextElement	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
prevAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
AttributeRemovedCommand	TokenNameIdentifier
extends	TokenNameextends
AbstractUndoableCommand	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Element	TokenNameIdentifier
contextElement	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
prevValue	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
AttributeRemovedCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
prevAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setName	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
contextElement	TokenNameIdentifier
=	TokenNameEQUAL
contextElement	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
attributeName	TokenNameIdentifier
=	TokenNameEQUAL
attributeName	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
prevValue	TokenNameIdentifier
=	TokenNameEQUAL
prevAttributeValue	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
namespaceURI	TokenNameIdentifier
=	TokenNameEQUAL
namespaceURI	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
undo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
contextElement	TokenNameIdentifier
.	TokenNameDOT
setAttributeNS	TokenNameIdentifier
(	TokenNameLPAREN
namespaceURI	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
prevValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
redo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
contextElement	TokenNameIdentifier
.	TokenNameDOT
removeAttributeNS	TokenNameIdentifier
(	TokenNameLPAREN
namespaceURI	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
shouldExecute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
contextElement	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
attributeName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
attributeModified	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
prevAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
createAttributeModifiedCommand	TokenNameIdentifier
(	TokenNameLPAREN
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
prevAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
newAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
AttributeModifiedCommand	TokenNameIdentifier
createAttributeModifiedCommand	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
prevAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
AttributeModifiedCommand	TokenNameIdentifier
(	TokenNameLPAREN
ATTRIBUTE_MODIFIED_COMMAND	TokenNameIdentifier
+	TokenNamePLUS
getBracketedNodeName	TokenNameIdentifier
(	TokenNameLPAREN
contextElement	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
prevAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
newAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
AttributeModifiedCommand	TokenNameIdentifier
extends	TokenNameextends
AbstractUndoableCommand	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Element	TokenNameIdentifier
contextElement	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
prevAttributeValue	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
newAttributeValue	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
AttributeModifiedCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
contextElement	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
prevAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newAttributeValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setName	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
contextElement	TokenNameIdentifier
=	TokenNameEQUAL
contextElement	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
attributeName	TokenNameIdentifier
=	TokenNameEQUAL
attributeName	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
prevAttributeValue	TokenNameIdentifier
=	TokenNameEQUAL
prevAttributeValue	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
newAttributeValue	TokenNameIdentifier
=	TokenNameEQUAL
newAttributeValue	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
namespaceURI	TokenNameIdentifier
=	TokenNameEQUAL
namespaceURI	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
undo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
contextElement	TokenNameIdentifier
.	TokenNameDOT
setAttributeNS	TokenNameIdentifier
(	TokenNameLPAREN
namespaceURI	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
prevAttributeValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
redo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
contextElement	TokenNameIdentifier
.	TokenNameDOT
setAttributeNS	TokenNameIdentifier
(	TokenNameLPAREN
namespaceURI	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
newAttributeValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
shouldExecute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
contextElement	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
attributeName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
charDataModified	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
oldValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
createCharDataModifiedCommand	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
oldValue	TokenNameIdentifier
,	TokenNameCOMMA
newValue	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
CharDataModifiedCommand	TokenNameIdentifier
createCharDataModifiedCommand	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
oldValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
CharDataModifiedCommand	TokenNameIdentifier
(	TokenNameLPAREN
CHAR_DATA_MODIFIED_COMMAND	TokenNameIdentifier
+	TokenNamePLUS
getBracketedNodeName	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
oldValue	TokenNameIdentifier
,	TokenNameCOMMA
newValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
CharDataModifiedCommand	TokenNameIdentifier
extends	TokenNameextends
AbstractUndoableCommand	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
oldValue	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
newValue	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
CharDataModifiedCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
oldValue	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setName	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
contextNode	TokenNameIdentifier
=	TokenNameEQUAL
contextNode	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
oldValue	TokenNameIdentifier
=	TokenNameEQUAL
oldValue	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
newValue	TokenNameIdentifier
=	TokenNameEQUAL
newValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
undo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
contextNode	TokenNameIdentifier
.	TokenNameDOT
setNodeValue	TokenNameIdentifier
(	TokenNameLPAREN
oldValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
redo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
contextNode	TokenNameIdentifier
.	TokenNameDOT
setNodeValue	TokenNameIdentifier
(	TokenNameLPAREN
newValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
shouldExecute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
appendChild	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
createAppendChildCommand	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
AppendChildCommand	TokenNameIdentifier
createAppendChildCommand	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
AppendChildCommand	TokenNameIdentifier
(	TokenNameLPAREN
getAppendChildCommandName	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
parent	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
AppendChildCommand	TokenNameIdentifier
extends	TokenNameextends
AbstractUndoableCommand	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Node	TokenNameIdentifier
oldParentNode	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
oldNextSibling	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
parentNode	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
childNode	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
AppendChildCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
parentNode	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
childNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setName	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
oldParentNode	TokenNameIdentifier
=	TokenNameEQUAL
childNode	TokenNameIdentifier
.	TokenNameDOT
getParentNode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
oldNextSibling	TokenNameIdentifier
=	TokenNameEQUAL
childNode	TokenNameIdentifier
.	TokenNameDOT
getNextSibling	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
parentNode	TokenNameIdentifier
=	TokenNameEQUAL
parentNode	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
childNode	TokenNameIdentifier
=	TokenNameEQUAL
childNode	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
parentNode	TokenNameIdentifier
.	TokenNameDOT
appendChild	TokenNameIdentifier
(	TokenNameLPAREN
childNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
undo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
oldParentNode	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
oldParentNode	TokenNameIdentifier
.	TokenNameDOT
insertBefore	TokenNameIdentifier
(	TokenNameLPAREN
childNode	TokenNameIdentifier
,	TokenNameCOMMA
oldNextSibling	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
parentNode	TokenNameIdentifier
.	TokenNameDOT
removeChild	TokenNameIdentifier
(	TokenNameLPAREN
childNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
redo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
shouldExecute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
parentNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
childNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
insertChildBefore	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
sibling	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sibling	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
createAppendChildCommand	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
createInsertNodeBeforeCommand	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
,	TokenNameCOMMA
sibling	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
UndoableCommand	TokenNameIdentifier
createInsertChildCommand	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
sibling	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sibling	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
createAppendChildCommand	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
createInsertNodeBeforeCommand	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
,	TokenNameCOMMA
sibling	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
InsertNodeBeforeCommand	TokenNameIdentifier
createInsertNodeBeforeCommand	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
sibling	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
InsertNodeBeforeCommand	TokenNameIdentifier
(	TokenNameLPAREN
getInsertBeforeCommandName	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
,	TokenNameCOMMA
sibling	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
parent	TokenNameIdentifier
,	TokenNameCOMMA
sibling	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
InsertNodeBeforeCommand	TokenNameIdentifier
extends	TokenNameextends
AbstractUndoableCommand	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Node	TokenNameIdentifier
oldParent	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
oldNextSibling	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
newNextSibling	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
parent	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
child	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
InsertNodeBeforeCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
sibling	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setName	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
oldParent	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
.	TokenNameDOT
getParentNode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
oldNextSibling	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
.	TokenNameDOT
getNextSibling	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
parent	TokenNameIdentifier
=	TokenNameEQUAL
parent	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
newNextSibling	TokenNameIdentifier
=	TokenNameEQUAL
sibling	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
newNextSibling	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
parent	TokenNameIdentifier
.	TokenNameDOT
insertBefore	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
newNextSibling	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
parent	TokenNameIdentifier
.	TokenNameDOT
appendChild	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
undo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
oldParent	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
oldParent	TokenNameIdentifier
.	TokenNameDOT
insertBefore	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
oldNextSibling	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
parent	TokenNameIdentifier
.	TokenNameDOT
removeChild	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
redo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
shouldExecute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
parent	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
child	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
replaceChild	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
newChild	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
oldChild	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
ReplaceChildCommand	TokenNameIdentifier
extends	TokenNameextends
AbstractUndoableCommand	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Node	TokenNameIdentifier
oldParent	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
oldNextSibling	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
newNextSibling	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
parent	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
child	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ReplaceChildCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
sibling	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setName	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
oldParent	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
.	TokenNameDOT
getParentNode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
oldNextSibling	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
.	TokenNameDOT
getNextSibling	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
parent	TokenNameIdentifier
=	TokenNameEQUAL
parent	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
newNextSibling	TokenNameIdentifier
=	TokenNameEQUAL
sibling	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
newNextSibling	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
parent	TokenNameIdentifier
.	TokenNameDOT
insertBefore	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
newNextSibling	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
parent	TokenNameIdentifier
.	TokenNameDOT
appendChild	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
undo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
oldParent	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
oldParent	TokenNameIdentifier
.	TokenNameDOT
insertBefore	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
oldNextSibling	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
parent	TokenNameIdentifier
.	TokenNameDOT
removeChild	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
redo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
shouldExecute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
parent	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
child	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
removeChild	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
createRemoveChildCommand	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
RemoveChildCommand	TokenNameIdentifier
createRemoveChildCommand	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
RemoveChildCommand	TokenNameIdentifier
(	TokenNameLPAREN
getRemoveChildCommandName	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
parent	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
RemoveChildCommand	TokenNameIdentifier
extends	TokenNameextends
AbstractUndoableCommand	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Node	TokenNameIdentifier
parentNode	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Node	TokenNameIdentifier
childNode	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
indexInChildrenArray	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
RemoveChildCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
parentNode	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
childNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setName	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
parentNode	TokenNameIdentifier
=	TokenNameEQUAL
parentNode	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
childNode	TokenNameIdentifier
=	TokenNameEQUAL
childNode	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
indexInChildrenArray	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtilities	TokenNameIdentifier
.	TokenNameDOT
getChildIndex	TokenNameIdentifier
(	TokenNameLPAREN
childNode	TokenNameIdentifier
,	TokenNameCOMMA
parentNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parentNode	TokenNameIdentifier
.	TokenNameDOT
removeChild	TokenNameIdentifier
(	TokenNameLPAREN
childNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
undo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Node	TokenNameIdentifier
refChild	TokenNameIdentifier
=	TokenNameEQUAL
parentNode	TokenNameIdentifier
.	TokenNameDOT
getChildNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
indexInChildrenArray	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parentNode	TokenNameIdentifier
.	TokenNameDOT
insertBefore	TokenNameIdentifier
(	TokenNameLPAREN
childNode	TokenNameIdentifier
,	TokenNameCOMMA
refChild	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
redo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
parentNode	TokenNameIdentifier
.	TokenNameDOT
removeChild	TokenNameIdentifier
(	TokenNameLPAREN
childNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
shouldExecute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
parentNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
childNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setNodeValue	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
createChangeNodeValueCommand	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
newValue	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ChangeNodeValueCommand	TokenNameIdentifier
createChangeNodeValueCommand	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
ChangeNodeValueCommand	TokenNameIdentifier
(	TokenNameLPAREN
getChangeNodeValueCommandName	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
newValue	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
newValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
ChangeNodeValueCommand	TokenNameIdentifier
extends	TokenNameextends
AbstractUndoableCommand	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
newValue	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ChangeNodeValueCommand	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
commandName	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setName	TokenNameIdentifier
(	TokenNameLPAREN
commandName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
contextNode	TokenNameIdentifier
=	TokenNameEQUAL
contextNode	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
newValue	TokenNameIdentifier
=	TokenNameEQUAL
newValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
oldNodeValue	TokenNameIdentifier
=	TokenNameEQUAL
contextNode	TokenNameIdentifier
.	TokenNameDOT
getNodeValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
contextNode	TokenNameIdentifier
.	TokenNameDOT
setNodeValue	TokenNameIdentifier
(	TokenNameLPAREN
newValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newValue	TokenNameIdentifier
=	TokenNameEQUAL
oldNodeValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
undo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
redo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
shouldExecute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
AbstractCompoundCommand	TokenNameIdentifier
getCurrentCompoundCommand	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currentCompoundCommand	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
currentCompoundCommand	TokenNameIdentifier
=	TokenNameEQUAL
createCompoundUpdateCommand	TokenNameIdentifier
(	TokenNameLPAREN
OUTER_EDIT_COMMAND	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
currentCompoundCommand	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addToCurrentCompoundCommand	TokenNameIdentifier
(	TokenNameLPAREN
AbstractUndoableCommand	TokenNameIdentifier
cmd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
getCurrentCompoundCommand	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
cmd	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
fireDoCompoundEdit	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
HistoryBrowserEvent	TokenNameIdentifier
(	TokenNameLPAREN
getCurrentCompoundCommand	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
performCurrentCompoundCommand	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
getCurrentCompoundCommand	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getCommandNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
addCommand	TokenNameIdentifier
(	TokenNameLPAREN
getCurrentCompoundCommand	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
historyBrowser	TokenNameIdentifier
.	TokenNameDOT
fireCompoundEditPerformed	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
HistoryBrowserEvent	TokenNameIdentifier
(	TokenNameLPAREN
currentCompoundCommand	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentCompoundCommand	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getNodeAsString	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
node	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
id	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
node	TokenNameIdentifier
.	TokenNameDOT
getNodeType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Element	TokenNameIdentifier
e	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
node	TokenNameIdentifier
;	TokenNameSEMICOLON
id	TokenNameIdentifier
=	TokenNameEQUAL
e	TokenNameIdentifier
.	TokenNameDOT
getAttributeNS	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
SVGConstants	TokenNameIdentifier
.	TokenNameDOT
SVG_ID_ATTRIBUTE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
id	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
node	TokenNameIdentifier
.	TokenNameDOT
getNodeName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" ""	TokenNameStringLiteral
+	TokenNamePLUS
id	TokenNameIdentifier
+	TokenNamePLUS
"""	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
node	TokenNameIdentifier
.	TokenNameDOT
getNodeName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getBracketedNodeName	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
node	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"("	TokenNameStringLiteral
+	TokenNamePLUS
getNodeAsString	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getAppendChildCommandName	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
parentNode	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
childNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"Append "	TokenNameStringLiteral
+	TokenNamePLUS
getNodeAsString	TokenNameIdentifier
(	TokenNameLPAREN
childNode	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" to "	TokenNameStringLiteral
+	TokenNamePLUS
getNodeAsString	TokenNameIdentifier
(	TokenNameLPAREN
parentNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getInsertBeforeCommandName	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
parentNode	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
childNode	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
siblingNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"Insert "	TokenNameStringLiteral
+	TokenNamePLUS
getNodeAsString	TokenNameIdentifier
(	TokenNameLPAREN
childNode	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" to "	TokenNameStringLiteral
+	TokenNamePLUS
getNodeAsString	TokenNameIdentifier
(	TokenNameLPAREN
parentNode	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" before "	TokenNameStringLiteral
+	TokenNamePLUS
getNodeAsString	TokenNameIdentifier
(	TokenNameLPAREN
siblingNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getRemoveChildCommandName	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Node	TokenNameIdentifier
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"Remove "	TokenNameStringLiteral
+	TokenNamePLUS
getNodeAsString	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" from "	TokenNameStringLiteral
+	TokenNamePLUS
getNodeAsString	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getChangeNodeValueCommandName	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
contextNode	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"Change "	TokenNameStringLiteral
+	TokenNamePLUS
getNodeAsString	TokenNameIdentifier
(	TokenNameLPAREN
contextNode	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" value to "	TokenNameStringLiteral
+	TokenNamePLUS
newValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getNodeChangedCommandName	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
node	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"Node "	TokenNameStringLiteral
+	TokenNamePLUS
getNodeAsString	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" changed"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
