package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
bridge	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Shape	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
AffineTransform	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Collection	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Collections	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Iterator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
LinkedList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Timer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
TimerTask	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
bridge	TokenNameIdentifier
.	TokenNameDOT
svg12	TokenNameIdentifier
.	TokenNameDOT
DefaultXBLManager	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
bridge	TokenNameIdentifier
.	TokenNameDOT
svg12	TokenNameIdentifier
.	TokenNameDOT
SVG12BridgeContext	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
bridge	TokenNameIdentifier
.	TokenNameDOT
svg12	TokenNameIdentifier
.	TokenNameDOT
SVG12ScriptingEnvironment	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
events	TokenNameIdentifier
.	TokenNameDOT
AbstractEvent	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
svg	TokenNameIdentifier
.	TokenNameDOT
SVGOMDocument	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
gvt	TokenNameIdentifier
.	TokenNameDOT
GraphicsNode	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
gvt	TokenNameIdentifier
.	TokenNameDOT
RootGraphicsNode	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
gvt	TokenNameIdentifier
.	TokenNameDOT
UpdateTracker	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
gvt	TokenNameIdentifier
.	TokenNameDOT
renderer	TokenNameIdentifier
.	TokenNameDOT
ImageRenderer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
EventDispatcher	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
XMLConstants	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
EventDispatcher	TokenNameIdentifier
.	TokenNameDOT
Dispatcher	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
RunnableQueue	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Document	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
events	TokenNameIdentifier
.	TokenNameDOT
DocumentEvent	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
events	TokenNameIdentifier
.	TokenNameDOT
EventTarget	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
UpdateManager	TokenNameIdentifier
{	TokenNameLBRACE
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MIN_REPAINT_TIME	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
int	TokenNameint
value	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
System	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
"org.apache.batik.min_repaint_time"	TokenNameStringLiteral
,	TokenNameCOMMA
"20"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
value	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
SecurityException	TokenNameIdentifier
se	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NumberFormatException	TokenNameIdentifier
nfe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
MIN_REPAINT_TIME	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
BridgeContext	TokenNameIdentifier
bridgeContext	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Document	TokenNameIdentifier
document	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
RunnableQueue	TokenNameIdentifier
updateRunnableQueue	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
RunnableQueue	TokenNameIdentifier
.	TokenNameDOT
RunHandler	TokenNameIdentifier
runHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
volatile	TokenNamevolatile
boolean	TokenNameboolean
running	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
volatile	TokenNamevolatile
boolean	TokenNameboolean
suspendCalled	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
List	TokenNameIdentifier
listeners	TokenNameIdentifier
=	TokenNameEQUAL
Collections	TokenNameIdentifier
.	TokenNameDOT
synchronizedList	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
LinkedList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
ScriptingEnvironment	TokenNameIdentifier
scriptingEnvironment	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
RepaintManager	TokenNameIdentifier
repaintManager	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
UpdateTracker	TokenNameIdentifier
updateTracker	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
GraphicsNode	TokenNameIdentifier
graphicsNode	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
boolean	TokenNameboolean
started	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
BridgeContext	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
secondaryBridgeContexts	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
ScriptingEnvironment	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
secondaryScriptingEnvironments	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
minRepaintTime	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
UpdateManager	TokenNameIdentifier
(	TokenNameLPAREN
BridgeContext	TokenNameIdentifier
ctx	TokenNameIdentifier
,	TokenNameCOMMA
GraphicsNode	TokenNameIdentifier
gn	TokenNameIdentifier
,	TokenNameCOMMA
Document	TokenNameIdentifier
doc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bridgeContext	TokenNameIdentifier
=	TokenNameEQUAL
ctx	TokenNameIdentifier
;	TokenNameSEMICOLON
bridgeContext	TokenNameIdentifier
.	TokenNameDOT
setUpdateManager	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
document	TokenNameIdentifier
=	TokenNameEQUAL
doc	TokenNameIdentifier
;	TokenNameSEMICOLON
updateRunnableQueue	TokenNameIdentifier
=	TokenNameEQUAL
RunnableQueue	TokenNameIdentifier
.	TokenNameDOT
createRunnableQueue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
runHandler	TokenNameIdentifier
=	TokenNameEQUAL
createRunHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
setRunHandler	TokenNameIdentifier
(	TokenNameLPAREN
runHandler	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
graphicsNode	TokenNameIdentifier
=	TokenNameEQUAL
gn	TokenNameIdentifier
;	TokenNameSEMICOLON
scriptingEnvironment	TokenNameIdentifier
=	TokenNameEQUAL
initializeScriptingEnvironment	TokenNameIdentifier
(	TokenNameLPAREN
bridgeContext	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
secondaryBridgeContexts	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
BridgeContext	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
ctx	TokenNameIdentifier
.	TokenNameDOT
getChildContexts	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
secondaryScriptingEnvironments	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ScriptingEnvironment	TokenNameIdentifier
[	TokenNameLBRACKET
secondaryBridgeContexts	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
secondaryBridgeContexts	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
BridgeContext	TokenNameIdentifier
resCtx	TokenNameIdentifier
=	TokenNameEQUAL
secondaryBridgeContexts	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
(	TokenNameLPAREN
SVGOMDocument	TokenNameIdentifier
)	TokenNameRPAREN
resCtx	TokenNameIdentifier
.	TokenNameDOT
getDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
isSVG12	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
resCtx	TokenNameIdentifier
.	TokenNameDOT
setUpdateManager	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ScriptingEnvironment	TokenNameIdentifier
se	TokenNameIdentifier
=	TokenNameEQUAL
initializeScriptingEnvironment	TokenNameIdentifier
(	TokenNameLPAREN
resCtx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
secondaryScriptingEnvironments	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
se	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
minRepaintTime	TokenNameIdentifier
=	TokenNameEQUAL
MIN_REPAINT_TIME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getMinRepaintTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
minRepaintTime	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setMinRepaintTime	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
minRepaintTime	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
minRepaintTime	TokenNameIdentifier
=	TokenNameEQUAL
minRepaintTime	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
ScriptingEnvironment	TokenNameIdentifier
initializeScriptingEnvironment	TokenNameIdentifier
(	TokenNameLPAREN
BridgeContext	TokenNameIdentifier
ctx	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
SVGOMDocument	TokenNameIdentifier
d	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SVGOMDocument	TokenNameIdentifier
)	TokenNameRPAREN
ctx	TokenNameIdentifier
.	TokenNameDOT
getDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ScriptingEnvironment	TokenNameIdentifier
se	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
d	TokenNameIdentifier
.	TokenNameDOT
isSVG12	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
se	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SVG12ScriptingEnvironment	TokenNameIdentifier
(	TokenNameLPAREN
ctx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ctx	TokenNameIdentifier
.	TokenNameDOT
xblManager	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DefaultXBLManager	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
,	TokenNameCOMMA
ctx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
d	TokenNameIdentifier
.	TokenNameDOT
setXBLManager	TokenNameIdentifier
(	TokenNameLPAREN
ctx	TokenNameIdentifier
.	TokenNameDOT
xblManager	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
se	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ScriptingEnvironment	TokenNameIdentifier
(	TokenNameLPAREN
ctx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
se	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
void	TokenNamevoid
dispatchSVGLoadEvent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
InterruptedException	TokenNameIdentifier
{	TokenNameLBRACE
dispatchSVGLoadEvent	TokenNameIdentifier
(	TokenNameLPAREN
bridgeContext	TokenNameIdentifier
,	TokenNameCOMMA
scriptingEnvironment	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
secondaryScriptingEnvironments	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
BridgeContext	TokenNameIdentifier
ctx	TokenNameIdentifier
=	TokenNameEQUAL
secondaryBridgeContexts	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
(	TokenNameLPAREN
SVGOMDocument	TokenNameIdentifier
)	TokenNameRPAREN
ctx	TokenNameIdentifier
.	TokenNameDOT
getDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
isSVG12	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ScriptingEnvironment	TokenNameIdentifier
se	TokenNameIdentifier
=	TokenNameEQUAL
secondaryScriptingEnvironments	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
dispatchSVGLoadEvent	TokenNameIdentifier
(	TokenNameLPAREN
ctx	TokenNameIdentifier
,	TokenNameCOMMA
se	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
secondaryBridgeContexts	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
secondaryScriptingEnvironments	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
dispatchSVGLoadEvent	TokenNameIdentifier
(	TokenNameLPAREN
BridgeContext	TokenNameIdentifier
ctx	TokenNameIdentifier
,	TokenNameCOMMA
ScriptingEnvironment	TokenNameIdentifier
se	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
se	TokenNameIdentifier
.	TokenNameDOT
loadScripts	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
se	TokenNameIdentifier
.	TokenNameDOT
dispatchSVGLoadEvent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ctx	TokenNameIdentifier
.	TokenNameDOT
isSVG12	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
ctx	TokenNameIdentifier
.	TokenNameDOT
xblManager	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
SVG12BridgeContext	TokenNameIdentifier
ctx12	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SVG12BridgeContext	TokenNameIdentifier
)	TokenNameRPAREN
ctx	TokenNameIdentifier
;	TokenNameSEMICOLON
ctx12	TokenNameIdentifier
.	TokenNameDOT
addBindingListener	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ctx12	TokenNameIdentifier
.	TokenNameDOT
xblManager	TokenNameIdentifier
.	TokenNameDOT
startProcessing	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatchSVGZoomEvent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
InterruptedException	TokenNameIdentifier
{	TokenNameLBRACE
scriptingEnvironment	TokenNameIdentifier
.	TokenNameDOT
dispatchSVGZoomEvent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatchSVGScrollEvent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
InterruptedException	TokenNameIdentifier
{	TokenNameLBRACE
scriptingEnvironment	TokenNameIdentifier
.	TokenNameDOT
dispatchSVGScrollEvent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatchSVGResizeEvent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
InterruptedException	TokenNameIdentifier
{	TokenNameLBRACE
scriptingEnvironment	TokenNameIdentifier
.	TokenNameDOT
dispatchSVGResizeEvent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
manageUpdates	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
ImageRenderer	TokenNameIdentifier
r	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
preemptLater	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Runnable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
run	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
synchronized	TokenNamesynchronized
(	TokenNameLPAREN
UpdateManager	TokenNameIdentifier
.	TokenNameDOT
this	TokenNamethis
)	TokenNameRPAREN
{	TokenNameLBRACE
running	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
updateTracker	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
UpdateTracker	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
RootGraphicsNode	TokenNameIdentifier
root	TokenNameIdentifier
=	TokenNameEQUAL
graphicsNode	TokenNameIdentifier
.	TokenNameDOT
getRoot	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
root	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
root	TokenNameIdentifier
.	TokenNameDOT
addTreeGraphicsNodeChangeListener	TokenNameIdentifier
(	TokenNameLPAREN
updateTracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
repaintManager	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
RepaintManager	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
UpdateManagerEvent	TokenNameIdentifier
ev	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
UpdateManagerEvent	TokenNameIdentifier
(	TokenNameLPAREN
UpdateManager	TokenNameIdentifier
.	TokenNameDOT
this	TokenNamethis
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fireEvent	TokenNameIdentifier
(	TokenNameLPAREN
startedDispatcher	TokenNameIdentifier
,	TokenNameCOMMA
ev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
started	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
resume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
BridgeContext	TokenNameIdentifier
getBridgeContext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
bridgeContext	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
RunnableQueue	TokenNameIdentifier
getUpdateRunnableQueue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
updateRunnableQueue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
RepaintManager	TokenNameIdentifier
getRepaintManager	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
repaintManager	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
UpdateTracker	TokenNameIdentifier
getUpdateTracker	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
updateTracker	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Document	TokenNameIdentifier
getDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
document	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ScriptingEnvironment	TokenNameIdentifier
getScriptingEnvironment	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
scriptingEnvironment	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
boolean	TokenNameboolean
isRunning	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
running	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
void	TokenNamevoid
suspend	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
getQueueState	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
RunnableQueue	TokenNameIdentifier
.	TokenNameDOT
RUNNING	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
suspendExecution	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
suspendCalled	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
void	TokenNamevoid
resume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
getQueueState	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
RunnableQueue	TokenNameIdentifier
.	TokenNameDOT
RUNNING	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
resumeExecution	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
interrupt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Runnable	TokenNameIdentifier
r	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Runnable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
run	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
synchronized	TokenNamesynchronized
(	TokenNameLPAREN
UpdateManager	TokenNameIdentifier
.	TokenNameDOT
this	TokenNamethis
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
started	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
dispatchSVGUnLoadEvent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
running	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
scriptingEnvironment	TokenNameIdentifier
.	TokenNameDOT
interrupt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
getThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
halt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
preemptLater	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
resumeExecution	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IllegalStateException	TokenNameIdentifier
ise	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatchSVGUnLoadEvent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
started	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalStateException	TokenNameIdentifier
(	TokenNameLPAREN
"UpdateManager not started."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
preemptLater	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Runnable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
run	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
synchronized	TokenNamesynchronized
(	TokenNameLPAREN
UpdateManager	TokenNameIdentifier
.	TokenNameDOT
this	TokenNamethis
)	TokenNameRPAREN
{	TokenNameLBRACE
AbstractEvent	TokenNameIdentifier
evt	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
AbstractEvent	TokenNameIdentifier
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
DocumentEvent	TokenNameIdentifier
)	TokenNameRPAREN
document	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
createEvent	TokenNameIdentifier
(	TokenNameLPAREN
"SVGEvents"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
type	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
bridgeContext	TokenNameIdentifier
.	TokenNameDOT
isSVG12	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
"unload"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
"SVGUnload"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
evt	TokenNameIdentifier
.	TokenNameDOT
initEventNS	TokenNameIdentifier
(	TokenNameLPAREN
XMLConstants	TokenNameIdentifier
.	TokenNameDOT
XML_EVENTS_NAMESPACE_URI	TokenNameIdentifier
,	TokenNameCOMMA
type	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
(	TokenNameLPAREN
(	TokenNameLPAREN
EventTarget	TokenNameIdentifier
)	TokenNameRPAREN
(	TokenNameLPAREN
document	TokenNameIdentifier
.	TokenNameDOT
getDocumentElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
dispatchEvent	TokenNameIdentifier
(	TokenNameLPAREN
evt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
running	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
scriptingEnvironment	TokenNameIdentifier
.	TokenNameDOT
interrupt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
getThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
halt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bridgeContext	TokenNameIdentifier
.	TokenNameDOT
dispose	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
UpdateManagerEvent	TokenNameIdentifier
ev	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
UpdateManagerEvent	TokenNameIdentifier
(	TokenNameLPAREN
UpdateManager	TokenNameIdentifier
.	TokenNameDOT
this	TokenNamethis
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fireEvent	TokenNameIdentifier
(	TokenNameLPAREN
stoppedDispatcher	TokenNameIdentifier
,	TokenNameCOMMA
ev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
resume	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
updateRendering	TokenNameIdentifier
(	TokenNameLPAREN
AffineTransform	TokenNameIdentifier
u2d	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
dbr	TokenNameIdentifier
,	TokenNameCOMMA
Shape	TokenNameIdentifier
aoi	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
width	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
height	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
repaintManager	TokenNameIdentifier
.	TokenNameDOT
setupRenderer	TokenNameIdentifier
(	TokenNameLPAREN
u2d	TokenNameIdentifier
,	TokenNameCOMMA
dbr	TokenNameIdentifier
,	TokenNameCOMMA
aoi	TokenNameIdentifier
,	TokenNameCOMMA
width	TokenNameIdentifier
,	TokenNameCOMMA
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
l	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
l	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
aoi	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateRendering	TokenNameIdentifier
(	TokenNameLPAREN
l	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
updateRendering	TokenNameIdentifier
(	TokenNameLPAREN
AffineTransform	TokenNameIdentifier
u2d	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
dbr	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
cpt	TokenNameIdentifier
,	TokenNameCOMMA
Shape	TokenNameIdentifier
aoi	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
width	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
height	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
repaintManager	TokenNameIdentifier
.	TokenNameDOT
setupRenderer	TokenNameIdentifier
(	TokenNameLPAREN
u2d	TokenNameIdentifier
,	TokenNameCOMMA
dbr	TokenNameIdentifier
,	TokenNameCOMMA
aoi	TokenNameIdentifier
,	TokenNameCOMMA
width	TokenNameIdentifier
,	TokenNameCOMMA
height	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
l	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
l	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
aoi	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateRendering	TokenNameIdentifier
(	TokenNameLPAREN
l	TokenNameIdentifier
,	TokenNameCOMMA
cpt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
updateRendering	TokenNameIdentifier
(	TokenNameLPAREN
List	TokenNameIdentifier
areas	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
clearPaintingTransform	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
UpdateManagerEvent	TokenNameIdentifier
ev	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
UpdateManagerEvent	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
repaintManager	TokenNameIdentifier
.	TokenNameDOT
getOffScreen	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fireEvent	TokenNameIdentifier
(	TokenNameLPAREN
updateStartedDispatcher	TokenNameIdentifier
,	TokenNameCOMMA
ev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Collection	TokenNameIdentifier
c	TokenNameIdentifier
=	TokenNameEQUAL
repaintManager	TokenNameIdentifier
.	TokenNameDOT
updateRendering	TokenNameIdentifier
(	TokenNameLPAREN
areas	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
l	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ev	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
UpdateManagerEvent	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
repaintManager	TokenNameIdentifier
.	TokenNameDOT
getOffScreen	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
l	TokenNameIdentifier
,	TokenNameCOMMA
clearPaintingTransform	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fireEvent	TokenNameIdentifier
(	TokenNameLPAREN
updateCompletedDispatcher	TokenNameIdentifier
,	TokenNameCOMMA
ev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ThreadDeath	TokenNameIdentifier
td	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
UpdateManagerEvent	TokenNameIdentifier
ev	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
UpdateManagerEvent	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fireEvent	TokenNameIdentifier
(	TokenNameLPAREN
updateFailedDispatcher	TokenNameIdentifier
,	TokenNameCOMMA
ev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
td	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Throwable	TokenNameIdentifier
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
UpdateManagerEvent	TokenNameIdentifier
ev	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
UpdateManagerEvent	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fireEvent	TokenNameIdentifier
(	TokenNameLPAREN
updateFailedDispatcher	TokenNameIdentifier
,	TokenNameCOMMA
ev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
long	TokenNamelong
outOfDateTime	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
void	TokenNamevoid
repaint	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
updateTracker	TokenNameIdentifier
.	TokenNameDOT
hasChanged	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
outOfDateTime	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
long	TokenNamelong
ctime	TokenNameIdentifier
=	TokenNameEQUAL
System	TokenNameIdentifier
.	TokenNameDOT
currentTimeMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ctime	TokenNameIdentifier
<	TokenNameLESS
allResumeTime	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
createRepaintTimer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
allResumeTime	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
releaseAllRedrawSuspension	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
ctime	TokenNameIdentifier
-	TokenNameMINUS
outOfDateTime	TokenNameIdentifier
<	TokenNameLESS
minRepaintTime	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
synchronized	TokenNamesynchronized
(	TokenNameLPAREN
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
getIteratorLock	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Iterator	TokenNameIdentifier
i	TokenNameIdentifier
=	TokenNameEQUAL
updateRunnableQueue	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
i	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
NoRepaintRunnable	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
List	TokenNameIdentifier
dirtyAreas	TokenNameIdentifier
=	TokenNameEQUAL
updateTracker	TokenNameIdentifier
.	TokenNameDOT
getDirtyAreas	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateTracker	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dirtyAreas	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
updateRendering	TokenNameIdentifier
(	TokenNameLPAREN
dirtyAreas	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
outOfDateTime	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
forceRepaint	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
updateTracker	TokenNameIdentifier
.	TokenNameDOT
hasChanged	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
outOfDateTime	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
List	TokenNameIdentifier
dirtyAreas	TokenNameIdentifier
=	TokenNameEQUAL
updateTracker	TokenNameIdentifier
.	TokenNameDOT
getDirtyAreas	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateTracker	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dirtyAreas	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
updateRendering	TokenNameIdentifier
(	TokenNameLPAREN
dirtyAreas	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
outOfDateTime	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
class	TokenNameclass
SuspensionInfo	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
index	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
resumeMilli	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
SuspensionInfo	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
,	TokenNameCOMMA
long	TokenNamelong
resumeMilli	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
index	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
resumeMilli	TokenNameIdentifier
=	TokenNameEQUAL
resumeMilli	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getIndex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
index	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
long	TokenNamelong
getResumeMilli	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
resumeMilli	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
class	TokenNameclass
RepaintTimerTask	TokenNameIdentifier
extends	TokenNameextends
TimerTask	TokenNameIdentifier
{	TokenNameLBRACE
UpdateManager	TokenNameIdentifier
um	TokenNameIdentifier
;	TokenNameSEMICOLON
RepaintTimerTask	TokenNameIdentifier
(	TokenNameLPAREN
UpdateManager	TokenNameIdentifier
um	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
um	TokenNameIdentifier
=	TokenNameEQUAL
um	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
run	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
RunnableQueue	TokenNameIdentifier
rq	TokenNameIdentifier
=	TokenNameEQUAL
um	TokenNameIdentifier
.	TokenNameDOT
getUpdateRunnableQueue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
rq	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
rq	TokenNameIdentifier
.	TokenNameDOT
invokeLater	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Runnable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
run	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
List	TokenNameIdentifier
suspensionList	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
nextSuspensionIndex	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
allResumeTime	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
Timer	TokenNameIdentifier
repaintTriggerTimer	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
TimerTask	TokenNameIdentifier
repaintTimerTask	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
void	TokenNamevoid
createRepaintTimer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
repaintTimerTask	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
allResumeTime	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
repaintTriggerTimer	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
repaintTriggerTimer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Timer	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
delay	TokenNameIdentifier
=	TokenNameEQUAL
allResumeTime	TokenNameIdentifier
-	TokenNameMINUS
System	TokenNameIdentifier
.	TokenNameDOT
currentTimeMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
delay	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
delay	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
repaintTimerTask	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
RepaintTimerTask	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repaintTriggerTimer	TokenNameIdentifier
.	TokenNameDOT
schedule	TokenNameIdentifier
(	TokenNameLPAREN
repaintTimerTask	TokenNameIdentifier
,	TokenNameCOMMA
delay	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
resetRepaintTimer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
repaintTimerTask	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
allResumeTime	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
repaintTriggerTimer	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
repaintTriggerTimer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Timer	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
delay	TokenNameIdentifier
=	TokenNameEQUAL
allResumeTime	TokenNameIdentifier
-	TokenNameMINUS
System	TokenNameIdentifier
.	TokenNameDOT
currentTimeMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
delay	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
delay	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
repaintTimerTask	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
RepaintTimerTask	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repaintTriggerTimer	TokenNameIdentifier
.	TokenNameDOT
schedule	TokenNameIdentifier
(	TokenNameLPAREN
repaintTimerTask	TokenNameIdentifier
,	TokenNameCOMMA
delay	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
addRedrawSuspension	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
max_wait_milliseconds	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
resumeTime	TokenNameIdentifier
=	TokenNameEQUAL
System	TokenNameIdentifier
.	TokenNameDOT
currentTimeMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
max_wait_milliseconds	TokenNameIdentifier
;	TokenNameSEMICOLON
SuspensionInfo	TokenNameIdentifier
si	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SuspensionInfo	TokenNameIdentifier
(	TokenNameLPAREN
nextSuspensionIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
resumeTime	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
resumeTime	TokenNameIdentifier
>	TokenNameGREATER
allResumeTime	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
allResumeTime	TokenNameIdentifier
=	TokenNameEQUAL
resumeTime	TokenNameIdentifier
;	TokenNameSEMICOLON
resetRepaintTimer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
suspensionList	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
si	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
si	TokenNameIdentifier
.	TokenNameDOT
getIndex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
releaseAllRedrawSuspension	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
suspensionList	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
allResumeTime	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
resetRepaintTimer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
releaseRedrawSuspension	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
>	TokenNameGREATER
nextSuspensionIndex	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
suspensionList	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
int	TokenNameint
lo	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
hi	TokenNameIdentifier
=	TokenNameEQUAL
suspensionList	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
lo	TokenNameIdentifier
<	TokenNameLESS
hi	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
mid	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
lo	TokenNameIdentifier
+	TokenNamePLUS
hi	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
SuspensionInfo	TokenNameIdentifier
si	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SuspensionInfo	TokenNameIdentifier
)	TokenNameRPAREN
suspensionList	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
mid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
idx	TokenNameIdentifier
=	TokenNameEQUAL
si	TokenNameIdentifier
.	TokenNameDOT
getIndex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
idx	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
lo	TokenNameIdentifier
=	TokenNameEQUAL
hi	TokenNameIdentifier
=	TokenNameEQUAL
mid	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
idx	TokenNameIdentifier
<	TokenNameLESS
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
lo	TokenNameIdentifier
=	TokenNameEQUAL
mid	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
hi	TokenNameIdentifier
=	TokenNameEQUAL
mid	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
SuspensionInfo	TokenNameIdentifier
si	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SuspensionInfo	TokenNameIdentifier
)	TokenNameRPAREN
suspensionList	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
lo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
idx	TokenNameIdentifier
=	TokenNameEQUAL
si	TokenNameIdentifier
.	TokenNameDOT
getIndex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
idx	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
index	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
suspensionList	TokenNameIdentifier
.	TokenNameDOT
remove	TokenNameIdentifier
(	TokenNameLPAREN
lo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
suspensionList	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
allResumeTime	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
resetRepaintTimer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
long	TokenNamelong
resumeTime	TokenNameIdentifier
=	TokenNameEQUAL
si	TokenNameIdentifier
.	TokenNameDOT
getResumeMilli	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
resumeTime	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
allResumeTime	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
allResumeTime	TokenNameIdentifier
=	TokenNameEQUAL
findNewAllResumeTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
resetRepaintTimer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
long	TokenNamelong
findNewAllResumeTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
ret	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
Iterator	TokenNameIdentifier
i	TokenNameIdentifier
=	TokenNameEQUAL
suspensionList	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
SuspensionInfo	TokenNameIdentifier
si	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SuspensionInfo	TokenNameIdentifier
)	TokenNameRPAREN
i	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
t	TokenNameIdentifier
=	TokenNameEQUAL
si	TokenNameIdentifier
.	TokenNameDOT
getResumeMilli	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
>	TokenNameGREATER
ret	TokenNameIdentifier
)	TokenNameRPAREN
ret	TokenNameIdentifier
=	TokenNameEQUAL
t	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addUpdateManagerListener	TokenNameIdentifier
(	TokenNameLPAREN
UpdateManagerListener	TokenNameIdentifier
l	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
listeners	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
l	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
removeUpdateManagerListener	TokenNameIdentifier
(	TokenNameLPAREN
UpdateManagerListener	TokenNameIdentifier
l	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
listeners	TokenNameIdentifier
.	TokenNameDOT
remove	TokenNameIdentifier
(	TokenNameLPAREN
l	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
fireEvent	TokenNameIdentifier
(	TokenNameLPAREN
Dispatcher	TokenNameIdentifier
dispatcher	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
EventDispatcher	TokenNameIdentifier
.	TokenNameDOT
fireEvent	TokenNameIdentifier
(	TokenNameLPAREN
dispatcher	TokenNameIdentifier
,	TokenNameCOMMA
listeners	TokenNameIdentifier
,	TokenNameCOMMA
event	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Dispatcher	TokenNameIdentifier
startedDispatcher	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Dispatcher	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatch	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
listener	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerListener	TokenNameIdentifier
)	TokenNameRPAREN
listener	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
managerStarted	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerEvent	TokenNameIdentifier
)	TokenNameRPAREN
event	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
Dispatcher	TokenNameIdentifier
stoppedDispatcher	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Dispatcher	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatch	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
listener	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerListener	TokenNameIdentifier
)	TokenNameRPAREN
listener	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
managerStopped	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerEvent	TokenNameIdentifier
)	TokenNameRPAREN
event	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
Dispatcher	TokenNameIdentifier
suspendedDispatcher	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Dispatcher	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatch	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
listener	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerListener	TokenNameIdentifier
)	TokenNameRPAREN
listener	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
managerSuspended	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerEvent	TokenNameIdentifier
)	TokenNameRPAREN
event	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
Dispatcher	TokenNameIdentifier
resumedDispatcher	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Dispatcher	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatch	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
listener	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerListener	TokenNameIdentifier
)	TokenNameRPAREN
listener	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
managerResumed	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerEvent	TokenNameIdentifier
)	TokenNameRPAREN
event	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
Dispatcher	TokenNameIdentifier
updateStartedDispatcher	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Dispatcher	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatch	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
listener	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerListener	TokenNameIdentifier
)	TokenNameRPAREN
listener	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
updateStarted	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerEvent	TokenNameIdentifier
)	TokenNameRPAREN
event	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
Dispatcher	TokenNameIdentifier
updateCompletedDispatcher	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Dispatcher	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatch	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
listener	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerListener	TokenNameIdentifier
)	TokenNameRPAREN
listener	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
updateCompleted	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerEvent	TokenNameIdentifier
)	TokenNameRPAREN
event	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
Dispatcher	TokenNameIdentifier
updateFailedDispatcher	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Dispatcher	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatch	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
listener	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerListener	TokenNameIdentifier
)	TokenNameRPAREN
listener	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
updateFailed	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
UpdateManagerEvent	TokenNameIdentifier
)	TokenNameRPAREN
event	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
protected	TokenNameprotected
RunnableQueue	TokenNameIdentifier
.	TokenNameDOT
RunHandler	TokenNameIdentifier
createRunHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
UpdateManagerRunHander	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
class	TokenNameclass
UpdateManagerRunHander	TokenNameIdentifier
extends	TokenNameextends
RunnableQueue	TokenNameIdentifier
.	TokenNameDOT
RunHandlerAdapter	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
runnableStart	TokenNameIdentifier
(	TokenNameLPAREN
RunnableQueue	TokenNameIdentifier
rq	TokenNameIdentifier
,	TokenNameCOMMA
Runnable	TokenNameIdentifier
r	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
running	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
(	TokenNameLPAREN
r	TokenNameIdentifier
instanceof	TokenNameinstanceof
NoRepaintRunnable	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
outOfDateTime	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
outOfDateTime	TokenNameIdentifier
=	TokenNameEQUAL
System	TokenNameIdentifier
.	TokenNameDOT
currentTimeMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
runnableInvoked	TokenNameIdentifier
(	TokenNameLPAREN
RunnableQueue	TokenNameIdentifier
rq	TokenNameIdentifier
,	TokenNameCOMMA
Runnable	TokenNameIdentifier
r	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
running	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
(	TokenNameLPAREN
r	TokenNameIdentifier
instanceof	TokenNameinstanceof
NoRepaintRunnable	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
repaint	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
executionSuspended	TokenNameIdentifier
(	TokenNameLPAREN
RunnableQueue	TokenNameIdentifier
rq	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
synchronized	TokenNamesynchronized
(	TokenNameLPAREN
UpdateManager	TokenNameIdentifier
.	TokenNameDOT
this	TokenNamethis
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
suspendCalled	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
running	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
UpdateManagerEvent	TokenNameIdentifier
ev	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
UpdateManagerEvent	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fireEvent	TokenNameIdentifier
(	TokenNameLPAREN
suspendedDispatcher	TokenNameIdentifier
,	TokenNameCOMMA
ev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
executionResumed	TokenNameIdentifier
(	TokenNameLPAREN
RunnableQueue	TokenNameIdentifier
rq	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
synchronized	TokenNamesynchronized
(	TokenNameLPAREN
UpdateManager	TokenNameIdentifier
.	TokenNameDOT
this	TokenNamethis
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
suspendCalled	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
running	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
running	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
suspendCalled	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
UpdateManagerEvent	TokenNameIdentifier
ev	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
UpdateManagerEvent	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fireEvent	TokenNameIdentifier
(	TokenNameLPAREN
resumedDispatcher	TokenNameIdentifier
,	TokenNameCOMMA
ev	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
