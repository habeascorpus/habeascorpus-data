package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
gvt	TokenNameIdentifier
.	TokenNameDOT
flow	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Point2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
gvt	TokenNameIdentifier
.	TokenNameDOT
font	TokenNameIdentifier
.	TokenNameDOT
GVTGlyphVector	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
LineInfo	TokenNameIdentifier
{	TokenNameLBRACE
FlowRegions	TokenNameIdentifier
fr	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
lineHeight	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
ascent	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
descent	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
hLeading	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
baseline	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
numGlyphs	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
words	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
GlyphGroupInfo	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ggis	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
newSize	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
GlyphGroupInfo	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newGGIS	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
numRanges	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ranges	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rangeAdv	TokenNameIdentifier
;	TokenNameSEMICOLON
BlockInfo	TokenNameIdentifier
bi	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
boolean	TokenNameboolean
paraStart	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
paraEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
FULL_WORD	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
FULL_ADV	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
LineInfo	TokenNameIdentifier
(	TokenNameLPAREN
FlowRegions	TokenNameIdentifier
fr	TokenNameIdentifier
,	TokenNameCOMMA
BlockInfo	TokenNameIdentifier
bi	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
paraStart	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
fr	TokenNameIdentifier
=	TokenNameEQUAL
fr	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
bi	TokenNameIdentifier
=	TokenNameEQUAL
bi	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
lineHeight	TokenNameIdentifier
=	TokenNameEQUAL
bi	TokenNameIdentifier
.	TokenNameDOT
getLineHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
ascent	TokenNameIdentifier
=	TokenNameEQUAL
bi	TokenNameIdentifier
.	TokenNameDOT
getAscent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
descent	TokenNameIdentifier
=	TokenNameEQUAL
bi	TokenNameIdentifier
.	TokenNameDOT
getDescent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
hLeading	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
lineHeight	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
ascent	TokenNameIdentifier
+	TokenNamePLUS
descent	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
baseline	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
(	TokenNameLPAREN
fr	TokenNameIdentifier
.	TokenNameDOT
getCurrentY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
hLeading	TokenNameIdentifier
+	TokenNamePLUS
ascent	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
paraStart	TokenNameIdentifier
=	TokenNameEQUAL
paraStart	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
paraEnd	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lineHeight	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fr	TokenNameIdentifier
.	TokenNameDOT
newLineHeight	TokenNameIdentifier
(	TokenNameLPAREN
lineHeight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateRangeInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setParaEnd	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
paraEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
paraEnd	TokenNameIdentifier
=	TokenNameEQUAL
paraEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
addWord	TokenNameIdentifier
(	TokenNameLPAREN
WordInfo	TokenNameIdentifier
wi	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
nlh	TokenNameIdentifier
=	TokenNameEQUAL
wi	TokenNameIdentifier
.	TokenNameDOT
getLineHeight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nlh	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
lineHeight	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
insertWord	TokenNameIdentifier
(	TokenNameLPAREN
wi	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fr	TokenNameIdentifier
.	TokenNameDOT
newLineHeight	TokenNameIdentifier
(	TokenNameLPAREN
nlh	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
updateRangeInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
lineHeight	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fr	TokenNameIdentifier
.	TokenNameDOT
newLineHeight	TokenNameIdentifier
(	TokenNameLPAREN
lineHeight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
insertWord	TokenNameIdentifier
(	TokenNameLPAREN
wi	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
lineHeight	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
setLineHeight	TokenNameIdentifier
(	TokenNameLPAREN
lineHeight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lineHeight	TokenNameIdentifier
=	TokenNameEQUAL
nlh	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
wi	TokenNameIdentifier
.	TokenNameDOT
getAscent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
ascent	TokenNameIdentifier
)	TokenNameRPAREN
ascent	TokenNameIdentifier
=	TokenNameEQUAL
wi	TokenNameIdentifier
.	TokenNameDOT
getAscent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
wi	TokenNameIdentifier
.	TokenNameDOT
getDescent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
descent	TokenNameIdentifier
)	TokenNameRPAREN
descent	TokenNameIdentifier
=	TokenNameEQUAL
wi	TokenNameIdentifier
.	TokenNameDOT
getDescent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hLeading	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
nlh	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
ascent	TokenNameIdentifier
+	TokenNamePLUS
descent	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
baseline	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
(	TokenNameLPAREN
fr	TokenNameIdentifier
.	TokenNameDOT
getCurrentY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
hLeading	TokenNameIdentifier
+	TokenNamePLUS
ascent	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
insertWord	TokenNameIdentifier
(	TokenNameLPAREN
WordInfo	TokenNameIdentifier
wi	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
mergeGlyphGroups	TokenNameIdentifier
(	TokenNameLPAREN
wi	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
assignGlyphGroupRanges	TokenNameIdentifier
(	TokenNameLPAREN
newSize	TokenNameIdentifier
,	TokenNameCOMMA
newGGIS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
swapGlyphGroupInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
float	TokenNamefloat
MAX_COMPRESS	TokenNameIdentifier
=	TokenNameEQUAL
0.1f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
float	TokenNamefloat
COMRESS_SCALE	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
boolean	TokenNameboolean
assignGlyphGroupRanges	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ggSz	TokenNameIdentifier
,	TokenNameCOMMA
GlyphGroupInfo	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ggis	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
r	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
r	TokenNameIdentifier
<	TokenNameLESS
numRanges	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
range	TokenNameIdentifier
=	TokenNameEQUAL
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
r	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-	TokenNameMINUS
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
r	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
float	TokenNamefloat
adv	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
float	TokenNamefloat
rangeAdvance	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
ggSz	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
GlyphGroupInfo	TokenNameIdentifier
ggi	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ggi	TokenNameIdentifier
.	TokenNameDOT
setRange	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
adv	TokenNameIdentifier
=	TokenNameEQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getAdvance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
delta	TokenNameIdentifier
=	TokenNameEQUAL
range	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
rangeAdvance	TokenNameIdentifier
+	TokenNamePLUS
adv	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
delta	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
rangeAdvance	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
adv	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ggSz	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
rangeAdvance	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
adv	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
GlyphGroupInfo	TokenNameIdentifier
ggi	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
float	TokenNamefloat
ladv	TokenNameIdentifier
=	TokenNameEQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getLastAdvance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
rangeAdvance	TokenNameIdentifier
+	TokenNamePLUS
ladv	TokenNameIdentifier
>	TokenNameGREATER
range	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
ladv	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
ggi	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
r	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
rangeAdvance	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getAdvance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ladv	TokenNameIdentifier
=	TokenNameEQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getLastAdvance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
rangeAdv	TokenNameIdentifier
[	TokenNameLBRACKET
r	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
rangeAdvance	TokenNameIdentifier
+	TokenNamePLUS
ladv	TokenNameIdentifier
;	TokenNameSEMICOLON
r	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ggSz	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
setLineHeight	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
lh	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fr	TokenNameIdentifier
.	TokenNameDOT
newLineHeight	TokenNameIdentifier
(	TokenNameLPAREN
lh	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
updateRangeInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
lineHeight	TokenNameIdentifier
=	TokenNameEQUAL
lh	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lineHeight	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
fr	TokenNameIdentifier
.	TokenNameDOT
newLineHeight	TokenNameIdentifier
(	TokenNameLPAREN
lineHeight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getCurrentY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fr	TokenNameIdentifier
.	TokenNameDOT
getCurrentY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
gotoY	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
y	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fr	TokenNameIdentifier
.	TokenNameDOT
gotoY	TokenNameIdentifier
(	TokenNameLPAREN
y	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lineHeight	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
updateRangeInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
baseline	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
(	TokenNameLPAREN
fr	TokenNameIdentifier
.	TokenNameDOT
getCurrentY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
hLeading	TokenNameIdentifier
+	TokenNamePLUS
ascent	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
updateRangeInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fr	TokenNameIdentifier
.	TokenNameDOT
resetRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
nr	TokenNameIdentifier
=	TokenNameEQUAL
fr	TokenNameIdentifier
.	TokenNameDOT
getNumRangeOnLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
numRanges	TokenNameIdentifier
=	TokenNameEQUAL
nr	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ranges	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
rangeAdv	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
numRanges	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ranges	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
numRanges	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
numRanges	TokenNameIdentifier
>	TokenNameGREATER
rangeAdv	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
sz	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
rangeAdv	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sz	TokenNameIdentifier
<	TokenNameLESS
numRanges	TokenNameIdentifier
)	TokenNameRPAREN
sz	TokenNameIdentifier
=	TokenNameEQUAL
numRanges	TokenNameIdentifier
;	TokenNameSEMICOLON
rangeAdv	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
sz	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ranges	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
sz	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
r	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
<	TokenNameLESS
numRanges	TokenNameIdentifier
;	TokenNameSEMICOLON
r	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rangeBounds	TokenNameIdentifier
=	TokenNameEQUAL
fr	TokenNameIdentifier
.	TokenNameDOT
nextRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
r0	TokenNameIdentifier
=	TokenNameEQUAL
rangeBounds	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
r	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
delta	TokenNameIdentifier
=	TokenNameEQUAL
bi	TokenNameIdentifier
.	TokenNameDOT
getLeftMargin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
paraStart	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
indent	TokenNameIdentifier
=	TokenNameEQUAL
bi	TokenNameIdentifier
.	TokenNameDOT
getIndent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
delta	TokenNameIdentifier
<	TokenNameLESS
-	TokenNameMINUS
indent	TokenNameIdentifier
)	TokenNameRPAREN
delta	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
delta	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
indent	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
r0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
delta	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
double	TokenNamedouble
r1	TokenNameIdentifier
=	TokenNameEQUAL
rangeBounds	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
r	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
numRanges	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
r1	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
bi	TokenNameIdentifier
.	TokenNameDOT
getRightMargin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
r	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
r0	TokenNameIdentifier
;	TokenNameSEMICOLON
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
r	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
r1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
swapGlyphGroupInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
GlyphGroupInfo	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
;	TokenNameSEMICOLON
ggis	TokenNameIdentifier
=	TokenNameEQUAL
newGGIS	TokenNameIdentifier
;	TokenNameSEMICOLON
newGGIS	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
size	TokenNameIdentifier
=	TokenNameEQUAL
newSize	TokenNameIdentifier
;	TokenNameSEMICOLON
newSize	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
mergeGlyphGroups	TokenNameIdentifier
(	TokenNameLPAREN
WordInfo	TokenNameIdentifier
wi	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numGG	TokenNameIdentifier
=	TokenNameEQUAL
wi	TokenNameIdentifier
.	TokenNameDOT
getNumGlyphGroups	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newSize	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ggis	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
newSize	TokenNameIdentifier
=	TokenNameEQUAL
numGG	TokenNameIdentifier
;	TokenNameSEMICOLON
newGGIS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GlyphGroupInfo	TokenNameIdentifier
[	TokenNameLBRACKET
numGG	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
numGG	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
newGGIS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
wi	TokenNameIdentifier
.	TokenNameDOT
getGlyphGroup	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
s	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
GlyphGroupInfo	TokenNameIdentifier
nggi	TokenNameIdentifier
=	TokenNameEQUAL
wi	TokenNameIdentifier
.	TokenNameDOT
getGlyphGroup	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
nStart	TokenNameIdentifier
=	TokenNameEQUAL
nggi	TokenNameIdentifier
.	TokenNameDOT
getStart	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
GlyphGroupInfo	TokenNameIdentifier
oggi	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
[	TokenNameLBRACKET
size	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
oStart	TokenNameIdentifier
=	TokenNameEQUAL
oggi	TokenNameIdentifier
.	TokenNameDOT
getStart	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newGGIS	TokenNameIdentifier
=	TokenNameEQUAL
assureSize	TokenNameIdentifier
(	TokenNameLPAREN
newGGIS	TokenNameIdentifier
,	TokenNameCOMMA
size	TokenNameIdentifier
+	TokenNamePLUS
numGG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nStart	TokenNameIdentifier
<	TokenNameLESS
oStart	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
oggi	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
[	TokenNameLBRACKET
s	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
oStart	TokenNameIdentifier
=	TokenNameEQUAL
oggi	TokenNameIdentifier
.	TokenNameDOT
getStart	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
s	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
numGG	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nStart	TokenNameIdentifier
<	TokenNameLESS
oStart	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
newGGIS	TokenNameIdentifier
[	TokenNameLBRACKET
newSize	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
nggi	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
numGG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nggi	TokenNameIdentifier
=	TokenNameEQUAL
wi	TokenNameIdentifier
.	TokenNameDOT
getGlyphGroup	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nStart	TokenNameIdentifier
=	TokenNameEQUAL
nggi	TokenNameIdentifier
.	TokenNameDOT
getStart	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
newGGIS	TokenNameIdentifier
[	TokenNameLBRACKET
newSize	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
oggi	TokenNameIdentifier
;	TokenNameSEMICOLON
s	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
s	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
oggi	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
[	TokenNameLBRACKET
s	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
oStart	TokenNameIdentifier
=	TokenNameEQUAL
oggi	TokenNameIdentifier
.	TokenNameDOT
getStart	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
s	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
newGGIS	TokenNameIdentifier
[	TokenNameLBRACKET
newSize	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
ggis	TokenNameIdentifier
[	TokenNameLBRACKET
s	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
numGG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
newGGIS	TokenNameIdentifier
[	TokenNameLBRACKET
newSize	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
wi	TokenNameIdentifier
.	TokenNameDOT
getGlyphGroup	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
layout	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
size	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
assignGlyphGroupRanges	TokenNameIdentifier
(	TokenNameLPAREN
size	TokenNameIdentifier
,	TokenNameCOMMA
ggis	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
GVTGlyphVector	TokenNameIdentifier
gv	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
getGlyphVector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
justType	TokenNameIdentifier
=	TokenNameEQUAL
FULL_WORD	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
ggAdv	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
gAdv	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rangeGG	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
numRanges	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rangeG	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
numRanges	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
GlyphGroupInfo	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rangeLastGGI	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GlyphGroupInfo	TokenNameIdentifier
[	TokenNameLBRACKET
numRanges	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
GlyphGroupInfo	TokenNameIdentifier
ggi	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
r	TokenNameIdentifier
=	TokenNameEQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
rangeGG	TokenNameIdentifier
[	TokenNameLBRACKET
r	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
rangeG	TokenNameIdentifier
[	TokenNameLBRACKET
r	TokenNameIdentifier
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getGlyphCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
ggi	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
r	TokenNameIdentifier
=	TokenNameEQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
rangeLastGGI	TokenNameIdentifier
[	TokenNameLBRACKET
r	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
rangeLastGGI	TokenNameIdentifier
[	TokenNameLBRACKET
r	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
getHideLast	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
rangeGG	TokenNameIdentifier
[	TokenNameLBRACKET
r	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
rangeLastGGI	TokenNameIdentifier
[	TokenNameLBRACKET
r	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
ggi	TokenNameIdentifier
;	TokenNameSEMICOLON
rangeG	TokenNameIdentifier
[	TokenNameLBRACKET
r	TokenNameIdentifier
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getGlyphCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
GlyphGroupInfo	TokenNameIdentifier
pggi	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
pr	TokenNameIdentifier
=	TokenNameEQUAL
pggi	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
r	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
pr	TokenNameIdentifier
)	TokenNameRPAREN
rangeG	TokenNameIdentifier
[	TokenNameLBRACKET
pr	TokenNameIdentifier
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
pggi	TokenNameIdentifier
.	TokenNameDOT
getLastGlyphCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
pggi	TokenNameIdentifier
.	TokenNameDOT
getGlyphCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
rangeG	TokenNameIdentifier
[	TokenNameLBRACKET
r	TokenNameIdentifier
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getLastGlyphCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
ggi	TokenNameIdentifier
.	TokenNameDOT
getGlyphCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
currRange	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
locX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
range	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
rAdv	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ggi	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
GlyphGroupInfo	TokenNameIdentifier
pggi	TokenNameIdentifier
=	TokenNameEQUAL
ggi	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
prevRange	TokenNameIdentifier
=	TokenNameEQUAL
currRange	TokenNameIdentifier
;	TokenNameSEMICOLON
ggi	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
currRange	TokenNameIdentifier
=	TokenNameEQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
currRange	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
prevRange	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
locX	TokenNameIdentifier
=	TokenNameEQUAL
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
currRange	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
range	TokenNameIdentifier
=	TokenNameEQUAL
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
currRange	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-	TokenNameMINUS
locX	TokenNameIdentifier
;	TokenNameSEMICOLON
rAdv	TokenNameIdentifier
=	TokenNameEQUAL
rangeAdv	TokenNameIdentifier
[	TokenNameLBRACKET
currRange	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
textAlign	TokenNameIdentifier
=	TokenNameEQUAL
bi	TokenNameIdentifier
.	TokenNameDOT
getTextAlignment	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
paraEnd	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
textAlign	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
BlockInfo	TokenNameIdentifier
.	TokenNameDOT
ALIGN_FULL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
textAlign	TokenNameIdentifier
=	TokenNameEQUAL
BlockInfo	TokenNameIdentifier
.	TokenNameDOT
ALIGN_START	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
textAlign	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
case	TokenNamecase
BlockInfo	TokenNameIdentifier
.	TokenNameDOT
ALIGN_FULL	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
double	TokenNamedouble
delta	TokenNameIdentifier
=	TokenNameEQUAL
range	TokenNameIdentifier
-	TokenNameMINUS
rAdv	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
justType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
FULL_WORD	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
numSp	TokenNameIdentifier
=	TokenNameEQUAL
rangeGG	TokenNameIdentifier
[	TokenNameLBRACKET
currRange	TokenNameIdentifier
]	TokenNameRBRACKET
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
numSp	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
ggAdv	TokenNameIdentifier
=	TokenNameEQUAL
delta	TokenNameIdentifier
/	TokenNameDIVIDE
numSp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
numSp	TokenNameIdentifier
=	TokenNameEQUAL
rangeG	TokenNameIdentifier
[	TokenNameLBRACKET
currRange	TokenNameIdentifier
]	TokenNameRBRACKET
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
numSp	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
gAdv	TokenNameIdentifier
=	TokenNameEQUAL
delta	TokenNameIdentifier
/	TokenNameDIVIDE
numSp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
BlockInfo	TokenNameIdentifier
.	TokenNameDOT
ALIGN_START	TokenNameIdentifier
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
BlockInfo	TokenNameIdentifier
.	TokenNameDOT
ALIGN_MIDDLE	TokenNameIdentifier
:	TokenNameCOLON
locX	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
range	TokenNameIdentifier
-	TokenNameMINUS
rAdv	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
BlockInfo	TokenNameIdentifier
.	TokenNameDOT
ALIGN_END	TokenNameIdentifier
:	TokenNameCOLON
locX	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
range	TokenNameIdentifier
-	TokenNameMINUS
rAdv	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
pggi	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
&&	TokenNameAND_AND
pggi	TokenNameIdentifier
.	TokenNameDOT
getHideLast	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
gv	TokenNameIdentifier
.	TokenNameDOT
setGlyphVisible	TokenNameIdentifier
(	TokenNameLPAREN
pggi	TokenNameIdentifier
.	TokenNameDOT
getEnd	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
start	TokenNameIdentifier
=	TokenNameEQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getStart	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getEnd	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
hide	TokenNameIdentifier
=	TokenNameEQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getHide	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Point2D	TokenNameIdentifier
p2d	TokenNameIdentifier
=	TokenNameEQUAL
gv	TokenNameIdentifier
.	TokenNameDOT
getGlyphPosition	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
deltaX	TokenNameIdentifier
=	TokenNameEQUAL
p2d	TokenNameIdentifier
.	TokenNameDOT
getX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
advAdj	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
g	TokenNameIdentifier
=	TokenNameEQUAL
start	TokenNameIdentifier
;	TokenNameSEMICOLON
g	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
end	TokenNameIdentifier
;	TokenNameSEMICOLON
g	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
Point2D	TokenNameIdentifier
np2d	TokenNameIdentifier
=	TokenNameEQUAL
gv	TokenNameIdentifier
.	TokenNameDOT
getGlyphPosition	TokenNameIdentifier
(	TokenNameLPAREN
g	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
hide	TokenNameIdentifier
[	TokenNameLBRACKET
g	TokenNameIdentifier
-	TokenNameMINUS
start	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
gv	TokenNameIdentifier
.	TokenNameDOT
setGlyphVisible	TokenNameIdentifier
(	TokenNameLPAREN
g	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
advAdj	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
np2d	TokenNameIdentifier
.	TokenNameDOT
getX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
p2d	TokenNameIdentifier
.	TokenNameDOT
getX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
gv	TokenNameIdentifier
.	TokenNameDOT
setGlyphVisible	TokenNameIdentifier
(	TokenNameLPAREN
g	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
p2d	TokenNameIdentifier
.	TokenNameDOT
setLocation	TokenNameIdentifier
(	TokenNameLPAREN
p2d	TokenNameIdentifier
.	TokenNameDOT
getX	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
deltaX	TokenNameIdentifier
-	TokenNameMINUS
advAdj	TokenNameIdentifier
+	TokenNamePLUS
locX	TokenNameIdentifier
,	TokenNameCOMMA
p2d	TokenNameIdentifier
.	TokenNameDOT
getY	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
baseline	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
gv	TokenNameIdentifier
.	TokenNameDOT
setGlyphPosition	TokenNameIdentifier
(	TokenNameLPAREN
g	TokenNameIdentifier
,	TokenNameCOMMA
p2d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
p2d	TokenNameIdentifier
=	TokenNameEQUAL
np2d	TokenNameIdentifier
;	TokenNameSEMICOLON
advAdj	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
gAdv	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
ggi	TokenNameIdentifier
.	TokenNameDOT
getHideLast	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
locX	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getAdvance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
advAdj	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
locX	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ggi	TokenNameIdentifier
.	TokenNameDOT
getAdvance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
advAdj	TokenNameIdentifier
+	TokenNamePLUS
ggAdv	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
GlyphGroupInfo	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
assureSize	TokenNameIdentifier
(	TokenNameLPAREN
GlyphGroupInfo	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ggis	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
sz	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ggis	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sz	TokenNameIdentifier
<	TokenNameLESS
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
sz	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
GlyphGroupInfo	TokenNameIdentifier
[	TokenNameLBRACKET
sz	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sz	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
ggis	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
ggis	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nsz	TokenNameIdentifier
=	TokenNameEQUAL
ggis	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nsz	TokenNameIdentifier
<	TokenNameLESS
sz	TokenNameIdentifier
)	TokenNameRPAREN
nsz	TokenNameIdentifier
=	TokenNameEQUAL
sz	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
GlyphGroupInfo	TokenNameIdentifier
[	TokenNameLBRACKET
nsz	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
