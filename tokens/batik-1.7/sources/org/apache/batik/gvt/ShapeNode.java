package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
gvt	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Graphics2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
Shape	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Point2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
awt	TokenNameIdentifier
.	TokenNameDOT
geom	TokenNameIdentifier
.	TokenNameDOT
Rectangle2D	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HaltingThread	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
ShapeNode	TokenNameIdentifier
extends	TokenNameextends
AbstractGraphicsNode	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Shape	TokenNameIdentifier
shape	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
ShapePainter	TokenNameIdentifier
shapePainter	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Rectangle2D	TokenNameIdentifier
primitiveBounds	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Rectangle2D	TokenNameIdentifier
geometryBounds	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Rectangle2D	TokenNameIdentifier
sensitiveBounds	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Shape	TokenNameIdentifier
paintedArea	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Shape	TokenNameIdentifier
sensitiveArea	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ShapeNode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setShape	TokenNameIdentifier
(	TokenNameLPAREN
Shape	TokenNameIdentifier
newShape	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fireGraphicsNodeChangeStarted	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invalidateGeometryCache	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
shape	TokenNameIdentifier
=	TokenNameEQUAL
newShape	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
shapePainter	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
newShape	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shapePainter	TokenNameIdentifier
.	TokenNameDOT
setShape	TokenNameIdentifier
(	TokenNameLPAREN
newShape	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shapePainter	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
fireGraphicsNodeChangeCompleted	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Shape	TokenNameIdentifier
getShape	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
shape	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setShapePainter	TokenNameIdentifier
(	TokenNameLPAREN
ShapePainter	TokenNameIdentifier
newShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
shape	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
fireGraphicsNodeChangeStarted	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
invalidateGeometryCache	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
shapePainter	TokenNameIdentifier
=	TokenNameEQUAL
newShapePainter	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
shape	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
this	TokenNamethis
.	TokenNameDOT
shapePainter	TokenNameIdentifier
.	TokenNameDOT
getShape	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
shapePainter	TokenNameIdentifier
.	TokenNameDOT
setShape	TokenNameIdentifier
(	TokenNameLPAREN
shape	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fireGraphicsNodeChangeCompleted	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ShapePainter	TokenNameIdentifier
getShapePainter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
shapePainter	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
paint	TokenNameIdentifier
(	TokenNameLPAREN
Graphics2D	TokenNameIdentifier
g2d	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
isVisible	TokenNameIdentifier
)	TokenNameRPAREN
super	TokenNamesuper
.	TokenNameDOT
paint	TokenNameIdentifier
(	TokenNameLPAREN
g2d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
primitivePaint	TokenNameIdentifier
(	TokenNameLPAREN
Graphics2D	TokenNameIdentifier
g2d	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
shapePainter	TokenNameIdentifier
.	TokenNameDOT
paint	TokenNameIdentifier
(	TokenNameLPAREN
g2d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
invalidateGeometryCache	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
invalidateGeometryCache	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
primitiveBounds	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
geometryBounds	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
sensitiveBounds	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
paintedArea	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
sensitiveArea	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setPointerEventType	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
pointerEventType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
setPointerEventType	TokenNameIdentifier
(	TokenNameLPAREN
pointerEventType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sensitiveBounds	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
sensitiveArea	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
contains	TokenNameIdentifier
(	TokenNameLPAREN
Point2D	TokenNameIdentifier
p	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
pointerEventType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
VISIBLE_PAINTED	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
VISIBLE_FILL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
VISIBLE_STROKE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
VISIBLE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isVisible	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
case	TokenNamecase
PAINTED	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
FILL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
STROKE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ALL	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
Rectangle2D	TokenNameIdentifier
b	TokenNameIdentifier
=	TokenNameEQUAL
getSensitiveBounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
b	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
!	TokenNameNOT
b	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
p	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
inSensitiveArea	TokenNameIdentifier
(	TokenNameLPAREN
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
NONE	TokenNameIdentifier
:	TokenNameCOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
intersects	TokenNameIdentifier
(	TokenNameLPAREN
Rectangle2D	TokenNameIdentifier
r	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Rectangle2D	TokenNameIdentifier
b	TokenNameIdentifier
=	TokenNameEQUAL
getBounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
b	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
b	TokenNameIdentifier
.	TokenNameDOT
intersects	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
paintedArea	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
paintedArea	TokenNameIdentifier
.	TokenNameDOT
intersects	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Rectangle2D	TokenNameIdentifier
getPrimitiveBounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isVisible	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
shape	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
primitiveBounds	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
primitiveBounds	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
primitiveBounds	TokenNameIdentifier
=	TokenNameEQUAL
shape	TokenNameIdentifier
.	TokenNameDOT
getBounds2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
primitiveBounds	TokenNameIdentifier
=	TokenNameEQUAL
shapePainter	TokenNameIdentifier
.	TokenNameDOT
getPaintedBounds2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
HaltingThread	TokenNameIdentifier
.	TokenNameDOT
hasBeenHalted	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
invalidateGeometryCache	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
primitiveBounds	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
inSensitiveArea	TokenNameIdentifier
(	TokenNameLPAREN
Point2D	TokenNameIdentifier
pt	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
ShapePainter	TokenNameIdentifier
strokeShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
ShapePainter	TokenNameIdentifier
fillShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
instanceof	TokenNameinstanceof
StrokeShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
strokeShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
shapePainter	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
instanceof	TokenNameinstanceof
FillShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fillShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
shapePainter	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
instanceof	TokenNameinstanceof
CompositeShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
CompositeShapePainter	TokenNameIdentifier
cp	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
CompositeShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
shapePainter	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
cp	TokenNameIdentifier
.	TokenNameDOT
getShapePainterCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ShapePainter	TokenNameIdentifier
sp	TokenNameIdentifier
=	TokenNameEQUAL
cp	TokenNameIdentifier
.	TokenNameDOT
getShapePainter	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sp	TokenNameIdentifier
instanceof	TokenNameinstanceof
StrokeShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
strokeShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sp	TokenNameIdentifier
instanceof	TokenNameinstanceof
FillShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fillShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
pointerEventType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
VISIBLE_PAINTED	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
PAINTED	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
shapePainter	TokenNameIdentifier
.	TokenNameDOT
inPaintedArea	TokenNameIdentifier
(	TokenNameLPAREN
pt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
VISIBLE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ALL	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
shapePainter	TokenNameIdentifier
.	TokenNameDOT
inSensitiveArea	TokenNameIdentifier
(	TokenNameLPAREN
pt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
VISIBLE_FILL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
FILL	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
fillShapePainter	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
fillShapePainter	TokenNameIdentifier
.	TokenNameDOT
inSensitiveArea	TokenNameIdentifier
(	TokenNameLPAREN
pt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
VISIBLE_STROKE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
STROKE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
strokeShapePainter	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
strokeShapePainter	TokenNameIdentifier
.	TokenNameDOT
inSensitiveArea	TokenNameIdentifier
(	TokenNameLPAREN
pt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
NONE	TokenNameIdentifier
:	TokenNameCOLON
default	TokenNamedefault
:	TokenNameCOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Rectangle2D	TokenNameIdentifier
getSensitiveBounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sensitiveBounds	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
sensitiveBounds	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
ShapePainter	TokenNameIdentifier
strokeShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
ShapePainter	TokenNameIdentifier
fillShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
instanceof	TokenNameinstanceof
StrokeShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
strokeShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
shapePainter	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
instanceof	TokenNameinstanceof
FillShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fillShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
shapePainter	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
instanceof	TokenNameinstanceof
CompositeShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
CompositeShapePainter	TokenNameIdentifier
cp	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
CompositeShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
shapePainter	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
cp	TokenNameIdentifier
.	TokenNameDOT
getShapePainterCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ShapePainter	TokenNameIdentifier
sp	TokenNameIdentifier
=	TokenNameEQUAL
cp	TokenNameIdentifier
.	TokenNameDOT
getShapePainter	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sp	TokenNameIdentifier
instanceof	TokenNameinstanceof
StrokeShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
strokeShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sp	TokenNameIdentifier
instanceof	TokenNameinstanceof
FillShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fillShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
pointerEventType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
VISIBLE_PAINTED	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
PAINTED	TokenNameIdentifier
:	TokenNameCOLON
sensitiveBounds	TokenNameIdentifier
=	TokenNameEQUAL
shapePainter	TokenNameIdentifier
.	TokenNameDOT
getPaintedBounds2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
VISIBLE_FILL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
FILL	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
fillShapePainter	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sensitiveBounds	TokenNameIdentifier
=	TokenNameEQUAL
fillShapePainter	TokenNameIdentifier
.	TokenNameDOT
getSensitiveBounds2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
VISIBLE_STROKE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
STROKE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
strokeShapePainter	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sensitiveBounds	TokenNameIdentifier
=	TokenNameEQUAL
strokeShapePainter	TokenNameIdentifier
.	TokenNameDOT
getSensitiveBounds2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
VISIBLE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ALL	TokenNameIdentifier
:	TokenNameCOLON
sensitiveBounds	TokenNameIdentifier
=	TokenNameEQUAL
shapePainter	TokenNameIdentifier
.	TokenNameDOT
getSensitiveBounds2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
NONE	TokenNameIdentifier
:	TokenNameCOLON
default	TokenNamedefault
:	TokenNameCOLON
}	TokenNameRBRACE
return	TokenNamereturn
sensitiveBounds	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Shape	TokenNameIdentifier
getSensitiveArea	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sensitiveArea	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
sensitiveArea	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
ShapePainter	TokenNameIdentifier
strokeShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
ShapePainter	TokenNameIdentifier
fillShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
instanceof	TokenNameinstanceof
StrokeShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
strokeShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
shapePainter	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
instanceof	TokenNameinstanceof
FillShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fillShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
shapePainter	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
shapePainter	TokenNameIdentifier
instanceof	TokenNameinstanceof
CompositeShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
CompositeShapePainter	TokenNameIdentifier
cp	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
CompositeShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
shapePainter	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
cp	TokenNameIdentifier
.	TokenNameDOT
getShapePainterCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ShapePainter	TokenNameIdentifier
sp	TokenNameIdentifier
=	TokenNameEQUAL
cp	TokenNameIdentifier
.	TokenNameDOT
getShapePainter	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sp	TokenNameIdentifier
instanceof	TokenNameinstanceof
StrokeShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
strokeShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sp	TokenNameIdentifier
instanceof	TokenNameinstanceof
FillShapePainter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fillShapePainter	TokenNameIdentifier
=	TokenNameEQUAL
sp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
pointerEventType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
VISIBLE_PAINTED	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
PAINTED	TokenNameIdentifier
:	TokenNameCOLON
sensitiveArea	TokenNameIdentifier
=	TokenNameEQUAL
shapePainter	TokenNameIdentifier
.	TokenNameDOT
getPaintedArea	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
VISIBLE_FILL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
FILL	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
fillShapePainter	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sensitiveArea	TokenNameIdentifier
=	TokenNameEQUAL
fillShapePainter	TokenNameIdentifier
.	TokenNameDOT
getSensitiveArea	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
VISIBLE_STROKE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
STROKE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
strokeShapePainter	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sensitiveArea	TokenNameIdentifier
=	TokenNameEQUAL
strokeShapePainter	TokenNameIdentifier
.	TokenNameDOT
getSensitiveArea	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
VISIBLE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ALL	TokenNameIdentifier
:	TokenNameCOLON
sensitiveArea	TokenNameIdentifier
=	TokenNameEQUAL
shapePainter	TokenNameIdentifier
.	TokenNameDOT
getSensitiveArea	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
NONE	TokenNameIdentifier
:	TokenNameCOLON
default	TokenNamedefault
:	TokenNameCOLON
}	TokenNameRBRACE
return	TokenNamereturn
sensitiveArea	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Rectangle2D	TokenNameIdentifier
getGeometryBounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
geometryBounds	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
shape	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
geometryBounds	TokenNameIdentifier
=	TokenNameEQUAL
normalizeRectangle	TokenNameIdentifier
(	TokenNameLPAREN
shape	TokenNameIdentifier
.	TokenNameDOT
getBounds2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
geometryBounds	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Shape	TokenNameIdentifier
getOutline	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
shape	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
