package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
abstract	TokenNameabstract
class	TokenNameclass
NumberParser	TokenNameIdentifier
extends	TokenNameextends
AbstractParser	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
float	TokenNamefloat
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
mant	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
mantDig	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
mantPos	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
boolean	TokenNameboolean
mantRead	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
exp	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
expDig	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
expAdj	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expPos	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
mantPos	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m1	TokenNameIdentifier
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
reportUnexpectedCharacterError	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
0.0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
mantRead	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
l	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
l	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'e'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'E'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
m1	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
0.0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
mantRead	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
l	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
mantDig	TokenNameIdentifier
<	TokenNameLESS
9	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
mantDig	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
mant	TokenNameIdentifier
=	TokenNameEQUAL
mant	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
current	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
expAdj	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
l	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m2	TokenNameIdentifier
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
case	TokenNamecase
'e'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'E'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
mantRead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportUnexpectedCharacterError	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
0.0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
mantDig	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
l	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expAdj	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
l	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
mantRead	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
0.0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
m2	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
l	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
mantDig	TokenNameIdentifier
<	TokenNameLESS
9	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
mantDig	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
mant	TokenNameIdentifier
=	TokenNameEQUAL
mant	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
current	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expAdj	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
l	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'e'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'E'	TokenNameCharacterLiteral
:	TokenNameCOLON
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
reportUnexpectedCharacterError	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
expPos	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
reportUnexpectedCharacterError	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
}	TokenNameRBRACE
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
}	TokenNameRBRACE
en	TokenNameIdentifier
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
l	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
l	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
en	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
l	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
expDig	TokenNameIdentifier
<	TokenNameLESS
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
expDig	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
exp	TokenNameIdentifier
=	TokenNameEQUAL
exp	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
current	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
l	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
default	TokenNamedefault
:	TokenNameCOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
expPos	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
exp	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
exp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
exp	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
expAdj	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
mantPos	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
mant	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
mant	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
buildFloat	TokenNameIdentifier
(	TokenNameLPAREN
mant	TokenNameIdentifier
,	TokenNameCOMMA
exp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
float	TokenNamefloat
buildFloat	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
mant	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
exp	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
exp	TokenNameIdentifier
<	TokenNameLESS
-	TokenNameMINUS
125	TokenNameIntegerLiteral
||	TokenNameOR_OR
mant	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
0.0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
exp	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
128	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
mant	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
Float	TokenNameIdentifier
.	TokenNameDOT
POSITIVE_INFINITY	TokenNameIdentifier
:	TokenNameCOLON
Float	TokenNameIdentifier
.	TokenNameDOT
NEGATIVE_INFINITY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
exp	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
mant	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
mant	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
26	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
mant	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
exp	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
mant	TokenNameIdentifier
*	TokenNameMULTIPLY
pow10	TokenNameIdentifier
[	TokenNameLBRACKET
exp	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
mant	TokenNameIdentifier
/	TokenNameDIVIDE
pow10	TokenNameIdentifier
[	TokenNameLBRACKET
-	TokenNameMINUS
exp	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
pow10	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
128	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
pow10	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
pow10	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
pow	TokenNameIdentifier
(	TokenNameLPAREN
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
