package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
batik	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
PathParser	TokenNameIdentifier
extends	TokenNameextends
NumberParser	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
PathHandler	TokenNameIdentifier
pathHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
PathParser	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
pathHandler	TokenNameIdentifier
=	TokenNameEQUAL
DefaultPathHandler	TokenNameIdentifier
.	TokenNameDOT
INSTANCE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setPathHandler	TokenNameIdentifier
(	TokenNameLPAREN
PathHandler	TokenNameIdentifier
handler	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
pathHandler	TokenNameIdentifier
=	TokenNameEQUAL
handler	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
PathHandler	TokenNameIdentifier
getPathHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
pathHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
doParse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
pathHandler	TokenNameIdentifier
.	TokenNameDOT
startPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
0xD	TokenNameIntegerLiteral
:	TokenNameCOLON
case	TokenNamecase
0xA	TokenNameIntegerLiteral
:	TokenNameCOLON
case	TokenNamecase
0x20	TokenNameIntegerLiteral
:	TokenNameCOLON
case	TokenNamecase
0x9	TokenNameIntegerLiteral
:	TokenNameCOLON
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'z'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Z'	TokenNameCharacterLiteral
:	TokenNameCOLON
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
closePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'm'	TokenNameCharacterLiteral
:	TokenNameCOLON
parsem	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'M'	TokenNameCharacterLiteral
:	TokenNameCOLON
parseM	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'l'	TokenNameCharacterLiteral
:	TokenNameCOLON
parsel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'L'	TokenNameCharacterLiteral
:	TokenNameCOLON
parseL	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'h'	TokenNameCharacterLiteral
:	TokenNameCOLON
parseh	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'H'	TokenNameCharacterLiteral
:	TokenNameCOLON
parseH	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'v'	TokenNameCharacterLiteral
:	TokenNameCOLON
parsev	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'V'	TokenNameCharacterLiteral
:	TokenNameCOLON
parseV	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'c'	TokenNameCharacterLiteral
:	TokenNameCOLON
parsec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'C'	TokenNameCharacterLiteral
:	TokenNameCOLON
parseC	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'q'	TokenNameCharacterLiteral
:	TokenNameCOLON
parseq	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Q'	TokenNameCharacterLiteral
:	TokenNameCOLON
parseQ	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
's'	TokenNameCharacterLiteral
:	TokenNameCOLON
parses	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'S'	TokenNameCharacterLiteral
:	TokenNameCOLON
parseS	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
't'	TokenNameCharacterLiteral
:	TokenNameCOLON
parset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'T'	TokenNameCharacterLiteral
:	TokenNameCOLON
parseT	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'a'	TokenNameCharacterLiteral
:	TokenNameCOLON
parsea	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'A'	TokenNameCharacterLiteral
:	TokenNameCOLON
parseA	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
break	TokenNamebreak
loop	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ParseException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
errorHandler	TokenNameIdentifier
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSubPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
reportError	TokenNameIdentifier
(	TokenNameLPAREN
"end.of.stream.expected"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pathHandler	TokenNameIdentifier
.	TokenNameDOT
endPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parsem	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
movetoRel	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
_parsel	TokenNameIdentifier
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseM	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
movetoAbs	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
_parseL	TokenNameIdentifier
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parsel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
_parsel	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
_parsel	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
linetoRel	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseL	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
_parseL	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
_parseL	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
linetoAbs	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseh	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
linetoHorizontalRel	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseH	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
linetoHorizontalAbs	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parsev	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
linetoVerticalRel	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseV	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
linetoVerticalAbs	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parsec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x1	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y1	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
x2	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y2	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
curvetoCubicRel	TokenNameIdentifier
(	TokenNameLPAREN
x1	TokenNameIdentifier
,	TokenNameCOMMA
y1	TokenNameIdentifier
,	TokenNameCOMMA
x2	TokenNameIdentifier
,	TokenNameCOMMA
y2	TokenNameIdentifier
,	TokenNameCOMMA
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseC	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x1	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y1	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
x2	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y2	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
curvetoCubicAbs	TokenNameIdentifier
(	TokenNameLPAREN
x1	TokenNameIdentifier
,	TokenNameCOMMA
y1	TokenNameIdentifier
,	TokenNameCOMMA
x2	TokenNameIdentifier
,	TokenNameCOMMA
y2	TokenNameIdentifier
,	TokenNameCOMMA
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseq	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x1	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y1	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
curvetoQuadraticRel	TokenNameIdentifier
(	TokenNameLPAREN
x1	TokenNameIdentifier
,	TokenNameCOMMA
y1	TokenNameIdentifier
,	TokenNameCOMMA
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseQ	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x1	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y1	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
curvetoQuadraticAbs	TokenNameIdentifier
(	TokenNameLPAREN
x1	TokenNameIdentifier
,	TokenNameCOMMA
y1	TokenNameIdentifier
,	TokenNameCOMMA
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parses	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x2	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y2	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
curvetoCubicSmoothRel	TokenNameIdentifier
(	TokenNameLPAREN
x2	TokenNameIdentifier
,	TokenNameCOMMA
y2	TokenNameIdentifier
,	TokenNameCOMMA
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseS	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x2	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y2	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
curvetoCubicSmoothAbs	TokenNameIdentifier
(	TokenNameLPAREN
x2	TokenNameIdentifier
,	TokenNameCOMMA
y2	TokenNameIdentifier
,	TokenNameCOMMA
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
curvetoQuadraticSmoothRel	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseT	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
curvetoQuadraticSmoothAbs	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parsea	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
rx	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
ry	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
ax	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
laf	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
laf	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
laf	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
sf	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
sf	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
sf	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
arcRel	TokenNameIdentifier
(	TokenNameLPAREN
rx	TokenNameIdentifier
,	TokenNameCOMMA
ry	TokenNameIdentifier
,	TokenNameCOMMA
ax	TokenNameIdentifier
,	TokenNameCOMMA
laf	TokenNameIdentifier
,	TokenNameCOMMA
sf	TokenNameIdentifier
,	TokenNameCOMMA
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseA	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
expectNumber	TokenNameIdentifier
)	TokenNameRPAREN
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'2'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'3'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'4'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'5'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'6'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'7'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'8'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'9'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
float	TokenNamefloat
rx	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
ry	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
ax	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
laf	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
laf	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
laf	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
sf	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
'0'	TokenNameCharacterLiteral
:	TokenNameCOLON
sf	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'1'	TokenNameCharacterLiteral
:	TokenNameCOLON
sf	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
x	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipCommaSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
float	TokenNamefloat
y	TokenNameIdentifier
=	TokenNameEQUAL
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pathHandler	TokenNameIdentifier
.	TokenNameDOT
arcAbs	TokenNameIdentifier
(	TokenNameLPAREN
rx	TokenNameIdentifier
,	TokenNameCOMMA
ry	TokenNameIdentifier
,	TokenNameCOMMA
ax	TokenNameIdentifier
,	TokenNameCOMMA
laf	TokenNameIdentifier
,	TokenNameCOMMA
sf	TokenNameIdentifier
,	TokenNameCOMMA
x	TokenNameIdentifier
,	TokenNameCOMMA
y	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectNumber	TokenNameIdentifier
=	TokenNameEQUAL
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
skipSubPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
case	TokenNamecase
'm'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'M'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
reportUnexpected	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ch	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
reportUnexpectedCharacterError	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skipSubPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
skipCommaSpaces2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
wsp1	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
wsp1	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
0x20	TokenNameIntegerLiteral
:	TokenNameCOLON
case	TokenNamecase
0x9	TokenNameIntegerLiteral
:	TokenNameCOLON
case	TokenNamecase
0xD	TokenNameIntegerLiteral
:	TokenNameCOLON
case	TokenNamecase
0xA	TokenNameIntegerLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
wsp2	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
current	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
wsp2	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
0x20	TokenNameIntegerLiteral
:	TokenNameCOLON
case	TokenNamecase
0x9	TokenNameIntegerLiteral
:	TokenNameCOLON
case	TokenNamecase
0xD	TokenNameIntegerLiteral
:	TokenNameCOLON
case	TokenNamecase
0xA	TokenNameIntegerLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
