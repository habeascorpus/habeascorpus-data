package	TokenNamepackage
xni	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Enumeration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Stack	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Vector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
DocumentImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
Constants	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
SchemaSymbols	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
DOMUtil	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
NamespaceSupport	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
XMLAttributesImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
XMLSymbols	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
Augmentations	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
NamespaceContext	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
QName	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XMLAttributes	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XMLDocumentHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XMLLocator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XMLResourceIdentifier	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XMLString	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XNIException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLComponent	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLComponentManager	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLConfigurationException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLDocumentFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLDocumentSource	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
AttributePSVI	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
ElementPSVI	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
ItemPSVI	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
StringList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSAnnotation	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSAttributeDeclaration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSAttributeGroupDefinition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSAttributeUse	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSComplexTypeDefinition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSConstants	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSElementDeclaration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSFacet	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSIDCDefinition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSModelGroup	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSModelGroupDefinition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSMultiValueFacet	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSNamedMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSNamespaceItem	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSNamespaceItemList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSNotationDeclaration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSObject	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSObjectList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSParticle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSSimpleTypeDefinition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSTypeDefinition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSWildcard	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Attr	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Element	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Node	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXNotRecognizedException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXNotSupportedException	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
PSVIWriter	TokenNameIdentifier
implements	TokenNameimplements
XMLComponent	TokenNameIdentifier
,	TokenNameCOMMA
XMLDocumentFilter	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
XERCES_PSVI_NS	TokenNameIdentifier
=	TokenNameEQUAL
"http://apache.org/xml/2001/PSVInfosetExtension"	TokenNameStringLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
PSVINFOSET	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
SCHEMA_AUGMENT_PSVI	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
INCLUDE_IGNORABLE_WHITESPACE	TokenNameIdentifier
=	TokenNameEQUAL
"http://apache.org/xml/features/dom/include-ignorable-whitespace"	TokenNameStringLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
boolean	TokenNameboolean
fIncludeIgnorableWhitespace	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
RECOGNIZED_FEATURES	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
INCLUDE_IGNORABLE_WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
PSVINFOSET	TokenNameIdentifier
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Boolean	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FEATURE_DEFAULTS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
RECOGNIZED_PROPERTIES	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
PROPERTY_DEFAULTS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
protected	TokenNameprotected
boolean	TokenNameboolean
fPSVInfoset	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
XMLDocumentHandler	TokenNameIdentifier
fDocumentHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
XMLDocumentSource	TokenNameIdentifier
fDocumentSource	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
NamespaceContext	TokenNameIdentifier
fNamespaceContext	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
NamespaceContext	TokenNameIdentifier
fPSVINamespaceContext	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
XMLLocator	TokenNameIdentifier
fDocumentLocation	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Stack	TokenNameIdentifier
_elementState	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Stack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
fAnonNum	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
fIndent	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
HashMap	TokenNameIdentifier
fIDMap	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Vector	TokenNameIdentifier
fDefined	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fIndentChars	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
'\t'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\t'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\t'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\t'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\t'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\t'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\t'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\t'	TokenNameCharacterLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
XMLString	TokenNameIdentifier
newLine	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLString	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
'\n'	TokenNameCharacterLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
PSVIWriter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
XMLComponentManager	TokenNameIdentifier
componentManager	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
fPSVInfoset	TokenNameIdentifier
=	TokenNameEQUAL
componentManager	TokenNameIdentifier
.	TokenNameDOT
getFeature	TokenNameIdentifier
(	TokenNameLPAREN
PSVINFOSET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fPSVInfoset	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fIncludeIgnorableWhitespace	TokenNameIdentifier
=	TokenNameEQUAL
componentManager	TokenNameIdentifier
.	TokenNameDOT
getFeature	TokenNameIdentifier
(	TokenNameLPAREN
INCLUDE_IGNORABLE_WHITESPACE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAnonNum	TokenNameIdentifier
=	TokenNameEQUAL
1000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fIDMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fDefined	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fIndent	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fPSVINamespaceContext	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NamespaceSupport	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getRecognizedFeatures	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
RECOGNIZED_FEATURES	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setFeature	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
featureId	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
state	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XMLConfigurationException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getRecognizedProperties	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
RECOGNIZED_PROPERTIES	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
propertyId	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
value	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XMLConfigurationException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
Boolean	TokenNameIdentifier
getFeatureDefault	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
featureId	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
RECOGNIZED_FEATURES	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
RECOGNIZED_FEATURES	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
featureId	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
FEATURE_DEFAULTS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
getPropertyDefault	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
propertyId	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
RECOGNIZED_PROPERTIES	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
RECOGNIZED_PROPERTIES	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
propertyId	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
PROPERTY_DEFAULTS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setDocumentHandler	TokenNameIdentifier
(	TokenNameLPAREN
XMLDocumentHandler	TokenNameIdentifier
documentHandler	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fDocumentHandler	TokenNameIdentifier
=	TokenNameEQUAL
documentHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XMLDocumentHandler	TokenNameIdentifier
getDocumentHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fDocumentHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setDocumentSource	TokenNameIdentifier
(	TokenNameLPAREN
XMLDocumentSource	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fDocumentSource	TokenNameIdentifier
=	TokenNameEQUAL
source	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XMLDocumentSource	TokenNameIdentifier
getDocumentSource	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fDocumentSource	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startGeneralEntity	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
XMLResourceIdentifier	TokenNameIdentifier
identifier	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
encoding	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
textDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
version	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
encoding	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startDocument	TokenNameIdentifier
(	TokenNameLPAREN
XMLLocator	TokenNameIdentifier
locator	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
encoding	TokenNameIdentifier
,	TokenNameCOMMA
NamespaceContext	TokenNameIdentifier
namespaceContext	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
fNamespaceContext	TokenNameIdentifier
=	TokenNameEQUAL
namespaceContext	TokenNameIdentifier
;	TokenNameSEMICOLON
fDocumentLocation	TokenNameIdentifier
=	TokenNameEQUAL
locator	TokenNameIdentifier
;	TokenNameSEMICOLON
fPSVINamespaceContext	TokenNameIdentifier
.	TokenNameDOT
declarePrefix	TokenNameIdentifier
(	TokenNameLPAREN
"xsi"	TokenNameStringLiteral
,	TokenNameCOMMA
"http://www.w3.org/2001/XMLSchema-instance"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fPSVINamespaceContext	TokenNameIdentifier
.	TokenNameDOT
declarePrefix	TokenNameIdentifier
(	TokenNameLPAREN
"psv"	TokenNameStringLiteral
,	TokenNameCOMMA
XERCES_PSVI_NS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fPSVINamespaceContext	TokenNameIdentifier
.	TokenNameDOT
declarePrefix	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
"http://www.w3.org/2001/05/XMLInfoset"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fDocumentHandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
fDocumentHandler	TokenNameIdentifier
.	TokenNameDOT
startDocument	TokenNameIdentifier
(	TokenNameLPAREN
locator	TokenNameIdentifier
,	TokenNameCOMMA
"UTF-8"	TokenNameStringLiteral
,	TokenNameCOMMA
fPSVINamespaceContext	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
attributes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"xmlns:xsi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"http://www.w3.org/2001/XMLSchema-instance"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
fCDATASymbol	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"xmlns:psv"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
XERCES_PSVI_NS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
fCDATASymbol	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"xmlns"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"http://www.w3.org/2001/05/XMLInfoset"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
fCDATASymbol	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"document"	TokenNameStringLiteral
,	TokenNameCOMMA
attributes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
xmlDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
version	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
encoding	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
standalone	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fDocumentHandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"characterEncodingScheme"	TokenNameStringLiteral
,	TokenNameCOMMA
encoding	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"standalone"	TokenNameStringLiteral
,	TokenNameCOMMA
standalone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"version"	TokenNameStringLiteral
,	TokenNameCOMMA
version	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
doctypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
rootElement	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
publicId	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
systemId	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fDocumentHandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
checkForChildren	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"docTypeDeclaration"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
publicId	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"publicIdentifier"	TokenNameStringLiteral
,	TokenNameCOMMA
publicId	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
systemId	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"systemIdentifier"	TokenNameStringLiteral
,	TokenNameCOMMA
systemId	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"docTypeDeclaration"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
comment	TokenNameIdentifier
(	TokenNameLPAREN
XMLString	TokenNameIdentifier
text	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fDocumentHandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
checkForChildren	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"comment"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"content"	TokenNameStringLiteral
,	TokenNameCOMMA
text	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"comment"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
processingInstruction	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
target	TokenNameIdentifier
,	TokenNameCOMMA
XMLString	TokenNameIdentifier
data	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fDocumentHandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
checkForChildren	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"processingInstruction"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"target"	TokenNameStringLiteral
,	TokenNameCOMMA
target	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"content"	TokenNameStringLiteral
,	TokenNameCOMMA
data	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"processingInstruction"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startElement	TokenNameIdentifier
(	TokenNameLPAREN
QName	TokenNameIdentifier
element	TokenNameIdentifier
,	TokenNameCOMMA
XMLAttributes	TokenNameIdentifier
attributes	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fDocumentHandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
checkForChildren	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
_elementState	TokenNameIdentifier
.	TokenNameDOT
push	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
ElementState	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"element"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceName"	TokenNameStringLiteral
,	TokenNameCOMMA
element	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"localName"	TokenNameStringLiteral
,	TokenNameCOMMA
element	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"prefix"	TokenNameStringLiteral
,	TokenNameCOMMA
element	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processAttributes	TokenNameIdentifier
(	TokenNameLPAREN
attributes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processInScopeNamespaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"baseURI"	TokenNameStringLiteral
,	TokenNameCOMMA
fDocumentLocation	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fPSVInfoset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIStartElement	TokenNameIdentifier
(	TokenNameLPAREN
augs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
emptyElement	TokenNameIdentifier
(	TokenNameLPAREN
QName	TokenNameIdentifier
element	TokenNameIdentifier
,	TokenNameCOMMA
XMLAttributes	TokenNameIdentifier
attributes	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fDocumentHandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
checkForChildren	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"element"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceName"	TokenNameStringLiteral
,	TokenNameCOMMA
element	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"localName"	TokenNameStringLiteral
,	TokenNameCOMMA
element	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"prefix"	TokenNameStringLiteral
,	TokenNameCOMMA
element	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processAttributes	TokenNameIdentifier
(	TokenNameLPAREN
attributes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processInScopeNamespaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"baseURI"	TokenNameStringLiteral
,	TokenNameCOMMA
fDocumentLocation	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fPSVInfoset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIStartElement	TokenNameIdentifier
(	TokenNameLPAREN
augs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"children"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fPSVInfoset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIEndElement	TokenNameIdentifier
(	TokenNameLPAREN
augs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"element"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
characters	TokenNameIdentifier
(	TokenNameLPAREN
XMLString	TokenNameIdentifier
text	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fDocumentHandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
checkForChildren	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"character"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"textContent"	TokenNameStringLiteral
,	TokenNameCOMMA
text	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"character"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
ignorableWhitespace	TokenNameIdentifier
(	TokenNameLPAREN
XMLString	TokenNameIdentifier
text	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fDocumentHandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fIncludeIgnorableWhitespace	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
characters	TokenNameIdentifier
(	TokenNameLPAREN
text	TokenNameIdentifier
,	TokenNameCOMMA
augs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endElement	TokenNameIdentifier
(	TokenNameLPAREN
QName	TokenNameIdentifier
element	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fDocumentHandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
ElementState	TokenNameIdentifier
fElementState	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ElementState	TokenNameIdentifier
)	TokenNameRPAREN
_elementState	TokenNameIdentifier
.	TokenNameDOT
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fElementState	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"children"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"children"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
_elementState	TokenNameIdentifier
.	TokenNameDOT
pop	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fPSVInfoset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIStartElement	TokenNameIdentifier
(	TokenNameLPAREN
augs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIEndElement	TokenNameIdentifier
(	TokenNameLPAREN
augs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"element"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startCDATA	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endCDATA	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endDocument	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fDocumentHandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"children"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"documentElement"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"notations"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"unparsedEntities"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"baseURI"	TokenNameStringLiteral
,	TokenNameCOMMA
fDocumentLocation	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"allDeclarationsProcessed"	TokenNameStringLiteral
,	TokenNameCOMMA
"true"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"document"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fDocumentHandler	TokenNameIdentifier
.	TokenNameDOT
endDocument	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endGeneralEntity	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processAttributes	TokenNameIdentifier
(	TokenNameLPAREN
XMLAttributes	TokenNameIdentifier
attributes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
namespaceAttribute	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
boolean	TokenNameboolean
attrElement	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
attrCount	TokenNameIdentifier
=	TokenNameEQUAL
attributes	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
attrCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"attributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceAttributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
attrCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
localpart	TokenNameIdentifier
=	TokenNameEQUAL
attributes	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
attributes	TokenNameIdentifier
.	TokenNameDOT
getPrefix	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
prefix	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
PREFIX_XMLNS	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
localpart	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
PREFIX_XMLNS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
namespaceAttribute	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
attrElement	TokenNameIdentifier
)	TokenNameRPAREN
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"attributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"attribute"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceName"	TokenNameStringLiteral
,	TokenNameCOMMA
attributes	TokenNameIdentifier
.	TokenNameDOT
getURI	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"localName"	TokenNameStringLiteral
,	TokenNameCOMMA
attributes	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"prefix"	TokenNameStringLiteral
,	TokenNameCOMMA
attributes	TokenNameIdentifier
.	TokenNameDOT
getPrefix	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"normalizedValue"	TokenNameStringLiteral
,	TokenNameCOMMA
attributes	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"specified"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
attributes	TokenNameIdentifier
.	TokenNameDOT
isSpecified	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"attributeType"	TokenNameStringLiteral
,	TokenNameCOMMA
attributes	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"references"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fPSVInfoset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIAttribute	TokenNameIdentifier
(	TokenNameLPAREN
attributes	TokenNameIdentifier
.	TokenNameDOT
getAugmentations	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"attribute"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attrElement	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
attrElement	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"attributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"attributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
namespaceAttribute	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
processNamespaceAttributes	TokenNameIdentifier
(	TokenNameLPAREN
attributes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceAttributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processNamespaceAttributes	TokenNameIdentifier
(	TokenNameLPAREN
XMLAttributes	TokenNameIdentifier
attributes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
attrCount	TokenNameIdentifier
=	TokenNameEQUAL
attributes	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceAttributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
attrCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
localpart	TokenNameIdentifier
=	TokenNameEQUAL
attributes	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
attributes	TokenNameIdentifier
.	TokenNameDOT
getPrefix	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
prefix	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
PREFIX_XMLNS	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
localpart	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
PREFIX_XMLNS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
continue	TokenNamecontinue
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"attribute"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceName"	TokenNameStringLiteral
,	TokenNameCOMMA
NamespaceContext	TokenNameIdentifier
.	TokenNameDOT
XMLNS_URI	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"localName"	TokenNameStringLiteral
,	TokenNameCOMMA
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"prefix"	TokenNameStringLiteral
,	TokenNameCOMMA
prefix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"normalizedValue"	TokenNameStringLiteral
,	TokenNameCOMMA
attributes	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"specified"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
attributes	TokenNameIdentifier
.	TokenNameDOT
isSpecified	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"attributeType"	TokenNameStringLiteral
,	TokenNameCOMMA
attributes	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"references"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fPSVInfoset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIAttribute	TokenNameIdentifier
(	TokenNameLPAREN
attributes	TokenNameIdentifier
.	TokenNameDOT
getAugmentations	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"attribute"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceAttributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processInScopeNamespaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"inScopeNamespaces"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"namespace"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"prefix"	TokenNameStringLiteral
,	TokenNameCOMMA
"xml"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceName"	TokenNameStringLiteral
,	TokenNameCOMMA
NamespaceContext	TokenNameIdentifier
.	TokenNameDOT
XML_URI	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"namespace"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Enumeration	TokenNameIdentifier
prefixes	TokenNameIdentifier
=	TokenNameEQUAL
fNamespaceContext	TokenNameIdentifier
.	TokenNameDOT
getAllPrefixes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
prefixes	TokenNameIdentifier
.	TokenNameDOT
hasMoreElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"namespace"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
prefixes	TokenNameIdentifier
.	TokenNameDOT
nextElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
uri	TokenNameIdentifier
=	TokenNameEQUAL
fNamespaceContext	TokenNameIdentifier
.	TokenNameDOT
getURI	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"prefix"	TokenNameStringLiteral
,	TokenNameCOMMA
prefix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceName"	TokenNameStringLiteral
,	TokenNameCOMMA
uri	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"namespace"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"inScopeNamespaces"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIStartElement	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
augs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
ElementPSVI	TokenNameIdentifier
elemPSVI	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ElementPSVI	TokenNameIdentifier
)	TokenNameRPAREN
augs	TokenNameIdentifier
.	TokenNameDOT
getItem	TokenNameIdentifier
(	TokenNameLPAREN
Constants	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_PSVI	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
elemPSVI	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIEndElement	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
augs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
ElementPSVI	TokenNameIdentifier
elemPSVI	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ElementPSVI	TokenNameIdentifier
)	TokenNameRPAREN
augs	TokenNameIdentifier
.	TokenNameDOT
getItem	TokenNameIdentifier
(	TokenNameLPAREN
Constants	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_PSVI	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
elemPSVI	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVISchemaInformation	TokenNameIdentifier
(	TokenNameLPAREN
elemPSVI	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:validationAttempted"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateValidationAttempted	TokenNameIdentifier
(	TokenNameLPAREN
elemPSVI	TokenNameIdentifier
.	TokenNameDOT
getValidationAttempted	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:validationContext"	TokenNameStringLiteral
,	TokenNameCOMMA
elemPSVI	TokenNameIdentifier
.	TokenNameDOT
getValidationContext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:validity"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateValidity	TokenNameIdentifier
(	TokenNameLPAREN
elemPSVI	TokenNameIdentifier
.	TokenNameDOT
getValidity	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVISchemaErrorCode	TokenNameIdentifier
(	TokenNameLPAREN
elemPSVI	TokenNameIdentifier
.	TokenNameDOT
getErrorCodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaNormalizedValue"	TokenNameStringLiteral
,	TokenNameCOMMA
elemPSVI	TokenNameIdentifier
.	TokenNameDOT
getSchemaNormalizedValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaSpecified"	TokenNameStringLiteral
,	TokenNameCOMMA
elemPSVI	TokenNameIdentifier
.	TokenNameDOT
getIsSchemaSpecified	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
"schema"	TokenNameStringLiteral
:	TokenNameCOLON
"infoset"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaDefault"	TokenNameStringLiteral
,	TokenNameCOMMA
elemPSVI	TokenNameIdentifier
.	TokenNameDOT
getSchemaDefault	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVITypeDefinitionRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:typeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
elemPSVI	TokenNameIdentifier
.	TokenNameDOT
getTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVITypeDefinitionRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:memberTypeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
elemPSVI	TokenNameIdentifier
.	TokenNameDOT
getMemberTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:nil"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:declaration"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIElementRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:elementDeclaration"	TokenNameStringLiteral
,	TokenNameCOMMA
elemPSVI	TokenNameIdentifier
.	TokenNameDOT
getElementDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:declaration"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIElementRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:notation"	TokenNameStringLiteral
,	TokenNameCOMMA
elemPSVI	TokenNameIdentifier
.	TokenNameDOT
getNotation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:idIdrefTable"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:identityConstraintTable"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIAttribute	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
augs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
AttributePSVI	TokenNameIdentifier
attrPSVI	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
AttributePSVI	TokenNameIdentifier
)	TokenNameRPAREN
augs	TokenNameIdentifier
.	TokenNameDOT
getItem	TokenNameIdentifier
(	TokenNameLPAREN
Constants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_PSVI	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
attrPSVI	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:validationAttempted"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateValidationAttempted	TokenNameIdentifier
(	TokenNameLPAREN
attrPSVI	TokenNameIdentifier
.	TokenNameDOT
getValidationAttempted	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:validationContext"	TokenNameStringLiteral
,	TokenNameCOMMA
attrPSVI	TokenNameIdentifier
.	TokenNameDOT
getValidationContext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:validity"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateValidity	TokenNameIdentifier
(	TokenNameLPAREN
attrPSVI	TokenNameIdentifier
.	TokenNameDOT
getValidity	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVISchemaErrorCode	TokenNameIdentifier
(	TokenNameLPAREN
attrPSVI	TokenNameIdentifier
.	TokenNameDOT
getErrorCodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaNormalizedValue"	TokenNameStringLiteral
,	TokenNameCOMMA
attrPSVI	TokenNameIdentifier
.	TokenNameDOT
getSchemaNormalizedValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaSpecified"	TokenNameStringLiteral
,	TokenNameCOMMA
attrPSVI	TokenNameIdentifier
.	TokenNameDOT
getIsSchemaSpecified	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
"schema"	TokenNameStringLiteral
:	TokenNameCOLON
"infoset"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaDefault"	TokenNameStringLiteral
,	TokenNameCOMMA
attrPSVI	TokenNameIdentifier
.	TokenNameDOT
getSchemaDefault	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVITypeDefinitionRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:typeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
attrPSVI	TokenNameIdentifier
.	TokenNameDOT
getTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVITypeDefinitionRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:memberTypeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
attrPSVI	TokenNameIdentifier
.	TokenNameDOT
getMemberTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
attrPSVI	TokenNameIdentifier
.	TokenNameDOT
getAttributeDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:declaration"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:declaration"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAttributeDeclarationRef	TokenNameIdentifier
(	TokenNameLPAREN
attrPSVI	TokenNameIdentifier
.	TokenNameDOT
getAttributeDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:declaration"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVISchemaErrorCode	TokenNameIdentifier
(	TokenNameLPAREN
StringList	TokenNameIdentifier
errorCodes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
errorBuffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
errorCodes	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
errorCodes	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
errorCodes	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
errorBuffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
errorCodes	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
errorBuffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
" "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
errorBuffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
errorCodes	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
errorCodes	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaErrorCode"	TokenNameStringLiteral
,	TokenNameCOMMA
errorBuffer	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVISchemaInformation	TokenNameIdentifier
(	TokenNameLPAREN
ElementPSVI	TokenNameIdentifier
elemPSVI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elemPSVI	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
XSModel	TokenNameIdentifier
schemaInfo	TokenNameIdentifier
=	TokenNameEQUAL
elemPSVI	TokenNameIdentifier
.	TokenNameDOT
getSchemaInformation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSNamespaceItemList	TokenNameIdentifier
schemaNamespaces	TokenNameIdentifier
=	TokenNameEQUAL
schemaInfo	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
schemaInfo	TokenNameIdentifier
.	TokenNameDOT
getNamespaceItems	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
schemaNamespaces	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
schemaNamespaces	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaInformation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaInformation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
schemaNamespaces	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVINamespaceItem	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespaces	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaInformation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVINamespaceItem	TokenNameIdentifier
(	TokenNameLPAREN
XSNamespaceItem	TokenNameIdentifier
item	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
item	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
String	TokenNameIdentifier
namespace	TokenNameIdentifier
=	TokenNameEQUAL
item	TokenNameIdentifier
.	TokenNameDOT
getSchemaNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
namespace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
namespace	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
Constants	TokenNameIdentifier
.	TokenNameDOT
NS_XMLSCHEMA	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:namespaceSchemaInformation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaNamespace"	TokenNameStringLiteral
,	TokenNameCOMMA
namespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVISchemaComponents	TokenNameIdentifier
(	TokenNameLPAREN
item	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVISchemaDocuments	TokenNameIdentifier
(	TokenNameLPAREN
item	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVISchemaAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
item	TokenNameIdentifier
.	TokenNameDOT
getAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:namespaceSchemaInformation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVISchemaDocuments	TokenNameIdentifier
(	TokenNameLPAREN
XSNamespaceItem	TokenNameIdentifier
item	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
StringList	TokenNameIdentifier
locations	TokenNameIdentifier
=	TokenNameEQUAL
item	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
item	TokenNameIdentifier
.	TokenNameDOT
getDocumentLocations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
locations	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
locations	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaDocuments"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaDocuments"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
locations	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaDocument"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:documentLocation"	TokenNameStringLiteral
,	TokenNameCOMMA
locations	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:document"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaDocument"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaDocuments"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVISchemaComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSNamespaceItem	TokenNameIdentifier
item	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
item	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaComponents"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaComponents"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSNamedMap	TokenNameIdentifier
components	TokenNameIdentifier
=	TokenNameEQUAL
item	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
TYPE_DEFINITION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
components	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVITypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
components	TokenNameIdentifier
=	TokenNameEQUAL
item	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DECLARATION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
components	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIElementDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSElementDeclaration	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
components	TokenNameIdentifier
=	TokenNameEQUAL
item	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_DECLARATION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
components	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIAttributeDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSAttributeDeclaration	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
components	TokenNameIdentifier
=	TokenNameEQUAL
item	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
MODEL_GROUP_DEFINITION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
components	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIModelGroupDefinition	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSModelGroupDefinition	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
components	TokenNameIdentifier
=	TokenNameEQUAL
item	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_GROUP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
components	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIAttributeGroupDefinition	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSAttributeGroupDefinition	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
components	TokenNameIdentifier
=	TokenNameEQUAL
item	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
NOTATION_DECLARATION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
components	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVINotationDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSNotationDeclaration	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaComponents"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVITypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getTypeCategory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
COMPLEX_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIComplexTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSComplexTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getTypeCategory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
SIMPLE_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVISimpleTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSSimpleTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Unknown type definition value: "	TokenNameStringLiteral
+	TokenNamePLUS
type	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIComplexTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
XSComplexTypeDefinition	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
sendIndentedElementWithID	TokenNameIdentifier
(	TokenNameLPAREN
"psv:complexTypeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:name"	TokenNameStringLiteral
,	TokenNameCOMMA
type	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:targetNamespace"	TokenNameStringLiteral
,	TokenNameCOMMA
type	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVITypeDefinitionOrRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:baseTypeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
type	TokenNameIdentifier
.	TokenNameDOT
getBaseType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:derivationMethod"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateDerivation	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getDerivationMethod	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:final"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateBlockOrFinal	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getFinal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:abstract"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getAbstract	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAttributeUses	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getAttributeUses	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAttributeWildcard	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getAttributeWildcard	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:contentType"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:variety"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateContentType	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getContentType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSSimpleTypeDefinition	TokenNameIdentifier
simpleType	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
.	TokenNameDOT
getSimpleType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
simpleType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
(	TokenNameLPAREN
!	TokenNameNOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
getAnonymous	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
||	TokenNameOR_OR
fDefined	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getID	TokenNameIdentifier
(	TokenNameLPAREN
simpleType	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIElementRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:simpleTypeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
simpleType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
processPSVISimpleTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
simpleType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
processPSVIParticle	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getParticle	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:contentType"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:prohibitedSubstitutions"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateBlockOrFinal	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getProhibitedSubstitutions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:complexTypeDefinition"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVISimpleTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
XSSimpleTypeDefinition	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:simpleTypeDefinition"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendIndentedElementWithID	TokenNameIdentifier
(	TokenNameLPAREN
"psv:simpleTypeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:name"	TokenNameStringLiteral
,	TokenNameCOMMA
type	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:targetNamespace"	TokenNameStringLiteral
,	TokenNameCOMMA
type	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVITypeDefinitionOrRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:baseTypeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
type	TokenNameIdentifier
.	TokenNameDOT
getBaseType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVITypeDefinitionOrRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:primitiveTypeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
type	TokenNameIdentifier
.	TokenNameDOT
getPrimitiveType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIFacets	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:fundamentalFacets"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:ordered"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:value"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateOrdered	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getOrdered	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:ordered"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:bounded"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:value"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getBounded	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:bounded"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:cardinality"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:value"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getFinite	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:cardinality"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:numeric"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:value"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getNumeric	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:numeric"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:fundamentalFacets"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:final"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateBlockOrFinal	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getFinal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:variety"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateVariety	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getVariety	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVITypeDefinitionOrRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:itemTypeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
type	TokenNameIdentifier
.	TokenNameDOT
getItemType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIMemberTypeDefinitions	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getMemberTypes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:simpleTypeDefinition"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIFacets	TokenNameIdentifier
(	TokenNameLPAREN
XSSimpleTypeDefinition	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
XSObjectList	TokenNameIdentifier
facets	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
.	TokenNameDOT
getFacets	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSObjectList	TokenNameIdentifier
multiValueFacets	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
.	TokenNameDOT
getMultiValueFacets	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
facets	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
facets	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
multiValueFacets	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
multiValueFacets	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:facets"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:facets"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
facets	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
facets	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
XSFacet	TokenNameIdentifier
facet	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSFacet	TokenNameIdentifier
)	TokenNameRPAREN
facets	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
translateFacetKind	TokenNameIdentifier
(	TokenNameLPAREN
facet	TokenNameIdentifier
.	TokenNameDOT
getFacetKind	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:"	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:value"	TokenNameStringLiteral
,	TokenNameCOMMA
facet	TokenNameIdentifier
.	TokenNameDOT
getLexicalFacetValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:fixed"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
facet	TokenNameIdentifier
.	TokenNameDOT
getFixed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
facet	TokenNameIdentifier
.	TokenNameDOT
getAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:"	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
multiValueFacets	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
multiValueFacets	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
XSMultiValueFacet	TokenNameIdentifier
facet	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSMultiValueFacet	TokenNameIdentifier
)	TokenNameRPAREN
multiValueFacets	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
translateFacetKind	TokenNameIdentifier
(	TokenNameLPAREN
facet	TokenNameIdentifier
.	TokenNameDOT
getFacetKind	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:"	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
StringList	TokenNameIdentifier
values	TokenNameIdentifier
=	TokenNameEQUAL
facet	TokenNameIdentifier
.	TokenNameDOT
getLexicalFacetValues	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
values	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:value"	TokenNameStringLiteral
,	TokenNameCOMMA
values	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
j	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:fixed"	TokenNameStringLiteral
,	TokenNameCOMMA
"false"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
facet	TokenNameIdentifier
.	TokenNameDOT
getAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:"	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:facets"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIMemberTypeDefinitions	TokenNameIdentifier
(	TokenNameLPAREN
XSObjectList	TokenNameIdentifier
memTypes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
memTypes	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
memTypes	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:memberTypeDefinitions"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:memberTypeDefinitions"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
memTypes	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVITypeDefinitionOrRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:memberTypeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
memTypes	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:memberTypeDefinitions"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
XSObjectList	TokenNameIdentifier
annotations	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
empty	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
annotations	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
annotations	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
annotations	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
annotations	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
empty	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
empty	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:annotations"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:annotations"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
annotations	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSAnnotation	TokenNameIdentifier
)	TokenNameRPAREN
annotations	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:annotations"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVISchemaAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
XSObjectList	TokenNameIdentifier
annotations	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
annotations	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
annotations	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaAnnotations"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaAnnotations"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
annotations	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSAnnotation	TokenNameIdentifier
)	TokenNameRPAREN
annotations	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:schemaAnnotations"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIAttributeUses	TokenNameIdentifier
(	TokenNameLPAREN
XSObjectList	TokenNameIdentifier
uses	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
uses	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
uses	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeUses"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeUses"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
uses	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
XSAttributeUse	TokenNameIdentifier
use	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSAttributeUse	TokenNameIdentifier
)	TokenNameRPAREN
uses	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeUse"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:required"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
use	TokenNameIdentifier
.	TokenNameDOT
getRequired	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAttributeDeclarationOrRef	TokenNameIdentifier
(	TokenNameLPAREN
use	TokenNameIdentifier
.	TokenNameDOT
getAttrDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIValueConstraint	TokenNameIdentifier
(	TokenNameLPAREN
use	TokenNameIdentifier
.	TokenNameDOT
getConstraintType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
use	TokenNameIdentifier
.	TokenNameDOT
getConstraintValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeUse"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeUses"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIAttributeWildcard	TokenNameIdentifier
(	TokenNameLPAREN
XSWildcard	TokenNameIdentifier
wildcard	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
wildcard	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeWildcard"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeWildcard"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIWildcard	TokenNameIdentifier
(	TokenNameLPAREN
wildcard	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeWildcard"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIWildcard	TokenNameIdentifier
(	TokenNameLPAREN
XSWildcard	TokenNameIdentifier
wildcard	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
wildcard	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:wildcard"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:namespaceConstraint"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:variety"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateConstraintType	TokenNameIdentifier
(	TokenNameLPAREN
wildcard	TokenNameIdentifier
.	TokenNameDOT
getConstraintType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
StringBuffer	TokenNameIdentifier
constraintBuffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
StringList	TokenNameIdentifier
constraints	TokenNameIdentifier
=	TokenNameEQUAL
wildcard	TokenNameIdentifier
.	TokenNameDOT
getNsConstraintList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
constraints	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
constraints	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
constraints	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
constraintBuffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
constraints	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
constraintBuffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
" "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
constraintBuffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
constraints	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
constraints	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:namespaces"	TokenNameStringLiteral
,	TokenNameCOMMA
constraintBuffer	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:namespaceConstraint"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:processContents"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateProcessContents	TokenNameIdentifier
(	TokenNameLPAREN
wildcard	TokenNameIdentifier
.	TokenNameDOT
getProcessContents	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
wildcard	TokenNameIdentifier
.	TokenNameDOT
getAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:wildcard"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
XSAnnotation	TokenNameIdentifier
ann	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ann	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:annotation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:annotation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Node	TokenNameIdentifier
dom	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DocumentImpl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ann	TokenNameIdentifier
.	TokenNameDOT
writeAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
dom	TokenNameIdentifier
,	TokenNameCOMMA
XSAnnotation	TokenNameIdentifier
.	TokenNameDOT
W3C_DOM_DOCUMENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
annot	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
dom	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processDOMElement	TokenNameIdentifier
(	TokenNameLPAREN
annot	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_APPINFO	TokenNameIdentifier
,	TokenNameCOMMA
"psv:applicationInformation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processDOMElement	TokenNameIdentifier
(	TokenNameLPAREN
annot	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_DOCUMENTATION	TokenNameIdentifier
,	TokenNameCOMMA
"psv:userInformation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processDOMAttributes	TokenNameIdentifier
(	TokenNameLPAREN
annot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:annotation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processDOMElement	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
node	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
tagName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
node	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
boolean	TokenNameboolean
foundElem	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Element	TokenNameIdentifier
child	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
child	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
child	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
foundElem	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
tagName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
foundElem	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"element"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceName"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNamespaceURI	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"localName"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"prefix"	TokenNameStringLiteral
,	TokenNameCOMMA
child	TokenNameIdentifier
.	TokenNameDOT
getPrefix	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"children"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"character"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"textContent"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getChildText	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"character"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"children"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Attr	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
atts	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
child	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getAttrs	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XMLAttributes	TokenNameIdentifier
attrs	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLAttributesImpl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
atts	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
Attr	TokenNameIdentifier
att	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Attr	TokenNameIdentifier
)	TokenNameRPAREN
atts	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
attrs	TokenNameIdentifier
.	TokenNameDOT
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
.	TokenNameDOT
getPrefix	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
att	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
att	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
att	TokenNameIdentifier
.	TokenNameDOT
getNamespaceURI	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"CDATA"	TokenNameStringLiteral
,	TokenNameCOMMA
att	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
processAttributes	TokenNameIdentifier
(	TokenNameLPAREN
attrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"element"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
foundElem	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
tagName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
tagName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processDOMAttributes	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
elem	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Attr	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
atts	TokenNameIdentifier
=	TokenNameEQUAL
elem	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getAttrs	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
namespaceAttribute	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
boolean	TokenNameboolean
attrElement	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
attrCount	TokenNameIdentifier
=	TokenNameEQUAL
atts	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
atts	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
attrCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"attributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceAttributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
attrCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
Attr	TokenNameIdentifier
att	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Attr	TokenNameIdentifier
)	TokenNameRPAREN
atts	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
String	TokenNameIdentifier
localpart	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
att	TokenNameIdentifier
.	TokenNameDOT
getPrefix	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
localpart	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
PREFIX_XMLNS	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
prefix	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
PREFIX_XMLNS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
namespaceAttribute	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
attrElement	TokenNameIdentifier
)	TokenNameRPAREN
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"attributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"attribute"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceName"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNamespaceURI	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"localName"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"prefix"	TokenNameStringLiteral
,	TokenNameCOMMA
att	TokenNameIdentifier
.	TokenNameDOT
getPrefix	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"normalizedValue"	TokenNameStringLiteral
,	TokenNameCOMMA
att	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"specified"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
.	TokenNameDOT
getSpecified	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"attributeType"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"references"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"attribute"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attrElement	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
attrElement	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"attributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"attributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
namespaceAttribute	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceAttributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
attrCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
Attr	TokenNameIdentifier
att	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Attr	TokenNameIdentifier
)	TokenNameRPAREN
atts	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
String	TokenNameIdentifier
localpart	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
att	TokenNameIdentifier
.	TokenNameDOT
getPrefix	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
localpart	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
PREFIX_XMLNS	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
prefix	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
PREFIX_XMLNS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"attribute"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceName"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNamespaceURI	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"localName"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"prefix"	TokenNameStringLiteral
,	TokenNameCOMMA
att	TokenNameIdentifier
.	TokenNameDOT
getPrefix	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"normalizedValue"	TokenNameStringLiteral
,	TokenNameCOMMA
att	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"specified"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
.	TokenNameDOT
getSpecified	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"attributeType"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"references"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"attribute"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceAttributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"namespaceAttributes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIElementDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
XSElementDeclaration	TokenNameIdentifier
elem	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elem	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
sendIndentedElementWithID	TokenNameIdentifier
(	TokenNameLPAREN
"psv:elementDeclaration"	TokenNameStringLiteral
,	TokenNameCOMMA
elem	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:name"	TokenNameStringLiteral
,	TokenNameCOMMA
elem	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:targetNamespace"	TokenNameStringLiteral
,	TokenNameCOMMA
elem	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVITypeDefinitionOrRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:typeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
elem	TokenNameIdentifier
.	TokenNameDOT
getTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIScope	TokenNameIdentifier
(	TokenNameLPAREN
"psv:scope"	TokenNameStringLiteral
,	TokenNameCOMMA
elem	TokenNameIdentifier
.	TokenNameDOT
getEnclosingCTDefinition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
elem	TokenNameIdentifier
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIValueConstraint	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
.	TokenNameDOT
getConstraintType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
elem	TokenNameIdentifier
.	TokenNameDOT
getConstraintValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:nillable"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
.	TokenNameDOT
getNillable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIIdentityConstraintDefinitions	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
.	TokenNameDOT
getIdentityConstraints	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVISubstitutionGroupAffiliation	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:substitutionGroupExclusions"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateBlockOrFinal	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
.	TokenNameDOT
getSubstitutionGroupExclusions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:disallowedSubstitutions"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateBlockOrFinal	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
.	TokenNameDOT
getDisallowedSubstitutions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:abstract"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
.	TokenNameDOT
getAbstract	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
.	TokenNameDOT
getAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:elementDeclaration"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIAttributeDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
XSAttributeDeclaration	TokenNameIdentifier
attr	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
attr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
sendIndentedElementWithID	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeDeclaration"	TokenNameStringLiteral
,	TokenNameCOMMA
attr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:name"	TokenNameStringLiteral
,	TokenNameCOMMA
attr	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:targetNamespace"	TokenNameStringLiteral
,	TokenNameCOMMA
attr	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVITypeDefinitionOrRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:typeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
attr	TokenNameIdentifier
.	TokenNameDOT
getTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIScope	TokenNameIdentifier
(	TokenNameLPAREN
"psv:scope"	TokenNameStringLiteral
,	TokenNameCOMMA
attr	TokenNameIdentifier
.	TokenNameDOT
getEnclosingCTDefinition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
attr	TokenNameIdentifier
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIValueConstraint	TokenNameIdentifier
(	TokenNameLPAREN
attr	TokenNameIdentifier
.	TokenNameDOT
getConstraintType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
attr	TokenNameIdentifier
.	TokenNameDOT
getConstraintValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
attr	TokenNameIdentifier
.	TokenNameDOT
getAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeDeclaration"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIAttributeGroupDefinition	TokenNameIdentifier
(	TokenNameLPAREN
XSAttributeGroupDefinition	TokenNameIdentifier
ag	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ag	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
sendIndentedElementWithID	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeGroupDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
ag	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:name"	TokenNameStringLiteral
,	TokenNameCOMMA
ag	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:targetNamespace"	TokenNameStringLiteral
,	TokenNameCOMMA
ag	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAttributeUses	TokenNameIdentifier
(	TokenNameLPAREN
ag	TokenNameIdentifier
.	TokenNameDOT
getAttributeUses	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAttributeWildcard	TokenNameIdentifier
(	TokenNameLPAREN
ag	TokenNameIdentifier
.	TokenNameDOT
getAttributeWildcard	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
ag	TokenNameIdentifier
.	TokenNameDOT
getAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeGroupDefinition"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIModelGroupDefinition	TokenNameIdentifier
(	TokenNameLPAREN
XSModelGroupDefinition	TokenNameIdentifier
mgd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
mgd	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:modelGroupDefinition"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElementWithID	TokenNameIdentifier
(	TokenNameLPAREN
"psv:modelGroupDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
mgd	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:name"	TokenNameStringLiteral
,	TokenNameCOMMA
mgd	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:targetNamespace"	TokenNameStringLiteral
,	TokenNameCOMMA
mgd	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIModelGroup	TokenNameIdentifier
(	TokenNameLPAREN
mgd	TokenNameIdentifier
.	TokenNameDOT
getModelGroup	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
mgd	TokenNameIdentifier
.	TokenNameDOT
getAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:modelGroupDefinition"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIModelGroup	TokenNameIdentifier
(	TokenNameLPAREN
XSModelGroup	TokenNameIdentifier
mg	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
mg	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:modelGroup"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:modelGroup"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:compositor"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateCompositor	TokenNameIdentifier
(	TokenNameLPAREN
mg	TokenNameIdentifier
.	TokenNameDOT
getCompositor	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIParticles	TokenNameIdentifier
(	TokenNameLPAREN
mg	TokenNameIdentifier
.	TokenNameDOT
getParticles	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
mg	TokenNameIdentifier
.	TokenNameDOT
getAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:modelGroup"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVINotationDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
XSNotationDeclaration	TokenNameIdentifier
not	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
not	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:notationDeclaration"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElementWithID	TokenNameIdentifier
(	TokenNameLPAREN
"psv:notationDeclaration"	TokenNameStringLiteral
,	TokenNameCOMMA
not	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:name"	TokenNameStringLiteral
,	TokenNameCOMMA
not	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:targetNamespace"	TokenNameStringLiteral
,	TokenNameCOMMA
not	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"systemIdentifier"	TokenNameStringLiteral
,	TokenNameCOMMA
not	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"publicIdentifier"	TokenNameStringLiteral
,	TokenNameCOMMA
not	TokenNameIdentifier
.	TokenNameDOT
getPublicId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
not	TokenNameIdentifier
.	TokenNameDOT
getAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:notationDeclaration"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIIdentityConstraintDefinitions	TokenNameIdentifier
(	TokenNameLPAREN
XSNamedMap	TokenNameIdentifier
constraints	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
constraints	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
constraints	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:identityConstraintDefinitions"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:identityConstraintDefinitions"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
constraints	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
XSIDCDefinition	TokenNameIdentifier
constraint	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSIDCDefinition	TokenNameIdentifier
)	TokenNameRPAREN
constraints	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElementWithID	TokenNameIdentifier
(	TokenNameLPAREN
"psv:identityConstraintDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
constraint	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:name"	TokenNameStringLiteral
,	TokenNameCOMMA
constraint	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:targetNamespace"	TokenNameStringLiteral
,	TokenNameCOMMA
constraint	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:identityConstraintCategory"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateCategory	TokenNameIdentifier
(	TokenNameLPAREN
constraint	TokenNameIdentifier
.	TokenNameDOT
getCategory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:selector"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIXPath	TokenNameIdentifier
(	TokenNameLPAREN
constraint	TokenNameIdentifier
.	TokenNameDOT
getSelectorStr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:selector"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIFields	TokenNameIdentifier
(	TokenNameLPAREN
constraint	TokenNameIdentifier
.	TokenNameDOT
getFieldStrs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIElementRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:referencedKey"	TokenNameStringLiteral
,	TokenNameCOMMA
constraint	TokenNameIdentifier
.	TokenNameDOT
getRefKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
constraint	TokenNameIdentifier
.	TokenNameDOT
getAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:identityConstraintDefinition"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:identityConstraintDefinitions"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIFields	TokenNameIdentifier
(	TokenNameLPAREN
StringList	TokenNameIdentifier
fields	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fields	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
fields	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:fields"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:fields"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fields	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIXPath	TokenNameIdentifier
(	TokenNameLPAREN
fields	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:fields"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIXPath	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
path	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:xpath"	TokenNameStringLiteral
,	TokenNameCOMMA
path	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIParticles	TokenNameIdentifier
(	TokenNameLPAREN
XSObjectList	TokenNameIdentifier
particles	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
particles	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
particles	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:particles"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:particles"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
particles	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIParticle	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSParticle	TokenNameIdentifier
)	TokenNameRPAREN
particles	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:particles"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIParticle	TokenNameIdentifier
(	TokenNameLPAREN
XSParticle	TokenNameIdentifier
part	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
part	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:particle"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:particle"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:minOccurs"	TokenNameStringLiteral
,	TokenNameCOMMA
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
part	TokenNameIdentifier
.	TokenNameDOT
getMinOccurs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:maxOccurs"	TokenNameStringLiteral
,	TokenNameCOMMA
part	TokenNameIdentifier
.	TokenNameDOT
getMaxOccurs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
OCCURRENCE_UNBOUNDED	TokenNameIdentifier
?	TokenNameQUESTION
"unbounded"	TokenNameStringLiteral
:	TokenNameCOLON
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
part	TokenNameIdentifier
.	TokenNameDOT
getMaxOccurs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
part	TokenNameIdentifier
.	TokenNameDOT
getTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
processPSVIElementDeclarationOrRef	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSElementDeclaration	TokenNameIdentifier
)	TokenNameRPAREN
part	TokenNameIdentifier
.	TokenNameDOT
getTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
MODEL_GROUP	TokenNameIdentifier
:	TokenNameCOLON
processPSVIModelGroup	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSModelGroup	TokenNameIdentifier
)	TokenNameRPAREN
part	TokenNameIdentifier
.	TokenNameDOT
getTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
WILDCARD	TokenNameIdentifier
:	TokenNameCOLON
processPSVIWildcard	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSWildcard	TokenNameIdentifier
)	TokenNameRPAREN
part	TokenNameIdentifier
.	TokenNameDOT
getTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:particle"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIElementRef	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
XSObject	TokenNameIdentifier
obj	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
processPSVIElementRef	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
obj	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIElementRef	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
attributes	TokenNameIdentifier
,	TokenNameCOMMA
XSObject	TokenNameIdentifier
obj	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
attributes	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
attributes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
ref	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getID	TokenNameIdentifier
(	TokenNameLPAREN
obj	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ref	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"ref"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
ref	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
fIDREFSymbol	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
,	TokenNameCOMMA
attributes	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
XMLString	TokenNameIdentifier
)	TokenNameRPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIAttributeDeclarationOrRef	TokenNameIdentifier
(	TokenNameLPAREN
XSAttributeDeclaration	TokenNameIdentifier
att	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
att	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
att	TokenNameIdentifier
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
SCOPE_GLOBAL	TokenNameIdentifier
||	TokenNameOR_OR
fDefined	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getID	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIAttributeDeclarationRef	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
processPSVIAttributeDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIAttributeDeclarationRef	TokenNameIdentifier
(	TokenNameLPAREN
XSAttributeDeclaration	TokenNameIdentifier
att	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
att	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
attributes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"name"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
fCDATASymbol	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
att	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"tns"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
att	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
fCDATASymbol	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
processPSVIElementRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:attributeDeclaration"	TokenNameStringLiteral
,	TokenNameCOMMA
attributes	TokenNameIdentifier
,	TokenNameCOMMA
att	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVITypeDefinitionRef	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
enclose	TokenNameIdentifier
,	TokenNameCOMMA
XSTypeDefinition	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
enclose	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
enclose	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getTypeCategory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
COMPLEX_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIElementRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:complexTypeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getTypeCategory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
SIMPLE_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIElementRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:simpleTypeDefinition"	TokenNameStringLiteral
,	TokenNameCOMMA
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Unknown type definition value: "	TokenNameStringLiteral
+	TokenNamePLUS
type	TokenNameIdentifier
.	TokenNameDOT
getTypeCategory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
enclose	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVITypeDefinitionOrRef	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
enclose	TokenNameIdentifier
,	TokenNameCOMMA
XSTypeDefinition	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
enclose	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getAnonymous	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
!	TokenNameNOT
fDefined	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getID	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
enclose	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVITypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
enclose	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
processPSVITypeDefinitionRef	TokenNameIdentifier
(	TokenNameLPAREN
enclose	TokenNameIdentifier
,	TokenNameCOMMA
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIElementDeclarationRef	TokenNameIdentifier
(	TokenNameLPAREN
XSElementDeclaration	TokenNameIdentifier
elem	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elem	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
processPSVIElementRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:elementDeclaration"	TokenNameStringLiteral
,	TokenNameCOMMA
elem	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIElementDeclarationOrRef	TokenNameIdentifier
(	TokenNameLPAREN
XSElementDeclaration	TokenNameIdentifier
elem	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elem	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
elem	TokenNameIdentifier
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
SCOPE_GLOBAL	TokenNameIdentifier
||	TokenNameOR_OR
fDefined	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getID	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
processPSVIElementDeclarationRef	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
processPSVIElementDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIScope	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
enclose	TokenNameIdentifier
,	TokenNameCOMMA
XSComplexTypeDefinition	TokenNameIdentifier
enclosingCTD	TokenNameIdentifier
,	TokenNameCOMMA
short	TokenNameshort
scope	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
scope	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
SCOPE_ABSENT	TokenNameIdentifier
||	TokenNameOR_OR
scope	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
SCOPE_GLOBAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
enclose	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
translateScope	TokenNameIdentifier
(	TokenNameLPAREN
scope	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
processPSVITypeDefinitionRef	TokenNameIdentifier
(	TokenNameLPAREN
enclose	TokenNameIdentifier
,	TokenNameCOMMA
enclosingCTD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVIValueConstraint	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
constraintType	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
constraintValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
constraintType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
VC_NONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:valueConstraint"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:valueConstraint"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:variety"	TokenNameStringLiteral
,	TokenNameCOMMA
translateValueConstraintType	TokenNameIdentifier
(	TokenNameLPAREN
constraintType	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:value"	TokenNameStringLiteral
,	TokenNameCOMMA
constraintValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:valueConstraint"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processPSVISubstitutionGroupAffiliation	TokenNameIdentifier
(	TokenNameLPAREN
XSElementDeclaration	TokenNameIdentifier
elem	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elem	TokenNameIdentifier
.	TokenNameDOT
getSubstitutionGroupAffiliation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
"psv:substitutionGroupAffiliation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:substitutionGroupAffiliation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processPSVIElementRef	TokenNameIdentifier
(	TokenNameLPAREN
"psv:elementDeclaration"	TokenNameStringLiteral
,	TokenNameCOMMA
elem	TokenNameIdentifier
.	TokenNameDOT
getSubstitutionGroupAffiliation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"psv:substitutionGroupAffiliation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
tagname	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
tagname	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
tagname	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
attributes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
sendIndent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fDocumentHandler	TokenNameIdentifier
.	TokenNameDOT
emptyElement	TokenNameIdentifier
(	TokenNameLPAREN
createQName	TokenNameIdentifier
(	TokenNameLPAREN
tagname	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
createAttributes	TokenNameIdentifier
(	TokenNameLPAREN
attributes	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
sendNewLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendStartElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
tagname	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
attributes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fDocumentHandler	TokenNameIdentifier
.	TokenNameDOT
startElement	TokenNameIdentifier
(	TokenNameLPAREN
createQName	TokenNameIdentifier
(	TokenNameLPAREN
tagname	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
createAttributes	TokenNameIdentifier
(	TokenNameLPAREN
attributes	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendEndElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
tagname	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fDocumentHandler	TokenNameIdentifier
.	TokenNameDOT
endElement	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
createQName	TokenNameIdentifier
(	TokenNameLPAREN
tagname	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
tagName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
tagName	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
tagName	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
attributes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
sendIndent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
sendStartElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
tagName	TokenNameIdentifier
,	TokenNameCOMMA
attributes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
sendNewLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fIndent	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendUnIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
tagName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fIndent	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
sendIndent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
sendEndElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
tagName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
sendNewLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
(	TokenNameLPAREN
XMLString	TokenNameIdentifier
)	TokenNameRPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
elementValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
elementValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
XMLString	TokenNameIdentifier
elementValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
elementValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
attributes	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
elementValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XMLString	TokenNameIdentifier
text	TokenNameIdentifier
=	TokenNameEQUAL
elementValue	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
new	TokenNamenew
XMLString	TokenNameIdentifier
(	TokenNameLPAREN
elementValue	TokenNameIdentifier
.	TokenNameDOT
toCharArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
elementValue	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
,	TokenNameCOMMA
attributes	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
attributes	TokenNameIdentifier
,	TokenNameCOMMA
XMLString	TokenNameIdentifier
elementValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elementValue	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
elementValue	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
attributes	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
attributes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"xsi:nil"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"true"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
fCDATASymbol	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
sendEmptyElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
,	TokenNameCOMMA
attributes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
sendIndent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
sendStartElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
,	TokenNameCOMMA
attributes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fDocumentHandler	TokenNameIdentifier
.	TokenNameDOT
characters	TokenNameIdentifier
(	TokenNameLPAREN
elementValue	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
sendEndElementEvent	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
sendNewLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendIndentedElementWithID	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
XSObject	TokenNameIdentifier
obj	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
id	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getID	TokenNameIdentifier
(	TokenNameLPAREN
obj	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fDefined	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
id	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
attributes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"id"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
id	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
fIDSymbol	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
,	TokenNameCOMMA
attributes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendIndent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fIndent	TokenNameIdentifier
>	TokenNameGREATER
fIndentChars	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fIndentChars	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fIndentChars	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fIndentChars	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
fIndentChars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'\t'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
XMLString	TokenNameIdentifier
text	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLString	TokenNameIdentifier
(	TokenNameLPAREN
fIndentChars	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fIndent	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fDocumentHandler	TokenNameIdentifier
.	TokenNameDOT
characters	TokenNameIdentifier
(	TokenNameLPAREN
text	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendNewLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fDocumentHandler	TokenNameIdentifier
.	TokenNameDOT
characters	TokenNameIdentifier
(	TokenNameLPAREN
newLine	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
QName	TokenNameIdentifier
createQName	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
rawname	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
rawname	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
,	TokenNameCOMMA
localpart	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
prefix	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
localpart	TokenNameIdentifier
=	TokenNameEQUAL
rawname	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
prefix	TokenNameIdentifier
=	TokenNameEQUAL
rawname	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
localpart	TokenNameIdentifier
=	TokenNameEQUAL
rawname	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
uri	TokenNameIdentifier
=	TokenNameEQUAL
fPSVINamespaceContext	TokenNameIdentifier
.	TokenNameDOT
getURI	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
,	TokenNameCOMMA
localpart	TokenNameIdentifier
,	TokenNameCOMMA
rawname	TokenNameIdentifier
,	TokenNameCOMMA
uri	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XMLAttributes	TokenNameIdentifier
createAttributes	TokenNameIdentifier
(	TokenNameLPAREN
Vector	TokenNameIdentifier
atts	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XMLAttributes	TokenNameIdentifier
attributes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLAttributesImpl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
atts	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
atts	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
rawname	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
atts	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
atts	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
type	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
atts	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributes	TokenNameIdentifier
.	TokenNameDOT
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
createQName	TokenNameIdentifier
(	TokenNameLPAREN
rawname	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
type	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
attributes	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
createID	TokenNameIdentifier
(	TokenNameLPAREN
XSObject	TokenNameIdentifier
obj	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
namespace	TokenNameIdentifier
=	TokenNameEQUAL
obj	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
fNamespaceContext	TokenNameIdentifier
.	TokenNameDOT
getPrefix	TokenNameIdentifier
(	TokenNameLPAREN
obj	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
obj	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
type	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
translateType	TokenNameIdentifier
(	TokenNameLPAREN
obj	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
name	TokenNameIdentifier
=	TokenNameEQUAL
"anon_"	TokenNameStringLiteral
+	TokenNamePLUS
fAnonNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
namespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
namespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
EMPTY_STRING	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
name	TokenNameIdentifier
=	TokenNameEQUAL
name	TokenNameIdentifier
+	TokenNamePLUS
"."	TokenNameStringLiteral
+	TokenNamePLUS
fAnonNum	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
namespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
NS_XMLSCHEMA	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
name	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
prefix	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
""	TokenNameStringLiteral
:	TokenNameCOLON
prefix	TokenNameIdentifier
+	TokenNamePLUS
"."	TokenNameStringLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
type	TokenNameIdentifier
+	TokenNamePLUS
"."	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getID	TokenNameIdentifier
(	TokenNameLPAREN
XSObject	TokenNameIdentifier
obj	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
obj	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
id	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
fIDMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
obj	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
id	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
id	TokenNameIdentifier
=	TokenNameEQUAL
createID	TokenNameIdentifier
(	TokenNameLPAREN
obj	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fIDMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
obj	TokenNameIdentifier
,	TokenNameCOMMA
id	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
id	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateType	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
TYPE_DEFINITION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"type"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ANNOTATION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"annot"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"attr"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_GROUP	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"ag"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_USE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"au"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"elt"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
MODEL_GROUP_DEFINITION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"mg"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
NOTATION_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"not"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
IDENTITY_CONSTRAINT	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"idc"	TokenNameStringLiteral
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateFacetKind	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
kind	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
kind	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
FACET_WHITESPACE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_WHITESPACE	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
FACET_LENGTH	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_LENGTH	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
FACET_MINLENGTH	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_MINLENGTH	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
FACET_MAXLENGTH	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_MAXLENGTH	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
FACET_TOTALDIGITS	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_TOTALDIGITS	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
FACET_FRACTIONDIGITS	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_FRACTIONDIGITS	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
FACET_PATTERN	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_PATTERN	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
FACET_ENUMERATION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ENUMERATION	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
FACET_MAXINCLUSIVE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_MAXINCLUSIVE	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
FACET_MAXEXCLUSIVE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_MAXEXCLUSIVE	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
FACET_MINEXCLUSIVE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_MINEXCLUSIVE	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
FACET_MININCLUSIVE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_MININCLUSIVE	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateVariety	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
var	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
var	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
VARIETY_LIST	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"list"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
VARIETY_UNION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"union"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
VARIETY_ATOMIC	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"atomic"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
VARIETY_ABSENT	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateConstraintType	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSWildcard	TokenNameIdentifier
.	TokenNameDOT
NSCONSTRAINT_ANY	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"any"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSWildcard	TokenNameIdentifier
.	TokenNameDOT
NSCONSTRAINT_LIST	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
case	TokenNamecase
XSWildcard	TokenNameIdentifier
.	TokenNameDOT
NSCONSTRAINT_NOT	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"not"	TokenNameStringLiteral
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateValueConstraintType	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
VC_DEFAULT	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"default"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
VC_FIXED	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"fixed"	TokenNameStringLiteral
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateBlockOrFinal	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
val	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
ret	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
val	TokenNameIdentifier
&	TokenNameAND
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_EXTENSION	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATTVAL_EXTENSION	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
val	TokenNameIdentifier
&	TokenNameAND
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_LIST	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ret	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
ret	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
" "	TokenNameStringLiteral
;	TokenNameSEMICOLON
ret	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATTVAL_LIST	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
val	TokenNameIdentifier
&	TokenNameAND
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_RESTRICTION	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ret	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
ret	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
" "	TokenNameStringLiteral
;	TokenNameSEMICOLON
ret	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATTVAL_RESTRICTION	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
val	TokenNameIdentifier
&	TokenNameAND
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_UNION	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ret	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
ret	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
" "	TokenNameStringLiteral
;	TokenNameSEMICOLON
ret	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATTVAL_UNION	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
val	TokenNameIdentifier
&	TokenNameAND
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_SUBSTITUTION	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ret	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
ret	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
" "	TokenNameStringLiteral
;	TokenNameSEMICOLON
ret	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATTVAL_SUBSTITUTION	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateScope	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
scope	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
scope	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
SCOPE_ABSENT	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
SCOPE_GLOBAL	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"global"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
SCOPE_LOCAL	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"local"	TokenNameStringLiteral
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateCompositor	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
comp	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
comp	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSModelGroup	TokenNameIdentifier
.	TokenNameDOT
COMPOSITOR_SEQUENCE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SEQUENCE	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSModelGroup	TokenNameIdentifier
.	TokenNameDOT
COMPOSITOR_CHOICE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_CHOICE	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSModelGroup	TokenNameIdentifier
.	TokenNameDOT
COMPOSITOR_ALL	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ALL	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateContentType	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
contentType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
contentType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSComplexTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
CONTENTTYPE_ELEMENT	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"elementOnly"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSComplexTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
CONTENTTYPE_EMPTY	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"empty"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSComplexTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
CONTENTTYPE_MIXED	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"mixed"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSComplexTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
CONTENTTYPE_SIMPLE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"simple"	TokenNameStringLiteral
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateProcessContents	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
process	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
process	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSWildcard	TokenNameIdentifier
.	TokenNameDOT
PC_LAX	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATTVAL_LAX	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSWildcard	TokenNameIdentifier
.	TokenNameDOT
PC_SKIP	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATTVAL_SKIP	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSWildcard	TokenNameIdentifier
.	TokenNameDOT
PC_STRICT	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATTVAL_STRICT	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateDerivation	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
deriv	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
deriv	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_EXTENSION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_EXTENSION	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_LIST	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_LIST	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_RESTRICTION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_RESTRICTION	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_SUBSTITUTION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATTVAL_SUBSTITUTION	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_UNION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_UNION	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_NONE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateCategory	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
cat	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
cat	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSIDCDefinition	TokenNameIdentifier
.	TokenNameDOT
IC_KEY	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_KEY	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSIDCDefinition	TokenNameIdentifier
.	TokenNameDOT
IC_KEYREF	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_KEYREF	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
XSIDCDefinition	TokenNameIdentifier
.	TokenNameDOT
IC_UNIQUE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_UNIQUE	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateOrdered	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
ordered	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
ordered	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
ORDERED_FALSE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"false"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
ORDERED_PARTIAL	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"partial"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
XSSimpleTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
ORDERED_TOTAL	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"total"	TokenNameStringLiteral
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateValidationAttempted	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
val	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
val	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ItemPSVI	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_NONE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"none"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
ItemPSVI	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_PARTIAL	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"partial"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
ItemPSVI	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_FULL	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"full"	TokenNameStringLiteral
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
translateValidity	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
val	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
val	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ItemPSVI	TokenNameIdentifier
.	TokenNameDOT
VALIDITY_NOTKNOWN	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"notKnown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
ItemPSVI	TokenNameIdentifier
.	TokenNameDOT
VALIDITY_VALID	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"valid"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
ItemPSVI	TokenNameIdentifier
.	TokenNameDOT
VALIDITY_INVALID	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"invalid"	TokenNameStringLiteral
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
"unknown"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
checkForChildren	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
_elementState	TokenNameIdentifier
.	TokenNameDOT
empty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ElementState	TokenNameIdentifier
fElementState	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ElementState	TokenNameIdentifier
)	TokenNameRPAREN
_elementState	TokenNameIdentifier
.	TokenNameDOT
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fElementState	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"children"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementState	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sendIndentedElement	TokenNameIdentifier
(	TokenNameLPAREN
"children"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
_elementState	TokenNameIdentifier
.	TokenNameDOT
push	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
ElementState	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
class	TokenNameclass
ElementState	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isEmpty	TokenNameIdentifier
;	TokenNameSEMICOLON
XMLAttributes	TokenNameIdentifier
fAttributes	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ElementState	TokenNameIdentifier
(	TokenNameLPAREN
XMLAttributes	TokenNameIdentifier
attributes	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fAttributes	TokenNameIdentifier
=	TokenNameEQUAL
attributes	TokenNameIdentifier
;	TokenNameSEMICOLON
isEmpty	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ElementState	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
isEmpty	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XMLAttributes	TokenNameIdentifier
getAttributes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fAttributes	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
isEmpty	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
