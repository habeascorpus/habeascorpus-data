package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
jaxp	TokenNameIdentifier
.	TokenNameDOT
datatype	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Serializable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
math	TokenNameIdentifier
.	TokenNameDOT
BigDecimal	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
math	TokenNameIdentifier
.	TokenNameDOT
BigInteger	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Calendar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Date	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
GregorianCalendar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
TimeZone	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
datatype	TokenNameIdentifier
.	TokenNameDOT
DatatypeConstants	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
datatype	TokenNameIdentifier
.	TokenNameDOT
Duration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
datatype	TokenNameIdentifier
.	TokenNameDOT
XMLGregorianCalendar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
namespace	TokenNameIdentifier
.	TokenNameDOT
QName	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
DatatypeMessageFormatter	TokenNameIdentifier
;	TokenNameSEMICOLON
class	TokenNameclass
XMLGregorianCalendarImpl	TokenNameIdentifier
extends	TokenNameextends
XMLGregorianCalendar	TokenNameIdentifier
implements	TokenNameimplements
Serializable	TokenNameIdentifier
,	TokenNameCOMMA
Cloneable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
serialVersionUID	TokenNameIdentifier
=	TokenNameEQUAL
3905403108073447394L	TokenNameLongLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
BigInteger	TokenNameIdentifier
orig_eon	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
orig_year	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
orig_month	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
orig_day	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
orig_hour	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
orig_minute	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
orig_second	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
BigDecimal	TokenNameIdentifier
orig_fracSeconds	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
orig_timezone	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
BigInteger	TokenNameIdentifier
eon	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
year	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
month	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
day	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
timezone	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
hour	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
minute	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
second	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
BigDecimal	TokenNameIdentifier
fractionalSecond	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
BigInteger	TokenNameIdentifier
BILLION_B	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
1000000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
BILLION_I	TokenNameIdentifier
=	TokenNameEQUAL
1000000000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Date	TokenNameIdentifier
PURE_GREGORIAN_CHANGE	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Date	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
YEAR	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MONTH	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DAY	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
HOUR	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MINUTE	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
SECOND	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MILLISECOND	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIMEZONE	TokenNameIdentifier
=	TokenNameEQUAL
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MIN_FIELD_VALUE	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
JANUARY	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
14	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
60	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MAX_FIELD_VALUE	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
DECEMBER	TokenNameIdentifier
,	TokenNameCOMMA
31	TokenNameIntegerLiteral
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
59	TokenNameIntegerLiteral
,	TokenNameCOMMA
60	TokenNameIntegerLiteral
,	TokenNameCOMMA
999	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
60	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
FIELD_NAME	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"Year"	TokenNameStringLiteral
,	TokenNameCOMMA
"Month"	TokenNameStringLiteral
,	TokenNameCOMMA
"Day"	TokenNameStringLiteral
,	TokenNameCOMMA
"Hour"	TokenNameStringLiteral
,	TokenNameCOMMA
"Minute"	TokenNameStringLiteral
,	TokenNameCOMMA
"Second"	TokenNameStringLiteral
,	TokenNameCOMMA
"Millisecond"	TokenNameStringLiteral
,	TokenNameCOMMA
"Timezone"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
XMLGregorianCalendar	TokenNameIdentifier
LEAP_YEAR_DEFAULT	TokenNameIdentifier
=	TokenNameEQUAL
createDateTime	TokenNameIdentifier
(	TokenNameLPAREN
400	TokenNameIntegerLiteral
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
JANUARY	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
lexicalRepresentation	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IllegalArgumentException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
format	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
lexRep	TokenNameIdentifier
=	TokenNameEQUAL
lexicalRepresentation	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
NOT_FOUND	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
lexRepLength	TokenNameIdentifier
=	TokenNameEQUAL
lexRep	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lexRep	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
'T'	TokenNameCharacterLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
NOT_FOUND	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
format	TokenNameIdentifier
=	TokenNameEQUAL
"%Y-%M-%DT%h:%m:%s"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
lexRepLength	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
3	TokenNameIntegerLiteral
&&	TokenNameAND_AND
lexRep	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
format	TokenNameIdentifier
=	TokenNameEQUAL
"%h:%m:%s"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
lexRep	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"--"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
lexRepLength	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
3	TokenNameIntegerLiteral
&&	TokenNameAND_AND
lexRep	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
format	TokenNameIdentifier
=	TokenNameEQUAL
"---%D"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
lexRepLength	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
lexRepLength	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
6	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
lexRep	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'+'	TokenNameCharacterLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
lexRep	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
lexRep	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
||	TokenNameOR_OR
lexRepLength	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
format	TokenNameIdentifier
=	TokenNameEQUAL
"--%M--%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
Parser	TokenNameIdentifier
p	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Parser	TokenNameIdentifier
(	TokenNameLPAREN
format	TokenNameIdentifier
,	TokenNameCOMMA
lexRep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
p	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isValid	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeMessageFormatter	TokenNameIdentifier
.	TokenNameDOT
formatMessage	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
"InvalidXGCRepresentation"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
lexicalRepresentation	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
save	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IllegalArgumentException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
format	TokenNameIdentifier
=	TokenNameEQUAL
"--%M%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
format	TokenNameIdentifier
=	TokenNameEQUAL
"--%M-%D"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
countSeparator	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
timezoneOffset	TokenNameIdentifier
=	TokenNameEQUAL
lexRep	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
timezoneOffset	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
NOT_FOUND	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
lexRepLength	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
lexRepLength	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
lexRep	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
countSeparator	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
countSeparator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
format	TokenNameIdentifier
=	TokenNameEQUAL
"%Y"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
countSeparator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
format	TokenNameIdentifier
=	TokenNameEQUAL
"%Y-%M"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
format	TokenNameIdentifier
=	TokenNameEQUAL
"%Y-%M-%D"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
Parser	TokenNameIdentifier
p	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Parser	TokenNameIdentifier
(	TokenNameLPAREN
format	TokenNameIdentifier
,	TokenNameCOMMA
lexRep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
p	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isValid	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeMessageFormatter	TokenNameIdentifier
.	TokenNameDOT
formatMessage	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
"InvalidXGCRepresentation"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
lexicalRepresentation	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
save	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
save	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
orig_eon	TokenNameIdentifier
=	TokenNameEQUAL
eon	TokenNameIdentifier
;	TokenNameSEMICOLON
orig_year	TokenNameIdentifier
=	TokenNameEQUAL
year	TokenNameIdentifier
;	TokenNameSEMICOLON
orig_month	TokenNameIdentifier
=	TokenNameEQUAL
month	TokenNameIdentifier
;	TokenNameSEMICOLON
orig_day	TokenNameIdentifier
=	TokenNameEQUAL
day	TokenNameIdentifier
;	TokenNameSEMICOLON
orig_hour	TokenNameIdentifier
=	TokenNameEQUAL
hour	TokenNameIdentifier
;	TokenNameSEMICOLON
orig_minute	TokenNameIdentifier
=	TokenNameEQUAL
minute	TokenNameIdentifier
;	TokenNameSEMICOLON
orig_second	TokenNameIdentifier
=	TokenNameEQUAL
second	TokenNameIdentifier
;	TokenNameSEMICOLON
orig_fracSeconds	TokenNameIdentifier
=	TokenNameEQUAL
fractionalSecond	TokenNameIdentifier
;	TokenNameSEMICOLON
orig_timezone	TokenNameIdentifier
=	TokenNameEQUAL
timezone	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
day	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
hour	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minute	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
second	TokenNameIdentifier
,	TokenNameCOMMA
BigDecimal	TokenNameIdentifier
fractionalSecond	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
timezone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setYear	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setMonth	TokenNameIdentifier
(	TokenNameLPAREN
month	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setDay	TokenNameIdentifier
(	TokenNameLPAREN
day	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setTime	TokenNameIdentifier
(	TokenNameLPAREN
hour	TokenNameIdentifier
,	TokenNameCOMMA
minute	TokenNameIdentifier
,	TokenNameCOMMA
second	TokenNameIdentifier
,	TokenNameCOMMA
fractionalSecond	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setTimezone	TokenNameIdentifier
(	TokenNameLPAREN
timezone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isValid	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeMessageFormatter	TokenNameIdentifier
.	TokenNameDOT
formatMessage	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
"InvalidXGCValue-fractional"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
year	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
month	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
day	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
hour	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
minute	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
second	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
fractionalSecond	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
timezone	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
save	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
day	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
hour	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minute	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
second	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
millisecond	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
timezone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setYear	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setMonth	TokenNameIdentifier
(	TokenNameLPAREN
month	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setDay	TokenNameIdentifier
(	TokenNameLPAREN
day	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setTime	TokenNameIdentifier
(	TokenNameLPAREN
hour	TokenNameIdentifier
,	TokenNameCOMMA
minute	TokenNameIdentifier
,	TokenNameCOMMA
second	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setTimezone	TokenNameIdentifier
(	TokenNameLPAREN
timezone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BigDecimal	TokenNameIdentifier
realMilliseconds	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
millisecond	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
realMilliseconds	TokenNameIdentifier
=	TokenNameEQUAL
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
millisecond	TokenNameIdentifier
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
setFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
realMilliseconds	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isValid	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeMessageFormatter	TokenNameIdentifier
.	TokenNameDOT
formatMessage	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
"InvalidXGCValue-milli"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
month	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
day	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
hour	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
minute	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
second	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
millisecond	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
timezone	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
save	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
GregorianCalendar	TokenNameIdentifier
cal	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
year	TokenNameIdentifier
=	TokenNameEQUAL
cal	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
YEAR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cal	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
ERA	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
BC	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
year	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
year	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
setYear	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
setMonth	TokenNameIdentifier
(	TokenNameLPAREN
cal	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MONTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
setDay	TokenNameIdentifier
(	TokenNameLPAREN
cal	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
DAY_OF_MONTH	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
setTime	TokenNameIdentifier
(	TokenNameLPAREN
cal	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
HOUR_OF_DAY	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
cal	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MINUTE	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
cal	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
SECOND	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
cal	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
offsetInMinutes	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
cal	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
ZONE_OFFSET	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
cal	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
DST_OFFSET	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
60	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
setTimezone	TokenNameIdentifier
(	TokenNameLPAREN
offsetInMinutes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
save	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
XMLGregorianCalendar	TokenNameIdentifier
createDateTime	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
day	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
hours	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minutes	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
seconds	TokenNameIdentifier
,	TokenNameCOMMA
BigDecimal	TokenNameIdentifier
fractionalSecond	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
timezone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
,	TokenNameCOMMA
month	TokenNameIdentifier
,	TokenNameCOMMA
day	TokenNameIdentifier
,	TokenNameCOMMA
hours	TokenNameIdentifier
,	TokenNameCOMMA
minutes	TokenNameIdentifier
,	TokenNameCOMMA
seconds	TokenNameIdentifier
,	TokenNameCOMMA
fractionalSecond	TokenNameIdentifier
,	TokenNameCOMMA
timezone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
XMLGregorianCalendar	TokenNameIdentifier
createDateTime	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
day	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
hour	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minute	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
second	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
,	TokenNameCOMMA
month	TokenNameIdentifier
,	TokenNameCOMMA
day	TokenNameIdentifier
,	TokenNameCOMMA
hour	TokenNameIdentifier
,	TokenNameCOMMA
minute	TokenNameIdentifier
,	TokenNameCOMMA
second	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
XMLGregorianCalendar	TokenNameIdentifier
createDateTime	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
day	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
hours	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minutes	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
seconds	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
milliseconds	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
timezone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
,	TokenNameCOMMA
month	TokenNameIdentifier
,	TokenNameCOMMA
day	TokenNameIdentifier
,	TokenNameCOMMA
hours	TokenNameIdentifier
,	TokenNameCOMMA
minutes	TokenNameIdentifier
,	TokenNameCOMMA
seconds	TokenNameIdentifier
,	TokenNameCOMMA
milliseconds	TokenNameIdentifier
,	TokenNameCOMMA
timezone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
XMLGregorianCalendar	TokenNameIdentifier
createDate	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
day	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
timezone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
,	TokenNameCOMMA
month	TokenNameIdentifier
,	TokenNameCOMMA
day	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
timezone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
XMLGregorianCalendar	TokenNameIdentifier
createTime	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
hours	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minutes	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
seconds	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
timezone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
hours	TokenNameIdentifier
,	TokenNameCOMMA
minutes	TokenNameIdentifier
,	TokenNameCOMMA
seconds	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
timezone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
XMLGregorianCalendar	TokenNameIdentifier
createTime	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
hours	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minutes	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
seconds	TokenNameIdentifier
,	TokenNameCOMMA
BigDecimal	TokenNameIdentifier
fractionalSecond	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
timezone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
hours	TokenNameIdentifier
,	TokenNameCOMMA
minutes	TokenNameIdentifier
,	TokenNameCOMMA
seconds	TokenNameIdentifier
,	TokenNameCOMMA
fractionalSecond	TokenNameIdentifier
,	TokenNameCOMMA
timezone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
XMLGregorianCalendar	TokenNameIdentifier
createTime	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
hours	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minutes	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
seconds	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
milliseconds	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
timezone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
,	TokenNameCOMMA
hours	TokenNameIdentifier
,	TokenNameCOMMA
minutes	TokenNameIdentifier
,	TokenNameCOMMA
seconds	TokenNameIdentifier
,	TokenNameCOMMA
milliseconds	TokenNameIdentifier
,	TokenNameCOMMA
timezone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
BigInteger	TokenNameIdentifier
getEon	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
eon	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
year	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
BigInteger	TokenNameIdentifier
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
eon	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
eon	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
year	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
eon	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
year	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getMonth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
month	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getDay	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
day	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
timezone	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getHour	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
hour	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getMinute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
minute	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
second	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
BigDecimal	TokenNameIdentifier
getSeconds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
second	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DECIMAL_ZERO	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
BigDecimal	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
second	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fractionalSecond	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
fractionalSecond	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getMillisecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fractionalSecond	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
fractionalSecond	TokenNameIdentifier
.	TokenNameDOT
movePointRight	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
BigDecimal	TokenNameIdentifier
getFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fractionalSecond	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setYear	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
year	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
eon	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
BigInteger	TokenNameIdentifier
temp	TokenNameIdentifier
=	TokenNameEQUAL
year	TokenNameIdentifier
.	TokenNameDOT
remainder	TokenNameIdentifier
(	TokenNameLPAREN
BILLION_B	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
temp	TokenNameIdentifier
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setEon	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
.	TokenNameDOT
subtract	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setYear	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
year	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
eon	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
BILLION_I	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
year	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
eon	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
BigInteger	TokenNameIdentifier
theYear	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
year	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BigInteger	TokenNameIdentifier
remainder	TokenNameIdentifier
=	TokenNameEQUAL
theYear	TokenNameIdentifier
.	TokenNameDOT
remainder	TokenNameIdentifier
(	TokenNameLPAREN
BILLION_B	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
remainder	TokenNameIdentifier
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setEon	TokenNameIdentifier
(	TokenNameLPAREN
theYear	TokenNameIdentifier
.	TokenNameDOT
subtract	TokenNameIdentifier
(	TokenNameLPAREN
remainder	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
setEon	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
eon	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
eon	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
eon	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
ZERO	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
eon	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
eon	TokenNameIdentifier
=	TokenNameEQUAL
eon	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setMonth	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
month	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
checkFieldValueConstraint	TokenNameIdentifier
(	TokenNameLPAREN
MONTH	TokenNameIdentifier
,	TokenNameCOMMA
month	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
month	TokenNameIdentifier
=	TokenNameEQUAL
month	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setDay	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
day	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
checkFieldValueConstraint	TokenNameIdentifier
(	TokenNameLPAREN
DAY	TokenNameIdentifier
,	TokenNameCOMMA
day	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
day	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setTimezone	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
offset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
checkFieldValueConstraint	TokenNameIdentifier
(	TokenNameLPAREN
TIMEZONE	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
timezone	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setTime	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
hour	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minute	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
second	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setTime	TokenNameIdentifier
(	TokenNameLPAREN
hour	TokenNameIdentifier
,	TokenNameCOMMA
minute	TokenNameIdentifier
,	TokenNameCOMMA
second	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
checkFieldValueConstraint	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
field	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
value	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IllegalArgumentException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
value	TokenNameIdentifier
<	TokenNameLESS
MIN_FIELD_VALUE	TokenNameIdentifier
[	TokenNameLBRACKET
field	TokenNameIdentifier
]	TokenNameRBRACKET
&&	TokenNameAND_AND
value	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
value	TokenNameIdentifier
>	TokenNameGREATER
MAX_FIELD_VALUE	TokenNameIdentifier
[	TokenNameLBRACKET
field	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeMessageFormatter	TokenNameIdentifier
.	TokenNameDOT
formatMessage	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
"InvalidFieldValue"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
FIELD_NAME	TokenNameIdentifier
[	TokenNameLBRACKET
field	TokenNameIdentifier
]	TokenNameRBRACKET
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setHour	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
hour	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
checkFieldValueConstraint	TokenNameIdentifier
(	TokenNameLPAREN
HOUR	TokenNameIdentifier
,	TokenNameCOMMA
hour	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
hour	TokenNameIdentifier
=	TokenNameEQUAL
hour	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setMinute	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
minute	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
checkFieldValueConstraint	TokenNameIdentifier
(	TokenNameLPAREN
MINUTE	TokenNameIdentifier
,	TokenNameCOMMA
minute	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
minute	TokenNameIdentifier
=	TokenNameEQUAL
minute	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setSecond	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
second	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
checkFieldValueConstraint	TokenNameIdentifier
(	TokenNameLPAREN
SECOND	TokenNameIdentifier
,	TokenNameCOMMA
second	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
second	TokenNameIdentifier
=	TokenNameEQUAL
second	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setTime	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
hour	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minute	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
second	TokenNameIdentifier
,	TokenNameCOMMA
BigDecimal	TokenNameIdentifier
fractional	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setHour	TokenNameIdentifier
(	TokenNameLPAREN
hour	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setMinute	TokenNameIdentifier
(	TokenNameLPAREN
minute	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setSecond	TokenNameIdentifier
(	TokenNameLPAREN
second	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
fractional	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setTime	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
hour	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minute	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
second	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
millisecond	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setHour	TokenNameIdentifier
(	TokenNameLPAREN
hour	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setMinute	TokenNameIdentifier
(	TokenNameLPAREN
minute	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setSecond	TokenNameIdentifier
(	TokenNameLPAREN
second	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setMillisecond	TokenNameIdentifier
(	TokenNameLPAREN
millisecond	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
compare	TokenNameIdentifier
(	TokenNameLPAREN
XMLGregorianCalendar	TokenNameIdentifier
rhs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
result	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
XMLGregorianCalendar	TokenNameIdentifier
P	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
;	TokenNameSEMICOLON
XMLGregorianCalendar	TokenNameIdentifier
Q	TokenNameIdentifier
=	TokenNameEQUAL
rhs	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
Q	TokenNameIdentifier
.	TokenNameDOT
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
internalCompare	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
,	TokenNameCOMMA
Q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
Q	TokenNameIdentifier
.	TokenNameDOT
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
P	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XMLGregorianCalendarImpl	TokenNameIdentifier
)	TokenNameRPAREN
P	TokenNameIdentifier
.	TokenNameDOT
normalize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Q	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XMLGregorianCalendarImpl	TokenNameIdentifier
)	TokenNameRPAREN
Q	TokenNameIdentifier
.	TokenNameDOT
normalize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
internalCompare	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
,	TokenNameCOMMA
Q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
P	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XMLGregorianCalendarImpl	TokenNameIdentifier
)	TokenNameRPAREN
P	TokenNameIdentifier
.	TokenNameDOT
normalize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XMLGregorianCalendar	TokenNameIdentifier
MinQ	TokenNameIdentifier
=	TokenNameEQUAL
normalizeToTimezone	TokenNameIdentifier
(	TokenNameLPAREN
Q	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
MIN_TIMEZONE_OFFSET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
internalCompare	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
,	TokenNameCOMMA
MinQ	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
LESSER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XMLGregorianCalendar	TokenNameIdentifier
MaxQ	TokenNameIdentifier
=	TokenNameEQUAL
normalizeToTimezone	TokenNameIdentifier
(	TokenNameLPAREN
Q	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
MAX_TIMEZONE_OFFSET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
internalCompare	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
,	TokenNameCOMMA
MaxQ	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GREATER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
Q	TokenNameIdentifier
.	TokenNameDOT
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
Q	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XMLGregorianCalendarImpl	TokenNameIdentifier
)	TokenNameRPAREN
normalizeToTimezone	TokenNameIdentifier
(	TokenNameLPAREN
Q	TokenNameIdentifier
,	TokenNameCOMMA
Q	TokenNameIdentifier
.	TokenNameDOT
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XMLGregorianCalendar	TokenNameIdentifier
MaxP	TokenNameIdentifier
=	TokenNameEQUAL
normalizeToTimezone	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
MAX_TIMEZONE_OFFSET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
internalCompare	TokenNameIdentifier
(	TokenNameLPAREN
MaxP	TokenNameIdentifier
,	TokenNameCOMMA
Q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
LESSER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XMLGregorianCalendar	TokenNameIdentifier
MinP	TokenNameIdentifier
=	TokenNameEQUAL
normalizeToTimezone	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
,	TokenNameCOMMA
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
MIN_TIMEZONE_OFFSET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
internalCompare	TokenNameIdentifier
(	TokenNameLPAREN
MinP	TokenNameIdentifier
,	TokenNameCOMMA
Q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GREATER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
XMLGregorianCalendar	TokenNameIdentifier
normalize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
XMLGregorianCalendar	TokenNameIdentifier
normalized	TokenNameIdentifier
=	TokenNameEQUAL
normalizeToTimezone	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
timezone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
normalized	TokenNameIdentifier
.	TokenNameDOT
setTimezone	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
getMillisecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
normalized	TokenNameIdentifier
.	TokenNameDOT
setMillisecond	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
normalized	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XMLGregorianCalendar	TokenNameIdentifier
normalizeToTimezone	TokenNameIdentifier
(	TokenNameLPAREN
XMLGregorianCalendar	TokenNameIdentifier
cal	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
timezone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
minutes	TokenNameIdentifier
=	TokenNameEQUAL
timezone	TokenNameIdentifier
;	TokenNameSEMICOLON
XMLGregorianCalendar	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XMLGregorianCalendar	TokenNameIdentifier
)	TokenNameRPAREN
cal	TokenNameIdentifier
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
minutes	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
minutes	TokenNameIdentifier
;	TokenNameSEMICOLON
Duration	TokenNameIdentifier
d	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DurationImpl	TokenNameIdentifier
(	TokenNameLPAREN
minutes	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
minutes	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
-	TokenNameMINUS
minutes	TokenNameIdentifier
:	TokenNameCOLON
minutes	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
setTimezone	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
internalCompare	TokenNameIdentifier
(	TokenNameLPAREN
XMLGregorianCalendar	TokenNameIdentifier
P	TokenNameIdentifier
,	TokenNameCOMMA
XMLGregorianCalendar	TokenNameIdentifier
Q	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
result	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getEon	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
Q	TokenNameIdentifier
.	TokenNameDOT
getEon	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
compareField	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
Q	TokenNameIdentifier
.	TokenNameDOT
getYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
compareField	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
Q	TokenNameIdentifier
.	TokenNameDOT
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
compareField	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getMonth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
Q	TokenNameIdentifier
.	TokenNameDOT
getMonth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
compareField	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getDay	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
Q	TokenNameIdentifier
.	TokenNameDOT
getDay	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
compareField	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getHour	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
Q	TokenNameIdentifier
.	TokenNameDOT
getHour	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
compareField	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getMinute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
Q	TokenNameIdentifier
.	TokenNameDOT
getMinute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
compareField	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
Q	TokenNameIdentifier
.	TokenNameDOT
getSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
compareField	TokenNameIdentifier
(	TokenNameLPAREN
P	TokenNameIdentifier
.	TokenNameDOT
getFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
Q	TokenNameIdentifier
.	TokenNameDOT
getFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
compareField	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
Pfield	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
Qfield	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
Pfield	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Qfield	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
Pfield	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
||	TokenNameOR_OR
Qfield	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
Pfield	TokenNameIdentifier
<	TokenNameLESS
Qfield	TokenNameIdentifier
?	TokenNameQUESTION
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
LESSER	TokenNameIdentifier
:	TokenNameCOLON
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GREATER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
compareField	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
Pfield	TokenNameIdentifier
,	TokenNameCOMMA
BigInteger	TokenNameIdentifier
Qfield	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
Pfield	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
Qfield	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
:	TokenNameCOLON
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
INDETERMINATE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
Qfield	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
Pfield	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
Qfield	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
compareField	TokenNameIdentifier
(	TokenNameLPAREN
BigDecimal	TokenNameIdentifier
Pfield	TokenNameIdentifier
,	TokenNameCOMMA
BigDecimal	TokenNameIdentifier
Qfield	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
Pfield	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Qfield	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
Pfield	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
Pfield	TokenNameIdentifier
=	TokenNameEQUAL
DECIMAL_ZERO	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
Qfield	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
Qfield	TokenNameIdentifier
=	TokenNameEQUAL
DECIMAL_ZERO	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
Pfield	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
Qfield	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
equals	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
obj	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
obj	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
this	TokenNamethis
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
obj	TokenNameIdentifier
instanceof	TokenNameinstanceof
XMLGregorianCalendar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
compare	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XMLGregorianCalendar	TokenNameIdentifier
)	TokenNameRPAREN
obj	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
EQUAL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
timezone	TokenNameIdentifier
=	TokenNameEQUAL
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
timezone	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
timezone	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XMLGregorianCalendar	TokenNameIdentifier
gc	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
timezone	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
gc	TokenNameIdentifier
=	TokenNameEQUAL
normalizeToTimezone	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
gc	TokenNameIdentifier
.	TokenNameDOT
getYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
gc	TokenNameIdentifier
.	TokenNameDOT
getMonth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
gc	TokenNameIdentifier
.	TokenNameDOT
getDay	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
gc	TokenNameIdentifier
.	TokenNameDOT
getHour	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
gc	TokenNameIdentifier
.	TokenNameDOT
getMinute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
gc	TokenNameIdentifier
.	TokenNameDOT
getSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
XMLGregorianCalendar	TokenNameIdentifier
parse	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
lexicalRepresentation	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
lexicalRepresentation	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toXMLFormat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
QName	TokenNameIdentifier
typekind	TokenNameIdentifier
=	TokenNameEQUAL
getXMLSchemaType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
formatString	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
typekind	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
DATETIME	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
formatString	TokenNameIdentifier
=	TokenNameEQUAL
"%Y-%M-%DT%h:%m:%s"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
typekind	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
DATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
formatString	TokenNameIdentifier
=	TokenNameEQUAL
"%Y-%M-%D"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
typekind	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
TIME	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
formatString	TokenNameIdentifier
=	TokenNameEQUAL
"%h:%m:%s"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
typekind	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GMONTH	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
formatString	TokenNameIdentifier
=	TokenNameEQUAL
"--%M--%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
typekind	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GDAY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
formatString	TokenNameIdentifier
=	TokenNameEQUAL
"---%D"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
typekind	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GYEAR	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
formatString	TokenNameIdentifier
=	TokenNameEQUAL
"%Y"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
typekind	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GYEARMONTH	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
formatString	TokenNameIdentifier
=	TokenNameEQUAL
"%Y-%M"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
typekind	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GMONTHDAY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
formatString	TokenNameIdentifier
=	TokenNameEQUAL
"--%M-%D"	TokenNameStringLiteral
+	TokenNamePLUS
"%z"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
format	TokenNameIdentifier
(	TokenNameLPAREN
formatString	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
QName	TokenNameIdentifier
getXMLSchemaType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
month	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
day	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
hour	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
minute	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
second	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
DATETIME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
month	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
day	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
hour	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
minute	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
second	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
DATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
month	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
day	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
hour	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
minute	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
second	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
TIME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
month	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
day	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
hour	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
minute	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
second	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GYEARMONTH	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
month	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
day	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
hour	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
minute	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
second	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GMONTHDAY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
month	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
day	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
hour	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
minute	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
second	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GYEAR	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
month	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
day	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
hour	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
minute	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
second	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GMONTH	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
month	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
day	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
hour	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
minute	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
second	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
GDAY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalStateException	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"#getXMLSchemaType() :"	TokenNameStringLiteral
+	TokenNamePLUS
DatatypeMessageFormatter	TokenNameIdentifier
.	TokenNameDOT
formatMessage	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
"InvalidXGCFields"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isValid	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
month	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
&&	TokenNameAND_AND
day	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
eon	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
day	TokenNameIdentifier
>	TokenNameGREATER
maximumDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
,	TokenNameCOMMA
month	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
day	TokenNameIdentifier
>	TokenNameGREATER
maximumDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
month	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
day	TokenNameIdentifier
>	TokenNameGREATER
maximumDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
2000	TokenNameIntegerLiteral
,	TokenNameCOMMA
month	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
hour	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
24	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
minute	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
second	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
fractionalSecond	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
fractionalSecond	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
DECIMAL_ZERO	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
eon	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
year	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
add	TokenNameIdentifier
(	TokenNameLPAREN
Duration	TokenNameIdentifier
duration	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
fieldUndefined	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
false	TokenNamefalse
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
false	TokenNamefalse
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
signum	TokenNameIdentifier
=	TokenNameEQUAL
duration	TokenNameIdentifier
.	TokenNameDOT
getSign	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
startMonth	TokenNameIdentifier
=	TokenNameEQUAL
getMonth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
startMonth	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
startMonth	TokenNameIdentifier
=	TokenNameEQUAL
MIN_FIELD_VALUE	TokenNameIdentifier
[	TokenNameLBRACKET
MONTH	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fieldUndefined	TokenNameIdentifier
[	TokenNameLBRACKET
MONTH	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
BigInteger	TokenNameIdentifier
dMonths	TokenNameIdentifier
=	TokenNameEQUAL
sanitize	TokenNameIdentifier
(	TokenNameLPAREN
duration	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
MONTHS	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
signum	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BigInteger	TokenNameIdentifier
temp	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
startMonth	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
dMonths	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setMonth	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
.	TokenNameDOT
subtract	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
ONE	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
mod	TokenNameIdentifier
(	TokenNameLPAREN
TWELVE	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BigInteger	TokenNameIdentifier
carry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
.	TokenNameDOT
subtract	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
ONE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
divide	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
BigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
TWELVE	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
ROUND_FLOOR	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
toBigInteger	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BigInteger	TokenNameIdentifier
startYear	TokenNameIdentifier
=	TokenNameEQUAL
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
startYear	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fieldUndefined	TokenNameIdentifier
[	TokenNameLBRACKET
YEAR	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
startYear	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
ZERO	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
BigInteger	TokenNameIdentifier
dYears	TokenNameIdentifier
=	TokenNameEQUAL
sanitize	TokenNameIdentifier
(	TokenNameLPAREN
duration	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
YEARS	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
signum	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BigInteger	TokenNameIdentifier
endYear	TokenNameIdentifier
=	TokenNameEQUAL
startYear	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
dYears	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
carry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setYear	TokenNameIdentifier
(	TokenNameLPAREN
endYear	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BigDecimal	TokenNameIdentifier
startSeconds	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
getSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fieldUndefined	TokenNameIdentifier
[	TokenNameLBRACKET
SECOND	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
startSeconds	TokenNameIdentifier
=	TokenNameEQUAL
DECIMAL_ZERO	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
startSeconds	TokenNameIdentifier
=	TokenNameEQUAL
getSeconds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
BigDecimal	TokenNameIdentifier
dSeconds	TokenNameIdentifier
=	TokenNameEQUAL
DurationImpl	TokenNameIdentifier
.	TokenNameDOT
sanitize	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
BigDecimal	TokenNameIdentifier
)	TokenNameRPAREN
duration	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
SECONDS	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
signum	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BigDecimal	TokenNameIdentifier
tempBD	TokenNameIdentifier
=	TokenNameEQUAL
startSeconds	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
dSeconds	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BigDecimal	TokenNameIdentifier
fQuotient	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
BigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
tempBD	TokenNameIdentifier
.	TokenNameDOT
toBigInteger	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
divide	TokenNameIdentifier
(	TokenNameLPAREN
DECIMAL_SIXTY	TokenNameIdentifier
,	TokenNameCOMMA
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
ROUND_FLOOR	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
toBigInteger	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BigDecimal	TokenNameIdentifier
endSeconds	TokenNameIdentifier
=	TokenNameEQUAL
tempBD	TokenNameIdentifier
.	TokenNameDOT
subtract	TokenNameIdentifier
(	TokenNameLPAREN
fQuotient	TokenNameIdentifier
.	TokenNameDOT
multiply	TokenNameIdentifier
(	TokenNameLPAREN
DECIMAL_SIXTY	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
carry	TokenNameIdentifier
=	TokenNameEQUAL
fQuotient	TokenNameIdentifier
.	TokenNameDOT
toBigInteger	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setSecond	TokenNameIdentifier
(	TokenNameLPAREN
endSeconds	TokenNameIdentifier
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BigDecimal	TokenNameIdentifier
tempFracSeconds	TokenNameIdentifier
=	TokenNameEQUAL
endSeconds	TokenNameIdentifier
.	TokenNameDOT
subtract	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
BigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
getSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tempFracSeconds	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
DECIMAL_ZERO	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
setFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
DECIMAL_ONE	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
tempFracSeconds	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
getSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
setSecond	TokenNameIdentifier
(	TokenNameLPAREN
59	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
carry	TokenNameIdentifier
=	TokenNameEQUAL
carry	TokenNameIdentifier
.	TokenNameDOT
subtract	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
ONE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
setSecond	TokenNameIdentifier
(	TokenNameLPAREN
getSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
setFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
tempFracSeconds	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
startMinutes	TokenNameIdentifier
=	TokenNameEQUAL
getMinute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
startMinutes	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fieldUndefined	TokenNameIdentifier
[	TokenNameLBRACKET
MINUTE	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
startMinutes	TokenNameIdentifier
=	TokenNameEQUAL
MIN_FIELD_VALUE	TokenNameIdentifier
[	TokenNameLBRACKET
MINUTE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
BigInteger	TokenNameIdentifier
dMinutes	TokenNameIdentifier
=	TokenNameEQUAL
sanitize	TokenNameIdentifier
(	TokenNameLPAREN
duration	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
MINUTES	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
signum	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
temp	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
startMinutes	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
dMinutes	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
carry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setMinute	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
.	TokenNameDOT
mod	TokenNameIdentifier
(	TokenNameLPAREN
SIXTY	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
carry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
divide	TokenNameIdentifier
(	TokenNameLPAREN
DECIMAL_SIXTY	TokenNameIdentifier
,	TokenNameCOMMA
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
ROUND_FLOOR	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
toBigInteger	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
startHours	TokenNameIdentifier
=	TokenNameEQUAL
getHour	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
startHours	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fieldUndefined	TokenNameIdentifier
[	TokenNameLBRACKET
HOUR	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
startHours	TokenNameIdentifier
=	TokenNameEQUAL
MIN_FIELD_VALUE	TokenNameIdentifier
[	TokenNameLBRACKET
HOUR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
BigInteger	TokenNameIdentifier
dHours	TokenNameIdentifier
=	TokenNameEQUAL
sanitize	TokenNameIdentifier
(	TokenNameLPAREN
duration	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
HOURS	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
signum	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
temp	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
startHours	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
dHours	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
carry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setHour	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
.	TokenNameDOT
mod	TokenNameIdentifier
(	TokenNameLPAREN
TWENTY_FOUR	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
carry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
divide	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
BigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
TWENTY_FOUR	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
ROUND_FLOOR	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
toBigInteger	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BigInteger	TokenNameIdentifier
tempDays	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
startDay	TokenNameIdentifier
=	TokenNameEQUAL
getDay	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
startDay	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fieldUndefined	TokenNameIdentifier
[	TokenNameLBRACKET
DAY	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
startDay	TokenNameIdentifier
=	TokenNameEQUAL
MIN_FIELD_VALUE	TokenNameIdentifier
[	TokenNameLBRACKET
DAY	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
BigInteger	TokenNameIdentifier
dDays	TokenNameIdentifier
=	TokenNameEQUAL
sanitize	TokenNameIdentifier
(	TokenNameLPAREN
duration	TokenNameIdentifier
.	TokenNameDOT
getField	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
DAYS	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
signum	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
maxDayInMonth	TokenNameIdentifier
=	TokenNameEQUAL
maximumDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
getMonth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
startDay	TokenNameIdentifier
>	TokenNameGREATER
maxDayInMonth	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tempDays	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
maxDayInMonth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
startDay	TokenNameIdentifier
<	TokenNameLESS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
tempDays	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
ONE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tempDays	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
startDay	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
BigInteger	TokenNameIdentifier
endDays	TokenNameIdentifier
=	TokenNameEQUAL
tempDays	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
dDays	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
carry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
monthCarry	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
intTemp	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
endDays	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
ONE	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
BigInteger	TokenNameIdentifier
mdimf	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
month	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
mdimf	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
maximumDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
getMonth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
mdimf	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
maximumDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
subtract	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
endDays	TokenNameIdentifier
=	TokenNameEQUAL
endDays	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
mdimf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
monthCarry	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
endDays	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
maximumDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
getMonth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
endDays	TokenNameIdentifier
=	TokenNameEQUAL
endDays	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
maximumDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
getMonth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
monthCarry	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
intTemp	TokenNameIdentifier
=	TokenNameEQUAL
getMonth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
monthCarry	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
endMonth	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
intTemp	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
(	TokenNameLPAREN
13	TokenNameIntegerLiteral
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
quotient	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
endMonth	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
endMonth	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
13	TokenNameIntegerLiteral
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
endMonth	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
quotient	TokenNameIdentifier
=	TokenNameEQUAL
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
intTemp	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
divide	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
BigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
TWELVE	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
ROUND_UP	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
quotient	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
intTemp	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
13	TokenNameIntegerLiteral
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endMonth	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
setMonth	TokenNameIdentifier
(	TokenNameLPAREN
endMonth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
quotient	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
setYear	TokenNameIdentifier
(	TokenNameLPAREN
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
quotient	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
setDay	TokenNameIdentifier
(	TokenNameLPAREN
endDays	TokenNameIdentifier
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
YEAR	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
SECOND	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fieldUndefined	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
YEAR	TokenNameIdentifier
:	TokenNameCOLON
setYear	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
MONTH	TokenNameIdentifier
:	TokenNameCOLON
setMonth	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
DAY	TokenNameIdentifier
:	TokenNameCOLON
setDay	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
HOUR	TokenNameIdentifier
:	TokenNameCOLON
setHour	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
MINUTE	TokenNameIdentifier
:	TokenNameCOLON
setMinute	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
SECOND	TokenNameIdentifier
:	TokenNameCOLON
setSecond	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
BigInteger	TokenNameIdentifier
FOUR	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
BigInteger	TokenNameIdentifier
HUNDRED	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
100	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
BigInteger	TokenNameIdentifier
FOUR_HUNDRED	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
400	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
BigInteger	TokenNameIdentifier
SIXTY	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
60	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
BigInteger	TokenNameIdentifier
TWENTY_FOUR	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
BigInteger	TokenNameIdentifier
TWELVE	TokenNameIdentifier
=	TokenNameEQUAL
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
BigDecimal	TokenNameIdentifier
DECIMAL_ZERO	TokenNameIdentifier
=	TokenNameEQUAL
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
BigDecimal	TokenNameIdentifier
DECIMAL_ONE	TokenNameIdentifier
=	TokenNameEQUAL
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
BigDecimal	TokenNameIdentifier
DECIMAL_SIXTY	TokenNameIdentifier
=	TokenNameEQUAL
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
60	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
DaysInMonth	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
table	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
31	TokenNameIntegerLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
31	TokenNameIntegerLiteral
,	TokenNameCOMMA
30	TokenNameIntegerLiteral
,	TokenNameCOMMA
31	TokenNameIntegerLiteral
,	TokenNameCOMMA
30	TokenNameIntegerLiteral
,	TokenNameCOMMA
31	TokenNameIntegerLiteral
,	TokenNameCOMMA
31	TokenNameIntegerLiteral
,	TokenNameCOMMA
30	TokenNameIntegerLiteral
,	TokenNameCOMMA
31	TokenNameIntegerLiteral
,	TokenNameCOMMA
30	TokenNameIntegerLiteral
,	TokenNameCOMMA
31	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
maximumDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
month	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FEBRUARY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DaysInMonth	TokenNameIdentifier
.	TokenNameDOT
table	TokenNameIdentifier
[	TokenNameLBRACKET
month	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
.	TokenNameDOT
mod	TokenNameIdentifier
(	TokenNameLPAREN
FOUR_HUNDRED	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
ZERO	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
!	TokenNameNOT
year	TokenNameIdentifier
.	TokenNameDOT
mod	TokenNameIdentifier
(	TokenNameLPAREN
HUNDRED	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
ZERO	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
year	TokenNameIdentifier
.	TokenNameDOT
mod	TokenNameIdentifier
(	TokenNameLPAREN
FOUR	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
.	TokenNameDOT
ZERO	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
29	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
DaysInMonth	TokenNameIdentifier
.	TokenNameDOT
table	TokenNameIdentifier
[	TokenNameLBRACKET
month	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
maximumDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
month	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FEBRUARY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DaysInMonth	TokenNameIdentifier
.	TokenNameDOT
table	TokenNameIdentifier
[	TokenNameLBRACKET
month	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
year	TokenNameIdentifier
%	TokenNameREMAINDER
400	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
year	TokenNameIdentifier
%	TokenNameREMAINDER
100	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
(	TokenNameLPAREN
year	TokenNameIdentifier
%	TokenNameREMAINDER
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
29	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
DaysInMonth	TokenNameIdentifier
.	TokenNameDOT
table	TokenNameIdentifier
[	TokenNameLBRACKET
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FEBRUARY	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
GregorianCalendar	TokenNameIdentifier
toGregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
GregorianCalendar	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
DEFAULT_TIMEZONE_OFFSET	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
TimeZone	TokenNameIdentifier
tz	TokenNameIdentifier
=	TokenNameEQUAL
getTimeZone	TokenNameIdentifier
(	TokenNameLPAREN
DEFAULT_TIMEZONE_OFFSET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
=	TokenNameEQUAL
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
.	TokenNameDOT
getDefault	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
tz	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
setGregorianChange	TokenNameIdentifier
(	TokenNameLPAREN
PURE_GREGORIAN_CHANGE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
eon	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
ERA	TokenNameIdentifier
,	TokenNameCOMMA
year	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
BC	TokenNameIdentifier
:	TokenNameCOLON
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
AD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
YEAR	TokenNameIdentifier
,	TokenNameCOMMA
Math	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
BigInteger	TokenNameIdentifier
eonAndYear	TokenNameIdentifier
=	TokenNameEQUAL
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
ERA	TokenNameIdentifier
,	TokenNameCOMMA
eonAndYear	TokenNameIdentifier
.	TokenNameDOT
signum	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
?	TokenNameQUESTION
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
BC	TokenNameIdentifier
:	TokenNameCOLON
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
AD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
YEAR	TokenNameIdentifier
,	TokenNameCOMMA
eonAndYear	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
month	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MONTH	TokenNameIdentifier
,	TokenNameCOMMA
month	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
day	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
DAY_OF_MONTH	TokenNameIdentifier
,	TokenNameCOMMA
day	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
hour	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
HOUR_OF_DAY	TokenNameIdentifier
,	TokenNameCOMMA
hour	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
minute	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MINUTE	TokenNameIdentifier
,	TokenNameCOMMA
minute	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
second	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
SECOND	TokenNameIdentifier
,	TokenNameCOMMA
second	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fractionalSecond	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
,	TokenNameCOMMA
getMillisecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
GregorianCalendar	TokenNameIdentifier
toGregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
TimeZone	TokenNameIdentifier
timezone	TokenNameIdentifier
,	TokenNameCOMMA
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
aLocale	TokenNameIdentifier
,	TokenNameCOMMA
XMLGregorianCalendar	TokenNameIdentifier
defaults	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
GregorianCalendar	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
TimeZone	TokenNameIdentifier
tz	TokenNameIdentifier
=	TokenNameEQUAL
timezone	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tz	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
defaultZoneoffset	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
defaults	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
defaultZoneoffset	TokenNameIdentifier
=	TokenNameEQUAL
defaults	TokenNameIdentifier
.	TokenNameDOT
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tz	TokenNameIdentifier
=	TokenNameEQUAL
getTimeZone	TokenNameIdentifier
(	TokenNameLPAREN
defaultZoneoffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
aLocale	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
aLocale	TokenNameIdentifier
=	TokenNameEQUAL
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
.	TokenNameDOT
getDefault	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
tz	TokenNameIdentifier
,	TokenNameCOMMA
aLocale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
setGregorianChange	TokenNameIdentifier
(	TokenNameLPAREN
PURE_GREGORIAN_CHANGE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
year	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
eon	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
ERA	TokenNameIdentifier
,	TokenNameCOMMA
year	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
BC	TokenNameIdentifier
:	TokenNameCOLON
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
AD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
YEAR	TokenNameIdentifier
,	TokenNameCOMMA
Math	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
BigInteger	TokenNameIdentifier
eonAndYear	TokenNameIdentifier
=	TokenNameEQUAL
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
ERA	TokenNameIdentifier
,	TokenNameCOMMA
eonAndYear	TokenNameIdentifier
.	TokenNameDOT
signum	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
?	TokenNameQUESTION
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
BC	TokenNameIdentifier
:	TokenNameCOLON
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
AD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
YEAR	TokenNameIdentifier
,	TokenNameCOMMA
eonAndYear	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
defaults	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
defaultYear	TokenNameIdentifier
=	TokenNameEQUAL
defaults	TokenNameIdentifier
.	TokenNameDOT
getYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
defaultYear	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
defaults	TokenNameIdentifier
.	TokenNameDOT
getEon	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
ERA	TokenNameIdentifier
,	TokenNameCOMMA
defaultYear	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
BC	TokenNameIdentifier
:	TokenNameCOLON
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
AD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
YEAR	TokenNameIdentifier
,	TokenNameCOMMA
Math	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
defaultYear	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
BigInteger	TokenNameIdentifier
defaultEonAndYear	TokenNameIdentifier
=	TokenNameEQUAL
defaults	TokenNameIdentifier
.	TokenNameDOT
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
ERA	TokenNameIdentifier
,	TokenNameCOMMA
defaultEonAndYear	TokenNameIdentifier
.	TokenNameDOT
signum	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
?	TokenNameQUESTION
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
BC	TokenNameIdentifier
:	TokenNameCOLON
GregorianCalendar	TokenNameIdentifier
.	TokenNameDOT
AD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
YEAR	TokenNameIdentifier
,	TokenNameCOMMA
defaultEonAndYear	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
month	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MONTH	TokenNameIdentifier
,	TokenNameCOMMA
month	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
defaultMonth	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
defaults	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
defaults	TokenNameIdentifier
.	TokenNameDOT
getMonth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
defaultMonth	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MONTH	TokenNameIdentifier
,	TokenNameCOMMA
defaultMonth	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
day	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
DAY_OF_MONTH	TokenNameIdentifier
,	TokenNameCOMMA
day	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
defaultDay	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
defaults	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
defaults	TokenNameIdentifier
.	TokenNameDOT
getDay	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
defaultDay	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
DAY_OF_MONTH	TokenNameIdentifier
,	TokenNameCOMMA
defaultDay	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
hour	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
HOUR_OF_DAY	TokenNameIdentifier
,	TokenNameCOMMA
hour	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
defaultHour	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
defaults	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
defaults	TokenNameIdentifier
.	TokenNameDOT
getHour	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
defaultHour	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
HOUR_OF_DAY	TokenNameIdentifier
,	TokenNameCOMMA
defaultHour	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
minute	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MINUTE	TokenNameIdentifier
,	TokenNameCOMMA
minute	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
defaultMinute	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
defaults	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
defaults	TokenNameIdentifier
.	TokenNameDOT
getMinute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
defaultMinute	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MINUTE	TokenNameIdentifier
,	TokenNameCOMMA
defaultMinute	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
second	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
SECOND	TokenNameIdentifier
,	TokenNameCOMMA
second	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
defaultSecond	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
defaults	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
defaults	TokenNameIdentifier
.	TokenNameDOT
getSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
defaultSecond	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
SECOND	TokenNameIdentifier
,	TokenNameCOMMA
defaultSecond	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fractionalSecond	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
,	TokenNameCOMMA
getMillisecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
BigDecimal	TokenNameIdentifier
defaultFractionalSecond	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
defaults	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
defaults	TokenNameIdentifier
.	TokenNameDOT
getFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
defaultFractionalSecond	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
,	TokenNameCOMMA
defaults	TokenNameIdentifier
.	TokenNameDOT
getMillisecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
TimeZone	TokenNameIdentifier
getTimeZone	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
defaultZoneoffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
TimeZone	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
zoneoffset	TokenNameIdentifier
=	TokenNameEQUAL
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
zoneoffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
zoneoffset	TokenNameIdentifier
=	TokenNameEQUAL
defaultZoneoffset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
zoneoffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
TimeZone	TokenNameIdentifier
.	TokenNameDOT
getDefault	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
char	TokenNamechar
sign	TokenNameIdentifier
=	TokenNameEQUAL
zoneoffset	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
'+'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sign	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
zoneoffset	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
zoneoffset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
hour	TokenNameIdentifier
=	TokenNameEQUAL
zoneoffset	TokenNameIdentifier
/	TokenNameDIVIDE
60	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
minutes	TokenNameIdentifier
=	TokenNameEQUAL
zoneoffset	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
hour	TokenNameIdentifier
*	TokenNameMULTIPLY
60	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
StringBuffer	TokenNameIdentifier
customTimezoneId	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
customTimezoneId	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"GMT"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
customTimezoneId	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
customTimezoneId	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
hour	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
minutes	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
minutes	TokenNameIdentifier
<	TokenNameLESS
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
customTimezoneId	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
customTimezoneId	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
minutes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
TimeZone	TokenNameIdentifier
.	TokenNameDOT
getTimeZone	TokenNameIdentifier
(	TokenNameLPAREN
customTimezoneId	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
XMLGregorianCalendarImpl	TokenNameIdentifier
(	TokenNameLPAREN
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
month	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
day	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
hour	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
minute	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
second	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
fractionalSecond	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
timezone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
eon	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
year	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
month	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
day	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
timezone	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
hour	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
minute	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
second	TokenNameIdentifier
=	TokenNameEQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
;	TokenNameSEMICOLON
fractionalSecond	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setMillisecond	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
millisecond	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
millisecond	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fractionalSecond	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
checkFieldValueConstraint	TokenNameIdentifier
(	TokenNameLPAREN
MILLISECOND	TokenNameIdentifier
,	TokenNameCOMMA
millisecond	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fractionalSecond	TokenNameIdentifier
=	TokenNameEQUAL
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
millisecond	TokenNameIdentifier
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
BigDecimal	TokenNameIdentifier
fractional	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fractional	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
fractional	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
DECIMAL_ZERO	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
fractional	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
DECIMAL_ONE	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeMessageFormatter	TokenNameIdentifier
.	TokenNameDOT
formatMessage	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
"InvalidFractional"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
fractional	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
fractionalSecond	TokenNameIdentifier
=	TokenNameEQUAL
fractional	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
class	TokenNameclass
Parser	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
format	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
value	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
flen	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
vlen	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fidx	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
vidx	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Parser	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
format	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
format	TokenNameIdentifier
=	TokenNameEQUAL
format	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
value	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
flen	TokenNameIdentifier
=	TokenNameEQUAL
format	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
vlen	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
parse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IllegalArgumentException	TokenNameIdentifier
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
fidx	TokenNameIdentifier
<	TokenNameLESS
flen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
fch	TokenNameIdentifier
=	TokenNameEQUAL
format	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
fidx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fch	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'%'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
skip	TokenNameIdentifier
(	TokenNameLPAREN
fch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
format	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
fidx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'Y'	TokenNameCharacterLiteral
:	TokenNameCOLON
parseYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'M'	TokenNameCharacterLiteral
:	TokenNameCOLON
setMonth	TokenNameIdentifier
(	TokenNameLPAREN
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'D'	TokenNameCharacterLiteral
:	TokenNameCOLON
setDay	TokenNameIdentifier
(	TokenNameLPAREN
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'h'	TokenNameCharacterLiteral
:	TokenNameCOLON
setHour	TokenNameIdentifier
(	TokenNameLPAREN
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'm'	TokenNameCharacterLiteral
:	TokenNameCOLON
setMinute	TokenNameIdentifier
(	TokenNameLPAREN
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
's'	TokenNameCharacterLiteral
:	TokenNameCOLON
setSecond	TokenNameIdentifier
(	TokenNameLPAREN
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
setFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
parseBigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'z'	TokenNameCharacterLiteral
:	TokenNameCOLON
char	TokenNamechar
vch	TokenNameIdentifier
=	TokenNameEQUAL
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
vch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'Z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
vidx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
setTimezone	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
vch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'+'	TokenNameCharacterLiteral
||	TokenNameOR_OR
vch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
vidx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
skip	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setTimezone	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
h	TokenNameIdentifier
*	TokenNameMULTIPLY
60	TokenNameIntegerLiteral
+	TokenNamePLUS
m	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
(	TokenNameLPAREN
vch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'+'	TokenNameCharacterLiteral
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
InternalError	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
vidx	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
vlen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
char	TokenNamechar
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IllegalArgumentException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
vidx	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
vlen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
value	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
vidx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
char	TokenNamechar
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IllegalArgumentException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
vidx	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
vlen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
value	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
vidx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
skip	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
ch	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IllegalArgumentException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
parseYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IllegalArgumentException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
vstart	TokenNameIdentifier
=	TokenNameEQUAL
vidx	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
sign	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
vidx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
sign	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
isDigit	TokenNameIdentifier
(	TokenNameLPAREN
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
vidx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
digits	TokenNameIdentifier
=	TokenNameEQUAL
vidx	TokenNameIdentifier
-	TokenNameMINUS
vstart	TokenNameIdentifier
-	TokenNameMINUS
sign	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
digits	TokenNameIdentifier
<	TokenNameLESS
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
String	TokenNameIdentifier
yearString	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
vstart	TokenNameIdentifier
,	TokenNameCOMMA
vidx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
digits	TokenNameIdentifier
<	TokenNameLESS
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
setYear	TokenNameIdentifier
(	TokenNameLPAREN
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
yearString	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
setYear	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
BigInteger	TokenNameIdentifier
(	TokenNameLPAREN
yearString	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
minDigits	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxDigits	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IllegalArgumentException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
vstart	TokenNameIdentifier
=	TokenNameEQUAL
vidx	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
isDigit	TokenNameIdentifier
(	TokenNameLPAREN
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
vidx	TokenNameIdentifier
-	TokenNameMINUS
vstart	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
maxDigits	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
vidx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
vidx	TokenNameIdentifier
-	TokenNameMINUS
vstart	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
minDigits	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
vstart	TokenNameIdentifier
,	TokenNameCOMMA
vidx	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
BigDecimal	TokenNameIdentifier
parseBigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IllegalArgumentException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
vstart	TokenNameIdentifier
=	TokenNameEQUAL
vidx	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
vidx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
isDigit	TokenNameIdentifier
(	TokenNameLPAREN
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
vidx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
BigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
vstart	TokenNameIdentifier
,	TokenNameCOMMA
vidx	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
boolean	TokenNameboolean
isDigit	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
'0'	TokenNameCharacterLiteral
<=	TokenNameLESS_EQUAL
ch	TokenNameIdentifier
&&	TokenNameAND_AND
ch	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
format	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
format	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
buf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
fidx	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
flen	TokenNameIdentifier
=	TokenNameEQUAL
format	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
fidx	TokenNameIdentifier
<	TokenNameLESS
flen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
fch	TokenNameIdentifier
=	TokenNameEQUAL
format	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
fidx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fch	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'%'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
fch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
format	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
fidx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'Y'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
eon	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
absYear	TokenNameIdentifier
=	TokenNameEQUAL
year	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
absYear	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
absYear	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
year	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
printNumber	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
,	TokenNameCOMMA
absYear	TokenNameIdentifier
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
printNumber	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
,	TokenNameCOMMA
getEonAndYear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'M'	TokenNameCharacterLiteral
:	TokenNameCOLON
printNumber	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
,	TokenNameCOMMA
getMonth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'D'	TokenNameCharacterLiteral
:	TokenNameCOLON
printNumber	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
,	TokenNameCOMMA
getDay	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'h'	TokenNameCharacterLiteral
:	TokenNameCOLON
printNumber	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
,	TokenNameCOMMA
getHour	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'm'	TokenNameCharacterLiteral
:	TokenNameCOLON
printNumber	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
,	TokenNameCOMMA
getMinute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
's'	TokenNameCharacterLiteral
:	TokenNameCOLON
printNumber	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
,	TokenNameCOMMA
getSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
getFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
frac	TokenNameIdentifier
=	TokenNameEQUAL
toString	TokenNameIdentifier
(	TokenNameLPAREN
getFractionalSecond	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
frac	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
frac	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'z'	TokenNameCharacterLiteral
:	TokenNameCOLON
int	TokenNameint
offset	TokenNameIdentifier
=	TokenNameEQUAL
getTimezone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
offset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'Z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
offset	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
offset	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'+'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
printNumber	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
/	TokenNameDIVIDE
60	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
printNumber	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
%	TokenNameREMAINDER
60	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
InternalError	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
buf	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printNumber	TokenNameIdentifier
(	TokenNameLPAREN
StringBuffer	TokenNameIdentifier
out	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
number	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
nDigits	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
number	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nDigits	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
out	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printNumber	TokenNameIdentifier
(	TokenNameLPAREN
StringBuffer	TokenNameIdentifier
out	TokenNameIdentifier
,	TokenNameCOMMA
BigInteger	TokenNameIdentifier
number	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
nDigits	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
number	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nDigits	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
out	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
BigDecimal	TokenNameIdentifier
bd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
intString	TokenNameIdentifier
=	TokenNameEQUAL
bd	TokenNameIdentifier
.	TokenNameDOT
unscaledValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
scale	TokenNameIdentifier
=	TokenNameEQUAL
bd	TokenNameIdentifier
.	TokenNameDOT
scale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
scale	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
intString	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
StringBuffer	TokenNameIdentifier
buf	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
insertionPoint	TokenNameIdentifier
=	TokenNameEQUAL
intString	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
scale	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
insertionPoint	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"0."	TokenNameStringLiteral
+	TokenNamePLUS
intString	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
insertionPoint	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
buf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
intString	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
insert	TokenNameIdentifier
(	TokenNameLPAREN
insertionPoint	TokenNameIdentifier
,	TokenNameCOMMA
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
buf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
-	TokenNameMINUS
insertionPoint	TokenNameIdentifier
+	TokenNamePLUS
intString	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"0."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
-	TokenNameMINUS
insertionPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
intString	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
buf	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
BigInteger	TokenNameIdentifier
sanitize	TokenNameIdentifier
(	TokenNameLPAREN
Number	TokenNameIdentifier
value	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
signum	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
signum	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
BigInteger	TokenNameIdentifier
.	TokenNameDOT
ZERO	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
(	TokenNameLPAREN
signum	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
)	TokenNameRPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
negate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
(	TokenNameLPAREN
BigInteger	TokenNameIdentifier
)	TokenNameRPAREN
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
eon	TokenNameIdentifier
=	TokenNameEQUAL
orig_eon	TokenNameIdentifier
;	TokenNameSEMICOLON
year	TokenNameIdentifier
=	TokenNameEQUAL
orig_year	TokenNameIdentifier
;	TokenNameSEMICOLON
month	TokenNameIdentifier
=	TokenNameEQUAL
orig_month	TokenNameIdentifier
;	TokenNameSEMICOLON
day	TokenNameIdentifier
=	TokenNameEQUAL
orig_day	TokenNameIdentifier
;	TokenNameSEMICOLON
hour	TokenNameIdentifier
=	TokenNameEQUAL
orig_hour	TokenNameIdentifier
;	TokenNameSEMICOLON
minute	TokenNameIdentifier
=	TokenNameEQUAL
orig_minute	TokenNameIdentifier
;	TokenNameSEMICOLON
second	TokenNameIdentifier
=	TokenNameEQUAL
orig_second	TokenNameIdentifier
;	TokenNameSEMICOLON
fractionalSecond	TokenNameIdentifier
=	TokenNameEQUAL
orig_fracSeconds	TokenNameIdentifier
;	TokenNameSEMICOLON
timezone	TokenNameIdentifier
=	TokenNameEQUAL
orig_timezone	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Object	TokenNameIdentifier
writeReplace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
SerializedXMLGregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
toXMLFormat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
