package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
DOMImplementation	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Element	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Node	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
DeferredDocumentImpl	TokenNameIdentifier
extends	TokenNameextends
DocumentImpl	TokenNameIdentifier
implements	TokenNameimplements
DeferredNode	TokenNameIdentifier
{	TokenNameLBRACE
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
serialVersionUID	TokenNameIdentifier
=	TokenNameEQUAL
5186323580749626857L	TokenNameLongLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
DEBUG_PRINT_REF_COUNTS	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
DEBUG_PRINT_TABLES	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
DEBUG_IDS	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHUNK_SHIFT	TokenNameIdentifier
=	TokenNameEQUAL
11	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHUNK_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHUNK_MASK	TokenNameIdentifier
=	TokenNameEQUAL
CHUNK_SIZE	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
INITIAL_CHUNK_COUNT	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
16	TokenNameIntegerLiteral
-	TokenNameMINUS
CHUNK_SHIFT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
transient	TokenNametransient
int	TokenNameint
fNodeCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
transient	TokenNametransient
int	TokenNameint
fNodeType	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
transient	TokenNametransient
Object	TokenNameIdentifier
fNodeName	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
transient	TokenNametransient
Object	TokenNameIdentifier
fNodeValue	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
transient	TokenNametransient
int	TokenNameint
fNodeParent	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
transient	TokenNametransient
int	TokenNameint
fNodeLastChild	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
transient	TokenNametransient
int	TokenNameint
fNodePrevSib	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
transient	TokenNametransient
Object	TokenNameIdentifier
fNodeURI	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
transient	TokenNametransient
int	TokenNameint
fNodeExtra	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
transient	TokenNametransient
int	TokenNameint
fIdCount	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
transient	TokenNametransient
String	TokenNameIdentifier
fIdName	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
transient	TokenNametransient
int	TokenNameint
fIdElement	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
boolean	TokenNameboolean
fNamespacesEnabled	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
transient	TokenNametransient
final	TokenNamefinal
StringBuffer	TokenNameIdentifier
fBufferStr	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
transient	TokenNametransient
final	TokenNamefinal
ArrayList	TokenNameIdentifier
fStrChunks	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
DeferredDocumentImpl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DeferredDocumentImpl	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
namespacesEnabled	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
namespacesEnabled	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DeferredDocumentImpl	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
namespaces	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
grammarAccess	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
grammarAccess	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
needsSyncData	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
needsSyncChildren	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNamespacesEnabled	TokenNameIdentifier
=	TokenNameEQUAL
namespaces	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DOMImplementation	TokenNameIdentifier
getImplementation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DeferredDOMImplementationImpl	TokenNameIdentifier
.	TokenNameDOT
getDOMImplementation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
getNamespacesEnabled	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fNamespacesEnabled	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
setNamespacesEnabled	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
enable	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fNamespacesEnabled	TokenNameIdentifier
=	TokenNameEQUAL
enable	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredDocumentType	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
rootElementName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
publicId	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
systemId	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_TYPE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
rootElementName	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
publicId	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
systemId	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setInternalSubset	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
doctypeIndex	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
subset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
doctypeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
doctypeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
extraDataIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_TYPE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
echunk	TokenNameIdentifier
=	TokenNameEQUAL
extraDataIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
eindex	TokenNameIdentifier
=	TokenNameEQUAL
extraDataIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
extraDataIndex	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
subset	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredNotation	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
notationName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
publicId	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
systemId	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
baseURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
NOTATION_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
extraDataIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
NOTATION_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
echunk	TokenNameIdentifier
=	TokenNameEQUAL
extraDataIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
eindex	TokenNameIdentifier
=	TokenNameEQUAL
extraDataIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
notationName	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
publicId	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
systemId	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
extraDataIndex	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
baseURI	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredEntity	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
entityName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
publicId	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
systemId	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
notationName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
baseURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
ENTITY_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
extraDataIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
ENTITY_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
echunk	TokenNameIdentifier
=	TokenNameEQUAL
extraDataIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
eindex	TokenNameIdentifier
=	TokenNameEQUAL
extraDataIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
entityName	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
publicId	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
systemId	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
extraDataIndex	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
notationName	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
extraDataIndex2	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
ENTITY_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
echunk2	TokenNameIdentifier
=	TokenNameEQUAL
extraDataIndex2	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
eindex2	TokenNameIdentifier
=	TokenNameEQUAL
extraDataIndex2	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
extraDataIndex2	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
baseURI	TokenNameIdentifier
,	TokenNameCOMMA
echunk2	TokenNameIdentifier
,	TokenNameCOMMA
eindex2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDeferredEntityBaseURI	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
entityIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
entityIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
extraDataIndex	TokenNameIdentifier
=	TokenNameEQUAL
getNodeExtra	TokenNameIdentifier
(	TokenNameLPAREN
entityIndex	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
extraDataIndex	TokenNameIdentifier
=	TokenNameEQUAL
getNodeExtra	TokenNameIdentifier
(	TokenNameLPAREN
extraDataIndex	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
getNodeName	TokenNameIdentifier
(	TokenNameLPAREN
extraDataIndex	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setEntityInfo	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
currentEntityDecl	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
version	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
encoding	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
eNodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
getNodeExtra	TokenNameIdentifier
(	TokenNameLPAREN
currentEntityDecl	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
eNodeIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
echunk	TokenNameIdentifier
=	TokenNameEQUAL
eNodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
eindex	TokenNameIdentifier
=	TokenNameEQUAL
eNodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
version	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
encoding	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setTypeInfo	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementNodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
elementChunk	TokenNameIdentifier
=	TokenNameEQUAL
elementNodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
elementIndex	TokenNameIdentifier
=	TokenNameEQUAL
elementNodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
type	TokenNameIdentifier
,	TokenNameCOMMA
elementChunk	TokenNameIdentifier
,	TokenNameCOMMA
elementIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setInputEncoding	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
currentEntityDecl	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
getNodeExtra	TokenNameIdentifier
(	TokenNameLPAREN
currentEntityDecl	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
extraDataIndex	TokenNameIdentifier
=	TokenNameEQUAL
getNodeExtra	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
echunk	TokenNameIdentifier
=	TokenNameEQUAL
extraDataIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
eindex	TokenNameIdentifier
=	TokenNameEQUAL
extraDataIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredEntityReference	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
baseURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
ENTITY_REFERENCE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
name	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
baseURI	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredElement	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementURI	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
elementNodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
elementChunk	TokenNameIdentifier
=	TokenNameEQUAL
elementNodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
elementIndex	TokenNameIdentifier
=	TokenNameEQUAL
elementNodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
elementName	TokenNameIdentifier
,	TokenNameCOMMA
elementChunk	TokenNameIdentifier
,	TokenNameCOMMA
elementIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
elementURI	TokenNameIdentifier
,	TokenNameCOMMA
elementChunk	TokenNameIdentifier
,	TokenNameCOMMA
elementIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
type	TokenNameIdentifier
,	TokenNameCOMMA
elementChunk	TokenNameIdentifier
,	TokenNameCOMMA
elementIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
elementNodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredElement	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
createDeferredElement	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
elementName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredElement	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementURI	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
elementName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
elementNodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
elementChunk	TokenNameIdentifier
=	TokenNameEQUAL
elementNodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
elementIndex	TokenNameIdentifier
=	TokenNameEQUAL
elementNodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
elementName	TokenNameIdentifier
,	TokenNameCOMMA
elementChunk	TokenNameIdentifier
,	TokenNameCOMMA
elementIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
elementURI	TokenNameIdentifier
,	TokenNameCOMMA
elementChunk	TokenNameIdentifier
,	TokenNameCOMMA
elementIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
elementNodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
setDeferredAttribute	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementNodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attrName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attrURI	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attrValue	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
specified	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
id	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
attrNodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createDeferredAttribute	TokenNameIdentifier
(	TokenNameLPAREN
attrName	TokenNameIdentifier
,	TokenNameCOMMA
attrURI	TokenNameIdentifier
,	TokenNameCOMMA
attrValue	TokenNameIdentifier
,	TokenNameCOMMA
specified	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
attrChunk	TokenNameIdentifier
=	TokenNameEQUAL
attrNodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
attrIndex	TokenNameIdentifier
=	TokenNameEQUAL
attrNodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeParent	TokenNameIdentifier
,	TokenNameCOMMA
elementNodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
attrChunk	TokenNameIdentifier
,	TokenNameCOMMA
attrIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
elementChunk	TokenNameIdentifier
=	TokenNameEQUAL
elementNodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
elementIndex	TokenNameIdentifier
=	TokenNameEQUAL
elementNodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
lastAttrNodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
elementChunk	TokenNameIdentifier
,	TokenNameCOMMA
elementIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lastAttrNodeIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
lastAttrNodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
attrChunk	TokenNameIdentifier
,	TokenNameCOMMA
attrIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
attrNodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
elementChunk	TokenNameIdentifier
,	TokenNameCOMMA
elementIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
extra	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
attrChunk	TokenNameIdentifier
,	TokenNameCOMMA
attrIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
id	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
extra	TokenNameIdentifier
=	TokenNameEQUAL
extra	TokenNameIdentifier
|	TokenNameOR
ID	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
extra	TokenNameIdentifier
,	TokenNameCOMMA
attrChunk	TokenNameIdentifier
,	TokenNameCOMMA
attrIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
attrChunk	TokenNameIdentifier
,	TokenNameCOMMA
attrIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
putIdentifier	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
,	TokenNameCOMMA
elementNodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
extraDataIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
DeferredNode	TokenNameIdentifier
.	TokenNameDOT
TYPE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
echunk	TokenNameIdentifier
=	TokenNameEQUAL
extraDataIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
eindex	TokenNameIdentifier
=	TokenNameEQUAL
extraDataIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
extraDataIndex	TokenNameIdentifier
,	TokenNameCOMMA
attrChunk	TokenNameIdentifier
,	TokenNameCOMMA
attrIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
type	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
attrNodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
setDeferredAttribute	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementNodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attrName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attrURI	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attrValue	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
specified	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
attrNodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createDeferredAttribute	TokenNameIdentifier
(	TokenNameLPAREN
attrName	TokenNameIdentifier
,	TokenNameCOMMA
attrURI	TokenNameIdentifier
,	TokenNameCOMMA
attrValue	TokenNameIdentifier
,	TokenNameCOMMA
specified	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
attrChunk	TokenNameIdentifier
=	TokenNameEQUAL
attrNodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
attrIndex	TokenNameIdentifier
=	TokenNameEQUAL
attrNodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeParent	TokenNameIdentifier
,	TokenNameCOMMA
elementNodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
attrChunk	TokenNameIdentifier
,	TokenNameCOMMA
attrIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
elementChunk	TokenNameIdentifier
=	TokenNameEQUAL
elementNodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
elementIndex	TokenNameIdentifier
=	TokenNameEQUAL
elementNodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
lastAttrNodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
elementChunk	TokenNameIdentifier
,	TokenNameCOMMA
elementIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lastAttrNodeIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
lastAttrNodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
attrChunk	TokenNameIdentifier
,	TokenNameCOMMA
attrIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
attrNodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
elementChunk	TokenNameIdentifier
,	TokenNameCOMMA
elementIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
attrNodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredAttribute	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
attrName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attrValue	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
specified	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
createDeferredAttribute	TokenNameIdentifier
(	TokenNameLPAREN
attrName	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
attrValue	TokenNameIdentifier
,	TokenNameCOMMA
specified	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredAttribute	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
attrName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attrURI	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attrValue	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
specified	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
NodeImpl	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
attrName	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
attrURI	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
attrValue	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
extra	TokenNameIdentifier
=	TokenNameEQUAL
specified	TokenNameIdentifier
?	TokenNameQUESTION
SPECIFIED	TokenNameIdentifier
:	TokenNameCOLON
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
extra	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredElementDefinition	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
NodeImpl	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DEFINITION_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
elementName	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredTextNode	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
data	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
ignorableWhitespace	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
TEXT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
ignorableWhitespace	TokenNameIdentifier
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredCDATASection	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
data	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
CDATA_SECTION_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredProcessingInstruction	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
target	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
data	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
PROCESSING_INSTRUCTION_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
target	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
createDeferredComment	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
data	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
Node	TokenNameIdentifier
.	TokenNameDOT
COMMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
cloneNode	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
deep	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nchunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nindex	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nodeType	TokenNameIdentifier
=	TokenNameEQUAL
fNodeType	TokenNameIdentifier
[	TokenNameLBRACKET
nchunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
nindex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
cloneIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNode	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
nodeType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
cchunk	TokenNameIdentifier
=	TokenNameEQUAL
cloneIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
cindex	TokenNameIdentifier
=	TokenNameEQUAL
cloneIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
fNodeName	TokenNameIdentifier
[	TokenNameLBRACKET
nchunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
nindex	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
cchunk	TokenNameIdentifier
,	TokenNameCOMMA
cindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
fNodeValue	TokenNameIdentifier
[	TokenNameLBRACKET
nchunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
nindex	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
cchunk	TokenNameIdentifier
,	TokenNameCOMMA
cindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
fNodeURI	TokenNameIdentifier
[	TokenNameLBRACKET
nchunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
nindex	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
cchunk	TokenNameIdentifier
,	TokenNameCOMMA
cindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
extraIndex	TokenNameIdentifier
=	TokenNameEQUAL
fNodeExtra	TokenNameIdentifier
[	TokenNameLBRACKET
nchunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
nindex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
extraIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_NODE	TokenNameIdentifier
&&	TokenNameAND_AND
nodeType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
TEXT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
extraIndex	TokenNameIdentifier
=	TokenNameEQUAL
cloneNode	TokenNameIdentifier
(	TokenNameLPAREN
extraIndex	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
extraIndex	TokenNameIdentifier
,	TokenNameCOMMA
cchunk	TokenNameIdentifier
,	TokenNameCOMMA
cindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
deep	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
prevIndex	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
childIndex	TokenNameIdentifier
=	TokenNameEQUAL
getLastChild	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
childIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
clonedChildIndex	TokenNameIdentifier
=	TokenNameEQUAL
cloneNode	TokenNameIdentifier
(	TokenNameLPAREN
childIndex	TokenNameIdentifier
,	TokenNameCOMMA
deep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertBefore	TokenNameIdentifier
(	TokenNameLPAREN
cloneIndex	TokenNameIdentifier
,	TokenNameCOMMA
clonedChildIndex	TokenNameIdentifier
,	TokenNameCOMMA
prevIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
prevIndex	TokenNameIdentifier
=	TokenNameEQUAL
clonedChildIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
childIndex	TokenNameIdentifier
=	TokenNameEQUAL
getRealPrevSibling	TokenNameIdentifier
(	TokenNameLPAREN
childIndex	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
cloneIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
appendChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
parentIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
childIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
pchunk	TokenNameIdentifier
=	TokenNameEQUAL
parentIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
pindex	TokenNameIdentifier
=	TokenNameEQUAL
parentIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
cchunk	TokenNameIdentifier
=	TokenNameEQUAL
childIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
cindex	TokenNameIdentifier
=	TokenNameEQUAL
childIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeParent	TokenNameIdentifier
,	TokenNameCOMMA
parentIndex	TokenNameIdentifier
,	TokenNameCOMMA
cchunk	TokenNameIdentifier
,	TokenNameCOMMA
cindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
olast	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
pchunk	TokenNameIdentifier
,	TokenNameCOMMA
pindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
olast	TokenNameIdentifier
,	TokenNameCOMMA
cchunk	TokenNameIdentifier
,	TokenNameCOMMA
cindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
childIndex	TokenNameIdentifier
,	TokenNameCOMMA
pchunk	TokenNameIdentifier
,	TokenNameCOMMA
pindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
setAttributeNode	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elemIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
attrIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
echunk	TokenNameIdentifier
=	TokenNameEQUAL
elemIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
eindex	TokenNameIdentifier
=	TokenNameEQUAL
elemIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
achunk	TokenNameIdentifier
=	TokenNameEQUAL
attrIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
aindex	TokenNameIdentifier
=	TokenNameEQUAL
attrIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
attrName	TokenNameIdentifier
=	TokenNameEQUAL
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
achunk	TokenNameIdentifier
,	TokenNameCOMMA
aindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
oldAttrIndex	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
nextIndex	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
oachunk	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
oaindex	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
oldAttrIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
oachunk	TokenNameIdentifier
=	TokenNameEQUAL
oldAttrIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
oaindex	TokenNameIdentifier
=	TokenNameEQUAL
oldAttrIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
oldAttrName	TokenNameIdentifier
=	TokenNameEQUAL
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
oachunk	TokenNameIdentifier
,	TokenNameCOMMA
oaindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
oldAttrName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
attrName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nextIndex	TokenNameIdentifier
=	TokenNameEQUAL
oldAttrIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
oldAttrIndex	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
oachunk	TokenNameIdentifier
,	TokenNameCOMMA
oaindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
oldAttrIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
prevIndex	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
oachunk	TokenNameIdentifier
,	TokenNameCOMMA
oaindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
prevIndex	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
pchunk	TokenNameIdentifier
=	TokenNameEQUAL
nextIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
pindex	TokenNameIdentifier
=	TokenNameEQUAL
nextIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
prevIndex	TokenNameIdentifier
,	TokenNameCOMMA
pchunk	TokenNameIdentifier
,	TokenNameCOMMA
pindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
oachunk	TokenNameIdentifier
,	TokenNameCOMMA
oaindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
clearChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
oachunk	TokenNameIdentifier
,	TokenNameCOMMA
oaindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
clearChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
oachunk	TokenNameIdentifier
,	TokenNameCOMMA
oaindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeParent	TokenNameIdentifier
,	TokenNameCOMMA
oachunk	TokenNameIdentifier
,	TokenNameCOMMA
oaindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
oachunk	TokenNameIdentifier
,	TokenNameCOMMA
oaindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
attrTextIndex	TokenNameIdentifier
=	TokenNameEQUAL
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
oachunk	TokenNameIdentifier
,	TokenNameCOMMA
oaindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
atchunk	TokenNameIdentifier
=	TokenNameEQUAL
attrTextIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
atindex	TokenNameIdentifier
=	TokenNameEQUAL
attrTextIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
atchunk	TokenNameIdentifier
,	TokenNameCOMMA
atindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
clearChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
atchunk	TokenNameIdentifier
,	TokenNameCOMMA
atindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeParent	TokenNameIdentifier
,	TokenNameCOMMA
atchunk	TokenNameIdentifier
,	TokenNameCOMMA
atindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
atchunk	TokenNameIdentifier
,	TokenNameCOMMA
atindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
prevIndex	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
attrIndex	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
prevIndex	TokenNameIdentifier
,	TokenNameCOMMA
achunk	TokenNameIdentifier
,	TokenNameCOMMA
aindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
oldAttrIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setIdAttributeNode	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elemIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
attrIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
attrIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
attrIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
extra	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
extra	TokenNameIdentifier
=	TokenNameEQUAL
extra	TokenNameIdentifier
|	TokenNameOR
ID	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
extra	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
putIdentifier	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
,	TokenNameCOMMA
elemIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setIdAttribute	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
attrIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
attrIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
attrIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
extra	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
extra	TokenNameIdentifier
=	TokenNameEQUAL
extra	TokenNameIdentifier
|	TokenNameOR
ID	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
extra	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
insertBefore	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
parentIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
newChildIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
refChildIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
refChildIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
appendChild	TokenNameIdentifier
(	TokenNameLPAREN
parentIndex	TokenNameIdentifier
,	TokenNameCOMMA
newChildIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newChildIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
nchunk	TokenNameIdentifier
=	TokenNameEQUAL
newChildIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nindex	TokenNameIdentifier
=	TokenNameEQUAL
newChildIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
rchunk	TokenNameIdentifier
=	TokenNameEQUAL
refChildIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
rindex	TokenNameIdentifier
=	TokenNameEQUAL
refChildIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
previousIndex	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
rchunk	TokenNameIdentifier
,	TokenNameCOMMA
rindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
newChildIndex	TokenNameIdentifier
,	TokenNameCOMMA
rchunk	TokenNameIdentifier
,	TokenNameCOMMA
rindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
previousIndex	TokenNameIdentifier
,	TokenNameCOMMA
nchunk	TokenNameIdentifier
,	TokenNameCOMMA
nindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newChildIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setAsLastChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
parentIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
childIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
pchunk	TokenNameIdentifier
=	TokenNameEQUAL
parentIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
pindex	TokenNameIdentifier
=	TokenNameEQUAL
parentIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
childIndex	TokenNameIdentifier
,	TokenNameCOMMA
pchunk	TokenNameIdentifier
,	TokenNameCOMMA
pindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getParentNode	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getParentNode	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getParentNode	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
free	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
free	TokenNameIdentifier
?	TokenNameQUESTION
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeParent	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeParent	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getLastChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getLastChild	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getLastChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
free	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
free	TokenNameIdentifier
?	TokenNameQUESTION
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getPrevSibling	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getPrevSibling	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getPrevSibling	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
free	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
TEXT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
do	TokenNamedo
{	TokenNameLBRACE
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
TEXT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getRealPrevSibling	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getRealPrevSibling	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getRealPrevSibling	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
free	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
free	TokenNameIdentifier
?	TokenNameQUESTION
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
lookupElementDefinition	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fNodeCount	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
docTypeIndex	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
nchunk	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
nindex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
nchunk	TokenNameIdentifier
,	TokenNameCOMMA
nindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
nchunk	TokenNameIdentifier
,	TokenNameCOMMA
nindex	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nchunk	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
nindex	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
nchunk	TokenNameIdentifier
,	TokenNameCOMMA
nindex	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_TYPE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
docTypeIndex	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
docTypeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nchunk	TokenNameIdentifier
=	TokenNameEQUAL
docTypeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
nindex	TokenNameIdentifier
=	TokenNameEQUAL
docTypeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
nchunk	TokenNameIdentifier
,	TokenNameCOMMA
nindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
nchunk	TokenNameIdentifier
,	TokenNameCOMMA
nindex	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nchunk	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
nindex	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
nchunk	TokenNameIdentifier
,	TokenNameCOMMA
nindex	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
NodeImpl	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DEFINITION_NODE	TokenNameIdentifier
&&	TokenNameAND_AND
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
nchunk	TokenNameIdentifier
,	TokenNameCOMMA
nindex	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
elementName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
index	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DeferredNode	TokenNameIdentifier
getNodeObject	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
TEXT_NODE	TokenNameIdentifier
&&	TokenNameAND_AND
type	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
CDATA_SECTION_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
DeferredNode	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fNamespacesEnabled	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredAttrNSImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredAttrImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
CDATA_SECTION_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredCDATASectionImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
COMMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredCommentImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_TYPE_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredDocumentTypeImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
docType	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DocumentTypeImpl	TokenNameIdentifier
)	TokenNameRPAREN
node	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_IDS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"getNodeObject(ELEMENT_NODE): "	TokenNameStringLiteral
+	TokenNamePLUS
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fNamespacesEnabled	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredElementNSImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredElementImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fIdElement	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
idIndex	TokenNameIdentifier
=	TokenNameEQUAL
binarySearch	TokenNameIdentifier
(	TokenNameLPAREN
fIdElement	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fIdCount	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
idIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_IDS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  id index: "	TokenNameStringLiteral
+	TokenNamePLUS
idIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  fIdName["	TokenNameStringLiteral
+	TokenNamePLUS
idIndex	TokenNameIdentifier
+	TokenNamePLUS
"]: "	TokenNameStringLiteral
+	TokenNamePLUS
fIdName	TokenNameIdentifier
[	TokenNameLBRACKET
idIndex	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
fIdName	TokenNameIdentifier
[	TokenNameLBRACKET
idIndex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_IDS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"  name: "	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"getNodeObject()#"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
putIdentifier0	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fIdName	TokenNameIdentifier
[	TokenNameLBRACKET
idIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
idIndex	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
fIdCount	TokenNameIdentifier
&&	TokenNameAND_AND
fIdElement	TokenNameIdentifier
[	TokenNameLBRACKET
idIndex	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
idIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
idIndex	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
ENTITY_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredEntityImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
ENTITY_REFERENCE_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredEntityReferenceImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
NOTATION_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredNotationImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
PROCESSING_INSTRUCTION_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredProcessingInstructionImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
TEXT_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredTextImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
NodeImpl	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DEFINITION_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DeferredElementDefinitionImpl	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
default	TokenNamedefault
:	TokenNameCOLON
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"type: "	TokenNameStringLiteral
+	TokenNamePLUS
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
node	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getNodeName	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getNodeName	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getNodeName	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
free	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
free	TokenNameIdentifier
?	TokenNameQUESTION
clearChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getNodeValueString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getNodeValueString	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getNodeValueString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
free	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
free	TokenNameIdentifier
?	TokenNameQUESTION
clearChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
TEXT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
prevSib	TokenNameIdentifier
=	TokenNameEQUAL
getRealPrevSibling	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
prevSib	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
getNodeType	TokenNameIdentifier
(	TokenNameLPAREN
prevSib	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
TEXT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fStrChunks	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
chunk	TokenNameIdentifier
=	TokenNameEQUAL
prevSib	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
prevSib	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
value	TokenNameIdentifier
=	TokenNameEQUAL
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fStrChunks	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
prevSib	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
prevSib	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
getNodeType	TokenNameIdentifier
(	TokenNameLPAREN
prevSib	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
TEXT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunkCount	TokenNameIdentifier
=	TokenNameEQUAL
fStrChunks	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
chunkCount	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
fBufferStr	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
fStrChunks	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
value	TokenNameIdentifier
=	TokenNameEQUAL
fBufferStr	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fStrChunks	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fBufferStr	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
CDATA_SECTION_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
child	TokenNameIdentifier
=	TokenNameEQUAL
getLastChild	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
child	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fBufferStr	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
child	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
chunk	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
value	TokenNameIdentifier
=	TokenNameEQUAL
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fStrChunks	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
child	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
fStrChunks	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
fBufferStr	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
fStrChunks	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
value	TokenNameIdentifier
=	TokenNameEQUAL
fBufferStr	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fStrChunks	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fBufferStr	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getNodeValue	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getNodeValue	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
getTypeInfo	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
Object	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
fNodeValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
fNodeValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fNodeValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
RefCount	TokenNameIdentifier
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
RefCount	TokenNameIdentifier
)	TokenNameRPAREN
fNodeValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
c	TokenNameIdentifier
.	TokenNameDOT
fCount	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
.	TokenNameDOT
fCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fNodeValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getNodeValue	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
free	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
free	TokenNameIdentifier
?	TokenNameQUESTION
clearChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNodeExtra	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getNodeExtra	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNodeExtra	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
free	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
free	TokenNameIdentifier
?	TokenNameQUESTION
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
short	TokenNameshort
getNodeType	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getNodeType	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
short	TokenNameshort
getNodeType	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
free	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
free	TokenNameIdentifier
?	TokenNameQUESTION
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getAttribute	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elemIndex	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elemIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
||	TokenNameOR_OR
name	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
echunk	TokenNameIdentifier
=	TokenNameEQUAL
elemIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
eindex	TokenNameIdentifier
=	TokenNameEQUAL
elemIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
attrIndex	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
echunk	TokenNameIdentifier
,	TokenNameCOMMA
eindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
attrIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
achunk	TokenNameIdentifier
=	TokenNameEQUAL
attrIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
aindex	TokenNameIdentifier
=	TokenNameEQUAL
attrIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
achunk	TokenNameIdentifier
,	TokenNameCOMMA
aindex	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
achunk	TokenNameIdentifier
,	TokenNameCOMMA
aindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
attrIndex	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
achunk	TokenNameIdentifier
,	TokenNameCOMMA
aindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getNodeURI	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getNodeURI	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getNodeURI	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
free	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
free	TokenNameIdentifier
?	TokenNameQUESTION
clearChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
putIdentifier	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
elementNodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_IDS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"putIdentifier("	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
+	TokenNamePLUS
", "	TokenNameStringLiteral
+	TokenNamePLUS
elementNodeIndex	TokenNameIdentifier
+	TokenNamePLUS
')'	TokenNameCharacterLiteral
+	TokenNamePLUS
" // "	TokenNameStringLiteral
+	TokenNamePLUS
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
elementNodeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
,	TokenNameCOMMA
elementNodeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fIdName	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fIdName	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
64	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fIdElement	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
64	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fIdCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fIdName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
idName	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
fIdCount	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fIdName	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
idName	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fIdCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fIdName	TokenNameIdentifier
=	TokenNameEQUAL
idName	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
idElement	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
idName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fIdElement	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
idElement	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fIdCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fIdElement	TokenNameIdentifier
=	TokenNameEQUAL
idElement	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fIdName	TokenNameIdentifier
[	TokenNameLBRACKET
fIdCount	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
name	TokenNameIdentifier
;	TokenNameSEMICOLON
fIdElement	TokenNameIdentifier
[	TokenNameLBRACKET
fIdCount	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
elementNodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
fIdCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
print	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_PRINT_REF_COUNTS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"num "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"type "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"name "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"val "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"par "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"lch "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"psib"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fNodeType	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"--------"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"--------"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"--------"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"--------"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"--------"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"--------"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"--------"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
DocumentImpl	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DEFINITION_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"EDef"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Doc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_TYPE_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"DType"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
COMMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Com"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
PROCESSING_INSTRUCTION_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"PI"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Elem"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
ENTITY_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Ent"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
ENTITY_REFERENCE_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"ERef"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
TEXT_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Text"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Attr"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
DeferredNode	TokenNameIdentifier
.	TokenNameDOT
TYPE_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"TypeInfo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
default	TokenNamedefault
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"?"	TokenNameStringLiteral
+	TokenNamePLUS
fNodeType	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
fNodeParent	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_PRINT_TABLES	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"# start table"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fNodeCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
%	TokenNameREMAINDER
10	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"num "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"type "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"name "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"val "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"uri "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"par "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"lch "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"psib "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"xtra"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
DocumentImpl	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DEFINITION_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"EDef"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Doc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_TYPE_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"DType"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
COMMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Com"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
PROCESSING_INSTRUCTION_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"PI"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Elem"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
ENTITY_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Ent"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
ENTITY_REFERENCE_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"ERef"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
TEXT_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Text"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
Node	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Attr"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
DeferredNode	TokenNameIdentifier
.	TokenNameDOT
TYPE_NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"TypeInfo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
default	TokenNamedefault
:	TokenNameCOLON
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"?"	TokenNameStringLiteral
+	TokenNamePLUS
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
getNodeValue	TokenNameIdentifier
(	TokenNameLPAREN
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeParent	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"# end table"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNodeIndex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
synchronizeData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
needsSyncData	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fIdElement	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
IntVector	TokenNameIdentifier
path	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IntVector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fIdCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
elementNodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
fIdElement	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
String	TokenNameIdentifier
idName	TokenNameIdentifier
=	TokenNameEQUAL
fIdName	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
idName	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
path	TokenNameIdentifier
.	TokenNameDOT
removeAllElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
elementNodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
path	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
pchunk	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
pindex	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeParent	TokenNameIdentifier
,	TokenNameCOMMA
pchunk	TokenNameIdentifier
,	TokenNameCOMMA
pindex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Node	TokenNameIdentifier
place	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
path	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
index	TokenNameIdentifier
=	TokenNameEQUAL
path	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
j	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Node	TokenNameIdentifier
child	TokenNameIdentifier
=	TokenNameEQUAL
place	TokenNameIdentifier
.	TokenNameDOT
getLastChild	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
child	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
child	TokenNameIdentifier
instanceof	TokenNameinstanceof
DeferredNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
DeferredNode	TokenNameIdentifier
)	TokenNameRPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getNodeIndex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
place	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
child	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
.	TokenNameDOT
getPreviousSibling	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
Element	TokenNameIdentifier
element	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
place	TokenNameIdentifier
;	TokenNameSEMICOLON
putIdentifier0	TokenNameIdentifier
(	TokenNameLPAREN
idName	TokenNameIdentifier
,	TokenNameCOMMA
element	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fIdName	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
fIdCount	TokenNameIdentifier
&&	TokenNameAND_AND
fIdElement	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
elementNodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
idName	TokenNameIdentifier
=	TokenNameEQUAL
fIdName	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
idName	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
putIdentifier0	TokenNameIdentifier
(	TokenNameLPAREN
idName	TokenNameIdentifier
,	TokenNameCOMMA
element	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
synchronizeChildren	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
needsSyncData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
synchronizeData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
needsSyncChildren	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
boolean	TokenNameboolean
orig	TokenNameIdentifier
=	TokenNameEQUAL
mutationEvents	TokenNameIdentifier
;	TokenNameSEMICOLON
mutationEvents	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
needsSyncChildren	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
getNodeType	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ChildNode	TokenNameIdentifier
first	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
ChildNode	TokenNameIdentifier
last	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
getLastChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
getPrevSibling	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ChildNode	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ChildNode	TokenNameIdentifier
)	TokenNameRPAREN
getNodeObject	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
last	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
last	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
first	TokenNameIdentifier
.	TokenNameDOT
previousSibling	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
node	TokenNameIdentifier
.	TokenNameDOT
ownerNode	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
;	TokenNameSEMICOLON
node	TokenNameIdentifier
.	TokenNameDOT
isOwned	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
node	TokenNameIdentifier
.	TokenNameDOT
nextSibling	TokenNameIdentifier
=	TokenNameEQUAL
first	TokenNameIdentifier
;	TokenNameSEMICOLON
first	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
.	TokenNameDOT
getNodeType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
docElement	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ElementImpl	TokenNameIdentifier
)	TokenNameRPAREN
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_TYPE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
docType	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DocumentTypeImpl	TokenNameIdentifier
)	TokenNameRPAREN
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
first	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
firstChild	TokenNameIdentifier
=	TokenNameEQUAL
first	TokenNameIdentifier
;	TokenNameSEMICOLON
first	TokenNameIdentifier
.	TokenNameDOT
isFirstChild	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lastChild	TokenNameIdentifier
(	TokenNameLPAREN
last	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
mutationEvents	TokenNameIdentifier
=	TokenNameEQUAL
orig	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
void	TokenNamevoid
synchronizeChildren	TokenNameIdentifier
(	TokenNameLPAREN
AttrImpl	TokenNameIdentifier
a	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
orig	TokenNameIdentifier
=	TokenNameEQUAL
getMutationEvents	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setMutationEvents	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
a	TokenNameIdentifier
.	TokenNameDOT
needsSyncChildren	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
last	TokenNameIdentifier
=	TokenNameEQUAL
getLastChild	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
prev	TokenNameIdentifier
=	TokenNameEQUAL
getPrevSibling	TokenNameIdentifier
(	TokenNameLPAREN
last	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
prev	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
=	TokenNameEQUAL
getNodeValueString	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
a	TokenNameIdentifier
.	TokenNameDOT
hasStringValue	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ChildNode	TokenNameIdentifier
firstNode	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
ChildNode	TokenNameIdentifier
lastNode	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
last	TokenNameIdentifier
;	TokenNameSEMICOLON
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
getPrevSibling	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ChildNode	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ChildNode	TokenNameIdentifier
)	TokenNameRPAREN
getNodeObject	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lastNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
lastNode	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
firstNode	TokenNameIdentifier
.	TokenNameDOT
previousSibling	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
node	TokenNameIdentifier
.	TokenNameDOT
ownerNode	TokenNameIdentifier
=	TokenNameEQUAL
a	TokenNameIdentifier
;	TokenNameSEMICOLON
node	TokenNameIdentifier
.	TokenNameDOT
isOwned	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
node	TokenNameIdentifier
.	TokenNameDOT
nextSibling	TokenNameIdentifier
=	TokenNameEQUAL
firstNode	TokenNameIdentifier
;	TokenNameSEMICOLON
firstNode	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lastNode	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
=	TokenNameEQUAL
firstNode	TokenNameIdentifier
;	TokenNameSEMICOLON
firstNode	TokenNameIdentifier
.	TokenNameDOT
isFirstChild	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
a	TokenNameIdentifier
.	TokenNameDOT
lastChild	TokenNameIdentifier
(	TokenNameLPAREN
lastNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
a	TokenNameIdentifier
.	TokenNameDOT
hasStringValue	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
setMutationEvents	TokenNameIdentifier
(	TokenNameLPAREN
orig	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
void	TokenNamevoid
synchronizeChildren	TokenNameIdentifier
(	TokenNameLPAREN
ParentNode	TokenNameIdentifier
p	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
orig	TokenNameIdentifier
=	TokenNameEQUAL
getMutationEvents	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setMutationEvents	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
p	TokenNameIdentifier
.	TokenNameDOT
needsSyncChildren	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ChildNode	TokenNameIdentifier
firstNode	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
ChildNode	TokenNameIdentifier
lastNode	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
getLastChild	TokenNameIdentifier
(	TokenNameLPAREN
nodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
getPrevSibling	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ChildNode	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ChildNode	TokenNameIdentifier
)	TokenNameRPAREN
getNodeObject	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lastNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
lastNode	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
firstNode	TokenNameIdentifier
.	TokenNameDOT
previousSibling	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
node	TokenNameIdentifier
.	TokenNameDOT
ownerNode	TokenNameIdentifier
=	TokenNameEQUAL
p	TokenNameIdentifier
;	TokenNameSEMICOLON
node	TokenNameIdentifier
.	TokenNameDOT
isOwned	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
node	TokenNameIdentifier
.	TokenNameDOT
nextSibling	TokenNameIdentifier
=	TokenNameEQUAL
firstNode	TokenNameIdentifier
;	TokenNameSEMICOLON
firstNode	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lastNode	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
p	TokenNameIdentifier
.	TokenNameDOT
firstChild	TokenNameIdentifier
=	TokenNameEQUAL
firstNode	TokenNameIdentifier
;	TokenNameSEMICOLON
firstNode	TokenNameIdentifier
.	TokenNameDOT
isFirstChild	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
p	TokenNameIdentifier
.	TokenNameDOT
lastChild	TokenNameIdentifier
(	TokenNameLPAREN
lastNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
setMutationEvents	TokenNameIdentifier
(	TokenNameLPAREN
orig	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
ensureCapacity	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
chunk	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fNodeType	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fNodeName	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fNodeValue	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fNodeParent	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fNodeLastChild	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fNodePrevSib	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fNodeURI	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fNodeExtra	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
chunk	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
newsize	TokenNameIdentifier
=	TokenNameEQUAL
chunk	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNodeType	TokenNameIdentifier
=	TokenNameEQUAL
newArray	TokenNameIdentifier
;	TokenNameSEMICOLON
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newStrArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newStrArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNodeName	TokenNameIdentifier
=	TokenNameEQUAL
newStrArray	TokenNameIdentifier
;	TokenNameSEMICOLON
newStrArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newStrArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNodeValue	TokenNameIdentifier
=	TokenNameEQUAL
newStrArray	TokenNameIdentifier
;	TokenNameSEMICOLON
newArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fNodeParent	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNodeParent	TokenNameIdentifier
=	TokenNameEQUAL
newArray	TokenNameIdentifier
;	TokenNameSEMICOLON
newArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNodeLastChild	TokenNameIdentifier
=	TokenNameEQUAL
newArray	TokenNameIdentifier
;	TokenNameSEMICOLON
newArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNodePrevSib	TokenNameIdentifier
=	TokenNameEQUAL
newArray	TokenNameIdentifier
;	TokenNameSEMICOLON
newStrArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newStrArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNodeURI	TokenNameIdentifier
=	TokenNameEQUAL
newStrArray	TokenNameIdentifier
;	TokenNameSEMICOLON
newArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNodeExtra	TokenNameIdentifier
=	TokenNameEQUAL
newArray	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
createChunk	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
createChunk	TokenNameIdentifier
(	TokenNameLPAREN
fNodeName	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
createChunk	TokenNameIdentifier
(	TokenNameLPAREN
fNodeValue	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
createChunk	TokenNameIdentifier
(	TokenNameLPAREN
fNodeParent	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
createChunk	TokenNameIdentifier
(	TokenNameLPAREN
fNodeLastChild	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
createChunk	TokenNameIdentifier
(	TokenNameLPAREN
fNodePrevSib	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
createChunk	TokenNameIdentifier
(	TokenNameLPAREN
fNodeURI	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
createChunk	TokenNameIdentifier
(	TokenNameLPAREN
fNodeExtra	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
createNode	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
nodeType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
fNodeCount	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
fNodeCount	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
ensureCapacity	TokenNameIdentifier
(	TokenNameLPAREN
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
fNodeType	TokenNameIdentifier
,	TokenNameCOMMA
nodeType	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
fNodeCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
static	TokenNamestatic
int	TokenNameint
binarySearch	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
values	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
target	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_IDS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"binarySearch(), target: "	TokenNameStringLiteral
+	TokenNamePLUS
target	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
start	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
middle	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
start	TokenNameIdentifier
+	TokenNamePLUS
end	TokenNameIdentifier
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
value	TokenNameIdentifier
=	TokenNameEQUAL
values	TokenNameIdentifier
[	TokenNameLBRACKET
middle	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG_IDS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"  value: "	TokenNameStringLiteral
+	TokenNamePLUS
value	TokenNameIdentifier
+	TokenNamePLUS
", target: "	TokenNameStringLiteral
+	TokenNamePLUS
target	TokenNameIdentifier
+	TokenNamePLUS
" // "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
print	TokenNameIdentifier
(	TokenNameLPAREN
values	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
,	TokenNameCOMMA
middle	TokenNameIdentifier
,	TokenNameCOMMA
target	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
target	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
middle	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
values	TokenNameIdentifier
[	TokenNameLBRACKET
middle	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
target	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
middle	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_IDS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"FOUND AT "	TokenNameStringLiteral
+	TokenNamePLUS
middle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
middle	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
>	TokenNameGREATER
target	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
end	TokenNameIdentifier
=	TokenNameEQUAL
middle	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
start	TokenNameIdentifier
=	TokenNameEQUAL
middle	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_IDS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"NOT FOUND!"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
INIT_ARRAY	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
CHUNK_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
INIT_ARRAY	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
createChunk	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
data	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
chunk	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
INIT_ARRAY	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHUNK_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
RefCount	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
fCount	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
createChunk	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
data	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
chunk	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
RefCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
setChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
data	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
value	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
chunk	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dataChunk	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dataChunk	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
createChunk	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dataChunk	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
ovalue	TokenNameIdentifier
=	TokenNameEQUAL
dataChunk	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ovalue	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
dataChunk	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
dataChunk	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
value	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
ovalue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
setChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
data	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
Object	TokenNameIdentifier
value	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
chunk	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
clearChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dataChunk	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dataChunk	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
createChunk	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dataChunk	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
ovalue	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
dataChunk	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ovalue	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
RefCount	TokenNameIdentifier
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
RefCount	TokenNameIdentifier
)	TokenNameRPAREN
dataChunk	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
c	TokenNameIdentifier
.	TokenNameDOT
fCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
dataChunk	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
value	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
ovalue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
getChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
data	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
chunk	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
getChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
data	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
chunk	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
getNodeValue	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
chunk	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
data	TokenNameIdentifier
=	TokenNameEQUAL
fNodeValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
instanceof	TokenNameinstanceof
String	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
data	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
data	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
clearChunkIndex	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
data	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
chunk	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
value	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
clearChunkValue	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
data	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
chunk	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
RefCount	TokenNameIdentifier
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
RefCount	TokenNameIdentifier
)	TokenNameRPAREN
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
c	TokenNameIdentifier
.	TokenNameDOT
fCount	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
.	TokenNameDOT
fCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
putIdentifier0	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
idName	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
element	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_IDS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"putIdentifier0("	TokenNameStringLiteral
+	TokenNamePLUS
idName	TokenNameIdentifier
+	TokenNamePLUS
", "	TokenNameStringLiteral
+	TokenNamePLUS
element	TokenNameIdentifier
+	TokenNamePLUS
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
identifiers	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
identifiers	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
identifiers	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
idName	TokenNameIdentifier
,	TokenNameCOMMA
element	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
print	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
values	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
middle	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
target	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_IDS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" ["	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
start	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
middle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"!"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
values	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
values	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
target	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"] "	TokenNameStringLiteral
+	TokenNamePLUS
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
IntVector	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
int	TokenNameint
data	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
size	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
int	TokenNameint
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
size	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
data	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addElement	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
element	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ensureCapacity	TokenNameIdentifier
(	TokenNameLPAREN
size	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
data	TokenNameIdentifier
[	TokenNameLBRACKET
size	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
element	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
removeAllElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
size	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
ensureCapacity	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
newsize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
+	TokenNamePLUS
15	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
newsize	TokenNameIdentifier
>	TokenNameGREATER
data	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
newdata	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
+	TokenNamePLUS
15	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newdata	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
data	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
data	TokenNameIdentifier
=	TokenNameEQUAL
newdata	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
