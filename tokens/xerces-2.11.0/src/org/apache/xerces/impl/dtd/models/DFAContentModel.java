package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
.	TokenNameDOT
models	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
.	TokenNameDOT
XMLContentSpec	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
QName	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
DFAContentModel	TokenNameIdentifier
implements	TokenNameimplements
ContentModelValidator	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
String	TokenNameIdentifier
fEpsilonString	TokenNameIdentifier
=	TokenNameEQUAL
"<<CMNODE_EPSILON>>"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
String	TokenNameIdentifier
fEOCString	TokenNameIdentifier
=	TokenNameEQUAL
"<<CMNODE_EOC>>"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
fEpsilonString	TokenNameIdentifier
=	TokenNameEQUAL
fEpsilonString	TokenNameIdentifier
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fEOCString	TokenNameIdentifier
=	TokenNameEQUAL
fEOCString	TokenNameIdentifier
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
DEBUG_VALIDATE_CONTENT	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
QName	TokenNameIdentifier
fElemMap	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fElemMapType	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fElemMapSize	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
fMixed	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fEOCPos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
fFinalStateFlags	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
CMStateSet	TokenNameIdentifier
fFollowList	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
CMNode	TokenNameIdentifier
fHeadNode	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fLeafCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
CMLeaf	TokenNameIdentifier
fLeafList	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fLeafListType	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fTransTable	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fTransTableSize	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
fEmptyContentIsValid	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
QName	TokenNameIdentifier
fQName	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
DFAContentModel	TokenNameIdentifier
(	TokenNameLPAREN
CMNode	TokenNameIdentifier
syntaxTree	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
leafCount	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
mixed	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fLeafCount	TokenNameIdentifier
=	TokenNameEQUAL
leafCount	TokenNameIdentifier
;	TokenNameSEMICOLON
fMixed	TokenNameIdentifier
=	TokenNameEQUAL
mixed	TokenNameIdentifier
;	TokenNameSEMICOLON
buildDFA	TokenNameIdentifier
(	TokenNameLPAREN
syntaxTree	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
validate	TokenNameIdentifier
(	TokenNameLPAREN
QName	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
children	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
offset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_VALIDATE_CONTENT	TokenNameIdentifier
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"DFAContentModel#validateContent"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_VALIDATE_CONTENT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"!!! no children"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"elemMap="	TokenNameStringLiteral
+	TokenNamePLUS
fElemMap	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fElemMap	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
uri	TokenNameIdentifier
=	TokenNameEQUAL
fElemMap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
uri	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
localpart	TokenNameIdentifier
=	TokenNameEQUAL
fElemMap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
localpart	TokenNameIdentifier
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"fElemMap["	TokenNameStringLiteral
+	TokenNamePLUS
i	TokenNameIdentifier
+	TokenNamePLUS
"]="	TokenNameStringLiteral
+	TokenNamePLUS
uri	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
localpart	TokenNameIdentifier
+	TokenNamePLUS
" ("	TokenNameStringLiteral
+	TokenNamePLUS
uri	TokenNameIdentifier
+	TokenNamePLUS
", "	TokenNameStringLiteral
+	TokenNamePLUS
localpart	TokenNameIdentifier
+	TokenNamePLUS
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"EOCIndex="	TokenNameStringLiteral
+	TokenNamePLUS
fEOCString	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
fEmptyContentIsValid	TokenNameIdentifier
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
curState	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
childIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
childIndex	TokenNameIdentifier
<	TokenNameLESS
length	TokenNameIdentifier
;	TokenNameSEMICOLON
childIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
QName	TokenNameIdentifier
curElem	TokenNameIdentifier
=	TokenNameEQUAL
children	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
+	TokenNamePLUS
childIndex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fMixed	TokenNameIdentifier
&&	TokenNameAND_AND
curElem	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
elemIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
elemIndex	TokenNameIdentifier
<	TokenNameLESS
fElemMapSize	TokenNameIdentifier
;	TokenNameSEMICOLON
elemIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
fElemMapType	TokenNameIdentifier
[	TokenNameLBRACKET
elemIndex	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fElemMap	TokenNameIdentifier
[	TokenNameLBRACKET
elemIndex	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
rawname	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
curElem	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
uri	TokenNameIdentifier
=	TokenNameEQUAL
fElemMap	TokenNameIdentifier
[	TokenNameLBRACKET
elemIndex	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
uri	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
uri	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
uri	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
curElem	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_LOCAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
curElem	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_OTHER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fElemMap	TokenNameIdentifier
[	TokenNameLBRACKET
elemIndex	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
uri	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
curElem	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
elemIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fElemMapSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_VALIDATE_CONTENT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"!!! didn't find it"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"curElem : "	TokenNameStringLiteral
+	TokenNamePLUS
curElem	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fElemMapSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"fElemMap["	TokenNameStringLiteral
+	TokenNamePLUS
i	TokenNameIdentifier
+	TokenNamePLUS
"] = "	TokenNameStringLiteral
+	TokenNamePLUS
fElemMap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"fElemMapType["	TokenNameStringLiteral
+	TokenNamePLUS
i	TokenNameIdentifier
+	TokenNamePLUS
"] = "	TokenNameStringLiteral
+	TokenNamePLUS
fElemMapType	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
childIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
curState	TokenNameIdentifier
=	TokenNameEQUAL
fTransTable	TokenNameIdentifier
[	TokenNameLBRACKET
curState	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
elemIndex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
curState	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_VALIDATE_CONTENT	TokenNameIdentifier
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"!!! not a legal transition"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
childIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_VALIDATE_CONTENT	TokenNameIdentifier
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"curState="	TokenNameStringLiteral
+	TokenNamePLUS
curState	TokenNameIdentifier
+	TokenNamePLUS
", childCount="	TokenNameStringLiteral
+	TokenNamePLUS
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
fFinalStateFlags	TokenNameIdentifier
[	TokenNameLBRACKET
curState	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
return	TokenNamereturn
length	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
buildDFA	TokenNameIdentifier
(	TokenNameLPAREN
CMNode	TokenNameIdentifier
syntaxTree	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fQName	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
fEOCString	TokenNameIdentifier
,	TokenNameCOMMA
fEOCString	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
CMLeaf	TokenNameIdentifier
nodeEOC	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMLeaf	TokenNameIdentifier
(	TokenNameLPAREN
fQName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fHeadNode	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMBinOp	TokenNameIdentifier
(	TokenNameLPAREN
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_SEQ	TokenNameIdentifier
,	TokenNameCOMMA
syntaxTree	TokenNameIdentifier
,	TokenNameCOMMA
nodeEOC	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fEOCPos	TokenNameIdentifier
=	TokenNameEQUAL
fLeafCount	TokenNameIdentifier
;	TokenNameSEMICOLON
nodeEOC	TokenNameIdentifier
.	TokenNameDOT
setPosition	TokenNameIdentifier
(	TokenNameLPAREN
fLeafCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fLeafList	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMLeaf	TokenNameIdentifier
[	TokenNameLBRACKET
fLeafCount	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fLeafListType	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
fLeafCount	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
postTreeBuildInit	TokenNameIdentifier
(	TokenNameLPAREN
fHeadNode	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fFollowList	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMStateSet	TokenNameIdentifier
[	TokenNameLBRACKET
fLeafCount	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
index	TokenNameIdentifier
<	TokenNameLESS
fLeafCount	TokenNameIdentifier
;	TokenNameSEMICOLON
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
fFollowList	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
CMStateSet	TokenNameIdentifier
(	TokenNameLPAREN
fLeafCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calcFollowList	TokenNameIdentifier
(	TokenNameLPAREN
fHeadNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElemMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
[	TokenNameLBRACKET
fLeafCount	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fElemMapType	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
fLeafCount	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fElemMapSize	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
outIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
outIndex	TokenNameIdentifier
<	TokenNameLESS
fLeafCount	TokenNameIdentifier
;	TokenNameSEMICOLON
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
fElemMap	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
QName	TokenNameIdentifier
element	TokenNameIdentifier
=	TokenNameEQUAL
fLeafList	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
getElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
inIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
inIndex	TokenNameIdentifier
<	TokenNameLESS
fElemMapSize	TokenNameIdentifier
;	TokenNameSEMICOLON
inIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fElemMap	TokenNameIdentifier
[	TokenNameLBRACKET
inIndex	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
rawname	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
element	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
inIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fElemMapSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fElemMap	TokenNameIdentifier
[	TokenNameLBRACKET
fElemMapSize	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
element	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElemMapType	TokenNameIdentifier
[	TokenNameLBRACKET
fElemMapSize	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
fLeafListType	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fElemMapSize	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fLeafSorter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
fLeafCount	TokenNameIdentifier
+	TokenNamePLUS
fElemMapSize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
fSortCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
elemIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
elemIndex	TokenNameIdentifier
<	TokenNameLESS
fElemMapSize	TokenNameIdentifier
;	TokenNameSEMICOLON
elemIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
leafIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
leafIndex	TokenNameIdentifier
<	TokenNameLESS
fLeafCount	TokenNameIdentifier
;	TokenNameSEMICOLON
leafIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
QName	TokenNameIdentifier
leaf	TokenNameIdentifier
=	TokenNameEQUAL
fLeafList	TokenNameIdentifier
[	TokenNameLBRACKET
leafIndex	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
getElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
QName	TokenNameIdentifier
element	TokenNameIdentifier
=	TokenNameEQUAL
fElemMap	TokenNameIdentifier
[	TokenNameLBRACKET
elemIndex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
leaf	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
element	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fLeafSorter	TokenNameIdentifier
[	TokenNameLBRACKET
fSortCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
leafIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
fLeafSorter	TokenNameIdentifier
[	TokenNameLBRACKET
fSortCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
curArraySize	TokenNameIdentifier
=	TokenNameEQUAL
fLeafCount	TokenNameIdentifier
*	TokenNameMULTIPLY
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
CMStateSet	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
statesToDo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMStateSet	TokenNameIdentifier
[	TokenNameLBRACKET
curArraySize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fFinalStateFlags	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
boolean	TokenNameboolean
[	TokenNameLBRACKET
curArraySize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fTransTable	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
curArraySize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
CMStateSet	TokenNameIdentifier
setT	TokenNameIdentifier
=	TokenNameEQUAL
fHeadNode	TokenNameIdentifier
.	TokenNameDOT
firstPos	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
unmarkedState	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
curState	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fTransTable	TokenNameIdentifier
[	TokenNameLBRACKET
curState	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
makeDefStateList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
statesToDo	TokenNameIdentifier
[	TokenNameLBRACKET
curState	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
setT	TokenNameIdentifier
;	TokenNameSEMICOLON
curState	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
HashMap	TokenNameIdentifier
stateTable	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
unmarkedState	TokenNameIdentifier
<	TokenNameLESS
curState	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setT	TokenNameIdentifier
=	TokenNameEQUAL
statesToDo	TokenNameIdentifier
[	TokenNameLBRACKET
unmarkedState	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
transEntry	TokenNameIdentifier
=	TokenNameEQUAL
fTransTable	TokenNameIdentifier
[	TokenNameLBRACKET
unmarkedState	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fFinalStateFlags	TokenNameIdentifier
[	TokenNameLBRACKET
unmarkedState	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
setT	TokenNameIdentifier
.	TokenNameDOT
getBit	TokenNameIdentifier
(	TokenNameLPAREN
fEOCPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
unmarkedState	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
CMStateSet	TokenNameIdentifier
newSet	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
sorterIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
elemIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
elemIndex	TokenNameIdentifier
<	TokenNameLESS
fElemMapSize	TokenNameIdentifier
;	TokenNameSEMICOLON
elemIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
newSet	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
newSet	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMStateSet	TokenNameIdentifier
(	TokenNameLPAREN
fLeafCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
newSet	TokenNameIdentifier
.	TokenNameDOT
zeroBits	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
leafIndex	TokenNameIdentifier
=	TokenNameEQUAL
fLeafSorter	TokenNameIdentifier
[	TokenNameLBRACKET
sorterIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
leafIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
setT	TokenNameIdentifier
.	TokenNameDOT
getBit	TokenNameIdentifier
(	TokenNameLPAREN
leafIndex	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
newSet	TokenNameIdentifier
.	TokenNameDOT
union	TokenNameIdentifier
(	TokenNameLPAREN
fFollowList	TokenNameIdentifier
[	TokenNameLBRACKET
leafIndex	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
leafIndex	TokenNameIdentifier
=	TokenNameEQUAL
fLeafSorter	TokenNameIdentifier
[	TokenNameLBRACKET
sorterIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
newSet	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Integer	TokenNameIdentifier
stateObj	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Integer	TokenNameIdentifier
)	TokenNameRPAREN
stateTable	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
newSet	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
stateIndex	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
stateObj	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
curState	TokenNameIdentifier
:	TokenNameCOLON
stateObj	TokenNameIdentifier
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stateIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
curState	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
statesToDo	TokenNameIdentifier
[	TokenNameLBRACKET
curState	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
newSet	TokenNameIdentifier
;	TokenNameSEMICOLON
fTransTable	TokenNameIdentifier
[	TokenNameLBRACKET
curState	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
makeDefStateList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stateTable	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
newSet	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
curState	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
curState	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
newSet	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
transEntry	TokenNameIdentifier
[	TokenNameLBRACKET
elemIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
stateIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
curState	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
curArraySize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
newSize	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
curArraySize	TokenNameIdentifier
*	TokenNameMULTIPLY
1.5	TokenNameDoubleLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
CMStateSet	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newToDo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMStateSet	TokenNameIdentifier
[	TokenNameLBRACKET
newSize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newFinalFlags	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
boolean	TokenNameboolean
[	TokenNameLBRACKET
newSize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newTransTable	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
newSize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
statesToDo	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newToDo	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
curArraySize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fFinalStateFlags	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newFinalFlags	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
curArraySize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fTransTable	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newTransTable	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
curArraySize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
curArraySize	TokenNameIdentifier
=	TokenNameEQUAL
newSize	TokenNameIdentifier
;	TokenNameSEMICOLON
statesToDo	TokenNameIdentifier
=	TokenNameEQUAL
newToDo	TokenNameIdentifier
;	TokenNameSEMICOLON
fFinalStateFlags	TokenNameIdentifier
=	TokenNameEQUAL
newFinalFlags	TokenNameIdentifier
;	TokenNameSEMICOLON
fTransTable	TokenNameIdentifier
=	TokenNameEQUAL
newTransTable	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
fEmptyContentIsValid	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
CMBinOp	TokenNameIdentifier
)	TokenNameRPAREN
fHeadNode	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getLeft	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
isNullable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG_VALIDATE_CONTENT	TokenNameIdentifier
)	TokenNameRPAREN
dumpTree	TokenNameIdentifier
(	TokenNameLPAREN
fHeadNode	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fHeadNode	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fLeafList	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fFollowList	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
calcFollowList	TokenNameIdentifier
(	TokenNameLPAREN
CMNode	TokenNameIdentifier
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
calcFollowList	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
CMBinOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getLeft	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calcFollowList	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
CMBinOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getRight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_SEQ	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
calcFollowList	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
CMBinOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getLeft	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calcFollowList	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
CMBinOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getRight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
CMStateSet	TokenNameIdentifier
last	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
CMBinOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getLeft	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
lastPos	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
CMStateSet	TokenNameIdentifier
first	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
CMBinOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getRight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
firstPos	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
index	TokenNameIdentifier
<	TokenNameLESS
fLeafCount	TokenNameIdentifier
;	TokenNameSEMICOLON
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
last	TokenNameIdentifier
.	TokenNameDOT
getBit	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
fFollowList	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
union	TokenNameIdentifier
(	TokenNameLPAREN
first	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
calcFollowList	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
CMUniOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
CMStateSet	TokenNameIdentifier
first	TokenNameIdentifier
=	TokenNameEQUAL
nodeCur	TokenNameIdentifier
.	TokenNameDOT
firstPos	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
CMStateSet	TokenNameIdentifier
last	TokenNameIdentifier
=	TokenNameEQUAL
nodeCur	TokenNameIdentifier
.	TokenNameDOT
lastPos	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
index	TokenNameIdentifier
<	TokenNameLESS
fLeafCount	TokenNameIdentifier
;	TokenNameSEMICOLON
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
last	TokenNameIdentifier
.	TokenNameDOT
getBit	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
fFollowList	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
union	TokenNameIdentifier
(	TokenNameLPAREN
first	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
calcFollowList	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
CMUniOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
dumpTree	TokenNameIdentifier
(	TokenNameLPAREN
CMNode	TokenNameIdentifier
nodeCur	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
level	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
index	TokenNameIdentifier
<	TokenNameLESS
level	TokenNameIdentifier
;	TokenNameSEMICOLON
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"   "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_SEQ	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Choice Node "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Seq Node "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
isNullable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Nullable "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"firstPos="	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
firstPos	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" lastPos="	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
lastPos	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dumpTree	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
CMBinOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getLeft	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
level	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dumpTree	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
CMBinOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getRight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
level	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Rep Node "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
isNullable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Nullable "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"firstPos="	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
firstPos	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" lastPos="	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
lastPos	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dumpTree	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
CMUniOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
level	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"Leaf: (pos="	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
CMLeaf	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getPosition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"), "	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
CMLeaf	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"(elemIndex="	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
CMLeaf	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
") "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
isNullable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" Nullable "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"firstPos="	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
firstPos	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" lastPos="	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
lastPos	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"ImplementationMessages.VAL_NIICM"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
makeDefStateList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
retArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
fElemMapSize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
index	TokenNameIdentifier
<	TokenNameLESS
fElemMapSize	TokenNameIdentifier
;	TokenNameSEMICOLON
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
retArray	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
retArray	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
postTreeBuildInit	TokenNameIdentifier
(	TokenNameLPAREN
CMNode	TokenNameIdentifier
nodeCur	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
curIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeCur	TokenNameIdentifier
.	TokenNameDOT
setMaxStates	TokenNameIdentifier
(	TokenNameLPAREN
fLeafCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY	TokenNameIdentifier
||	TokenNameOR_OR
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_LOCAL	TokenNameIdentifier
||	TokenNameOR_OR
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_OTHER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
QName	TokenNameIdentifier
qname	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
CMAny	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getURI	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fLeafList	TokenNameIdentifier
[	TokenNameLBRACKET
curIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
CMLeaf	TokenNameIdentifier
(	TokenNameLPAREN
qname	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
CMAny	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getPosition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fLeafListType	TokenNameIdentifier
[	TokenNameLBRACKET
curIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
curIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_SEQ	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
curIndex	TokenNameIdentifier
=	TokenNameEQUAL
postTreeBuildInit	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
CMBinOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getLeft	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
curIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
curIndex	TokenNameIdentifier
=	TokenNameEQUAL
postTreeBuildInit	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
CMBinOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getRight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
curIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
curIndex	TokenNameIdentifier
=	TokenNameEQUAL
postTreeBuildInit	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
CMUniOp	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
curIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
QName	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
CMLeaf	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
node	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
fEpsilonString	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fLeafList	TokenNameIdentifier
[	TokenNameLBRACKET
curIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
CMLeaf	TokenNameIdentifier
)	TokenNameRPAREN
nodeCur	TokenNameIdentifier
;	TokenNameSEMICOLON
fLeafListType	TokenNameIdentifier
[	TokenNameLBRACKET
curIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
;	TokenNameSEMICOLON
curIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"ImplementationMessages.VAL_NIICM: type="	TokenNameStringLiteral
+	TokenNamePLUS
nodeCur	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
curIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
