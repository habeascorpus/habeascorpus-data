package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SymbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
Augmentations	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XMLDTDContentModelHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XNIException	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
class	TokenNameclass
BalancedDTDGrammar	TokenNameIdentifier
extends	TokenNameextends
DTDGrammar	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
boolean	TokenNameboolean
fMixed	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fDepth	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fOpStack	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fGroupIndexStack	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fGroupIndexStackSizes	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
BalancedDTDGrammar	TokenNameIdentifier
(	TokenNameLPAREN
SymbolTable	TokenNameIdentifier
symbolTable	TokenNameIdentifier
,	TokenNameCOMMA
XMLDTDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
symbolTable	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
startContentModel	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
fDepth	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
initializeContentModelStacks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
super	TokenNamesuper
.	TokenNameDOT
startContentModel	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
,	TokenNameCOMMA
augs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
startGroup	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
++	TokenNamePLUS_PLUS
fDepth	TokenNameIdentifier
;	TokenNameSEMICOLON
initializeContentModelStacks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fMixed	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
pcdata	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
fMixed	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
element	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
addToCurrentGroup	TokenNameIdentifier
(	TokenNameLPAREN
addUniqueLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
separator	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
separator	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
separator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLDTDContentModelHandler	TokenNameIdentifier
.	TokenNameDOT
SEPARATOR_CHOICE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fOpStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
separator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLDTDContentModelHandler	TokenNameIdentifier
.	TokenNameDOT
SEPARATOR_SEQUENCE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fOpStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_SEQ	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
occurrence	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
occurrence	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
fMixed	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
currentIndex	TokenNameIdentifier
=	TokenNameEQUAL
fGroupIndexStackSizes	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
occurrence	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLDTDContentModelHandler	TokenNameIdentifier
.	TokenNameDOT
OCCURS_ZERO_OR_ONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fGroupIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
currentIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
,	TokenNameCOMMA
fGroupIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
currentIndex	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
occurrence	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLDTDContentModelHandler	TokenNameIdentifier
.	TokenNameDOT
OCCURS_ZERO_OR_MORE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fGroupIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
currentIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
,	TokenNameCOMMA
fGroupIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
currentIndex	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
occurrence	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLDTDContentModelHandler	TokenNameIdentifier
.	TokenNameDOT
OCCURS_ONE_OR_MORE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fGroupIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
currentIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
,	TokenNameCOMMA
fGroupIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
currentIndex	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
endGroup	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fGroupIndexStackSizes	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
group	TokenNameIdentifier
=	TokenNameEQUAL
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
addContentSpecNodes	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
:	TokenNameCOLON
addUniqueLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
fDepth	TokenNameIdentifier
;	TokenNameSEMICOLON
addToCurrentGroup	TokenNameIdentifier
(	TokenNameLPAREN
group	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
endDTD	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
endDTD	TokenNameIdentifier
(	TokenNameLPAREN
augs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fOpStack	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fGroupIndexStack	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fGroupIndexStackSizes	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
void	TokenNamevoid
addContentSpecToElement	TokenNameIdentifier
(	TokenNameLPAREN
XMLElementDecl	TokenNameIdentifier
elementDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
contentSpec	TokenNameIdentifier
=	TokenNameEQUAL
fGroupIndexStackSizes	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>	TokenNameGREATER
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
fGroupIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
:	TokenNameCOLON
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
setContentSpecIndex	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentElementIndex	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
addContentSpecNodes	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
begin	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
begin	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fGroupIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
begin	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
middle	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
begin	TokenNameIdentifier
+	TokenNamePLUS
end	TokenNameIdentifier
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
fOpStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
addContentSpecNodes	TokenNameIdentifier
(	TokenNameLPAREN
begin	TokenNameIdentifier
,	TokenNameCOMMA
middle	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
addContentSpecNodes	TokenNameIdentifier
(	TokenNameLPAREN
middle	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
initializeContentModelStacks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fOpStack	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fOpStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fGroupIndexStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fGroupIndexStackSizes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fDepth	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fOpStack	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newOpStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fOpStack	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newOpStack	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fDepth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fOpStack	TokenNameIdentifier
=	TokenNameEQUAL
newOpStack	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newGroupIndexStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fGroupIndexStack	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newGroupIndexStack	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fDepth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGroupIndexStack	TokenNameIdentifier
=	TokenNameEQUAL
newGroupIndexStack	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newGroupIndexStackLengths	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fGroupIndexStackSizes	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newGroupIndexStackLengths	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fDepth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGroupIndexStackSizes	TokenNameIdentifier
=	TokenNameEQUAL
newGroupIndexStackLengths	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fOpStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fGroupIndexStackSizes	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addToCurrentGroup	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
currentGroup	TokenNameIdentifier
=	TokenNameEQUAL
fGroupIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fGroupIndexStackSizes	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
currentGroup	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
currentGroup	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fGroupIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
currentGroup	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
currentGroup	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newGroup	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
currentGroup	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
currentGroup	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newGroup	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
currentGroup	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentGroup	TokenNameIdentifier
=	TokenNameEQUAL
newGroup	TokenNameIdentifier
;	TokenNameSEMICOLON
fGroupIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
currentGroup	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
currentGroup	TokenNameIdentifier
[	TokenNameLBRACKET
length	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
contentSpec	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
