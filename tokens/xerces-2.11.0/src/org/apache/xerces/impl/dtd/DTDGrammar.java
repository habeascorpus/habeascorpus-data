package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Hashtable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
.	TokenNameDOT
models	TokenNameIdentifier
.	TokenNameDOT
CMAny	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
.	TokenNameDOT
models	TokenNameIdentifier
.	TokenNameDOT
CMBinOp	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
.	TokenNameDOT
models	TokenNameIdentifier
.	TokenNameDOT
CMLeaf	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
.	TokenNameDOT
models	TokenNameIdentifier
.	TokenNameDOT
CMNode	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
.	TokenNameDOT
models	TokenNameIdentifier
.	TokenNameDOT
CMUniOp	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
.	TokenNameDOT
models	TokenNameIdentifier
.	TokenNameDOT
ContentModelValidator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
.	TokenNameDOT
models	TokenNameIdentifier
.	TokenNameDOT
DFAContentModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
.	TokenNameDOT
models	TokenNameIdentifier
.	TokenNameDOT
MixedContentModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
.	TokenNameDOT
models	TokenNameIdentifier
.	TokenNameDOT
SimpleContentModel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dv	TokenNameIdentifier
.	TokenNameDOT
DatatypeValidator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
validation	TokenNameIdentifier
.	TokenNameDOT
EntityState	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SymbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
Augmentations	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
QName	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XMLDTDContentModelHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XMLDTDHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XMLLocator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XMLResourceIdentifier	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XMLString	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XNIException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
grammars	TokenNameIdentifier
.	TokenNameDOT
Grammar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
grammars	TokenNameIdentifier
.	TokenNameDOT
XMLGrammarDescription	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLDTDContentModelSource	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLDTDSource	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
DTDGrammar	TokenNameIdentifier
implements	TokenNameimplements
XMLDTDHandler	TokenNameIdentifier
,	TokenNameCOMMA
XMLDTDContentModelHandler	TokenNameIdentifier
,	TokenNameCOMMA
EntityState	TokenNameIdentifier
,	TokenNameCOMMA
Grammar	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TOP_LEVEL_SCOPE	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHUNK_SHIFT	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHUNK_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHUNK_MASK	TokenNameIdentifier
=	TokenNameEQUAL
CHUNK_SIZE	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
INITIAL_CHUNK_COUNT	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
10	TokenNameIntegerLiteral
-	TokenNameMINUS
CHUNK_SHIFT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
LIST_FLAG	TokenNameIdentifier
=	TokenNameEQUAL
0x80	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
LIST_MASK	TokenNameIdentifier
=	TokenNameEQUAL
~	TokenNameTWIDDLE
LIST_FLAG	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
DEBUG	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
protected	TokenNameprotected
XMLDTDSource	TokenNameIdentifier
fDTDSource	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
protected	TokenNameprotected
XMLDTDContentModelSource	TokenNameIdentifier
fDTDContentModelSource	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
fCurrentElementIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
fCurrentAttributeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
boolean	TokenNameboolean
fReadingExternalDTD	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
SymbolTable	TokenNameIdentifier
fSymbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
XMLDTDDescription	TokenNameIdentifier
fGrammarDescription	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fElementDeclCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
QName	TokenNameIdentifier
fElementDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
short	TokenNameshort
fElementDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fElementDeclContentSpecIndex	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
ContentModelValidator	TokenNameIdentifier
fElementDeclContentModelValidator	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
ContentModelValidator	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fElementDeclFirstAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fElementDeclLastAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fAttributeDeclCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
QName	TokenNameIdentifier
fAttributeDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
fIsImmutable	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
short	TokenNameshort
fAttributeDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fAttributeDeclEnumeration	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
short	TokenNameshort
fAttributeDeclDefaultType	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
DatatypeValidator	TokenNameIdentifier
fAttributeDeclDatatypeValidator	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
DatatypeValidator	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
fAttributeDeclDefaultValue	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
fAttributeDeclNonNormalizedDefaultValue	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fAttributeDeclNextAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fContentSpecCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
short	TokenNameshort
fContentSpecType	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
Object	TokenNameIdentifier
fContentSpecValue	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
Object	TokenNameIdentifier
fContentSpecOtherValue	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fEntityCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
fEntityName	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fEntityValue	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fEntityPublicId	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fEntitySystemId	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fEntityBaseSystemId	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fEntityNotation	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fEntityIsPE	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fEntityInExternal	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fNotationCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
fNotationName	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fNotationPublicId	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fNotationSystemId	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fNotationBaseSystemId	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
QNameHashtable	TokenNameIdentifier
fElementIndexMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QNameHashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
QNameHashtable	TokenNameIdentifier
fEntityIndexMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QNameHashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
QNameHashtable	TokenNameIdentifier
fNotationIndexMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QNameHashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
fMixed	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
QName	TokenNameIdentifier
fQName	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
QName	TokenNameIdentifier
fQName2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
XMLAttributeDecl	TokenNameIdentifier
fAttributeDecl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fLeafCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fEpsilonIndex	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
XMLElementDecl	TokenNameIdentifier
fElementDecl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
XMLEntityDecl	TokenNameIdentifier
fEntityDecl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
XMLSimpleType	TokenNameIdentifier
fSimpleType	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLSimpleType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
XMLContentSpec	TokenNameIdentifier
fContentSpec	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Hashtable	TokenNameIdentifier
fElementDeclTab	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fOpStack	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fNodeIndexStack	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fPrevNodeIndexStack	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fDepth	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fPEntityStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
boolean	TokenNameboolean
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fPEDepth	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fElementDeclIsExternal	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fAttributeDeclIsExternal	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INITIAL_CHUNK_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
valueIndex	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
prevNodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
DTDGrammar	TokenNameIdentifier
(	TokenNameLPAREN
SymbolTable	TokenNameIdentifier
symbolTable	TokenNameIdentifier
,	TokenNameCOMMA
XMLDTDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fSymbolTable	TokenNameIdentifier
=	TokenNameEQUAL
symbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
fGrammarDescription	TokenNameIdentifier
=	TokenNameEQUAL
desc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XMLGrammarDescription	TokenNameIdentifier
getGrammarDescription	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fGrammarDescription	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
getElementDeclIsExternal	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
fElementDeclIsExternal	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
getAttributeDeclIsExternal	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
attributeDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
attributeDeclIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
attributeDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
attributeDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
fAttributeDeclIsExternal	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getAttributeDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attributeDeclName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
attDefIndex	TokenNameIdentifier
=	TokenNameEQUAL
getFirstAttributeDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
attDefIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
getAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
attDefIndex	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fAttributeDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
attributeDeclName	TokenNameIdentifier
||	TokenNameOR_OR
attributeDeclName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
fAttributeDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
attDefIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
attDefIndex	TokenNameIdentifier
=	TokenNameEQUAL
getNextAttributeDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
attDefIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startDTD	TokenNameIdentifier
(	TokenNameLPAREN
XMLLocator	TokenNameIdentifier
locator	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
fOpStack	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fNodeIndexStack	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fPrevNodeIndexStack	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startParameterEntity	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
XMLResourceIdentifier	TokenNameIdentifier
identifier	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
encoding	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fPEDepth	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fPEntityStack	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
entityarray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
boolean	TokenNameboolean
[	TokenNameLBRACKET
fPEntityStack	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fPEntityStack	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
entityarray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fPEntityStack	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fPEntityStack	TokenNameIdentifier
=	TokenNameEQUAL
entityarray	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fPEntityStack	TokenNameIdentifier
[	TokenNameLBRACKET
fPEDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
fReadingExternalDTD	TokenNameIdentifier
;	TokenNameSEMICOLON
fPEDepth	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startExternalSubset	TokenNameIdentifier
(	TokenNameLPAREN
XMLResourceIdentifier	TokenNameIdentifier
identifier	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
fReadingExternalDTD	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endParameterEntity	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
fPEDepth	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
fReadingExternalDTD	TokenNameIdentifier
=	TokenNameEQUAL
fPEntityStack	TokenNameIdentifier
[	TokenNameLBRACKET
fPEDepth	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endExternalSubset	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
fReadingExternalDTD	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
elementDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
contentModel	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
XMLElementDecl	TokenNameIdentifier
tmpElementDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XMLElementDecl	TokenNameIdentifier
)	TokenNameRPAREN
fElementDeclTab	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tmpElementDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tmpElementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentElementIndex	TokenNameIdentifier
=	TokenNameEQUAL
getElementDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fCurrentElementIndex	TokenNameIdentifier
=	TokenNameEQUAL
createElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XMLElementDecl	TokenNameIdentifier
elementDecl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fQName	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
name	TokenNameIdentifier
,	TokenNameCOMMA
name	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
elementDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
fQName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
elementDecl	TokenNameIdentifier
.	TokenNameDOT
contentModelValidator	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
elementDecl	TokenNameIdentifier
.	TokenNameDOT
scope	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentModel	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"EMPTY"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
elementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLElementDecl	TokenNameIdentifier
.	TokenNameDOT
TYPE_EMPTY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentModel	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"ANY"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
elementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLElementDecl	TokenNameIdentifier
.	TokenNameDOT
TYPE_ANY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentModel	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"("	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
contentModel	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
"#PCDATA"	TokenNameStringLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
elementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLElementDecl	TokenNameIdentifier
.	TokenNameDOT
TYPE_MIXED	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
elementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLElementDecl	TokenNameIdentifier
.	TokenNameDOT
TYPE_CHILDREN	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
fElementDeclTab	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
elementDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementDecl	TokenNameIdentifier
=	TokenNameEQUAL
elementDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
addContentSpecToElement	TokenNameIdentifier
(	TokenNameLPAREN
elementDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"name = "	TokenNameStringLiteral
+	TokenNamePLUS
fElementDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Type = "	TokenNameStringLiteral
+	TokenNamePLUS
fElementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
setElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentElementIndex	TokenNameIdentifier
,	TokenNameCOMMA
fElementDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentElementIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentElementIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
ensureElementDeclCapacity	TokenNameIdentifier
(	TokenNameLPAREN
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementDeclIsExternal	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
fReadingExternalDTD	TokenNameIdentifier
||	TokenNameOR_OR
fPEDepth	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
attributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
type	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
enumeration	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
defaultType	TokenNameIdentifier
,	TokenNameCOMMA
XMLString	TokenNameIdentifier
defaultValue	TokenNameIdentifier
,	TokenNameCOMMA
XMLString	TokenNameIdentifier
nonNormalizedDefaultValue	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
fElementDeclTab	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
elementName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fCurrentElementIndex	TokenNameIdentifier
=	TokenNameEQUAL
createElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XMLElementDecl	TokenNameIdentifier
elementDecl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
elementDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
elementName	TokenNameIdentifier
,	TokenNameCOMMA
elementName	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
elementDecl	TokenNameIdentifier
.	TokenNameDOT
scope	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
fElementDeclTab	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
,	TokenNameCOMMA
elementDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentElementIndex	TokenNameIdentifier
,	TokenNameCOMMA
elementDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
elementIndex	TokenNameIdentifier
=	TokenNameEQUAL
getElementDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
getAttributeDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
elementIndex	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fCurrentAttributeIndex	TokenNameIdentifier
=	TokenNameEQUAL
createAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
defaultType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
defaultType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"#FIXED"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
defaultType	TokenNameIdentifier
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE_FIXED	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
defaultType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"#IMPLIED"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
defaultType	TokenNameIdentifier
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE_IMPLIED	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
defaultType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"#REQUIRED"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
defaultType	TokenNameIdentifier
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE_REQUIRED	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"defaultvalue = "	TokenNameStringLiteral
+	TokenNamePLUS
defaultValue	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
defaultValue	TokenNameIdentifier
=	TokenNameEQUAL
defaultValue	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
defaultValue	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
nonNormalizedDefaultValue	TokenNameIdentifier
=	TokenNameEQUAL
nonNormalizedDefaultValue	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
nonNormalizedDefaultValue	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
enumeration	TokenNameIdentifier
=	TokenNameEQUAL
enumeration	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"CDATA"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
TYPE_CDATA	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"ID"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
TYPE_ID	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"IDREF"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
TYPE_IDREF	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
"S"	TokenNameStringLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
list	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"ENTITIES"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
TYPE_ENTITY	TokenNameIdentifier
;	TokenNameSEMICOLON
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
list	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"ENTITY"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
TYPE_ENTITY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"NMTOKENS"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
TYPE_NMTOKEN	TokenNameIdentifier
;	TokenNameSEMICOLON
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
list	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"NMTOKEN"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
TYPE_NMTOKEN	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"NOTATION"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
TYPE_NOTATION	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"ENUMERATION"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleType	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
TYPE_ENUMERATION	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"!!! unknown attribute type "	TokenNameStringLiteral
+	TokenNamePLUS
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fQName	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
attributeName	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDecl	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
fQName	TokenNameIdentifier
,	TokenNameCOMMA
fSimpleType	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
elementIndex	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentAttributeIndex	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentAttributeIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentAttributeIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
ensureAttributeDeclCapacity	TokenNameIdentifier
(	TokenNameLPAREN
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDeclIsExternal	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
fReadingExternalDTD	TokenNameIdentifier
||	TokenNameOR_OR
fPEDepth	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
internalEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
XMLString	TokenNameIdentifier
text	TokenNameIdentifier
,	TokenNameCOMMA
XMLString	TokenNameIdentifier
nonNormalizedText	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
entityIndex	TokenNameIdentifier
=	TokenNameEQUAL
getEntityDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
entityIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
entityIndex	TokenNameIdentifier
=	TokenNameEQUAL
createEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isPE	TokenNameIdentifier
=	TokenNameEQUAL
name	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"%"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
inExternal	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
fReadingExternalDTD	TokenNameIdentifier
||	TokenNameOR_OR
fPEDepth	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XMLEntityDecl	TokenNameIdentifier
entityDecl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
entityDecl	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
text	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
isPE	TokenNameIdentifier
,	TokenNameCOMMA
inExternal	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
entityIndex	TokenNameIdentifier
,	TokenNameCOMMA
entityDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
externalEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
XMLResourceIdentifier	TokenNameIdentifier
identifier	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
entityIndex	TokenNameIdentifier
=	TokenNameEQUAL
getEntityDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
entityIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
entityIndex	TokenNameIdentifier
=	TokenNameEQUAL
createEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isPE	TokenNameIdentifier
=	TokenNameEQUAL
name	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"%"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
inExternal	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
fReadingExternalDTD	TokenNameIdentifier
||	TokenNameOR_OR
fPEDepth	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XMLEntityDecl	TokenNameIdentifier
entityDecl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
entityDecl	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
identifier	TokenNameIdentifier
.	TokenNameDOT
getPublicId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
identifier	TokenNameIdentifier
.	TokenNameDOT
getLiteralSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
identifier	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
isPE	TokenNameIdentifier
,	TokenNameCOMMA
inExternal	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
entityIndex	TokenNameIdentifier
,	TokenNameCOMMA
entityDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
unparsedEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
XMLResourceIdentifier	TokenNameIdentifier
identifier	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
notation	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
XMLEntityDecl	TokenNameIdentifier
entityDecl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isPE	TokenNameIdentifier
=	TokenNameEQUAL
name	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"%"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
inExternal	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
fReadingExternalDTD	TokenNameIdentifier
||	TokenNameOR_OR
fPEDepth	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
entityDecl	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
identifier	TokenNameIdentifier
.	TokenNameDOT
getPublicId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
identifier	TokenNameIdentifier
.	TokenNameDOT
getLiteralSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
identifier	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
notation	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
isPE	TokenNameIdentifier
,	TokenNameCOMMA
inExternal	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
entityIndex	TokenNameIdentifier
=	TokenNameEQUAL
getEntityDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
entityIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
entityIndex	TokenNameIdentifier
=	TokenNameEQUAL
createEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
entityIndex	TokenNameIdentifier
,	TokenNameCOMMA
entityDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
notationDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
XMLResourceIdentifier	TokenNameIdentifier
identifier	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
XMLNotationDecl	TokenNameIdentifier
notationDecl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
notationDecl	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
identifier	TokenNameIdentifier
.	TokenNameDOT
getPublicId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
identifier	TokenNameIdentifier
.	TokenNameDOT
getLiteralSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
identifier	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
notationIndex	TokenNameIdentifier
=	TokenNameEQUAL
getNotationDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
notationIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
notationIndex	TokenNameIdentifier
=	TokenNameEQUAL
createNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
notationIndex	TokenNameIdentifier
,	TokenNameCOMMA
notationDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endDTD	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
fIsImmutable	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
getRootName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
currName	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
fElementDeclCount	TokenNameIdentifier
;	TokenNameSEMICOLON
ArrayList	TokenNameIdentifier
elements	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
size	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
chunk	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
currName	TokenNameIdentifier
=	TokenNameEQUAL
fElementDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
rawname	TokenNameIdentifier
;	TokenNameSEMICOLON
elements	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
currName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
setPossibleRoots	TokenNameIdentifier
(	TokenNameLPAREN
elements	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setDTDSource	TokenNameIdentifier
(	TokenNameLPAREN
XMLDTDSource	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fDTDSource	TokenNameIdentifier
=	TokenNameEQUAL
source	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XMLDTDSource	TokenNameIdentifier
getDTDSource	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fDTDSource	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
textDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
version	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
encoding	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
comment	TokenNameIdentifier
(	TokenNameLPAREN
XMLString	TokenNameIdentifier
text	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
processingInstruction	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
target	TokenNameIdentifier
,	TokenNameCOMMA
XMLString	TokenNameIdentifier
data	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startAttlist	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endAttlist	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startConditional	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
type	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
ignoredCharacters	TokenNameIdentifier
(	TokenNameLPAREN
XMLString	TokenNameIdentifier
text	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endConditional	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setDTDContentModelSource	TokenNameIdentifier
(	TokenNameLPAREN
XMLDTDContentModelSource	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fDTDContentModelSource	TokenNameIdentifier
=	TokenNameEQUAL
source	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XMLDTDContentModelSource	TokenNameIdentifier
getDTDContentModelSource	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fDTDContentModelSource	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startContentModel	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
XMLElementDecl	TokenNameIdentifier
elementDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XMLElementDecl	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
fElementDeclTab	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
elementDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fElementDecl	TokenNameIdentifier
=	TokenNameEQUAL
elementDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fDepth	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
initializeContentModelStack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startGroup	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
fDepth	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
initializeContentModelStack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fMixed	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
pcdata	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
fMixed	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
element	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fMixed	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
addUniqueLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
,	TokenNameCOMMA
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
addUniqueLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
elementName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
,	TokenNameCOMMA
elementName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
separator	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
separator	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
fMixed	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fOpStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_SEQ	TokenNameIdentifier
&&	TokenNameAND_AND
separator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLDTDContentModelHandler	TokenNameIdentifier
.	TokenNameDOT
SEPARATOR_CHOICE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fPrevNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
fOpStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fPrevNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fPrevNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fOpStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fOpStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
&&	TokenNameAND_AND
separator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLDTDContentModelHandler	TokenNameIdentifier
.	TokenNameDOT
SEPARATOR_SEQUENCE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fPrevNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
fOpStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fPrevNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fPrevNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fOpStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_SEQ	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
occurrence	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
occurrence	TokenNameIdentifier
,	TokenNameCOMMA
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
fMixed	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
occurrence	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLDTDContentModelHandler	TokenNameIdentifier
.	TokenNameDOT
OCCURS_ZERO_OR_ONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
,	TokenNameCOMMA
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
occurrence	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLDTDContentModelHandler	TokenNameIdentifier
.	TokenNameDOT
OCCURS_ZERO_OR_MORE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
,	TokenNameCOMMA
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
occurrence	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLDTDContentModelHandler	TokenNameIdentifier
.	TokenNameDOT
OCCURS_ONE_OR_MORE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
,	TokenNameCOMMA
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endGroup	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
fMixed	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fPrevNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
fOpStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fPrevNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
nodeIndex	TokenNameIdentifier
=	TokenNameEQUAL
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
--	TokenNameMINUS_MINUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
nodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
any	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
empty	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endContentModel	TokenNameIdentifier
(	TokenNameLPAREN
Augmentations	TokenNameIdentifier
augs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XNIException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isNamespaceAware	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
SymbolTable	TokenNameIdentifier
getSymbolTable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fSymbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getFirstElementDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fElementDeclCount	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNextElementDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
elementDeclIndex	TokenNameIdentifier
<	TokenNameLESS
fElementDeclCount	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
?	TokenNameQUESTION
elementDeclIndex	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getElementDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementDeclName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
mapping	TokenNameIdentifier
=	TokenNameEQUAL
fElementIndexMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
elementDeclName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
mapping	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getElementDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
QName	TokenNameIdentifier
elementDeclQName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getElementDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
elementDeclQName	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
short	TokenNameshort
getContentSpecType	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elementIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
elementIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fElementDeclCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
elementIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
elementIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fElementDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
fElementDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
LIST_MASK	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
getElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
XMLElementDecl	TokenNameIdentifier
elementDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
elementDeclIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fElementDeclCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
elementDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
fElementDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fElementDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
elementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
elementDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
list	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
elementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
fElementDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
LIST_MASK	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
elementDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
list	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
fElementDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
LIST_FLAG	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
elementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLElementDecl	TokenNameIdentifier
.	TokenNameDOT
TYPE_CHILDREN	TokenNameIdentifier
||	TokenNameOR_OR
elementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLElementDecl	TokenNameIdentifier
.	TokenNameDOT
TYPE_MIXED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
elementDecl	TokenNameIdentifier
.	TokenNameDOT
contentModelValidator	TokenNameIdentifier
=	TokenNameEQUAL
getElementContentModelValidator	TokenNameIdentifier
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
elementDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
datatypeValidator	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
elementDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
defaultType	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
elementDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
defaultValue	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
QName	TokenNameIdentifier
getElementDeclName	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
elementDeclIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fElementDeclCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
fElementDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getFirstAttributeDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
fElementDeclFirstAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNextAttributeDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
attributeDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
attributeDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
attributeDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
fAttributeDeclNextAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
getAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
attributeDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
XMLAttributeDecl	TokenNameIdentifier
attributeDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
attributeDeclIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
attributeDeclIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fAttributeDeclCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
attributeDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
attributeDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
attributeDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
fAttributeDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
attributeType	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isList	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fAttributeDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
attributeType	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
isList	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
attributeType	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
fAttributeDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
LIST_MASK	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isList	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
fAttributeDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
LIST_FLAG	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
attributeDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
attributeType	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
localpart	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDeclEnumeration	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
isList	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDeclDefaultType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fAttributeDeclDefaultValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fAttributeDeclNonNormalizedDefaultValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fAttributeDeclDatatypeValidator	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isCDATAAttribute	TokenNameIdentifier
(	TokenNameLPAREN
QName	TokenNameIdentifier
elName	TokenNameIdentifier
,	TokenNameCOMMA
QName	TokenNameIdentifier
atName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
elDeclIdx	TokenNameIdentifier
=	TokenNameEQUAL
getElementDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
elName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
getAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
elDeclIdx	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDecl	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
fAttributeDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
TYPE_CDATA	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getEntityDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
entityDeclName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
entityDeclName	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
fEntityIndexMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
entityDeclName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
getEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
entityDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
XMLEntityDecl	TokenNameIdentifier
entityDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
entityDeclIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
entityDeclIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fEntityCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
entityDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
entityDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
entityDecl	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
fEntityName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fEntityPublicId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fEntitySystemId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fEntityBaseSystemId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fEntityNotation	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fEntityValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fEntityIsPE	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
false	TokenNamefalse
:	TokenNameCOLON
true	TokenNametrue
,	TokenNameCOMMA
fEntityInExternal	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
false	TokenNamefalse
:	TokenNameCOLON
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNotationDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
notationDeclName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
notationDeclName	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
fNotationIndexMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
notationDeclName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
getNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
notationDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
XMLNotationDecl	TokenNameIdentifier
notationDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
notationDeclIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
notationDeclIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fNotationCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
notationDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
notationDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
notationDecl	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
fNotationName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fNotationPublicId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fNotationSystemId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fNotationBaseSystemId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
contentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
XMLContentSpec	TokenNameIdentifier
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
contentSpecIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
contentSpecIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fContentSpecCount	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
contentSpecIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
contentSpecIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
fContentSpecType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
=	TokenNameEQUAL
fContentSpecValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
=	TokenNameEQUAL
fContentSpecOtherValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getContentSpecIndex	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
elementDeclIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fElementDeclCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
fElementDeclContentSpecIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getContentSpecAsString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
elementDeclIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fElementDeclCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
contentSpecIndex	TokenNameIdentifier
=	TokenNameEQUAL
fElementDeclContentSpecIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
XMLContentSpec	TokenNameIdentifier
contentSpec	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
str	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
parentContentSpecType	TokenNameIdentifier
=	TokenNameEQUAL
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
nextContentSpec	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
parentContentSpecType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"#PCDATA"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextContentSpec	TokenNameIdentifier
=	TokenNameEQUAL
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextContentSpec	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nextContentSpec	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
nextContentSpec	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
nextContentSpec	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
parentContentSpecType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
parentContentSpecType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'?'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextContentSpec	TokenNameIdentifier
=	TokenNameEQUAL
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextContentSpec	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"#PCDATA"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"##any:uri="	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"##any"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
parentContentSpecType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nextContentSpec	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
nextContentSpec	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
nextContentSpec	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
parentContentSpecType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
parentContentSpecType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'*'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextContentSpec	TokenNameIdentifier
=	TokenNameEQUAL
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextContentSpec	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"#PCDATA"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"##any:uri="	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"##any"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nextContentSpec	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
nextContentSpec	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
nextContentSpec	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
parentContentSpecType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
parentContentSpecType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'+'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_SEQ	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
parentContentSpecType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"##any"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
":uri="	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_OTHER	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"##other:uri="	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_LOCAL	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"##local"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
default	TokenNamedefault
:	TokenNameCOLON
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"???"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
str	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
printElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
XMLElementDecl	TokenNameIdentifier
elementDecl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
getElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
elementDecl	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"element decl: "	TokenNameStringLiteral
+	TokenNamePLUS
elementDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
+	TokenNamePLUS
", "	TokenNameStringLiteral
+	TokenNamePLUS
elementDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
printAttributes	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
attributeDeclIndex	TokenNameIdentifier
=	TokenNameEQUAL
getFirstAttributeDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" ["	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
attributeDeclIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
' '	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
attributeDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
printAttribute	TokenNameIdentifier
(	TokenNameLPAREN
attributeDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
attributeDeclIndex	TokenNameIdentifier
=	TokenNameEQUAL
getNextAttributeDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
attributeDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
attributeDeclIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
","	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
" ]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
addContentSpecToElement	TokenNameIdentifier
(	TokenNameLPAREN
XMLElementDecl	TokenNameIdentifier
elementDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
fDepth	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
fDepth	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
elementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLElementDecl	TokenNameIdentifier
.	TokenNameDOT
TYPE_MIXED	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
fNodeIndexStack	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLElementDecl	TokenNameIdentifier
.	TokenNameDOT
TYPE_MIXED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
pcdata	TokenNameIdentifier
=	TokenNameEQUAL
addUniqueLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
pcdata	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
,	TokenNameCOMMA
pcdata	TokenNameIdentifier
,	TokenNameCOMMA
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
setContentSpecIndex	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentElementIndex	TokenNameIdentifier
,	TokenNameCOMMA
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
ContentModelValidator	TokenNameIdentifier
getElementContentModelValidator	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
ContentModelValidator	TokenNameIdentifier
contentModel	TokenNameIdentifier
=	TokenNameEQUAL
fElementDeclContentModelValidator	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentModel	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
contentModel	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
contentType	TokenNameIdentifier
=	TokenNameEQUAL
fElementDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLElementDecl	TokenNameIdentifier
.	TokenNameDOT
TYPE_SIMPLE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
contentSpecIndex	TokenNameIdentifier
=	TokenNameEQUAL
fElementDeclContentSpecIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
XMLContentSpec	TokenNameIdentifier
contentSpec	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLElementDecl	TokenNameIdentifier
.	TokenNameDOT
TYPE_MIXED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ChildrenList	TokenNameIdentifier
children	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ChildrenList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
contentSpecTree	TokenNameIdentifier
(	TokenNameLPAREN
contentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
children	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
contentModel	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MixedContentModel	TokenNameIdentifier
(	TokenNameLPAREN
children	TokenNameIdentifier
.	TokenNameDOT
qname	TokenNameIdentifier
,	TokenNameCOMMA
children	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
children	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLElementDecl	TokenNameIdentifier
.	TokenNameDOT
TYPE_CHILDREN	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
contentModel	TokenNameIdentifier
=	TokenNameEQUAL
createChildModel	TokenNameIdentifier
(	TokenNameLPAREN
contentSpecIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Unknown content type for a element decl "	TokenNameStringLiteral
+	TokenNamePLUS
"in getElementContentModelValidator() in AbstractDTDGrammar class"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fElementDeclContentModelValidator	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
contentModel	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
contentModel	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
createElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
fElementDeclCount	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
fElementDeclCount	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
ensureElementDeclCapacity	TokenNameIdentifier
(	TokenNameLPAREN
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fElementDeclContentModelValidator	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fElementDeclFirstAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fElementDeclLastAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
fElementDeclCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
setElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
XMLElementDecl	TokenNameIdentifier
elementDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
elementDeclIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fElementDeclCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
fElementDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
elementDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
elementDecl	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
;	TokenNameSEMICOLON
fElementDeclContentModelValidator	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
elementDecl	TokenNameIdentifier
.	TokenNameDOT
contentModelValidator	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
elementDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
list	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
fElementDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
LIST_FLAG	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fElementIndexMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
elementDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
,	TokenNameCOMMA
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
putElementNameMapping	TokenNameIdentifier
(	TokenNameLPAREN
QName	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
scope	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
setFirstAttributeDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
newFirstAttrIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
elementDeclIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fElementDeclCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
fElementDeclFirstAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
newFirstAttrIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
setContentSpecIndex	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
contentSpecIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
elementDeclIndex	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
elementDeclIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fElementDeclCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
fElementDeclContentSpecIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
contentSpecIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
createAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
fAttributeDeclCount	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
fAttributeDeclCount	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
ensureAttributeDeclCapacity	TokenNameIdentifier
(	TokenNameLPAREN
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fAttributeDeclDatatypeValidator	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fAttributeDeclEnumeration	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fAttributeDeclDefaultType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
XMLSimpleType	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE_IMPLIED	TokenNameIdentifier
;	TokenNameSEMICOLON
fAttributeDeclDefaultValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fAttributeDeclNonNormalizedDefaultValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fAttributeDeclNextAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
fAttributeDeclCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
setAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
elementDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
attributeDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
XMLAttributeDecl	TokenNameIdentifier
attributeDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
attrChunk	TokenNameIdentifier
=	TokenNameEQUAL
attributeDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
attrIndex	TokenNameIdentifier
=	TokenNameEQUAL
attributeDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
fAttributeDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
attrChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
attrIndex	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
attributeDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
attrChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
attrIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
attributeDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
attributeDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
list	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fAttributeDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
attrChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
attrIndex	TokenNameIdentifier
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
LIST_FLAG	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fAttributeDeclEnumeration	TokenNameIdentifier
[	TokenNameLBRACKET
attrChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
attrIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
attributeDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
enumeration	TokenNameIdentifier
;	TokenNameSEMICOLON
fAttributeDeclDefaultType	TokenNameIdentifier
[	TokenNameLBRACKET
attrChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
attrIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
attributeDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
defaultType	TokenNameIdentifier
;	TokenNameSEMICOLON
fAttributeDeclDatatypeValidator	TokenNameIdentifier
[	TokenNameLBRACKET
attrChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
attrIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
attributeDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
datatypeValidator	TokenNameIdentifier
;	TokenNameSEMICOLON
fAttributeDeclDefaultValue	TokenNameIdentifier
[	TokenNameLBRACKET
attrChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
attrIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
attributeDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
defaultValue	TokenNameIdentifier
;	TokenNameSEMICOLON
fAttributeDeclNonNormalizedDefaultValue	TokenNameIdentifier
[	TokenNameLBRACKET
attrChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
attrIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
attributeDecl	TokenNameIdentifier
.	TokenNameDOT
simpleType	TokenNameIdentifier
.	TokenNameDOT
nonNormalizedDefaultValue	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
elemChunk	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
elemIndex	TokenNameIdentifier
=	TokenNameEQUAL
elementDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
fElementDeclFirstAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
elemChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
elemIndex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
attributeDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
attrChunk	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
attrIndex	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
index	TokenNameIdentifier
=	TokenNameEQUAL
fAttributeDeclNextAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
attrChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
attrIndex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fElementDeclFirstAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
elemChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
elemIndex	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fElementDeclFirstAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
elemChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
elemIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
attributeDeclIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
index	TokenNameIdentifier
=	TokenNameEQUAL
fElementDeclLastAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
elemChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
elemIndex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
attrChunk	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
attrIndex	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
fAttributeDeclNextAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
attrChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
attrIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
attributeDeclIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fElementDeclLastAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
elemChunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
elemIndex	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
attributeDeclIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
createContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
fContentSpecCount	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
fContentSpecCount	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
ensureContentSpecCapacity	TokenNameIdentifier
(	TokenNameLPAREN
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fContentSpecType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fContentSpecValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fContentSpecOtherValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
fContentSpecCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
setContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
contentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
XMLContentSpec	TokenNameIdentifier
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
contentSpecIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
contentSpecIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
fContentSpecType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
;	TokenNameSEMICOLON
fContentSpecValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
;	TokenNameSEMICOLON
fContentSpecOtherValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
createEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
fEntityCount	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
fEntityCount	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
ensureEntityDeclCapacity	TokenNameIdentifier
(	TokenNameLPAREN
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fEntityIsPE	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fEntityInExternal	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
fEntityCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
setEntityDecl	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
entityDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
XMLEntityDecl	TokenNameIdentifier
entityDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
entityDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
entityDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
fEntityName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
entityDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
;	TokenNameSEMICOLON
fEntityValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
entityDecl	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
;	TokenNameSEMICOLON
fEntityPublicId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
entityDecl	TokenNameIdentifier
.	TokenNameDOT
publicId	TokenNameIdentifier
;	TokenNameSEMICOLON
fEntitySystemId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
entityDecl	TokenNameIdentifier
.	TokenNameDOT
systemId	TokenNameIdentifier
;	TokenNameSEMICOLON
fEntityBaseSystemId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
entityDecl	TokenNameIdentifier
.	TokenNameDOT
baseSystemId	TokenNameIdentifier
;	TokenNameSEMICOLON
fEntityNotation	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
entityDecl	TokenNameIdentifier
.	TokenNameDOT
notation	TokenNameIdentifier
;	TokenNameSEMICOLON
fEntityIsPE	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
entityDecl	TokenNameIdentifier
.	TokenNameDOT
isPE	TokenNameIdentifier
?	TokenNameQUESTION
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
1	TokenNameIntegerLiteral
:	TokenNameCOLON
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fEntityInExternal	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
entityDecl	TokenNameIdentifier
.	TokenNameDOT
inExternal	TokenNameIdentifier
?	TokenNameQUESTION
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
1	TokenNameIntegerLiteral
:	TokenNameCOLON
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fEntityIndexMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
entityDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
,	TokenNameCOMMA
entityDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
createNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
fNotationCount	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
ensureNotationDeclCapacity	TokenNameIdentifier
(	TokenNameLPAREN
chunk	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
fNotationCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
setNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
notationDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
XMLNotationDecl	TokenNameIdentifier
notationDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
notationDeclIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
notationDeclIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
fNotationName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
notationDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
;	TokenNameSEMICOLON
fNotationPublicId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
notationDecl	TokenNameIdentifier
.	TokenNameDOT
publicId	TokenNameIdentifier
;	TokenNameSEMICOLON
fNotationSystemId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
notationDecl	TokenNameIdentifier
.	TokenNameDOT
systemId	TokenNameIdentifier
;	TokenNameSEMICOLON
fNotationBaseSystemId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
notationDecl	TokenNameIdentifier
.	TokenNameDOT
baseSystemId	TokenNameIdentifier
;	TokenNameSEMICOLON
fNotationIndexMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
notationDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
,	TokenNameCOMMA
notationDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
nodeType	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
nodeValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
contentSpecIndex	TokenNameIdentifier
=	TokenNameEQUAL
createContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fContentSpec	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
nodeType	TokenNameIdentifier
,	TokenNameCOMMA
nodeValue	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
fContentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
contentSpecIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
addUniqueLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
contentSpecIndex	TokenNameIdentifier
=	TokenNameEQUAL
createContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fContentSpec	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
,	TokenNameCOMMA
elementName	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
fContentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
contentSpecIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
addContentSpecNode	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
nodeType	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
leftNodeIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
rightNodeIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
contentSpecIndex	TokenNameIdentifier
=	TokenNameEQUAL
createContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
leftIntArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rightIntArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
leftIntArray	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
leftNodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
rightIntArray	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
rightNodeIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
fContentSpec	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
nodeType	TokenNameIdentifier
,	TokenNameCOMMA
leftIntArray	TokenNameIdentifier
,	TokenNameCOMMA
rightIntArray	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
fContentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
contentSpecIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
initializeContentModelStack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fOpStack	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fOpStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fNodeIndexStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fPrevNodeIndexStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fDepth	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fOpStack	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fOpStack	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newStack	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fDepth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fOpStack	TokenNameIdentifier
=	TokenNameEQUAL
newStack	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newIntStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fNodeIndexStack	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newIntStack	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fDepth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNodeIndexStack	TokenNameIdentifier
=	TokenNameEQUAL
newIntStack	TokenNameIdentifier
;	TokenNameSEMICOLON
newIntStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fPrevNodeIndexStack	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newIntStack	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fDepth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fPrevNodeIndexStack	TokenNameIdentifier
=	TokenNameEQUAL
newIntStack	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fOpStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fPrevNodeIndexStack	TokenNameIdentifier
[	TokenNameLBRACKET
fDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
isImmutable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fIsImmutable	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
XMLContentSpec	TokenNameIdentifier
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
StringBuffer	TokenNameIdentifier
str	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
parens	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
parentContentSpecType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
thisContentSpec	TokenNameIdentifier
=	TokenNameEQUAL
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
thisContentSpec	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"#PCDATA"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"##any:uri="	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"##any"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
parentContentSpecType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
parentContentSpecType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
parentContentSpecType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
thisContentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
thisContentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'?'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
parentContentSpecType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
parentContentSpecType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
parentContentSpecType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
thisContentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
thisContentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'*'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
parentContentSpecType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
parentContentSpecType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
parentContentSpecType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
thisContentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
thisContentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'+'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_SEQ	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
parens	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
otherValue	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
type	TokenNameIdentifier
,	TokenNameCOMMA
thisContentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'|'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
otherValue	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
thisContentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
parens	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"##any"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
":uri="	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_OTHER	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"##other:uri="	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_LOCAL	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"##local"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
default	TokenNamedefault
:	TokenNameCOLON
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"???"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
printAttribute	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
attributeDeclIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XMLAttributeDecl	TokenNameIdentifier
attributeDecl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
getAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
attributeDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
attributeDecl	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" { "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
attributeDecl	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" }"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
synchronized	TokenNamesynchronized
ContentModelValidator	TokenNameIdentifier
createChildModel	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
contentSpecIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XMLContentSpec	TokenNameIdentifier
contentSpec	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY	TokenNameIdentifier
||	TokenNameOR_OR
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_OTHER	TokenNameIdentifier
||	TokenNameOR_OR
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_LOCAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"ImplementationMessages.VAL_NPCD"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fQName	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
SimpleContentModel	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
,	TokenNameCOMMA
fQName	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_SEQ	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
XMLContentSpec	TokenNameIdentifier
contentSpecLeft	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XMLContentSpec	TokenNameIdentifier
contentSpecRight	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpecLeft	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpecRight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
contentSpecLeft	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
contentSpecRight	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fQName	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpecLeft	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpecLeft	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpecLeft	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fQName2	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpecRight	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpecRight	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpecRight	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
SimpleContentModel	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
,	TokenNameCOMMA
fQName	TokenNameIdentifier
,	TokenNameCOMMA
fQName2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
XMLContentSpec	TokenNameIdentifier
contentSpecLeft	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
contentSpecLeft	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentSpecLeft	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fQName	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpecLeft	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpecLeft	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpecLeft	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
SimpleContentModel	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
,	TokenNameCOMMA
fQName	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"ImplementationMessages.VAL_CST"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fLeafCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fLeafCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
CMNode	TokenNameIdentifier
cmn	TokenNameIdentifier
=	TokenNameEQUAL
buildSyntaxTree	TokenNameIdentifier
(	TokenNameLPAREN
contentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
DFAContentModel	TokenNameIdentifier
(	TokenNameLPAREN
cmn	TokenNameIdentifier
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
CMNode	TokenNameIdentifier
buildSyntaxTree	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
startNode	TokenNameIdentifier
,	TokenNameCOMMA
XMLContentSpec	TokenNameIdentifier
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
CMNode	TokenNameIdentifier
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
startNode	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMAny	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_OTHER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMAny	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_LOCAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMAny	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fQName	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMLeaf	TokenNameIdentifier
(	TokenNameLPAREN
fQName	TokenNameIdentifier
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
leftNode	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
rightNode	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_SEQ	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMBinOp	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
,	TokenNameCOMMA
buildSyntaxTree	TokenNameIdentifier
(	TokenNameLPAREN
leftNode	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
buildSyntaxTree	TokenNameIdentifier
(	TokenNameLPAREN
rightNode	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMUniOp	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
,	TokenNameCOMMA
buildSyntaxTree	TokenNameIdentifier
(	TokenNameLPAREN
leftNode	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
||	TokenNameOR_OR
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CMUniOp	TokenNameIdentifier
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
,	TokenNameCOMMA
buildSyntaxTree	TokenNameIdentifier
(	TokenNameLPAREN
leftNode	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"ImplementationMessages.VAL_CST"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
nodeRet	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
contentSpecTree	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
contentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
XMLContentSpec	TokenNameIdentifier
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
ChildrenList	TokenNameIdentifier
children	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
getContentSpec	TokenNameIdentifier
(	TokenNameLPAREN
contentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_LEAF	TokenNameIdentifier
||	TokenNameOR_OR
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY	TokenNameIdentifier
||	TokenNameOR_OR
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_LOCAL	TokenNameIdentifier
||	TokenNameOR_OR
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ANY_OTHER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
children	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
children	TokenNameIdentifier
.	TokenNameDOT
qname	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
QName	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newQName	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
[	TokenNameLBRACKET
children	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
children	TokenNameIdentifier
.	TokenNameDOT
qname	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newQName	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
children	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
children	TokenNameIdentifier
.	TokenNameDOT
qname	TokenNameIdentifier
=	TokenNameEQUAL
newQName	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newType	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
children	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
children	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newType	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
children	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
children	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
newType	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
children	TokenNameIdentifier
.	TokenNameDOT
qname	TokenNameIdentifier
[	TokenNameLBRACKET
children	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
children	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
[	TokenNameLBRACKET
children	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
;	TokenNameSEMICOLON
children	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
leftNode	TokenNameIdentifier
=	TokenNameEQUAL
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
:	TokenNameCOLON
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
rightNode	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
rightNode	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
otherValue	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
else	TokenNameelse
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_CHOICE	TokenNameIdentifier
||	TokenNameOR_OR
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_SEQ	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
contentSpecTree	TokenNameIdentifier
(	TokenNameLPAREN
leftNode	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
children	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
contentSpecTree	TokenNameIdentifier
(	TokenNameLPAREN
rightNode	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
children	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_ONE	TokenNameIdentifier
||	TokenNameOR_OR
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ZERO_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLContentSpec	TokenNameIdentifier
.	TokenNameDOT
CONTENTSPECNODE_ONE_OR_MORE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
contentSpecTree	TokenNameIdentifier
(	TokenNameLPAREN
leftNode	TokenNameIdentifier
,	TokenNameCOMMA
contentSpec	TokenNameIdentifier
,	TokenNameCOMMA
children	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Invalid content spec type seen in contentSpecTree() method of AbstractDTDGrammar class : "	TokenNameStringLiteral
+	TokenNamePLUS
contentSpec	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
ensureElementDeclCapacity	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
chunk	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
chunk	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fElementDeclName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fElementDeclIsExternal	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fElementDeclIsExternal	TokenNameIdentifier
,	TokenNameCOMMA
fElementDeclIsExternal	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementDeclName	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fElementDeclName	TokenNameIdentifier
,	TokenNameCOMMA
fElementDeclName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementDeclType	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fElementDeclType	TokenNameIdentifier
,	TokenNameCOMMA
fElementDeclType	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementDeclContentModelValidator	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fElementDeclContentModelValidator	TokenNameIdentifier
,	TokenNameCOMMA
fElementDeclContentModelValidator	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementDeclContentSpecIndex	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fElementDeclContentSpecIndex	TokenNameIdentifier
,	TokenNameCOMMA
fElementDeclContentSpecIndex	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementDeclFirstAttributeDeclIndex	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fElementDeclFirstAttributeDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
fElementDeclFirstAttributeDeclIndex	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementDeclLastAttributeDeclIndex	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fElementDeclLastAttributeDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
fElementDeclLastAttributeDeclIndex	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fElementDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fElementDeclIsExternal	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fElementDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fElementDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fElementDeclContentModelValidator	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
ContentModelValidator	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fElementDeclContentSpecIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fElementDeclFirstAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fElementDeclLastAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
ensureAttributeDeclCapacity	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
chunk	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
chunk	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fAttributeDeclName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fAttributeDeclIsExternal	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fAttributeDeclIsExternal	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDeclIsExternal	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDeclName	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fAttributeDeclName	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDeclName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDeclType	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fAttributeDeclType	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDeclType	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDeclEnumeration	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fAttributeDeclEnumeration	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDeclEnumeration	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDeclDefaultType	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fAttributeDeclDefaultType	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDeclDefaultType	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDeclDatatypeValidator	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fAttributeDeclDatatypeValidator	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDeclDatatypeValidator	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDeclDefaultValue	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fAttributeDeclDefaultValue	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDeclDefaultValue	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDeclNonNormalizedDefaultValue	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fAttributeDeclNonNormalizedDefaultValue	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDeclNonNormalizedDefaultValue	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeDeclNextAttributeDeclIndex	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fAttributeDeclNextAttributeDeclIndex	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeDeclNextAttributeDeclIndex	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fAttributeDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fAttributeDeclIsExternal	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fAttributeDeclName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fAttributeDeclType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fAttributeDeclEnumeration	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fAttributeDeclDefaultType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fAttributeDeclDatatypeValidator	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
DatatypeValidator	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fAttributeDeclDefaultValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fAttributeDeclNonNormalizedDefaultValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fAttributeDeclNextAttributeDeclIndex	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
ensureEntityDeclCapacity	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
chunk	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
chunk	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fEntityName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fEntityName	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fEntityName	TokenNameIdentifier
,	TokenNameCOMMA
fEntityName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fEntityValue	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fEntityValue	TokenNameIdentifier
,	TokenNameCOMMA
fEntityValue	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fEntityPublicId	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fEntityPublicId	TokenNameIdentifier
,	TokenNameCOMMA
fEntityPublicId	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fEntitySystemId	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fEntitySystemId	TokenNameIdentifier
,	TokenNameCOMMA
fEntitySystemId	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fEntityBaseSystemId	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fEntityBaseSystemId	TokenNameIdentifier
,	TokenNameCOMMA
fEntityBaseSystemId	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fEntityNotation	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fEntityNotation	TokenNameIdentifier
,	TokenNameCOMMA
fEntityNotation	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fEntityIsPE	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fEntityIsPE	TokenNameIdentifier
,	TokenNameCOMMA
fEntityIsPE	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fEntityInExternal	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fEntityInExternal	TokenNameIdentifier
,	TokenNameCOMMA
fEntityInExternal	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fEntityName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fEntityName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fEntityValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fEntityPublicId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fEntitySystemId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fEntityBaseSystemId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fEntityNotation	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fEntityIsPE	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fEntityInExternal	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
ensureNotationDeclCapacity	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
chunk	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
chunk	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fNotationName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fNotationName	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fNotationName	TokenNameIdentifier
,	TokenNameCOMMA
fNotationName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNotationPublicId	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fNotationPublicId	TokenNameIdentifier
,	TokenNameCOMMA
fNotationPublicId	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNotationSystemId	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fNotationSystemId	TokenNameIdentifier
,	TokenNameCOMMA
fNotationSystemId	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNotationBaseSystemId	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fNotationBaseSystemId	TokenNameIdentifier
,	TokenNameCOMMA
fNotationBaseSystemId	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fNotationName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fNotationName	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fNotationPublicId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fNotationSystemId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fNotationBaseSystemId	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
ensureContentSpecCapacity	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
chunk	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
chunk	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fContentSpecType	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fContentSpecType	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fContentSpecType	TokenNameIdentifier
,	TokenNameCOMMA
fContentSpecType	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fContentSpecValue	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fContentSpecValue	TokenNameIdentifier
,	TokenNameCOMMA
fContentSpecValue	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fContentSpecOtherValue	TokenNameIdentifier
=	TokenNameEQUAL
resize	TokenNameIdentifier
(	TokenNameLPAREN
fContentSpecOtherValue	TokenNameIdentifier
,	TokenNameCOMMA
fContentSpecOtherValue	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fContentSpecType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fContentSpecType	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fContentSpecValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fContentSpecOtherValue	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
CHUNK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
resize	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
array	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
newsize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
byte	TokenNamebyte
newarray	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
array	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newarray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
array	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newarray	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
resize	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
array	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
newsize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
short	TokenNameshort
newarray	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
array	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newarray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
array	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newarray	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
resize	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
array	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
newsize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
newarray	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
array	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newarray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
array	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newarray	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
DatatypeValidator	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
resize	TokenNameIdentifier
(	TokenNameLPAREN
DatatypeValidator	TokenNameIdentifier
array	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
newsize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
DatatypeValidator	TokenNameIdentifier
newarray	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
DatatypeValidator	TokenNameIdentifier
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
array	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newarray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
array	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newarray	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
ContentModelValidator	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
resize	TokenNameIdentifier
(	TokenNameLPAREN
ContentModelValidator	TokenNameIdentifier
array	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
newsize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ContentModelValidator	TokenNameIdentifier
newarray	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
ContentModelValidator	TokenNameIdentifier
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
array	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newarray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
array	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newarray	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
resize	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
array	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
newsize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
newarray	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
array	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newarray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
array	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newarray	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
QName	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
resize	TokenNameIdentifier
(	TokenNameLPAREN
QName	TokenNameIdentifier
array	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
newsize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
QName	TokenNameIdentifier
newarray	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
array	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newarray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
array	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newarray	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
resize	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
array	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
newsize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
newarray	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
array	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newarray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
array	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newarray	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
resize	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
array	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
newsize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
newarray	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
newsize	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
array	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newarray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
array	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newarray	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
ChildrenList	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
QName	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
qname	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
public	TokenNamepublic
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
type	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
public	TokenNamepublic
ChildrenList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
QNameHashtable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
INITIAL_BUCKET_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
HASHTABLE_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
101	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fHashTable	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
HASHTABLE_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
put	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
hash	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&	TokenNameAND
0x7FFFFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
HASHTABLE_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bucket	TokenNameIdentifier
=	TokenNameEQUAL
fHashTable	TokenNameIdentifier
[	TokenNameLBRACKET
hash	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
bucket	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
bucket	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
INITIAL_BUCKET_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bucket	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
bucket	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
key	TokenNameIdentifier
;	TokenNameSEMICOLON
bucket	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
value	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
fHashTable	TokenNameIdentifier
[	TokenNameLBRACKET
hash	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
bucket	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
bucket	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
offset	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
count	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
offset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bucket	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
newSize	TokenNameIdentifier
=	TokenNameEQUAL
count	TokenNameIdentifier
+	TokenNamePLUS
INITIAL_BUCKET_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newBucket	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
newSize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
bucket	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newBucket	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bucket	TokenNameIdentifier
=	TokenNameEQUAL
newBucket	TokenNameIdentifier
;	TokenNameSEMICOLON
fHashTable	TokenNameIdentifier
[	TokenNameLBRACKET
hash	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
bucket	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
found	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
bucket	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
bucket	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
value	TokenNameIdentifier
;	TokenNameSEMICOLON
found	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
j	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
found	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bucket	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
key	TokenNameIdentifier
;	TokenNameSEMICOLON
bucket	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
value	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
bucket	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
++	TokenNamePLUS_PLUS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
get	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
hash	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&	TokenNameAND
0x7FFFFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
HASHTABLE_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bucket	TokenNameIdentifier
=	TokenNameEQUAL
fHashTable	TokenNameIdentifier
[	TokenNameLBRACKET
hash	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
bucket	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
bucket	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
bucket	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
bucket	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
j	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isEntityDeclared	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
getEntityDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
true	TokenNametrue
:	TokenNameCOLON
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isEntityUnparsed	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
entityIndex	TokenNameIdentifier
=	TokenNameEQUAL
getEntityDeclIndex	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
entityIndex	TokenNameIdentifier
>	TokenNameGREATER
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
chunk	TokenNameIdentifier
=	TokenNameEQUAL
entityIndex	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
CHUNK_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
entityIndex	TokenNameIdentifier
&	TokenNameAND
CHUNK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
fEntityNotation	TokenNameIdentifier
[	TokenNameLBRACKET
chunk	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
true	TokenNametrue
:	TokenNameCOLON
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
