package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
traversers	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Vector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dv	TokenNameIdentifier
.	TokenNameDOT
InvalidDatatypeFacetException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dv	TokenNameIdentifier
.	TokenNameDOT
SchemaDVFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dv	TokenNameIdentifier
.	TokenNameDOT
XSSimpleType	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dv	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
SchemaDVFactoryImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dv	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSSimpleTypeDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
SchemaGrammar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
SchemaSymbols	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSAnnotationImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
XInt	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
XSObjectListImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
DOMUtil	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
QName	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSConstants	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSObjectList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSTypeDefinition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Element	TokenNameIdentifier
;	TokenNameSEMICOLON
class	TokenNameclass
XSDSimpleTypeTraverser	TokenNameIdentifier
extends	TokenNameextends
XSDAbstractTraverser	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
boolean	TokenNameboolean
fIsBuiltIn	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
XSDSimpleTypeTraverser	TokenNameIdentifier
(	TokenNameLPAREN
XSDHandler	TokenNameIdentifier
handler	TokenNameIdentifier
,	TokenNameCOMMA
XSAttributeChecker	TokenNameIdentifier
gAttrCheck	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
handler	TokenNameIdentifier
,	TokenNameCOMMA
gAttrCheck	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XSSimpleType	TokenNameIdentifier
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
elmNode	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
grammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
attrValues	TokenNameIdentifier
=	TokenNameEQUAL
fAttrChecker	TokenNameIdentifier
.	TokenNameDOT
checkAttributes	TokenNameIdentifier
(	TokenNameLPAREN
elmNode	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
nameAtt	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
attrValues	TokenNameIdentifier
[	TokenNameLBRACKET
XSAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
ATTIDX_NAME	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nameAtt	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
attrValues	TokenNameIdentifier
[	TokenNameLBRACKET
XSAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
ATTIDX_NAME	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
NO_NAME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XSSimpleType	TokenNameIdentifier
type	TokenNameIdentifier
=	TokenNameEQUAL
traverseSimpleTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
elmNode	TokenNameIdentifier
,	TokenNameCOMMA
attrValues	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttrChecker	TokenNameIdentifier
.	TokenNameDOT
returnAttrArray	TokenNameIdentifier
(	TokenNameLPAREN
attrValues	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nameAtt	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-att-must-appear"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SIMPLETYPE	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_NAME	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
grammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
grammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalSimpleTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
String	TokenNameIdentifier
loc	TokenNameIdentifier
=	TokenNameEQUAL
fSchemaHandler	TokenNameIdentifier
.	TokenNameDOT
schemaDocument2SystemId	TokenNameIdentifier
(	TokenNameLPAREN
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
XSTypeDefinition	TokenNameIdentifier
type2	TokenNameIdentifier
=	TokenNameEQUAL
grammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
loc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
grammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalSimpleTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
,	TokenNameCOMMA
loc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fSchemaHandler	TokenNameIdentifier
.	TokenNameDOT
fTolerateDuplicates	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type2	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type2	TokenNameIdentifier
instanceof	TokenNameinstanceof
XSSimpleType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSSimpleType	TokenNameIdentifier
)	TokenNameRPAREN
type2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
fSchemaHandler	TokenNameIdentifier
.	TokenNameDOT
addGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
type	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XSSimpleType	TokenNameIdentifier
traverseLocal	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
elmNode	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
grammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
attrValues	TokenNameIdentifier
=	TokenNameEQUAL
fAttrChecker	TokenNameIdentifier
.	TokenNameDOT
checkAttributes	TokenNameIdentifier
(	TokenNameLPAREN
elmNode	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
genAnonTypeName	TokenNameIdentifier
(	TokenNameLPAREN
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSSimpleType	TokenNameIdentifier
type	TokenNameIdentifier
=	TokenNameEQUAL
getSimpleType	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
elmNode	TokenNameIdentifier
,	TokenNameCOMMA
attrValues	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
XSSimpleTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
XSSimpleTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setAnonymous	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fAttrChecker	TokenNameIdentifier
.	TokenNameDOT
returnAttrArray	TokenNameIdentifier
(	TokenNameLPAREN
attrValues	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
type	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XSSimpleType	TokenNameIdentifier
traverseSimpleTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
simpleTypeDecl	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
attrValues	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
grammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
attrValues	TokenNameIdentifier
[	TokenNameLBRACKET
XSAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
ATTIDX_NAME	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
return	TokenNamereturn
getSimpleType	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
simpleTypeDecl	TokenNameIdentifier
,	TokenNameCOMMA
attrValues	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
genAnonTypeName	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
simpleTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
typeName	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
"#AnonType_"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getParent	TokenNameIdentifier
(	TokenNameLPAREN
simpleTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
node	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
(	TokenNameLPAREN
node	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getRoot	TokenNameIdentifier
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getDocument	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
typeName	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
.	TokenNameDOT
getAttribute	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_NAME	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
node	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getParent	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
typeName	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XSSimpleType	TokenNameIdentifier
getSimpleType	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
simpleTypeDecl	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
attrValues	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
grammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XInt	TokenNameIdentifier
finalAttr	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XInt	TokenNameIdentifier
)	TokenNameRPAREN
attrValues	TokenNameIdentifier
[	TokenNameLBRACKET
XSAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
ATTIDX_FINAL	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
finalProperty	TokenNameIdentifier
=	TokenNameEQUAL
finalAttr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fFinalDefault	TokenNameIdentifier
:	TokenNameCOLON
finalAttr	TokenNameIdentifier
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
child	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
simpleTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSAnnotationImpl	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
annotations	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
child	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ANNOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
XSAnnotationImpl	TokenNameIdentifier
annotation	TokenNameIdentifier
=	TokenNameEQUAL
traverseAnnotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
attrValues	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
annotation	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
annotations	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSAnnotationImpl	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
annotation	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
child	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
String	TokenNameIdentifier
text	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getSyntheticAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
simpleTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
text	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
XSAnnotationImpl	TokenNameIdentifier
annotation	TokenNameIdentifier
=	TokenNameEQUAL
traverseSyntheticAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
simpleTypeDecl	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
attrValues	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
annotations	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSAnnotationImpl	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
annotation	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
child	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-must-match.2"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SIMPLETYPE	TokenNameIdentifier
,	TokenNameCOMMA
"(annotation?, (restriction | list | union))"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
simpleTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
errorType	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
,	TokenNameCOMMA
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_RESTRICTION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
varietyProperty	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
refType	TokenNameIdentifier
=	TokenNameEQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_RESTRICTION	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
restriction	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
,	TokenNameCOMMA
list	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
,	TokenNameCOMMA
union	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
varietyProperty	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_RESTRICTION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
refType	TokenNameIdentifier
=	TokenNameEQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_RESTRICTION	TokenNameIdentifier
;	TokenNameSEMICOLON
restriction	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
varietyProperty	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_LIST	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
refType	TokenNameIdentifier
=	TokenNameEQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_LIST	TokenNameIdentifier
;	TokenNameSEMICOLON
list	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
varietyProperty	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_UNION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
refType	TokenNameIdentifier
=	TokenNameEQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_UNION	TokenNameIdentifier
;	TokenNameSEMICOLON
union	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-must-match.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SIMPLETYPE	TokenNameIdentifier
,	TokenNameCOMMA
"(annotation?, (restriction | list | union))"	TokenNameStringLiteral
,	TokenNameCOMMA
varietyProperty	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
simpleTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
errorType	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
,	TokenNameCOMMA
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_RESTRICTION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Element	TokenNameIdentifier
nextChild	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextChild	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-must-match.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SIMPLETYPE	TokenNameIdentifier
,	TokenNameCOMMA
"(annotation?, (restriction | list | union))"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
nextChild	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
nextChild	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
contentAttrs	TokenNameIdentifier
=	TokenNameEQUAL
fAttrChecker	TokenNameIdentifier
.	TokenNameDOT
checkAttributes	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QName	TokenNameIdentifier
baseTypeName	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
QName	TokenNameIdentifier
)	TokenNameRPAREN
contentAttrs	TokenNameIdentifier
[	TokenNameLBRACKET
restriction	TokenNameIdentifier
?	TokenNameQUESTION
XSAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
ATTIDX_BASE	TokenNameIdentifier
:	TokenNameCOLON
XSAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
ATTIDX_ITEMTYPE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
memberTypes	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Vector	TokenNameIdentifier
)	TokenNameRPAREN
contentAttrs	TokenNameIdentifier
[	TokenNameLBRACKET
XSAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
ATTIDX_MEMBERTYPES	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
content	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
content	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ANNOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
XSAnnotationImpl	TokenNameIdentifier
annotation	TokenNameIdentifier
=	TokenNameEQUAL
traverseAnnotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
,	TokenNameCOMMA
contentAttrs	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
annotation	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
annotations	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
annotations	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSAnnotationImpl	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
annotation	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
XSAnnotationImpl	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tempArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSAnnotationImpl	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
tempArray	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
annotations	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
annotations	TokenNameIdentifier
=	TokenNameEQUAL
tempArray	TokenNameIdentifier
;	TokenNameSEMICOLON
annotations	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
annotation	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
content	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
String	TokenNameIdentifier
text	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getSyntheticAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
text	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
XSAnnotationImpl	TokenNameIdentifier
annotation	TokenNameIdentifier
=	TokenNameEQUAL
traverseSyntheticAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
contentAttrs	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
annotations	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
annotations	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSAnnotationImpl	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
annotation	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
XSAnnotationImpl	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tempArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSAnnotationImpl	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
tempArray	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
annotations	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
annotations	TokenNameIdentifier
=	TokenNameEQUAL
tempArray	TokenNameIdentifier
;	TokenNameSEMICOLON
annotations	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
annotation	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
XSSimpleType	TokenNameIdentifier
baseValidator	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
restriction	TokenNameIdentifier
||	TokenNameOR_OR
list	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
baseTypeName	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
baseValidator	TokenNameIdentifier
=	TokenNameEQUAL
findDTValidator	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
name	TokenNameIdentifier
,	TokenNameCOMMA
baseTypeName	TokenNameIdentifier
,	TokenNameCOMMA
refType	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
baseValidator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
fIsBuiltIn	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fIsBuiltIn	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
ArrayList	TokenNameIdentifier
dTValidators	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
XSSimpleType	TokenNameIdentifier
dv	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
XSObjectList	TokenNameIdentifier
dvs	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
union	TokenNameIdentifier
&&	TokenNameAND_AND
memberTypes	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
memberTypes	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
memberTypes	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dTValidators	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
size	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
dv	TokenNameIdentifier
=	TokenNameEQUAL
findDTValidator	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
name	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
QName	TokenNameIdentifier
)	TokenNameRPAREN
memberTypes	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_UNION	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dv	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dv	TokenNameIdentifier
.	TokenNameDOT
getVariety	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSSimpleType	TokenNameIdentifier
.	TokenNameDOT
VARIETY_UNION	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
dvs	TokenNameIdentifier
=	TokenNameEQUAL
dv	TokenNameIdentifier
.	TokenNameDOT
getMemberTypes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
dvs	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
dTValidators	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
dvs	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
j	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
dTValidators	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
dv	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
content	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SIMPLETYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
restriction	TokenNameIdentifier
||	TokenNameOR_OR
list	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
baseTypeName	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
list	TokenNameIdentifier
?	TokenNameQUESTION
"src-simple-type.3.a"	TokenNameStringLiteral
:	TokenNameCOLON
"src-simple-type.2.a"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
content	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
baseValidator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
baseValidator	TokenNameIdentifier
=	TokenNameEQUAL
traverseLocal	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
content	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
union	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dTValidators	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dTValidators	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
do	TokenNamedo
{	TokenNameLBRACE
dv	TokenNameIdentifier
=	TokenNameEQUAL
traverseLocal	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dv	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dv	TokenNameIdentifier
.	TokenNameDOT
getVariety	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSSimpleType	TokenNameIdentifier
.	TokenNameDOT
VARIETY_UNION	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
dvs	TokenNameIdentifier
=	TokenNameEQUAL
dv	TokenNameIdentifier
.	TokenNameDOT
getMemberTypes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
dvs	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
dTValidators	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
dvs	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
j	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
dTValidators	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
dv	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
content	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
content	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SIMPLETYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
restriction	TokenNameIdentifier
||	TokenNameOR_OR
list	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
baseTypeName	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
list	TokenNameIdentifier
?	TokenNameQUESTION
"src-simple-type.3.b"	TokenNameStringLiteral
:	TokenNameCOLON
"src-simple-type.2.b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
union	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
memberTypes	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
memberTypes	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-union-memberTypes-or-simpleTypes"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
restriction	TokenNameIdentifier
||	TokenNameOR_OR
list	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
baseValidator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fAttrChecker	TokenNameIdentifier
.	TokenNameDOT
returnAttrArray	TokenNameIdentifier
(	TokenNameLPAREN
contentAttrs	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
errorType	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
,	TokenNameCOMMA
restriction	TokenNameIdentifier
?	TokenNameQUESTION
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_RESTRICTION	TokenNameIdentifier
:	TokenNameCOLON
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_LIST	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
union	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
dTValidators	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
dTValidators	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fAttrChecker	TokenNameIdentifier
.	TokenNameDOT
returnAttrArray	TokenNameIdentifier
(	TokenNameLPAREN
contentAttrs	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
errorType	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
,	TokenNameCOMMA
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_UNION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
list	TokenNameIdentifier
&&	TokenNameAND_AND
isListDatatype	TokenNameIdentifier
(	TokenNameLPAREN
baseValidator	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"cos-st-restricts.2.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
name	TokenNameIdentifier
,	TokenNameCOMMA
baseValidator	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttrChecker	TokenNameIdentifier
.	TokenNameDOT
returnAttrArray	TokenNameIdentifier
(	TokenNameLPAREN
contentAttrs	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
errorType	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
,	TokenNameCOMMA
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_LIST	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XSSimpleType	TokenNameIdentifier
newDecl	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
restriction	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
newDecl	TokenNameIdentifier
=	TokenNameEQUAL
fSchemaHandler	TokenNameIdentifier
.	TokenNameDOT
fDVFactory	TokenNameIdentifier
.	TokenNameDOT
createTypeRestriction	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
finalProperty	TokenNameIdentifier
,	TokenNameCOMMA
baseValidator	TokenNameIdentifier
,	TokenNameCOMMA
annotations	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
new	TokenNamenew
XSObjectListImpl	TokenNameIdentifier
(	TokenNameLPAREN
annotations	TokenNameIdentifier
,	TokenNameCOMMA
annotations	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
list	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
newDecl	TokenNameIdentifier
=	TokenNameEQUAL
fSchemaHandler	TokenNameIdentifier
.	TokenNameDOT
fDVFactory	TokenNameIdentifier
.	TokenNameDOT
createTypeList	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
finalProperty	TokenNameIdentifier
,	TokenNameCOMMA
baseValidator	TokenNameIdentifier
,	TokenNameCOMMA
annotations	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
new	TokenNamenew
XSObjectListImpl	TokenNameIdentifier
(	TokenNameLPAREN
annotations	TokenNameIdentifier
,	TokenNameCOMMA
annotations	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
union	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSSimpleType	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
memberDecls	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSSimpleType	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
dTValidators	TokenNameIdentifier
.	TokenNameDOT
toArray	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
XSSimpleType	TokenNameIdentifier
[	TokenNameLBRACKET
dTValidators	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newDecl	TokenNameIdentifier
=	TokenNameEQUAL
fSchemaHandler	TokenNameIdentifier
.	TokenNameDOT
fDVFactory	TokenNameIdentifier
.	TokenNameDOT
createTypeUnion	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
finalProperty	TokenNameIdentifier
,	TokenNameCOMMA
memberDecls	TokenNameIdentifier
,	TokenNameCOMMA
annotations	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
new	TokenNamenew
XSObjectListImpl	TokenNameIdentifier
(	TokenNameLPAREN
annotations	TokenNameIdentifier
,	TokenNameCOMMA
annotations	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
restriction	TokenNameIdentifier
&&	TokenNameAND_AND
content	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
FacetInfo	TokenNameIdentifier
fi	TokenNameIdentifier
=	TokenNameEQUAL
traverseFacets	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
,	TokenNameCOMMA
baseValidator	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
content	TokenNameIdentifier
=	TokenNameEQUAL
fi	TokenNameIdentifier
.	TokenNameDOT
nodeAfterFacets	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
fValidationState	TokenNameIdentifier
.	TokenNameDOT
setNamespaceSupport	TokenNameIdentifier
(	TokenNameLPAREN
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fNamespaceSupport	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newDecl	TokenNameIdentifier
.	TokenNameDOT
applyFacets	TokenNameIdentifier
(	TokenNameLPAREN
fi	TokenNameIdentifier
.	TokenNameDOT
facetdata	TokenNameIdentifier
,	TokenNameCOMMA
fi	TokenNameIdentifier
.	TokenNameDOT
fPresentFacets	TokenNameIdentifier
,	TokenNameCOMMA
fi	TokenNameIdentifier
.	TokenNameDOT
fFixedFacets	TokenNameIdentifier
,	TokenNameCOMMA
fValidationState	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InvalidDatatypeFacetException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
ex	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
ex	TokenNameIdentifier
.	TokenNameDOT
getArgs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newDecl	TokenNameIdentifier
=	TokenNameEQUAL
fSchemaHandler	TokenNameIdentifier
.	TokenNameDOT
fDVFactory	TokenNameIdentifier
.	TokenNameDOT
createTypeRestriction	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
finalProperty	TokenNameIdentifier
,	TokenNameCOMMA
baseValidator	TokenNameIdentifier
,	TokenNameCOMMA
annotations	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
new	TokenNamenew
XSObjectListImpl	TokenNameIdentifier
(	TokenNameLPAREN
annotations	TokenNameIdentifier
,	TokenNameCOMMA
annotations	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
content	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
restriction	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-must-match.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_RESTRICTION	TokenNameIdentifier
,	TokenNameCOMMA
"(annotation?, (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
content	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
list	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-must-match.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_LIST	TokenNameIdentifier
,	TokenNameCOMMA
"(annotation?, (simpleType?))"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
content	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
union	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-must-match.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_UNION	TokenNameIdentifier
,	TokenNameCOMMA
"(annotation?, (simpleType*))"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
content	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
fAttrChecker	TokenNameIdentifier
.	TokenNameDOT
returnAttrArray	TokenNameIdentifier
(	TokenNameLPAREN
contentAttrs	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XSSimpleType	TokenNameIdentifier
findDTValidator	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
elm	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
refName	TokenNameIdentifier
,	TokenNameCOMMA
QName	TokenNameIdentifier
baseTypeStr	TokenNameIdentifier
,	TokenNameCOMMA
short	TokenNameshort
baseRefContext	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
baseTypeStr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
XSTypeDefinition	TokenNameIdentifier
baseType	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
fSchemaHandler	TokenNameIdentifier
.	TokenNameDOT
getGlobalDecl	TokenNameIdentifier
(	TokenNameLPAREN
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
XSDHandler	TokenNameIdentifier
.	TokenNameDOT
TYPEDECL_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
baseTypeStr	TokenNameIdentifier
,	TokenNameCOMMA
elm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
baseType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
baseType	TokenNameIdentifier
.	TokenNameDOT
getTypeCategory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
XSTypeDefinition	TokenNameIdentifier
.	TokenNameDOT
SIMPLE_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"cos-st-restricts.1.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
baseTypeStr	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
,	TokenNameCOMMA
refName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
elm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
baseType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
SchemaGrammar	TokenNameIdentifier
.	TokenNameDOT
fAnySimpleType	TokenNameIdentifier
&&	TokenNameAND_AND
baseRefContext	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_RESTRICTION	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
checkBuiltIn	TokenNameIdentifier
(	TokenNameLPAREN
refName	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"cos-st-restricts.1.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
baseTypeStr	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
,	TokenNameCOMMA
refName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
elm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
baseType	TokenNameIdentifier
.	TokenNameDOT
getFinal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&	TokenNameAND
baseRefContext	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
baseRefContext	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_RESTRICTION	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"st-props-correct.3"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
refName	TokenNameIdentifier
,	TokenNameCOMMA
baseTypeStr	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
elm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
baseRefContext	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_LIST	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"cos-st-restricts.2.3.1.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
baseTypeStr	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
,	TokenNameCOMMA
refName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
elm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
baseRefContext	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_UNION	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"cos-st-restricts.3.3.1.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
baseTypeStr	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
,	TokenNameCOMMA
refName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
elm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XSSimpleType	TokenNameIdentifier
)	TokenNameRPAREN
baseType	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
checkBuiltIn	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
namespace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
URI_SCHEMAFORSCHEMA	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
.	TokenNameDOT
SG_SchemaNS	TokenNameIdentifier
.	TokenNameDOT
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
fIsBuiltIn	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
fIsBuiltIn	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
isListDatatype	TokenNameIdentifier
(	TokenNameLPAREN
XSSimpleType	TokenNameIdentifier
validator	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
validator	TokenNameIdentifier
.	TokenNameDOT
getVariety	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSSimpleType	TokenNameIdentifier
.	TokenNameDOT
VARIETY_LIST	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
validator	TokenNameIdentifier
.	TokenNameDOT
getVariety	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSSimpleType	TokenNameIdentifier
.	TokenNameDOT
VARIETY_UNION	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSObjectList	TokenNameIdentifier
temp	TokenNameIdentifier
=	TokenNameEQUAL
validator	TokenNameIdentifier
.	TokenNameDOT
getMemberTypes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
temp	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
XSSimpleType	TokenNameIdentifier
)	TokenNameRPAREN
temp	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getVariety	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSSimpleType	TokenNameIdentifier
.	TokenNameDOT
VARIETY_LIST	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XSSimpleType	TokenNameIdentifier
errorType	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
short	TokenNameshort
refType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSSimpleType	TokenNameIdentifier
stringType	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSSimpleType	TokenNameIdentifier
)	TokenNameRPAREN
SchemaGrammar	TokenNameIdentifier
.	TokenNameDOT
SG_SchemaNS	TokenNameIdentifier
.	TokenNameDOT
getTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
"string"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
refType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_RESTRICTION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
fSchemaHandler	TokenNameIdentifier
.	TokenNameDOT
fDVFactory	TokenNameIdentifier
.	TokenNameDOT
createTypeRestriction	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
stringType	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_LIST	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
fSchemaHandler	TokenNameIdentifier
.	TokenNameDOT
fDVFactory	TokenNameIdentifier
.	TokenNameDOT
createTypeList	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
stringType	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
DERIVATION_UNION	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
fSchemaHandler	TokenNameIdentifier
.	TokenNameDOT
fDVFactory	TokenNameIdentifier
.	TokenNameDOT
createTypeUnion	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
new	TokenNamenew
XSSimpleType	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
stringType	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
