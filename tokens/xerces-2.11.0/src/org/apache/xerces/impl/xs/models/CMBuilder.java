package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
models	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dtd	TokenNameIdentifier
.	TokenNameDOT
models	TokenNameIdentifier
.	TokenNameDOT
CMNode	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
SchemaSymbols	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSComplexTypeDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSDeclarationPool	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSElementDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSModelGroupImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSParticleDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
CMBuilder	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
XSDeclarationPool	TokenNameIdentifier
fDeclPool	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
XSEmptyCM	TokenNameIdentifier
fEmptyCM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSEmptyCM	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fLeafCount	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fParticleCount	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
CMNodeFactory	TokenNameIdentifier
fNodeFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
CMBuilder	TokenNameIdentifier
(	TokenNameLPAREN
CMNodeFactory	TokenNameIdentifier
nodeFactory	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fDeclPool	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fNodeFactory	TokenNameIdentifier
=	TokenNameEQUAL
nodeFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setDeclPool	TokenNameIdentifier
(	TokenNameLPAREN
XSDeclarationPool	TokenNameIdentifier
declPool	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fDeclPool	TokenNameIdentifier
=	TokenNameEQUAL
declPool	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XSCMValidator	TokenNameIdentifier
getContentModel	TokenNameIdentifier
(	TokenNameLPAREN
XSComplexTypeDecl	TokenNameIdentifier
typeDecl	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
forUPA	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
short	TokenNameshort
contentType	TokenNameIdentifier
=	TokenNameEQUAL
typeDecl	TokenNameIdentifier
.	TokenNameDOT
getContentType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contentType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSComplexTypeDecl	TokenNameIdentifier
.	TokenNameDOT
CONTENTTYPE_SIMPLE	TokenNameIdentifier
||	TokenNameOR_OR
contentType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSComplexTypeDecl	TokenNameIdentifier
.	TokenNameDOT
CONTENTTYPE_EMPTY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XSParticleDecl	TokenNameIdentifier
particle	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
)	TokenNameRPAREN
typeDecl	TokenNameIdentifier
.	TokenNameDOT
getParticle	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
particle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
fEmptyCM	TokenNameIdentifier
;	TokenNameSEMICOLON
XSCMValidator	TokenNameIdentifier
cmValidator	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_MODELGROUP	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
(	TokenNameLPAREN
XSModelGroupImpl	TokenNameIdentifier
)	TokenNameRPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fValue	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
fCompositor	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSModelGroupImpl	TokenNameIdentifier
.	TokenNameDOT
MODELGROUP_ALL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
cmValidator	TokenNameIdentifier
=	TokenNameEQUAL
createAllCM	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
cmValidator	TokenNameIdentifier
=	TokenNameEQUAL
createDFACM	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
,	TokenNameCOMMA
forUPA	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
resetNodeCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cmValidator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
cmValidator	TokenNameIdentifier
=	TokenNameEQUAL
fEmptyCM	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
cmValidator	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XSCMValidator	TokenNameIdentifier
createAllCM	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
particle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fMaxOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
XSModelGroupImpl	TokenNameIdentifier
group	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSModelGroupImpl	TokenNameIdentifier
)	TokenNameRPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fValue	TokenNameIdentifier
;	TokenNameSEMICOLON
XSAllCM	TokenNameIdentifier
allContent	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSAllCM	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fMinOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
allContent	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSElementDecl	TokenNameIdentifier
)	TokenNameRPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fParticles	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
fValue	TokenNameIdentifier
,	TokenNameCOMMA
group	TokenNameIdentifier
.	TokenNameDOT
fParticles	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
fMinOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
allContent	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XSCMValidator	TokenNameIdentifier
createDFACM	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
particle	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
forUPA	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fLeafCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fParticleCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
CMNode	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
useRepeatingLeafNodes	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
buildCompactSyntaxTree	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
buildSyntaxTree	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
,	TokenNameCOMMA
forUPA	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
node	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
XSDFACM	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
CMNode	TokenNameIdentifier
buildSyntaxTree	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
particle	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
forUPA	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
maxOccurs	TokenNameIdentifier
=	TokenNameEQUAL
particle	TokenNameIdentifier
.	TokenNameDOT
fMaxOccurs	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
minOccurs	TokenNameIdentifier
=	TokenNameEQUAL
particle	TokenNameIdentifier
.	TokenNameDOT
fMinOccurs	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
compactedForUPA	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
forUPA	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
maxOccurs	TokenNameIdentifier
>	TokenNameGREATER
minOccurs	TokenNameIdentifier
||	TokenNameOR_OR
particle	TokenNameIdentifier
.	TokenNameDOT
getMaxOccursUnbounded	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
minOccurs	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
compactedForUPA	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
minOccurs	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
compactedForUPA	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxOccurs	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
maxOccurs	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
compactedForUPA	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
short	TokenNameshort
type	TokenNameIdentifier
=	TokenNameEQUAL
particle	TokenNameIdentifier
.	TokenNameDOT
fType	TokenNameIdentifier
;	TokenNameSEMICOLON
CMNode	TokenNameIdentifier
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_WILDCARD	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ELEMENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fType	TokenNameIdentifier
,	TokenNameCOMMA
particle	TokenNameIdentifier
.	TokenNameDOT
fValue	TokenNameIdentifier
,	TokenNameCOMMA
fParticleCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
expandContentModel	TokenNameIdentifier
(	TokenNameLPAREN
nodeRet	TokenNameIdentifier
,	TokenNameCOMMA
minOccurs	TokenNameIdentifier
,	TokenNameCOMMA
maxOccurs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeRet	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
.	TokenNameDOT
setIsCompactUPAModel	TokenNameIdentifier
(	TokenNameLPAREN
compactedForUPA	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_MODELGROUP	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSModelGroupImpl	TokenNameIdentifier
group	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSModelGroupImpl	TokenNameIdentifier
)	TokenNameRPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fValue	TokenNameIdentifier
;	TokenNameSEMICOLON
CMNode	TokenNameIdentifier
temp	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
temp	TokenNameIdentifier
=	TokenNameEQUAL
buildSyntaxTree	TokenNameIdentifier
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fParticles	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
forUPA	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
temp	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
compactedForUPA	TokenNameIdentifier
|=	TokenNameOR_EQUAL
temp	TokenNameIdentifier
.	TokenNameDOT
isCompactedForUPA	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeRet	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
temp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMBinOpNode	TokenNameIdentifier
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fCompositor	TokenNameIdentifier
,	TokenNameCOMMA
nodeRet	TokenNameIdentifier
,	TokenNameCOMMA
temp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeRet	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fCompositor	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSModelGroupImpl	TokenNameIdentifier
.	TokenNameDOT
MODELGROUP_CHOICE	TokenNameIdentifier
&&	TokenNameAND_AND
count	TokenNameIdentifier
<	TokenNameLESS
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ZERO_OR_ONE	TokenNameIdentifier
,	TokenNameCOMMA
nodeRet	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
expandContentModel	TokenNameIdentifier
(	TokenNameLPAREN
nodeRet	TokenNameIdentifier
,	TokenNameCOMMA
minOccurs	TokenNameIdentifier
,	TokenNameCOMMA
maxOccurs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nodeRet	TokenNameIdentifier
.	TokenNameDOT
setIsCompactUPAModel	TokenNameIdentifier
(	TokenNameLPAREN
compactedForUPA	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
nodeRet	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
CMNode	TokenNameIdentifier
expandContentModel	TokenNameIdentifier
(	TokenNameLPAREN
CMNode	TokenNameIdentifier
node	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minOccurs	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxOccurs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
CMNode	TokenNameIdentifier
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
maxOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
maxOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ZERO_OR_ONE	TokenNameIdentifier
,	TokenNameCOMMA
node	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
maxOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
OCCURRENCE_UNBOUNDED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ZERO_OR_MORE	TokenNameIdentifier
,	TokenNameCOMMA
node	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
maxOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
OCCURRENCE_UNBOUNDED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ONE_OR_MORE	TokenNameIdentifier
,	TokenNameCOMMA
node	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
maxOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
OCCURRENCE_UNBOUNDED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ONE_OR_MORE	TokenNameIdentifier
,	TokenNameCOMMA
node	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMBinOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSModelGroupImpl	TokenNameIdentifier
.	TokenNameDOT
MODELGROUP_SEQUENCE	TokenNameIdentifier
,	TokenNameCOMMA
multiNodes	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
,	TokenNameCOMMA
minOccurs	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
,	TokenNameCOMMA
nodeRet	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
multiNodes	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
,	TokenNameCOMMA
minOccurs	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
maxOccurs	TokenNameIdentifier
>	TokenNameGREATER
minOccurs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ZERO_OR_ONE	TokenNameIdentifier
,	TokenNameCOMMA
node	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeRet	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
multiNodes	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
,	TokenNameCOMMA
maxOccurs	TokenNameIdentifier
-	TokenNameMINUS
minOccurs	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMBinOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSModelGroupImpl	TokenNameIdentifier
.	TokenNameDOT
MODELGROUP_SEQUENCE	TokenNameIdentifier
,	TokenNameCOMMA
nodeRet	TokenNameIdentifier
,	TokenNameCOMMA
multiNodes	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
,	TokenNameCOMMA
maxOccurs	TokenNameIdentifier
-	TokenNameMINUS
minOccurs	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
nodeRet	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
CMNode	TokenNameIdentifier
multiNodes	TokenNameIdentifier
(	TokenNameLPAREN
CMNode	TokenNameIdentifier
node	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
num	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
copyFirst	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
num	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
num	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
copyFirst	TokenNameIdentifier
?	TokenNameQUESTION
copyNode	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
num1	TokenNameIdentifier
=	TokenNameEQUAL
num	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMBinOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSModelGroupImpl	TokenNameIdentifier
.	TokenNameDOT
MODELGROUP_SEQUENCE	TokenNameIdentifier
,	TokenNameCOMMA
multiNodes	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
,	TokenNameCOMMA
num1	TokenNameIdentifier
,	TokenNameCOMMA
copyFirst	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
multiNodes	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
,	TokenNameCOMMA
num	TokenNameIdentifier
-	TokenNameMINUS
num1	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
CMNode	TokenNameIdentifier
copyNode	TokenNameIdentifier
(	TokenNameLPAREN
CMNode	TokenNameIdentifier
node	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
type	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSModelGroupImpl	TokenNameIdentifier
.	TokenNameDOT
MODELGROUP_CHOICE	TokenNameIdentifier
||	TokenNameOR_OR
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSModelGroupImpl	TokenNameIdentifier
.	TokenNameDOT
MODELGROUP_SEQUENCE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSCMBinOp	TokenNameIdentifier
bin	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSCMBinOp	TokenNameIdentifier
)	TokenNameRPAREN
node	TokenNameIdentifier
;	TokenNameSEMICOLON
node	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMBinOpNode	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
,	TokenNameCOMMA
copyNode	TokenNameIdentifier
(	TokenNameLPAREN
bin	TokenNameIdentifier
.	TokenNameDOT
getLeft	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
copyNode	TokenNameIdentifier
(	TokenNameLPAREN
bin	TokenNameIdentifier
.	TokenNameDOT
getRight	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ZERO_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ONE_OR_MORE	TokenNameIdentifier
||	TokenNameOR_OR
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ZERO_OR_ONE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSCMUniOp	TokenNameIdentifier
uni	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSCMUniOp	TokenNameIdentifier
)	TokenNameRPAREN
node	TokenNameIdentifier
;	TokenNameSEMICOLON
node	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
,	TokenNameCOMMA
copyNode	TokenNameIdentifier
(	TokenNameLPAREN
uni	TokenNameIdentifier
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ELEMENT	TokenNameIdentifier
||	TokenNameOR_OR
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_WILDCARD	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSCMLeaf	TokenNameIdentifier
leaf	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSCMLeaf	TokenNameIdentifier
)	TokenNameRPAREN
node	TokenNameIdentifier
;	TokenNameSEMICOLON
node	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
leaf	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
leaf	TokenNameIdentifier
.	TokenNameDOT
getLeaf	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
leaf	TokenNameIdentifier
.	TokenNameDOT
getParticleId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
CMNode	TokenNameIdentifier
buildCompactSyntaxTree	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
particle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
maxOccurs	TokenNameIdentifier
=	TokenNameEQUAL
particle	TokenNameIdentifier
.	TokenNameDOT
fMaxOccurs	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
minOccurs	TokenNameIdentifier
=	TokenNameEQUAL
particle	TokenNameIdentifier
.	TokenNameDOT
fMinOccurs	TokenNameIdentifier
;	TokenNameSEMICOLON
short	TokenNameshort
type	TokenNameIdentifier
=	TokenNameEQUAL
particle	TokenNameIdentifier
.	TokenNameDOT
fType	TokenNameIdentifier
;	TokenNameSEMICOLON
CMNode	TokenNameIdentifier
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_WILDCARD	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ELEMENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
buildCompactSyntaxTree2	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
,	TokenNameCOMMA
minOccurs	TokenNameIdentifier
,	TokenNameCOMMA
maxOccurs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_MODELGROUP	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSModelGroupImpl	TokenNameIdentifier
group	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSModelGroupImpl	TokenNameIdentifier
)	TokenNameRPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fValue	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
||	TokenNameOR_OR
maxOccurs	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
buildCompactSyntaxTree2	TokenNameIdentifier
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fParticles	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
minOccurs	TokenNameIdentifier
,	TokenNameCOMMA
maxOccurs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
CMNode	TokenNameIdentifier
temp	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
temp	TokenNameIdentifier
=	TokenNameEQUAL
buildCompactSyntaxTree	TokenNameIdentifier
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fParticles	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
temp	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
++	TokenNamePLUS_PLUS
count	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeRet	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
temp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMBinOpNode	TokenNameIdentifier
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fCompositor	TokenNameIdentifier
,	TokenNameCOMMA
nodeRet	TokenNameIdentifier
,	TokenNameCOMMA
temp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeRet	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fCompositor	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSModelGroupImpl	TokenNameIdentifier
.	TokenNameDOT
MODELGROUP_CHOICE	TokenNameIdentifier
&&	TokenNameAND_AND
count	TokenNameIdentifier
<	TokenNameLESS
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ZERO_OR_ONE	TokenNameIdentifier
,	TokenNameCOMMA
nodeRet	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
nodeRet	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
CMNode	TokenNameIdentifier
buildCompactSyntaxTree2	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
particle	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minOccurs	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxOccurs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
CMNode	TokenNameIdentifier
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
maxOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fType	TokenNameIdentifier
,	TokenNameCOMMA
particle	TokenNameIdentifier
.	TokenNameDOT
fValue	TokenNameIdentifier
,	TokenNameCOMMA
fParticleCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
maxOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fType	TokenNameIdentifier
,	TokenNameCOMMA
particle	TokenNameIdentifier
.	TokenNameDOT
fValue	TokenNameIdentifier
,	TokenNameCOMMA
fParticleCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ZERO_OR_ONE	TokenNameIdentifier
,	TokenNameCOMMA
nodeRet	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
maxOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
OCCURRENCE_UNBOUNDED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fType	TokenNameIdentifier
,	TokenNameCOMMA
particle	TokenNameIdentifier
.	TokenNameDOT
fValue	TokenNameIdentifier
,	TokenNameCOMMA
fParticleCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ZERO_OR_MORE	TokenNameIdentifier
,	TokenNameCOMMA
nodeRet	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
maxOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
OCCURRENCE_UNBOUNDED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fType	TokenNameIdentifier
,	TokenNameCOMMA
particle	TokenNameIdentifier
.	TokenNameDOT
fValue	TokenNameIdentifier
,	TokenNameCOMMA
fParticleCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ONE_OR_MORE	TokenNameIdentifier
,	TokenNameCOMMA
nodeRet	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMRepeatingLeafNode	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fType	TokenNameIdentifier
,	TokenNameCOMMA
particle	TokenNameIdentifier
.	TokenNameDOT
fValue	TokenNameIdentifier
,	TokenNameCOMMA
minOccurs	TokenNameIdentifier
,	TokenNameCOMMA
maxOccurs	TokenNameIdentifier
,	TokenNameCOMMA
fParticleCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
fLeafCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ZERO_OR_MORE	TokenNameIdentifier
,	TokenNameCOMMA
nodeRet	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nodeRet	TokenNameIdentifier
=	TokenNameEQUAL
fNodeFactory	TokenNameIdentifier
.	TokenNameDOT
getCMUniOpNode	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ONE_OR_MORE	TokenNameIdentifier
,	TokenNameCOMMA
nodeRet	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
nodeRet	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
useRepeatingLeafNodes	TokenNameIdentifier
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
particle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
maxOccurs	TokenNameIdentifier
=	TokenNameEQUAL
particle	TokenNameIdentifier
.	TokenNameDOT
fMaxOccurs	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
minOccurs	TokenNameIdentifier
=	TokenNameEQUAL
particle	TokenNameIdentifier
.	TokenNameDOT
fMinOccurs	TokenNameIdentifier
;	TokenNameSEMICOLON
short	TokenNameshort
type	TokenNameIdentifier
=	TokenNameEQUAL
particle	TokenNameIdentifier
.	TokenNameDOT
fType	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_MODELGROUP	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSModelGroupImpl	TokenNameIdentifier
group	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSModelGroupImpl	TokenNameIdentifier
)	TokenNameRPAREN
particle	TokenNameIdentifier
.	TokenNameDOT
fValue	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
||	TokenNameOR_OR
maxOccurs	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
XSParticleDecl	TokenNameIdentifier
particle2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSParticleDecl	TokenNameIdentifier
)	TokenNameRPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fParticles	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
short	TokenNameshort
type2	TokenNameIdentifier
=	TokenNameEQUAL
particle2	TokenNameIdentifier
.	TokenNameDOT
fType	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
type2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_ELEMENT	TokenNameIdentifier
||	TokenNameOR_OR
type2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_WILDCARD	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
particle2	TokenNameIdentifier
.	TokenNameDOT
fMinOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
particle2	TokenNameIdentifier
.	TokenNameDOT
fMaxOccurs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
useRepeatingLeafNodes	TokenNameIdentifier
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fParticles	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
