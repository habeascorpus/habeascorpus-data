package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
traversers	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
StringReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Enumeration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Hashtable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Stack	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Vector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
stream	TokenNameIdentifier
.	TokenNameDOT
XMLEventReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
stream	TokenNameIdentifier
.	TokenNameDOT
XMLStreamException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
stream	TokenNameIdentifier
.	TokenNameDOT
XMLStreamReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
Constants	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
XMLEntityManager	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
XMLErrorReporter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dv	TokenNameIdentifier
.	TokenNameDOT
SchemaDVFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dv	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSSimpleTypeDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
SchemaGrammar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
SchemaNamespaceSupport	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
SchemaSymbols	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XMLSchemaException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XMLSchemaLoader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSAttributeDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSAttributeGroupDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSComplexTypeDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSDDescription	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSDeclarationPool	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSElementDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSGrammarBucket	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSGroupDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSMessageFormatter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSModelGroupImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSNotationDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSParticleDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
identity	TokenNameIdentifier
.	TokenNameDOT
IdentityConstraint	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
opti	TokenNameIdentifier
.	TokenNameDOT
ElementImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
opti	TokenNameIdentifier
.	TokenNameDOT
SchemaDOMParser	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
opti	TokenNameIdentifier
.	TokenNameDOT
SchemaParsingConfig	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SimpleLocator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
XSInputSource	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
parsers	TokenNameIdentifier
.	TokenNameDOT
SAXParser	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
parsers	TokenNameIdentifier
.	TokenNameDOT
XML11Configuration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
DOMInputSource	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
DOMUtil	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
DefaultErrorHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ErrorHandlerWrapper	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SAXInputSource	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
StAXInputSource	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
StAXLocationWrapper	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SymbolHash	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SymbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
XMLSymbols	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
URI	TokenNameIdentifier
.	TokenNameDOT
MalformedURIException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
QName	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XNIException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
grammars	TokenNameIdentifier
.	TokenNameDOT
Grammar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
grammars	TokenNameIdentifier
.	TokenNameDOT
XMLGrammarDescription	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
grammars	TokenNameIdentifier
.	TokenNameDOT
XMLGrammarPool	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
grammars	TokenNameIdentifier
.	TokenNameDOT
XMLSchemaDescription	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLComponentManager	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLConfigurationException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLEntityResolver	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLErrorHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLInputSource	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
XMLParseException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
StringList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSAttributeDeclaration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSAttributeGroupDefinition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSAttributeUse	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSConstants	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSElementDeclaration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSModelGroup	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSModelGroupDefinition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSNamedMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSObject	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSObjectList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSParticle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSSimpleTypeDefinition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSTerm	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
XSTypeDefinition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
datatypes	TokenNameIdentifier
.	TokenNameDOT
ObjectList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Document	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Element	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Node	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
InputSource	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXParseException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
XMLReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
helpers	TokenNameIdentifier
.	TokenNameDOT
XMLReaderFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
XSDHandler	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
VALIDATION	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
SAX_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
XMLSCHEMA_VALIDATION	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
SCHEMA_VALIDATION_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ALLOW_JAVA_ENCODINGS	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
ALLOW_JAVA_ENCODINGS_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
CONTINUE_AFTER_FATAL_ERROR	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
CONTINUE_AFTER_FATAL_ERROR_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
STANDARD_URI_CONFORMANT_FEATURE	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
STANDARD_URI_CONFORMANT_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DISALLOW_DOCTYPE	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
DISALLOW_DOCTYPE_DECL_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
GENERATE_SYNTHETIC_ANNOTATIONS	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
GENERATE_SYNTHETIC_ANNOTATIONS_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
VALIDATE_ANNOTATIONS	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
VALIDATE_ANNOTATIONS_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
HONOUR_ALL_SCHEMALOCATIONS	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
HONOUR_ALL_SCHEMALOCATIONS_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
NAMESPACE_GROWTH	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
NAMESPACE_GROWTH_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
TOLERATE_DUPLICATES	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
TOLERATE_DUPLICATES_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
NAMESPACE_PREFIXES	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
SAX_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
NAMESPACE_PREFIXES_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
STRING_INTERNING	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
SAX_FEATURE_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
STRING_INTERNING_FEATURE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ERROR_HANDLER	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_PROPERTY_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
ERROR_HANDLER_PROPERTY	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
JAXP_SCHEMA_SOURCE	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
JAXP_PROPERTY_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
SCHEMA_SOURCE	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ENTITY_RESOLVER	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_PROPERTY_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
ENTITY_RESOLVER_PROPERTY	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ENTITY_MANAGER	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_PROPERTY_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
ENTITY_MANAGER_PROPERTY	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ERROR_REPORTER	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_PROPERTY_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
ERROR_REPORTER_PROPERTY	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
XMLGRAMMAR_POOL	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_PROPERTY_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
XMLGRAMMAR_POOL_PROPERTY	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
SYMBOL_TABLE	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_PROPERTY_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
SYMBOL_TABLE_PROPERTY	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
SECURITY_MANAGER	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_PROPERTY_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
SECURITY_MANAGER_PROPERTY	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
LOCALE	TokenNameIdentifier
=	TokenNameEQUAL
Constants	TokenNameIdentifier
.	TokenNameDOT
XERCES_PROPERTY_PREFIX	TokenNameIdentifier
+	TokenNamePLUS
Constants	TokenNameIdentifier
.	TokenNameDOT
LOCALE_PROPERTY	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
DEBUG_NODE_POOL	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
ATTRIBUTE_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
ATTRIBUTEGROUP_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
ELEMENT_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
GROUP_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
IDENTITYCONSTRAINT_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
NOTATION_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
TYPEDECL_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
REDEF_IDENTIFIER	TokenNameIdentifier
=	TokenNameEQUAL
"_fn3dktizrknc9pi"	TokenNameStringLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
Hashtable	TokenNameIdentifier
fNotationRegistry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
XSDeclarationPool	TokenNameIdentifier
fDeclPool	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedAttributeRegistry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedAttributeGroupRegistry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedElementRegistry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedGroupRegistry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedIdentityConstraintRegistry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedNotationRegistry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedTypeRegistry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedAttributeRegistrySub	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedAttributeGroupRegistrySub	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedElementRegistrySub	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedGroupRegistrySub	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedIdentityConstraintRegistrySub	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedNotationRegistrySub	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedTypeRegistrySub	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fUnparsedRegistriesExt	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
null	TokenNamenull
,	TokenNameCOMMA
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fXSDocumentInfoRegistry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fDependencyMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fImportMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Vector	TokenNameIdentifier
fAllTNSs	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fLocationPairs	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Hashtable	TokenNameIdentifier
EMPTY_TABLE	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Hashtable	TokenNameIdentifier
fHiddenNodes	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
null2EmptyString	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
ns	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
ns	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
EMPTY_STRING	TokenNameIdentifier
:	TokenNameCOLON
ns	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
emptyString2Null	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
ns	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
ns	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
EMPTY_STRING	TokenNameIdentifier
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
ns	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
doc2SystemId	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
ele	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
documentURI	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ele	TokenNameIdentifier
.	TokenNameDOT
getOwnerDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
opti	TokenNameIdentifier
.	TokenNameDOT
SchemaDOM	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
documentURI	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
opti	TokenNameIdentifier
.	TokenNameDOT
SchemaDOM	TokenNameIdentifier
)	TokenNameRPAREN
ele	TokenNameIdentifier
.	TokenNameDOT
getOwnerDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDocumentURI	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
documentURI	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
documentURI	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
fDoc2SystemId	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
ele	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fTraversed	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fDoc2SystemId	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
XSDocumentInfo	TokenNameIdentifier
fRoot	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fDoc2XSDocumentMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fRedefine2XSDMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fRedefine2NSSupport	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fRedefinedRestrictedAttributeGroupRegistry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
Hashtable	TokenNameIdentifier
fRedefinedRestrictedGroupRegistry	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
fLastSchemaWasDuplicate	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
fValidateAnnotations	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
fHonourAllSchemaLocations	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
boolean	TokenNameboolean
fNamespaceGrowth	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
boolean	TokenNameboolean
fTolerateDuplicates	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
XMLErrorReporter	TokenNameIdentifier
fErrorReporter	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
XMLEntityResolver	TokenNameIdentifier
fEntityResolver	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
XSAttributeChecker	TokenNameIdentifier
fAttributeChecker	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
SymbolTable	TokenNameIdentifier
fSymbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
XSGrammarBucket	TokenNameIdentifier
fGrammarBucket	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
XSDDescription	TokenNameIdentifier
fSchemaGrammarDescription	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
XMLGrammarPool	TokenNameIdentifier
fGrammarPool	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDAttributeGroupTraverser	TokenNameIdentifier
fAttributeGroupTraverser	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDAttributeTraverser	TokenNameIdentifier
fAttributeTraverser	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDComplexTypeTraverser	TokenNameIdentifier
fComplexTypeTraverser	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDElementTraverser	TokenNameIdentifier
fElementTraverser	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDGroupTraverser	TokenNameIdentifier
fGroupTraverser	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDKeyrefTraverser	TokenNameIdentifier
fKeyrefTraverser	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDNotationTraverser	TokenNameIdentifier
fNotationTraverser	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDSimpleTypeTraverser	TokenNameIdentifier
fSimpleTypeTraverser	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDUniqueOrKeyTraverser	TokenNameIdentifier
fUniqueOrKeyTraverser	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDWildcardTraverser	TokenNameIdentifier
fWildCardTraverser	TokenNameIdentifier
;	TokenNameSEMICOLON
SchemaDVFactory	TokenNameIdentifier
fDVFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
SchemaDOMParser	TokenNameIdentifier
fSchemaParser	TokenNameIdentifier
;	TokenNameSEMICOLON
SchemaContentHandler	TokenNameIdentifier
fXSContentHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
StAXSchemaParser	TokenNameIdentifier
fStAXSchemaParser	TokenNameIdentifier
;	TokenNameSEMICOLON
XML11Configuration	TokenNameIdentifier
fAnnotationValidator	TokenNameIdentifier
;	TokenNameSEMICOLON
XSAnnotationGrammarPool	TokenNameIdentifier
fGrammarBucketAdapter	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
INIT_STACK_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
30	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
INC_STACK_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fLocalElemStackPos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
XSParticleDecl	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fParticle	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSParticleDecl	TokenNameIdentifier
[	TokenNameLBRACKET
INIT_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
Element	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fLocalElementDecl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Element	TokenNameIdentifier
[	TokenNameLBRACKET
INIT_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
XSDocumentInfo	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fLocalElementDecl_schema	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDocumentInfo	TokenNameIdentifier
[	TokenNameLBRACKET
INIT_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fAllContext	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INIT_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
XSObject	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fParent	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSObject	TokenNameIdentifier
[	TokenNameLBRACKET
INIT_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fLocalElemNamespaceContext	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INIT_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
INIT_KEYREF_STACK	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
INC_KEYREF_STACK_AMOUNT	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fKeyrefStackPos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
Element	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fKeyrefs	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Element	TokenNameIdentifier
[	TokenNameLBRACKET
INIT_KEYREF_STACK	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
XSDocumentInfo	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fKeyrefsMapXSDocumentInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDocumentInfo	TokenNameIdentifier
[	TokenNameLBRACKET
INIT_KEYREF_STACK	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
XSElementDecl	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fKeyrefElems	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSElementDecl	TokenNameIdentifier
[	TokenNameLBRACKET
INIT_KEYREF_STACK	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fKeyrefNamespaceContext	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
INIT_KEYREF_STACK	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
SymbolHash	TokenNameIdentifier
fGlobalAttrDecls	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SymbolHash	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SymbolHash	TokenNameIdentifier
fGlobalAttrGrpDecls	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SymbolHash	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SymbolHash	TokenNameIdentifier
fGlobalElemDecls	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SymbolHash	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SymbolHash	TokenNameIdentifier
fGlobalGroupDecls	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SymbolHash	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SymbolHash	TokenNameIdentifier
fGlobalNotationDecls	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SymbolHash	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SymbolHash	TokenNameIdentifier
fGlobalIDConstraintDecls	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SymbolHash	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SymbolHash	TokenNameIdentifier
fGlobalTypeDecls	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SymbolHash	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
XSDHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fHiddenNodes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSchemaParser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SchemaDOMParser	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
SchemaParsingConfig	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XSDHandler	TokenNameIdentifier
(	TokenNameLPAREN
XSGrammarBucket	TokenNameIdentifier
gBucket	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGrammarBucket	TokenNameIdentifier
=	TokenNameEQUAL
gBucket	TokenNameIdentifier
;	TokenNameSEMICOLON
fSchemaGrammarDescription	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDDescription	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
SchemaGrammar	TokenNameIdentifier
parseSchema	TokenNameIdentifier
(	TokenNameLPAREN
XMLInputSource	TokenNameIdentifier
is	TokenNameIdentifier
,	TokenNameCOMMA
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
locationPairs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
fLocationPairs	TokenNameIdentifier
=	TokenNameEQUAL
locationPairs	TokenNameIdentifier
;	TokenNameSEMICOLON
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
resetNodePool	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
grammar	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
schemaNamespace	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
short	TokenNameshort
referType	TokenNameIdentifier
=	TokenNameEQUAL
desc	TokenNameIdentifier
.	TokenNameDOT
getContextType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
referType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fHonourAllSchemaLocations	TokenNameIdentifier
&&	TokenNameAND_AND
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_IMPORT	TokenNameIdentifier
&&	TokenNameAND_AND
isExistingGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
,	TokenNameCOMMA
fNamespaceGrowth	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
grammar	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
grammar	TokenNameIdentifier
=	TokenNameEQUAL
findGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
,	TokenNameCOMMA
fNamespaceGrowth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
grammar	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
fNamespaceGrowth	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
grammar	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
grammar	TokenNameIdentifier
.	TokenNameDOT
getDocumentLocations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
XMLEntityManager	TokenNameIdentifier
.	TokenNameDOT
expandSystemId	TokenNameIdentifier
(	TokenNameLPAREN
is	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
is	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
grammar	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MalformedURIException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
schemaNamespace	TokenNameIdentifier
=	TokenNameEQUAL
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
schemaNamespace	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
prepareForParse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
schemaRoot	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
is	TokenNameIdentifier
instanceof	TokenNameinstanceof
DOMInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
schemaRoot	TokenNameIdentifier
=	TokenNameEQUAL
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
DOMInputSource	TokenNameIdentifier
)	TokenNameRPAREN
is	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
is	TokenNameIdentifier
instanceof	TokenNameinstanceof
SAXInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
schemaRoot	TokenNameIdentifier
=	TokenNameEQUAL
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
SAXInputSource	TokenNameIdentifier
)	TokenNameRPAREN
is	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
is	TokenNameIdentifier
instanceof	TokenNameinstanceof
StAXInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
schemaRoot	TokenNameIdentifier
=	TokenNameEQUAL
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
StAXInputSource	TokenNameIdentifier
)	TokenNameRPAREN
is	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
is	TokenNameIdentifier
instanceof	TokenNameinstanceof
XSInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
schemaRoot	TokenNameIdentifier
=	TokenNameEQUAL
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSInputSource	TokenNameIdentifier
)	TokenNameRPAREN
is	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
schemaRoot	TokenNameIdentifier
=	TokenNameEQUAL
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
,	TokenNameCOMMA
is	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
schemaRoot	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
is	TokenNameIdentifier
instanceof	TokenNameinstanceof
XSInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
grammar	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Element	TokenNameIdentifier
schemaElem	TokenNameIdentifier
=	TokenNameEQUAL
schemaRoot	TokenNameIdentifier
;	TokenNameSEMICOLON
schemaNamespace	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getAttrValue	TokenNameIdentifier
(	TokenNameLPAREN
schemaElem	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_TARGETNAMESPACE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
schemaNamespace	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
schemaNamespace	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
desc	TokenNameIdentifier
.	TokenNameDOT
setTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
schemaNamespace	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
grammar	TokenNameIdentifier
=	TokenNameEQUAL
findGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
,	TokenNameCOMMA
fNamespaceGrowth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
schemaId	TokenNameIdentifier
=	TokenNameEQUAL
XMLEntityManager	TokenNameIdentifier
.	TokenNameDOT
expandSystemId	TokenNameIdentifier
(	TokenNameLPAREN
is	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
is	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
grammar	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
fNamespaceGrowth	TokenNameIdentifier
||	TokenNameOR_OR
(	TokenNameLPAREN
schemaId	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
grammar	TokenNameIdentifier
.	TokenNameDOT
getDocumentLocations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
schemaId	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
grammar	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
XSDKey	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDKey	TokenNameIdentifier
(	TokenNameLPAREN
schemaId	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
,	TokenNameCOMMA
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTraversed	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
schemaRoot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
schemaId	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fDoc2SystemId	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
schemaRoot	TokenNameIdentifier
,	TokenNameCOMMA
schemaId	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
prepareForTraverse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fRoot	TokenNameIdentifier
=	TokenNameEQUAL
constructTrees	TokenNameIdentifier
(	TokenNameLPAREN
schemaRoot	TokenNameIdentifier
,	TokenNameCOMMA
is	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
desc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fRoot	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
buildGlobalNameRegistries	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ArrayList	TokenNameIdentifier
annotationInfo	TokenNameIdentifier
=	TokenNameEQUAL
fValidateAnnotations	TokenNameIdentifier
?	TokenNameQUESTION
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
traverseSchemas	TokenNameIdentifier
(	TokenNameLPAREN
annotationInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
traverseLocalElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
resolveKeyRefs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
fAllTNSs	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
tns	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
fAllTNSs	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
ins	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Vector	TokenNameIdentifier
)	TokenNameRPAREN
fImportMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
tns	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
emptyString2Null	TokenNameIdentifier
(	TokenNameLPAREN
tns	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
continue	TokenNamecontinue
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
isg	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
ins	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
isg	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
ins	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
j	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isg	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
ins	TokenNameIdentifier
.	TokenNameDOT
setElementAt	TokenNameIdentifier
(	TokenNameLPAREN
isg	TokenNameIdentifier
,	TokenNameCOMMA
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ins	TokenNameIdentifier
.	TokenNameDOT
setSize	TokenNameIdentifier
(	TokenNameLPAREN
count	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sg	TokenNameIdentifier
.	TokenNameDOT
setImportedGrammars	TokenNameIdentifier
(	TokenNameLPAREN
ins	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fValidateAnnotations	TokenNameIdentifier
&&	TokenNameAND_AND
annotationInfo	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
validateAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
annotationInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
fRoot	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
validateAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
ArrayList	TokenNameIdentifier
annotationInfo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fAnnotationValidator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
createAnnotationValidator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
annotationInfo	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
XMLInputSource	TokenNameIdentifier
src	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XMLInputSource	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGrammarBucketAdapter	TokenNameIdentifier
.	TokenNameDOT
refreshGrammars	TokenNameIdentifier
(	TokenNameLPAREN
fGrammarBucket	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
src	TokenNameIdentifier
.	TokenNameDOT
setSystemId	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
annotationInfo	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSAnnotationInfo	TokenNameIdentifier
annotation	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSAnnotationInfo	TokenNameIdentifier
)	TokenNameRPAREN
annotationInfo	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
annotation	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
src	TokenNameIdentifier
.	TokenNameDOT
setCharacterStream	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
annotation	TokenNameIdentifier
.	TokenNameDOT
fAnnotation	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
fAnnotationValidator	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
exc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
annotation	TokenNameIdentifier
=	TokenNameEQUAL
annotation	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
createAnnotationValidator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fAnnotationValidator	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XML11Configuration	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGrammarBucketAdapter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSAnnotationGrammarPool	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAnnotationValidator	TokenNameIdentifier
.	TokenNameDOT
setFeature	TokenNameIdentifier
(	TokenNameLPAREN
VALIDATION	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAnnotationValidator	TokenNameIdentifier
.	TokenNameDOT
setFeature	TokenNameIdentifier
(	TokenNameLPAREN
XMLSCHEMA_VALIDATION	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAnnotationValidator	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
XMLGRAMMAR_POOL	TokenNameIdentifier
,	TokenNameCOMMA
fGrammarBucketAdapter	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XMLErrorHandler	TokenNameIdentifier
errorHandler	TokenNameIdentifier
=	TokenNameEQUAL
fErrorReporter	TokenNameIdentifier
.	TokenNameDOT
getErrorHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAnnotationValidator	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
ERROR_HANDLER	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
errorHandler	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
errorHandler	TokenNameIdentifier
:	TokenNameCOLON
new	TokenNamenew
DefaultErrorHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
=	TokenNameEQUAL
fErrorReporter	TokenNameIdentifier
.	TokenNameDOT
getLocale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAnnotationValidator	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
LOCALE	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
SchemaGrammar	TokenNameIdentifier
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
tns	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
tns	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
SchemaGrammar	TokenNameIdentifier
findGrammar	TokenNameIdentifier
(	TokenNameLPAREN
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
ignoreConflict	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fGrammarPool	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
)	TokenNameRPAREN
fGrammarPool	TokenNameIdentifier
.	TokenNameDOT
retrieveGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
putGrammar	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
ignoreConflict	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaWarning	TokenNameIdentifier
(	TokenNameLPAREN
"GrammarConflict"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sg	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
sg	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
NS_ERROR_CODES	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
"src-include.2.1"	TokenNameStringLiteral
,	TokenNameCOMMA
"src-include.2.1"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"src-redefine.3.1"	TokenNameStringLiteral
,	TokenNameCOMMA
"src-redefine.3.1"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"src-import.3.1"	TokenNameStringLiteral
,	TokenNameCOMMA
"src-import.3.2"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
{	TokenNameLBRACE
"TargetNamespace.1"	TokenNameStringLiteral
,	TokenNameCOMMA
"TargetNamespace.2"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"TargetNamespace.1"	TokenNameStringLiteral
,	TokenNameCOMMA
"TargetNamespace.2"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"TargetNamespace.1"	TokenNameStringLiteral
,	TokenNameCOMMA
"TargetNamespace.2"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"TargetNamespace.1"	TokenNameStringLiteral
,	TokenNameCOMMA
"TargetNamespace.2"	TokenNameStringLiteral
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ELE_ERROR_CODES	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"src-include.1"	TokenNameStringLiteral
,	TokenNameCOMMA
"src-redefine.2"	TokenNameStringLiteral
,	TokenNameCOMMA
"src-import.2"	TokenNameStringLiteral
,	TokenNameCOMMA
"schema_reference.4"	TokenNameStringLiteral
,	TokenNameCOMMA
"schema_reference.4"	TokenNameStringLiteral
,	TokenNameCOMMA
"schema_reference.4"	TokenNameStringLiteral
,	TokenNameCOMMA
"schema_reference.4"	TokenNameStringLiteral
,	TokenNameCOMMA
"schema_reference.4"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
protected	TokenNameprotected
XSDocumentInfo	TokenNameIdentifier
constructTrees	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
schemaRoot	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
locationHint	TokenNameIdentifier
,	TokenNameCOMMA
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
nsCollision	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
schemaRoot	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
callerTNS	TokenNameIdentifier
=	TokenNameEQUAL
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
referType	TokenNameIdentifier
=	TokenNameEQUAL
desc	TokenNameIdentifier
.	TokenNameDOT
getContextType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSDocumentInfo	TokenNameIdentifier
currSchemaInfo	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
currSchemaInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDocumentInfo	TokenNameIdentifier
(	TokenNameLPAREN
schemaRoot	TokenNameIdentifier
,	TokenNameCOMMA
fAttributeChecker	TokenNameIdentifier
,	TokenNameCOMMA
fSymbolTable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLSchemaException	TokenNameIdentifier
se	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
ELE_ERROR_CODES	TokenNameIdentifier
[	TokenNameLBRACKET
referType	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
locationHint	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
schemaRoot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaWarning	TokenNameIdentifier
(	TokenNameLPAREN
"EmptyTargetNamespace"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
locationHint	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
schemaRoot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
callerTNS	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
secondIdx	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_INCLUDE	TokenNameIdentifier
||	TokenNameOR_OR
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_REDEFINE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
=	TokenNameEQUAL
callerTNS	TokenNameIdentifier
;	TokenNameSEMICOLON
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fIsChameleonSchema	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
callerTNS	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
NS_ERROR_CODES	TokenNameIdentifier
[	TokenNameLBRACKET
referType	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
secondIdx	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
callerTNS	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
schemaRoot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
referType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
&&	TokenNameAND_AND
callerTNS	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
NS_ERROR_CODES	TokenNameIdentifier
[	TokenNameLBRACKET
referType	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
secondIdx	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
callerTNS	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
schemaRoot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
desc	TokenNameIdentifier
.	TokenNameDOT
setTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
callerTNS	TokenNameIdentifier
=	TokenNameEQUAL
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
secondIdx	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
NS_ERROR_CODES	TokenNameIdentifier
[	TokenNameLBRACKET
referType	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
secondIdx	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
callerTNS	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
schemaRoot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
addAllowedNS	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nsCollision	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
sg2	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg2	TokenNameIdentifier
.	TokenNameDOT
isImmutable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SchemaGrammar	TokenNameIdentifier
(	TokenNameLPAREN
sg2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
putGrammar	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateImportListWith	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sg	TokenNameIdentifier
=	TokenNameEQUAL
sg2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
updateImportListFor	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_INCLUDE	TokenNameIdentifier
||	TokenNameOR_OR
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_REDEFINE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fHonourAllSchemaLocations	TokenNameIdentifier
&&	TokenNameAND_AND
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_IMPORT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
=	TokenNameEQUAL
findGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SchemaGrammar	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
.	TokenNameDOT
makeClone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
fSymbolTable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
putGrammar	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sg	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SchemaGrammar	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
.	TokenNameDOT
makeClone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
fSymbolTable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
putGrammar	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addDocument	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
fDoc2SystemId	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fSchemaElement	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fDoc2XSDocumentMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
schemaRoot	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
dependencies	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
rootNode	TokenNameIdentifier
=	TokenNameEQUAL
schemaRoot	TokenNameIdentifier
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
newSchemaRoot	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Element	TokenNameIdentifier
child	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
rootNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
child	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
child	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
schemaNamespace	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
schemaHint	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
localName	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
refType	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
importCollision	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
localName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ANNOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
continue	TokenNamecontinue
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
localName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_IMPORT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
refType	TokenNameIdentifier
=	TokenNameEQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_IMPORT	TokenNameIdentifier
;	TokenNameSEMICOLON
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
importAttrs	TokenNameIdentifier
=	TokenNameEQUAL
fAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
checkAttributes	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
schemaHint	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
importAttrs	TokenNameIdentifier
[	TokenNameLBRACKET
XSAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
ATTIDX_SCHEMALOCATION	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
schemaNamespace	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
importAttrs	TokenNameIdentifier
[	TokenNameLBRACKET
XSAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
ATTIDX_NAMESPACE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
schemaNamespace	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
importChild	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
importChild	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
importComponentType	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
importChild	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
importComponentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ANNOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseAnnotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
importChild	TokenNameIdentifier
,	TokenNameCOMMA
importAttrs	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-must-match.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
localName	TokenNameIdentifier
,	TokenNameCOMMA
"annotation?"	TokenNameStringLiteral
,	TokenNameCOMMA
importComponentType	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
importChild	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-must-match.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
localName	TokenNameIdentifier
,	TokenNameCOMMA
"annotation?"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
importChild	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
String	TokenNameIdentifier
text	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getSyntheticAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
text	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseSyntheticAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
importAttrs	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
fAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
returnAttrArray	TokenNameIdentifier
(	TokenNameLPAREN
importAttrs	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
"src-import.1.1"	TokenNameStringLiteral
:	TokenNameCOLON
"src-import.1.2"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
schemaNamespace	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
isAllowedNS	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
fHonourAllSchemaLocations	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
fNamespaceGrowth	TokenNameIdentifier
)	TokenNameRPAREN
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
addAllowedNS	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
tns	TokenNameIdentifier
=	TokenNameEQUAL
null2EmptyString	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
ins	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Vector	TokenNameIdentifier
)	TokenNameRPAREN
fImportMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
tns	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ins	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fAllTNSs	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
tns	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ins	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fImportMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
tns	TokenNameIdentifier
,	TokenNameCOMMA
ins	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ins	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ins	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ins	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fSchemaGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSchemaGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
setContextType	TokenNameIdentifier
(	TokenNameLPAREN
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_IMPORT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSchemaGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
setBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
doc2SystemId	TokenNameIdentifier
(	TokenNameLPAREN
schemaRoot	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSchemaGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
setLiteralSystemId	TokenNameIdentifier
(	TokenNameLPAREN
schemaHint	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSchemaGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
setLocationHints	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
schemaHint	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSchemaGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
setTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
isg	TokenNameIdentifier
=	TokenNameEQUAL
findGrammar	TokenNameIdentifier
(	TokenNameLPAREN
fSchemaGrammarDescription	TokenNameIdentifier
,	TokenNameCOMMA
fNamespaceGrowth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isg	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fNamespaceGrowth	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
isg	TokenNameIdentifier
.	TokenNameDOT
getDocumentLocations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
XMLEntityManager	TokenNameIdentifier
.	TokenNameDOT
expandSystemId	TokenNameIdentifier
(	TokenNameLPAREN
schemaHint	TokenNameIdentifier
,	TokenNameCOMMA
fSchemaGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
importCollision	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MalformedURIException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
fHonourAllSchemaLocations	TokenNameIdentifier
||	TokenNameOR_OR
isExistingGrammar	TokenNameIdentifier
(	TokenNameLPAREN
fSchemaGrammarDescription	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
newSchemaRoot	TokenNameIdentifier
=	TokenNameEQUAL
resolveSchema	TokenNameIdentifier
(	TokenNameLPAREN
fSchemaGrammarDescription	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
child	TokenNameIdentifier
,	TokenNameCOMMA
isg	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
localName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_INCLUDE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
localName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_REDEFINE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
includeAttrs	TokenNameIdentifier
=	TokenNameEQUAL
fAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
checkAttributes	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
schemaHint	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
includeAttrs	TokenNameIdentifier
[	TokenNameLBRACKET
XSAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
ATTIDX_SCHEMALOCATION	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
localName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_REDEFINE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fRedefine2NSSupport	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
SchemaNamespaceSupport	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fNamespaceSupport	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
localName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_INCLUDE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Element	TokenNameIdentifier
includeChild	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
includeChild	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
includeComponentType	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
includeChild	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
includeComponentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ANNOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseAnnotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
includeChild	TokenNameIdentifier
,	TokenNameCOMMA
includeAttrs	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-must-match.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
localName	TokenNameIdentifier
,	TokenNameCOMMA
"annotation?"	TokenNameStringLiteral
,	TokenNameCOMMA
includeComponentType	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
includeChild	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-must-match.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
localName	TokenNameIdentifier
,	TokenNameCOMMA
"annotation?"	TokenNameStringLiteral
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
includeChild	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
String	TokenNameIdentifier
text	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getSyntheticAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
text	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseSyntheticAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
includeAttrs	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
Element	TokenNameIdentifier
redefinedChild	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
redefinedChild	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
redefinedChild	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
redefinedChild	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
redefinedComponentType	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
redefinedChild	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
redefinedComponentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ANNOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseAnnotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
redefinedChild	TokenNameIdentifier
,	TokenNameCOMMA
includeAttrs	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
setHidden	TokenNameIdentifier
(	TokenNameLPAREN
redefinedChild	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
String	TokenNameIdentifier
text	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getSyntheticAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
text	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseSyntheticAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
includeAttrs	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
fAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
returnAttrArray	TokenNameIdentifier
(	TokenNameLPAREN
includeAttrs	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
schemaHint	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-att-must-appear"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"<include> or <redefine>"	TokenNameStringLiteral
,	TokenNameCOMMA
"schemaLocation"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
mustResolve	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
refType	TokenNameIdentifier
=	TokenNameEQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_INCLUDE	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
localName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_REDEFINE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
mustResolve	TokenNameIdentifier
=	TokenNameEQUAL
nonAnnotationContent	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
refType	TokenNameIdentifier
=	TokenNameEQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_REDEFINE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fSchemaGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSchemaGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
setContextType	TokenNameIdentifier
(	TokenNameLPAREN
refType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSchemaGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
setBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
doc2SystemId	TokenNameIdentifier
(	TokenNameLPAREN
schemaRoot	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSchemaGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
setLocationHints	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
schemaHint	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSchemaGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
setTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
callerTNS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
alreadyTraversed	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
XMLInputSource	TokenNameIdentifier
schemaSource	TokenNameIdentifier
=	TokenNameEQUAL
resolveSchemaSource	TokenNameIdentifier
(	TokenNameLPAREN
fSchemaGrammarDescription	TokenNameIdentifier
,	TokenNameCOMMA
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fNamespaceGrowth	TokenNameIdentifier
&&	TokenNameAND_AND
refType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_INCLUDE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
schemaId	TokenNameIdentifier
=	TokenNameEQUAL
XMLEntityManager	TokenNameIdentifier
.	TokenNameDOT
expandSystemId	TokenNameIdentifier
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
alreadyTraversed	TokenNameIdentifier
=	TokenNameEQUAL
sg	TokenNameIdentifier
.	TokenNameDOT
getDocumentLocations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
schemaId	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MalformedURIException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
alreadyTraversed	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
newSchemaRoot	TokenNameIdentifier
=	TokenNameEQUAL
resolveSchema	TokenNameIdentifier
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
fSchemaGrammarDescription	TokenNameIdentifier
,	TokenNameCOMMA
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
schemaNamespace	TokenNameIdentifier
=	TokenNameEQUAL
currSchemaInfo	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fLastSchemaWasDuplicate	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XSDocumentInfo	TokenNameIdentifier
newSchemaInfo	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fLastSchemaWasDuplicate	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
newSchemaInfo	TokenNameIdentifier
=	TokenNameEQUAL
newSchemaRoot	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
fDoc2XSDocumentMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
newSchemaRoot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
newSchemaInfo	TokenNameIdentifier
=	TokenNameEQUAL
constructTrees	TokenNameIdentifier
(	TokenNameLPAREN
newSchemaRoot	TokenNameIdentifier
,	TokenNameCOMMA
schemaHint	TokenNameIdentifier
,	TokenNameCOMMA
fSchemaGrammarDescription	TokenNameIdentifier
,	TokenNameCOMMA
importCollision	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
localName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_REDEFINE	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
newSchemaInfo	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fRedefine2XSDMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
newSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
newSchemaRoot	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
newSchemaInfo	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
dependencies	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
newSchemaInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newSchemaRoot	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
fDependencyMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaInfo	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
currSchemaInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
isExistingGrammar	TokenNameIdentifier
(	TokenNameLPAREN
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
ignoreConflict	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
findGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
,	TokenNameCOMMA
ignoreConflict	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
isImmutable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
sg	TokenNameIdentifier
.	TokenNameDOT
getDocumentLocations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
XMLEntityManager	TokenNameIdentifier
.	TokenNameDOT
expandSystemId	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getLiteralSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
desc	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MalformedURIException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
updateImportListFor	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
grammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Vector	TokenNameIdentifier
importedGrammars	TokenNameIdentifier
=	TokenNameEQUAL
grammar	TokenNameIdentifier
.	TokenNameDOT
getImportedGrammars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
importedGrammars	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
importedGrammars	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
isg1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
)	TokenNameRPAREN
importedGrammars	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
isg2	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
isg1	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isg2	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
isg1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
isg2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
importedGrammars	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
,	TokenNameCOMMA
isg2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
updateImportListWith	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
newGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
schemaGrammars	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
schemaGrammars	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
=	TokenNameEQUAL
schemaGrammars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
newGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Vector	TokenNameIdentifier
importedGrammars	TokenNameIdentifier
=	TokenNameEQUAL
sg	TokenNameIdentifier
.	TokenNameDOT
getImportedGrammars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
importedGrammars	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
importedGrammars	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
isg	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
)	TokenNameRPAREN
importedGrammars	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
j	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null2EmptyString	TokenNameIdentifier
(	TokenNameLPAREN
isg	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
null2EmptyString	TokenNameIdentifier
(	TokenNameLPAREN
newGrammar	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
isg	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
newGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
importedGrammars	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
j	TokenNameIdentifier
,	TokenNameCOMMA
newGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
buildGlobalNameRegistries	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Stack	TokenNameIdentifier
schemasToProcess	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Stack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
schemasToProcess	TokenNameIdentifier
.	TokenNameDOT
push	TokenNameIdentifier
(	TokenNameLPAREN
fRoot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
!	TokenNameNOT
schemasToProcess	TokenNameIdentifier
.	TokenNameDOT
empty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
XSDocumentInfo	TokenNameIdentifier
currSchemaDoc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
schemasToProcess	TokenNameIdentifier
.	TokenNameDOT
pop	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
currDoc	TokenNameIdentifier
=	TokenNameEQUAL
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
fSchemaElement	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
isHidden	TokenNameIdentifier
(	TokenNameLPAREN
currDoc	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Element	TokenNameIdentifier
currRoot	TokenNameIdentifier
=	TokenNameEQUAL
currDoc	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
dependenciesCanOccur	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Element	TokenNameIdentifier
globalComp	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
currRoot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
globalComp	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
globalComp	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ANNOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_INCLUDE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_IMPORT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
dependenciesCanOccur	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-invalid-content.3"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
setHidden	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_REDEFINE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
dependenciesCanOccur	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-invalid-content.3"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
Element	TokenNameIdentifier
redefineComp	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
redefineComp	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
redefineComp	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
redefineComp	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
lName	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getAttrValue	TokenNameIdentifier
(	TokenNameLPAREN
redefineComp	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_NAME	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
continue	TokenNamecontinue
;	TokenNameSEMICOLON
String	TokenNameIdentifier
qName	TokenNameIdentifier
=	TokenNameEQUAL
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
lName	TokenNameIdentifier
:	TokenNameCOLON
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
lName	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
componentType	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
redefineComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ATTRIBUTEGROUP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
ATTRIBUTEGROUP_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedAttributeGroupRegistry	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedAttributeGroupRegistrySub	TokenNameIdentifier
,	TokenNameCOMMA
redefineComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
targetLName	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getAttrValue	TokenNameIdentifier
(	TokenNameLPAREN
redefineComp	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_NAME	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
REDEF_IDENTIFIER	TokenNameIdentifier
;	TokenNameSEMICOLON
renameRedefiningComponents	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
redefineComp	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ATTRIBUTEGROUP	TokenNameIdentifier
,	TokenNameCOMMA
lName	TokenNameIdentifier
,	TokenNameCOMMA
targetLName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_COMPLEXTYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SIMPLETYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
TYPEDECL_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedTypeRegistry	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedTypeRegistrySub	TokenNameIdentifier
,	TokenNameCOMMA
redefineComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
targetLName	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getAttrValue	TokenNameIdentifier
(	TokenNameLPAREN
redefineComp	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_NAME	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
REDEF_IDENTIFIER	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_COMPLEXTYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
renameRedefiningComponents	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
redefineComp	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_COMPLEXTYPE	TokenNameIdentifier
,	TokenNameCOMMA
lName	TokenNameIdentifier
,	TokenNameCOMMA
targetLName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
renameRedefiningComponents	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
redefineComp	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SIMPLETYPE	TokenNameIdentifier
,	TokenNameCOMMA
lName	TokenNameIdentifier
,	TokenNameCOMMA
targetLName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_GROUP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
GROUP_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedGroupRegistry	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedGroupRegistrySub	TokenNameIdentifier
,	TokenNameCOMMA
redefineComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
targetLName	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getAttrValue	TokenNameIdentifier
(	TokenNameLPAREN
redefineComp	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_NAME	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
REDEF_IDENTIFIER	TokenNameIdentifier
;	TokenNameSEMICOLON
renameRedefiningComponents	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
redefineComp	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_GROUP	TokenNameIdentifier
,	TokenNameCOMMA
lName	TokenNameIdentifier
,	TokenNameCOMMA
targetLName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
dependenciesCanOccur	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
String	TokenNameIdentifier
lName	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getAttrValue	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_NAME	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
continue	TokenNamecontinue
;	TokenNameSEMICOLON
String	TokenNameIdentifier
qName	TokenNameIdentifier
=	TokenNameEQUAL
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
lName	TokenNameIdentifier
:	TokenNameCOLON
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
lName	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
componentType	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ATTRIBUTE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
ATTRIBUTE_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedAttributeRegistry	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedAttributeRegistrySub	TokenNameIdentifier
,	TokenNameCOMMA
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ATTRIBUTEGROUP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
ATTRIBUTEGROUP_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedAttributeGroupRegistry	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedAttributeGroupRegistrySub	TokenNameIdentifier
,	TokenNameCOMMA
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_COMPLEXTYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SIMPLETYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
TYPEDECL_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedTypeRegistry	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedTypeRegistrySub	TokenNameIdentifier
,	TokenNameCOMMA
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ELEMENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
ELEMENT_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedElementRegistry	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedElementRegistrySub	TokenNameIdentifier
,	TokenNameCOMMA
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_GROUP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
GROUP_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedGroupRegistry	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedGroupRegistrySub	TokenNameIdentifier
,	TokenNameCOMMA
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_NOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
NOTATION_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedNotationRegistry	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedNotationRegistrySub	TokenNameIdentifier
,	TokenNameCOMMA
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
setHidden	TokenNameIdentifier
(	TokenNameLPAREN
currDoc	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
currSchemaDepends	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Vector	TokenNameIdentifier
)	TokenNameRPAREN
fDependencyMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
currSchemaDepends	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
schemasToProcess	TokenNameIdentifier
.	TokenNameDOT
push	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaDepends	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
traverseSchemas	TokenNameIdentifier
(	TokenNameLPAREN
ArrayList	TokenNameIdentifier
annotationInfo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setSchemasVisible	TokenNameIdentifier
(	TokenNameLPAREN
fRoot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Stack	TokenNameIdentifier
schemasToProcess	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Stack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
schemasToProcess	TokenNameIdentifier
.	TokenNameDOT
push	TokenNameIdentifier
(	TokenNameLPAREN
fRoot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
!	TokenNameNOT
schemasToProcess	TokenNameIdentifier
.	TokenNameDOT
empty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
XSDocumentInfo	TokenNameIdentifier
currSchemaDoc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
schemasToProcess	TokenNameIdentifier
.	TokenNameDOT
pop	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
currDoc	TokenNameIdentifier
=	TokenNameEQUAL
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
fSchemaElement	TokenNameIdentifier
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
currSG	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
isHidden	TokenNameIdentifier
(	TokenNameLPAREN
currDoc	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Element	TokenNameIdentifier
currRoot	TokenNameIdentifier
=	TokenNameEQUAL
currDoc	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
sawAnnotation	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Element	TokenNameIdentifier
globalComp	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstVisibleChildElement	TokenNameIdentifier
(	TokenNameLPAREN
currRoot	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
globalComp	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
globalComp	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextVisibleSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
setHidden	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
componentType	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_REDEFINE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
backupNSSupport	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
SchemaNamespaceSupport	TokenNameIdentifier
)	TokenNameRPAREN
fRedefine2NSSupport	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Element	TokenNameIdentifier
redefinedComp	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstVisibleChildElement	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
redefinedComp	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
redefinedComp	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextVisibleSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
redefinedComp	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
redefinedComponentType	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
redefinedComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
setHidden	TokenNameIdentifier
(	TokenNameLPAREN
redefinedComp	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
redefinedComponentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ATTRIBUTEGROUP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fAttributeGroupTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
redefinedComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
currSG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
redefinedComponentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_COMPLEXTYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fComplexTypeTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
redefinedComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
currSG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
redefinedComponentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_GROUP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fGroupTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
redefinedComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
currSG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
redefinedComponentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SIMPLETYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleTypeTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
redefinedComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
currSG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-must-match.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"(annotation | (simpleType | complexType | group | attributeGroup))*"	TokenNameStringLiteral
,	TokenNameCOMMA
redefinedComponentType	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
redefinedComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
restoreNSSupport	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ATTRIBUTE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fAttributeTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
currSG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ATTRIBUTEGROUP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fAttributeGroupTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
currSG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_COMPLEXTYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fComplexTypeTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
currSG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ELEMENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
currSG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_GROUP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fGroupTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
currSG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_NOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fNotationTraverser	TokenNameIdentifier
.	TokenNameDOT
traverse	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
currSG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SIMPLETYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSimpleTypeTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
currSG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ANNOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
currSG	TokenNameIdentifier
.	TokenNameDOT
addAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseAnnotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
getSchemaAttrs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sawAnnotation	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"s4s-elt-invalid-content.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SCHEMA	TokenNameIdentifier
,	TokenNameCOMMA
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
globalComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
sawAnnotation	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
text	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getSyntheticAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
currRoot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
text	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
currSG	TokenNameIdentifier
.	TokenNameDOT
addAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseSyntheticAnnotation	TokenNameIdentifier
(	TokenNameLPAREN
currRoot	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
getSchemaAttrs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
annotationInfo	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
XSAnnotationInfo	TokenNameIdentifier
info	TokenNameIdentifier
=	TokenNameEQUAL
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
getAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
info	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
annotationInfo	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
doc2SystemId	TokenNameIdentifier
(	TokenNameLPAREN
currDoc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
annotationInfo	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
info	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
currSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
returnSchemaAttrs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
setHidden	TokenNameIdentifier
(	TokenNameLPAREN
currDoc	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
currSchemaDepends	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Vector	TokenNameIdentifier
)	TokenNameRPAREN
fDependencyMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
currSchemaDepends	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
schemasToProcess	TokenNameIdentifier
.	TokenNameDOT
push	TokenNameIdentifier
(	TokenNameLPAREN
currSchemaDepends	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
Vector	TokenNameIdentifier
fReportedTNS	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
needReportTNSError	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
uri	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fReportedTNS	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
fReportedTNS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fReportedTNS	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
uri	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
fReportedTNS	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
uri	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
COMP_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
null	TokenNamenull
,	TokenNameCOMMA
"attribute declaration"	TokenNameStringLiteral
,	TokenNameCOMMA
"attribute group"	TokenNameStringLiteral
,	TokenNameCOMMA
"element declaration"	TokenNameStringLiteral
,	TokenNameCOMMA
"group"	TokenNameStringLiteral
,	TokenNameCOMMA
"identity constraint"	TokenNameStringLiteral
,	TokenNameCOMMA
"notation"	TokenNameStringLiteral
,	TokenNameCOMMA
"type definition"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
CIRCULAR_CODES	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"Internal-Error"	TokenNameStringLiteral
,	TokenNameCOMMA
"Internal-Error"	TokenNameStringLiteral
,	TokenNameCOMMA
"src-attribute_group.3"	TokenNameStringLiteral
,	TokenNameCOMMA
"e-props-correct.6"	TokenNameStringLiteral
,	TokenNameCOMMA
"mg-props-correct.2"	TokenNameStringLiteral
,	TokenNameCOMMA
"Internal-Error"	TokenNameStringLiteral
,	TokenNameCOMMA
"Internal-Error"	TokenNameStringLiteral
,	TokenNameCOMMA
"st-props-correct.2"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
void	TokenNamevoid
addGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
XSAttributeDecl	TokenNameIdentifier
decl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
namespace	TokenNameIdentifier
=	TokenNameEQUAL
decl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
declKey	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
namespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
namespace	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
namespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fGlobalAttrDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fGlobalAttrDecls	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
,	TokenNameCOMMA
decl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
addGlobalAttributeGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
XSAttributeGroupDecl	TokenNameIdentifier
decl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
namespace	TokenNameIdentifier
=	TokenNameEQUAL
decl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
declKey	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
namespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
namespace	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
namespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fGlobalAttrGrpDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fGlobalAttrGrpDecls	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
,	TokenNameCOMMA
decl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
addGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
XSElementDecl	TokenNameIdentifier
decl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
namespace	TokenNameIdentifier
=	TokenNameEQUAL
decl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
declKey	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
namespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
namespace	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
namespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fGlobalElemDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fGlobalElemDecls	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
,	TokenNameCOMMA
decl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
addGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
XSGroupDecl	TokenNameIdentifier
decl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
namespace	TokenNameIdentifier
=	TokenNameEQUAL
decl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
declKey	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
namespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
namespace	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
namespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fGlobalGroupDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fGlobalGroupDecls	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
,	TokenNameCOMMA
decl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
addGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
XSNotationDecl	TokenNameIdentifier
decl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
namespace	TokenNameIdentifier
=	TokenNameEQUAL
decl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
declKey	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
namespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
namespace	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
namespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fGlobalNotationDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fGlobalNotationDecls	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
,	TokenNameCOMMA
decl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
addGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
decl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
namespace	TokenNameIdentifier
=	TokenNameEQUAL
decl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
declKey	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
namespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
namespace	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
namespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fGlobalTypeDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fGlobalTypeDecls	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
,	TokenNameCOMMA
decl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
addIDConstraintDecl	TokenNameIdentifier
(	TokenNameLPAREN
IdentityConstraint	TokenNameIdentifier
decl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
namespace	TokenNameIdentifier
=	TokenNameEQUAL
decl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
declKey	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
namespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
namespace	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getIdentityConstraintName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
namespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
decl	TokenNameIdentifier
.	TokenNameDOT
getIdentityConstraintName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fGlobalIDConstraintDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fGlobalIDConstraintDecls	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
,	TokenNameCOMMA
decl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
XSAttributeDecl	TokenNameIdentifier
getGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
declKey	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XSAttributeDecl	TokenNameIdentifier
)	TokenNameRPAREN
fGlobalAttrDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XSAttributeGroupDecl	TokenNameIdentifier
getGlobalAttributeGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
declKey	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XSAttributeGroupDecl	TokenNameIdentifier
)	TokenNameRPAREN
fGlobalAttrGrpDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XSElementDecl	TokenNameIdentifier
getGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
declKey	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XSElementDecl	TokenNameIdentifier
)	TokenNameRPAREN
fGlobalElemDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XSGroupDecl	TokenNameIdentifier
getGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
declKey	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XSGroupDecl	TokenNameIdentifier
)	TokenNameRPAREN
fGlobalGroupDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XSNotationDecl	TokenNameIdentifier
getGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
declKey	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XSNotationDecl	TokenNameIdentifier
)	TokenNameRPAREN
fGlobalNotationDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XSTypeDefinition	TokenNameIdentifier
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
declKey	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
fGlobalTypeDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
IdentityConstraint	TokenNameIdentifier
getIDConstraintDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
declKey	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
IdentityConstraint	TokenNameIdentifier
)	TokenNameRPAREN
fGlobalIDConstraintDecls	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Object	TokenNameIdentifier
getGlobalDecl	TokenNameIdentifier
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
currSchema	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
declType	TokenNameIdentifier
,	TokenNameCOMMA
QName	TokenNameIdentifier
declToTraverse	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_NODE_POOL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"TRAVERSE_GL: "	TokenNameStringLiteral
+	TokenNamePLUS
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
URI_SCHEMAFORSCHEMA	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
declType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPEDECL_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
retObj	TokenNameIdentifier
=	TokenNameEQUAL
SchemaGrammar	TokenNameIdentifier
.	TokenNameDOT
SG_SchemaNS	TokenNameIdentifier
.	TokenNameDOT
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
retObj	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
retObj	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
currSchema	TokenNameIdentifier
.	TokenNameDOT
isAllowedNS	TokenNameIdentifier
(	TokenNameLPAREN
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
needReportTNSError	TokenNameIdentifier
(	TokenNameLPAREN
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
code	TokenNameIdentifier
=	TokenNameEQUAL
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
"src-resolve.4.1"	TokenNameStringLiteral
:	TokenNameCOLON
"src-resolve.4.2"	TokenNameStringLiteral
;	TokenNameSEMICOLON
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
code	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
fDoc2SystemId	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fSchemaElement	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
,	TokenNameCOMMA
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
SchemaGrammar	TokenNameIdentifier
sGrammar	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sGrammar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
needReportTNSError	TokenNameIdentifier
(	TokenNameLPAREN
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-resolve"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
,	TokenNameCOMMA
COMP_TYPE	TokenNameIdentifier
[	TokenNameLBRACKET
declType	TokenNameIdentifier
]	TokenNameRBRACKET
}	TokenNameRBRACE
,	TokenNameCOMMA
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Object	TokenNameIdentifier
retObj	TokenNameIdentifier
=	TokenNameEQUAL
getGlobalDeclFromGrammar	TokenNameIdentifier
(	TokenNameLPAREN
sGrammar	TokenNameIdentifier
,	TokenNameCOMMA
declType	TokenNameIdentifier
,	TokenNameCOMMA
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
declKey	TokenNameIdentifier
=	TokenNameEQUAL
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
:	TokenNameCOLON
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
fTolerateDuplicates	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
retObj	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
retObj	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
Object	TokenNameIdentifier
retObj2	TokenNameIdentifier
=	TokenNameEQUAL
getGlobalDecl	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
,	TokenNameCOMMA
declType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
retObj2	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
retObj2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
XSDocumentInfo	TokenNameIdentifier
schemaWithDecl	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
decl	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
XSDocumentInfo	TokenNameIdentifier
declDoc	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
declType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ATTRIBUTE_TYPE	TokenNameIdentifier
:	TokenNameCOLON
decl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedAttributeRegistry	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
declDoc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedAttributeRegistrySub	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ATTRIBUTEGROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
decl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedAttributeGroupRegistry	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
declDoc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedAttributeGroupRegistrySub	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ELEMENT_TYPE	TokenNameIdentifier
:	TokenNameCOLON
decl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedElementRegistry	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
declDoc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedElementRegistrySub	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
GROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
decl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedGroupRegistry	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
declDoc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedGroupRegistrySub	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
IDENTITYCONSTRAINT_TYPE	TokenNameIdentifier
:	TokenNameCOLON
decl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedIdentityConstraintRegistry	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
declDoc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedIdentityConstraintRegistrySub	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
NOTATION_TYPE	TokenNameIdentifier
:	TokenNameCOLON
decl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedNotationRegistry	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
declDoc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedNotationRegistrySub	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TYPEDECL_TYPE	TokenNameIdentifier
:	TokenNameCOLON
decl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedTypeRegistry	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
declDoc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
fUnparsedTypeRegistrySub	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"Internal-Error"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"XSDHandler asked to locate component of type "	TokenNameStringLiteral
+	TokenNamePLUS
declType	TokenNameIdentifier
+	TokenNamePLUS
"; it does not recognize this type!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
decl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
retObj	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-resolve"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
,	TokenNameCOMMA
COMP_TYPE	TokenNameIdentifier
[	TokenNameLBRACKET
declType	TokenNameIdentifier
]	TokenNameRBRACKET
}	TokenNameRBRACE
,	TokenNameCOMMA
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
retObj	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
schemaWithDecl	TokenNameIdentifier
=	TokenNameEQUAL
findXSDocumentForDecl	TokenNameIdentifier
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
,	TokenNameCOMMA
decl	TokenNameIdentifier
,	TokenNameCOMMA
declDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
schemaWithDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
retObj	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
code	TokenNameIdentifier
=	TokenNameEQUAL
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
"src-resolve.4.1"	TokenNameStringLiteral
:	TokenNameCOLON
"src-resolve.4.2"	TokenNameStringLiteral
;	TokenNameSEMICOLON
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
code	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
fDoc2SystemId	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fSchemaElement	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
,	TokenNameCOMMA
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
rawname	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
retObj	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
isHidden	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
retObj	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
code	TokenNameIdentifier
=	TokenNameEQUAL
CIRCULAR_CODES	TokenNameIdentifier
[	TokenNameLBRACKET
declType	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
declType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TYPEDECL_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_COMPLEXTYPE	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
code	TokenNameIdentifier
=	TokenNameEQUAL
"ct-props-correct.3"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
code	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
+	TokenNamePLUS
":"	TokenNameStringLiteral
+	TokenNamePLUS
declToTraverse	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
retObj	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
traverseGlobalDecl	TokenNameIdentifier
(	TokenNameLPAREN
declType	TokenNameIdentifier
,	TokenNameCOMMA
decl	TokenNameIdentifier
,	TokenNameCOMMA
schemaWithDecl	TokenNameIdentifier
,	TokenNameCOMMA
sGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Object	TokenNameIdentifier
getGlobalDecl	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
declKey	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
declType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
retObj	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
declType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ATTRIBUTE_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
getGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ATTRIBUTEGROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
getGlobalAttributeGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ELEMENT_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
getGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
GROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
getGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
IDENTITYCONSTRAINT_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
getIDConstraintDecl	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
NOTATION_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
getGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TYPEDECL_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
declKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
retObj	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Object	TokenNameIdentifier
getGlobalDeclFromGrammar	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
sGrammar	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
declType	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
localpart	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
retObj	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
declType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ATTRIBUTE_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ATTRIBUTEGROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ELEMENT_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
GROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
IDENTITYCONSTRAINT_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getIDConstraintDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
NOTATION_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TYPEDECL_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
retObj	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Object	TokenNameIdentifier
getGlobalDeclFromGrammar	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
sGrammar	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
declType	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
localpart	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
schemaLoc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
retObj	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
declType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ATTRIBUTE_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
,	TokenNameCOMMA
schemaLoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ATTRIBUTEGROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
,	TokenNameCOMMA
schemaLoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ELEMENT_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
,	TokenNameCOMMA
schemaLoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
GROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
,	TokenNameCOMMA
schemaLoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
IDENTITYCONSTRAINT_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getIDConstraintDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
,	TokenNameCOMMA
schemaLoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
NOTATION_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
,	TokenNameCOMMA
schemaLoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
TYPEDECL_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
sGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
localpart	TokenNameIdentifier
,	TokenNameCOMMA
schemaLoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
retObj	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Object	TokenNameIdentifier
traverseGlobalDecl	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
declType	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
decl	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
grammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
retObj	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
setHidden	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SchemaNamespaceSupport	TokenNameIdentifier
nsSupport	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
parent	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getParent	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_REDEFINE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
nsSupport	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SchemaNamespaceSupport	TokenNameIdentifier
)	TokenNameRPAREN
fRedefine2NSSupport	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
backupNSSupport	TokenNameIdentifier
(	TokenNameLPAREN
nsSupport	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
declType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
TYPEDECL_TYPE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_COMPLEXTYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
retObj	TokenNameIdentifier
=	TokenNameEQUAL
fComplexTypeTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
retObj	TokenNameIdentifier
=	TokenNameEQUAL
fSimpleTypeTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ATTRIBUTE_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
fAttributeTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ELEMENT_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ATTRIBUTEGROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
fAttributeGroupTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
GROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
fGroupTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseGlobal	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
NOTATION_TYPE	TokenNameIdentifier
:	TokenNameCOLON
retObj	TokenNameIdentifier
=	TokenNameEQUAL
fNotationTraverser	TokenNameIdentifier
.	TokenNameDOT
traverse	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
IDENTITYCONSTRAINT_TYPE	TokenNameIdentifier
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
restoreNSSupport	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
retObj	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
schemaDocument2SystemId	TokenNameIdentifier
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
fDoc2SystemId	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fSchemaElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Object	TokenNameIdentifier
getGrpOrAttrGrpRedefinedByRestriction	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
type	TokenNameIdentifier
,	TokenNameCOMMA
QName	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
currSchema	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
realName	TokenNameIdentifier
=	TokenNameEQUAL
name	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
name	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
:	TokenNameCOLON
","	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
nameToFind	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ATTRIBUTEGROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
nameToFind	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
fRedefinedRestrictedAttributeGroupRegistry	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
realName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
GROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
nameToFind	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
fRedefinedRestrictedGroupRegistry	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
realName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
nameToFind	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
commaPos	TokenNameIdentifier
=	TokenNameEQUAL
nameToFind	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
","	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QName	TokenNameIdentifier
qNameToFind	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
EMPTY_STRING	TokenNameIdentifier
,	TokenNameCOMMA
nameToFind	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
commaPos	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
nameToFind	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
commaPos	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
commaPos	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
nameToFind	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
commaPos	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Object	TokenNameIdentifier
retObj	TokenNameIdentifier
=	TokenNameEQUAL
getGlobalDecl	TokenNameIdentifier
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
,	TokenNameCOMMA
type	TokenNameIdentifier
,	TokenNameCOMMA
qNameToFind	TokenNameIdentifier
,	TokenNameCOMMA
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
retObj	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ATTRIBUTEGROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.7.2.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
name	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
GROUP_TYPE	TokenNameIdentifier
:	TokenNameCOLON
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.6.2.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
name	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
elmNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
retObj	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
resolveKeyRefs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fKeyrefStackPos	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
XSDocumentInfo	TokenNameIdentifier
keyrefSchemaDoc	TokenNameIdentifier
=	TokenNameEQUAL
fKeyrefsMapXSDocumentInfo	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
keyrefSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
fNamespaceSupport	TokenNameIdentifier
.	TokenNameDOT
makeGlobal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
keyrefSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
fNamespaceSupport	TokenNameIdentifier
.	TokenNameDOT
setEffectiveContext	TokenNameIdentifier
(	TokenNameLPAREN
fKeyrefNamespaceContext	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
keyrefGrammar	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
keyrefSchemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
setHidden	TokenNameIdentifier
(	TokenNameLPAREN
fKeyrefs	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fKeyrefTraverser	TokenNameIdentifier
.	TokenNameDOT
traverse	TokenNameIdentifier
(	TokenNameLPAREN
fKeyrefs	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fKeyrefElems	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
keyrefSchemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
keyrefGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
Hashtable	TokenNameIdentifier
getIDRegistry	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fUnparsedIdentityConstraintRegistry	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Hashtable	TokenNameIdentifier
getIDRegistry_sub	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fUnparsedIdentityConstraintRegistrySub	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
storeKeyRef	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
keyrefToStore	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
XSElementDecl	TokenNameIdentifier
currElemDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
keyrefName	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getAttrValue	TokenNameIdentifier
(	TokenNameLPAREN
keyrefToStore	TokenNameIdentifier
,	TokenNameCOMMA
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_NAME	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
keyrefName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
keyrefQName	TokenNameIdentifier
=	TokenNameEQUAL
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
keyrefName	TokenNameIdentifier
:	TokenNameCOLON
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
keyrefName	TokenNameIdentifier
;	TokenNameSEMICOLON
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
keyrefQName	TokenNameIdentifier
,	TokenNameCOMMA
IDENTITYCONSTRAINT_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedIdentityConstraintRegistry	TokenNameIdentifier
,	TokenNameCOMMA
fUnparsedIdentityConstraintRegistrySub	TokenNameIdentifier
,	TokenNameCOMMA
keyrefToStore	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fKeyrefStackPos	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fKeyrefs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Element	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
elemArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Element	TokenNameIdentifier
[	TokenNameLBRACKET
fKeyrefStackPos	TokenNameIdentifier
+	TokenNamePLUS
INC_KEYREF_STACK_AMOUNT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fKeyrefs	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
elemArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fKeyrefStackPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fKeyrefs	TokenNameIdentifier
=	TokenNameEQUAL
elemArray	TokenNameIdentifier
;	TokenNameSEMICOLON
XSElementDecl	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
declArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSElementDecl	TokenNameIdentifier
[	TokenNameLBRACKET
fKeyrefStackPos	TokenNameIdentifier
+	TokenNamePLUS
INC_KEYREF_STACK_AMOUNT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fKeyrefElems	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
declArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fKeyrefStackPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fKeyrefElems	TokenNameIdentifier
=	TokenNameEQUAL
declArray	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
stringArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
fKeyrefStackPos	TokenNameIdentifier
+	TokenNamePLUS
INC_KEYREF_STACK_AMOUNT	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fKeyrefNamespaceContext	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
stringArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fKeyrefStackPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fKeyrefNamespaceContext	TokenNameIdentifier
=	TokenNameEQUAL
stringArray	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDocumentInfo	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
xsDocumentInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDocumentInfo	TokenNameIdentifier
[	TokenNameLBRACKET
fKeyrefStackPos	TokenNameIdentifier
+	TokenNamePLUS
INC_KEYREF_STACK_AMOUNT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fKeyrefsMapXSDocumentInfo	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
xsDocumentInfo	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fKeyrefStackPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fKeyrefsMapXSDocumentInfo	TokenNameIdentifier
=	TokenNameEQUAL
xsDocumentInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fKeyrefs	TokenNameIdentifier
[	TokenNameLBRACKET
fKeyrefStackPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
keyrefToStore	TokenNameIdentifier
;	TokenNameSEMICOLON
fKeyrefElems	TokenNameIdentifier
[	TokenNameLBRACKET
fKeyrefStackPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
currElemDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
fKeyrefNamespaceContext	TokenNameIdentifier
[	TokenNameLBRACKET
fKeyrefStackPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fNamespaceSupport	TokenNameIdentifier
.	TokenNameDOT
getEffectiveLocalContext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fKeyrefsMapXSDocumentInfo	TokenNameIdentifier
[	TokenNameLBRACKET
fKeyrefStackPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
schemaDoc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Element	TokenNameIdentifier
resolveSchema	TokenNameIdentifier
(	TokenNameLPAREN
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
referElement	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
usePairs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XMLInputSource	TokenNameIdentifier
schemaSource	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
Hashtable	TokenNameIdentifier
pairs	TokenNameIdentifier
=	TokenNameEQUAL
usePairs	TokenNameIdentifier
?	TokenNameQUESTION
fLocationPairs	TokenNameIdentifier
:	TokenNameCOLON
EMPTY_TABLE	TokenNameIdentifier
;	TokenNameSEMICOLON
schemaSource	TokenNameIdentifier
=	TokenNameEQUAL
XMLSchemaLoader	TokenNameIdentifier
.	TokenNameDOT
resolveDocument	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
,	TokenNameCOMMA
pairs	TokenNameIdentifier
,	TokenNameCOMMA
fEntityResolver	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
mustResolve	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"schema_reference.4"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
desc	TokenNameIdentifier
.	TokenNameDOT
getLocationHints	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
}	TokenNameRBRACE
,	TokenNameCOMMA
referElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
reportSchemaWarning	TokenNameIdentifier
(	TokenNameLPAREN
"schema_reference.4"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
desc	TokenNameIdentifier
.	TokenNameDOT
getLocationHints	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
}	TokenNameRBRACE
,	TokenNameCOMMA
referElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
instanceof	TokenNameinstanceof
DOMInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
DOMInputSource	TokenNameIdentifier
)	TokenNameRPAREN
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
.	TokenNameDOT
getContextType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
referElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
instanceof	TokenNameinstanceof
SAXInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
SAXInputSource	TokenNameIdentifier
)	TokenNameRPAREN
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
.	TokenNameDOT
getContextType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
referElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
instanceof	TokenNameinstanceof
StAXInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
StAXInputSource	TokenNameIdentifier
)	TokenNameRPAREN
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
.	TokenNameDOT
getContextType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
referElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
instanceof	TokenNameinstanceof
XSInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSInputSource	TokenNameIdentifier
)	TokenNameRPAREN
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
.	TokenNameDOT
getContextType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
referElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Element	TokenNameIdentifier
resolveSchema	TokenNameIdentifier
(	TokenNameLPAREN
XMLInputSource	TokenNameIdentifier
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
referElement	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
instanceof	TokenNameinstanceof
DOMInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
DOMInputSource	TokenNameIdentifier
)	TokenNameRPAREN
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
.	TokenNameDOT
getContextType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
referElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
instanceof	TokenNameinstanceof
SAXInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
SAXInputSource	TokenNameIdentifier
)	TokenNameRPAREN
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
.	TokenNameDOT
getContextType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
referElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
instanceof	TokenNameinstanceof
StAXInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
StAXInputSource	TokenNameIdentifier
)	TokenNameRPAREN
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
.	TokenNameDOT
getContextType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
referElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
instanceof	TokenNameinstanceof
XSInputSource	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSInputSource	TokenNameIdentifier
)	TokenNameRPAREN
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
.	TokenNameDOT
getContextType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
referElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XMLInputSource	TokenNameIdentifier
resolveSchemaSource	TokenNameIdentifier
(	TokenNameLPAREN
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
referElement	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
usePairs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XMLInputSource	TokenNameIdentifier
schemaSource	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
Hashtable	TokenNameIdentifier
pairs	TokenNameIdentifier
=	TokenNameEQUAL
usePairs	TokenNameIdentifier
?	TokenNameQUESTION
fLocationPairs	TokenNameIdentifier
:	TokenNameCOLON
EMPTY_TABLE	TokenNameIdentifier
;	TokenNameSEMICOLON
schemaSource	TokenNameIdentifier
=	TokenNameEQUAL
XMLSchemaLoader	TokenNameIdentifier
.	TokenNameDOT
resolveDocument	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
,	TokenNameCOMMA
pairs	TokenNameIdentifier
,	TokenNameCOMMA
fEntityResolver	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
mustResolve	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"schema_reference.4"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
desc	TokenNameIdentifier
.	TokenNameDOT
getLocationHints	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
}	TokenNameRBRACE
,	TokenNameCOMMA
referElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
reportSchemaWarning	TokenNameIdentifier
(	TokenNameLPAREN
"schema_reference.4"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
desc	TokenNameIdentifier
.	TokenNameDOT
getLocationHints	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
}	TokenNameRBRACE
,	TokenNameCOMMA
referElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
schemaSource	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Element	TokenNameIdentifier
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
schemaNamespace	TokenNameIdentifier
,	TokenNameCOMMA
XMLInputSource	TokenNameIdentifier
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
short	TokenNameshort
referType	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
referElement	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
hasInput	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
IOException	TokenNameIdentifier
exception	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
schemaElement	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getByteStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getCharacterStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
XSDKey	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
schemaId	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
referType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
schemaId	TokenNameIdentifier
=	TokenNameEQUAL
XMLEntityManager	TokenNameIdentifier
.	TokenNameDOT
expandSystemId	TokenNameIdentifier
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDKey	TokenNameIdentifier
(	TokenNameLPAREN
schemaId	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
,	TokenNameCOMMA
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
schemaElement	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
fTraversed	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fLastSchemaWasDuplicate	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
schemaElement	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Document	TokenNameIdentifier
schemaDocument	TokenNameIdentifier
=	TokenNameEQUAL
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
getDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
schemaElement	TokenNameIdentifier
=	TokenNameEQUAL
schemaDocument	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getRoot	TokenNameIdentifier
(	TokenNameLPAREN
schemaDocument	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
getSchemaDocument0	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
schemaId	TokenNameIdentifier
,	TokenNameCOMMA
schemaElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
hasInput	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
exception	TokenNameIdentifier
=	TokenNameEQUAL
ex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
getSchemaDocument1	TokenNameIdentifier
(	TokenNameLPAREN
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
hasInput	TokenNameIdentifier
,	TokenNameCOMMA
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
referElement	TokenNameIdentifier
,	TokenNameCOMMA
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Element	TokenNameIdentifier
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
schemaNamespace	TokenNameIdentifier
,	TokenNameCOMMA
SAXInputSource	TokenNameIdentifier
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
short	TokenNameshort
referType	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
referElement	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XMLReader	TokenNameIdentifier
parser	TokenNameIdentifier
=	TokenNameEQUAL
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getXMLReader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
InputSource	TokenNameIdentifier
inputSource	TokenNameIdentifier
=	TokenNameEQUAL
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getInputSource	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
hasInput	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
IOException	TokenNameIdentifier
exception	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
schemaElement	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
inputSource	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
(	TokenNameLPAREN
inputSource	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
inputSource	TokenNameIdentifier
.	TokenNameDOT
getByteStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
inputSource	TokenNameIdentifier
.	TokenNameDOT
getCharacterStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
XSDKey	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
schemaId	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
referType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
schemaId	TokenNameIdentifier
=	TokenNameEQUAL
XMLEntityManager	TokenNameIdentifier
.	TokenNameDOT
expandSystemId	TokenNameIdentifier
(	TokenNameLPAREN
inputSource	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDKey	TokenNameIdentifier
(	TokenNameLPAREN
schemaId	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
,	TokenNameCOMMA
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
schemaElement	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
fTraversed	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fLastSchemaWasDuplicate	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
schemaElement	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
boolean	TokenNameboolean
namespacePrefixes	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
parser	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
namespacePrefixes	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
getFeature	TokenNameIdentifier
(	TokenNameLPAREN
NAMESPACE_PREFIXES	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
SAXException	TokenNameIdentifier
se	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
parser	TokenNameIdentifier
=	TokenNameEQUAL
XMLReaderFactory	TokenNameIdentifier
.	TokenNameDOT
createXMLReader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
SAXException	TokenNameIdentifier
se	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
parser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SAXParser	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
parser	TokenNameIdentifier
.	TokenNameDOT
setFeature	TokenNameIdentifier
(	TokenNameLPAREN
NAMESPACE_PREFIXES	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
namespacePrefixes	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
parser	TokenNameIdentifier
instanceof	TokenNameinstanceof
SAXParser	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
securityManager	TokenNameIdentifier
=	TokenNameEQUAL
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
SECURITY_MANAGER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
securityManager	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
parser	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
SECURITY_MANAGER	TokenNameIdentifier
,	TokenNameCOMMA
securityManager	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
SAXException	TokenNameIdentifier
se	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
boolean	TokenNameboolean
stringsInternalized	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
stringsInternalized	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
getFeature	TokenNameIdentifier
(	TokenNameLPAREN
STRING_INTERNING	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
SAXException	TokenNameIdentifier
exc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fXSContentHandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fXSContentHandler	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SchemaContentHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fXSContentHandler	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSchemaParser	TokenNameIdentifier
,	TokenNameCOMMA
fSymbolTable	TokenNameIdentifier
,	TokenNameCOMMA
namespacePrefixes	TokenNameIdentifier
,	TokenNameCOMMA
stringsInternalized	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parser	TokenNameIdentifier
.	TokenNameDOT
setContentHandler	TokenNameIdentifier
(	TokenNameLPAREN
fXSContentHandler	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parser	TokenNameIdentifier
.	TokenNameDOT
setErrorHandler	TokenNameIdentifier
(	TokenNameLPAREN
fErrorReporter	TokenNameIdentifier
.	TokenNameDOT
getSAXErrorHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
inputSource	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
parser	TokenNameIdentifier
.	TokenNameDOT
setContentHandler	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parser	TokenNameIdentifier
.	TokenNameDOT
setErrorHandler	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
Document	TokenNameIdentifier
schemaDocument	TokenNameIdentifier
=	TokenNameEQUAL
fXSContentHandler	TokenNameIdentifier
.	TokenNameDOT
getDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
schemaElement	TokenNameIdentifier
=	TokenNameEQUAL
schemaDocument	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getRoot	TokenNameIdentifier
(	TokenNameLPAREN
schemaDocument	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
getSchemaDocument0	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
schemaId	TokenNameIdentifier
,	TokenNameCOMMA
schemaElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
hasInput	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
SAXParseException	TokenNameIdentifier
spe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
SAX2XNIUtil	TokenNameIdentifier
.	TokenNameDOT
createXMLParseException0	TokenNameIdentifier
(	TokenNameLPAREN
spe	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
SAXException	TokenNameIdentifier
se	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
SAX2XNIUtil	TokenNameIdentifier
.	TokenNameDOT
createXNIException0	TokenNameIdentifier
(	TokenNameLPAREN
se	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
exception	TokenNameIdentifier
=	TokenNameEQUAL
ioe	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
getSchemaDocument1	TokenNameIdentifier
(	TokenNameLPAREN
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
hasInput	TokenNameIdentifier
,	TokenNameCOMMA
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
referElement	TokenNameIdentifier
,	TokenNameCOMMA
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Element	TokenNameIdentifier
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
schemaNamespace	TokenNameIdentifier
,	TokenNameCOMMA
DOMInputSource	TokenNameIdentifier
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
short	TokenNameshort
referType	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
referElement	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
hasInput	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
IOException	TokenNameIdentifier
exception	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
schemaElement	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
schemaRootElement	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
final	TokenNamefinal
Node	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getNode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
nodeType	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
node	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeType	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
.	TokenNameDOT
getNodeType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
schemaRootElement	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getRoot	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
Document	TokenNameIdentifier
)	TokenNameRPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nodeType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
schemaRootElement	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
schemaRootElement	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
XSDKey	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
schemaId	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
referType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
schemaId	TokenNameIdentifier
=	TokenNameEQUAL
XMLEntityManager	TokenNameIdentifier
.	TokenNameDOT
expandSystemId	TokenNameIdentifier
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isDocument	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
nodeType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isDocument	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Node	TokenNameIdentifier
parent	TokenNameIdentifier
=	TokenNameEQUAL
schemaRootElement	TokenNameIdentifier
.	TokenNameDOT
getParentNode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
parent	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
isDocument	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
parent	TokenNameIdentifier
.	TokenNameDOT
getNodeType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
Node	TokenNameIdentifier
.	TokenNameDOT
DOCUMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isDocument	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
key	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDKey	TokenNameIdentifier
(	TokenNameLPAREN
schemaId	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
,	TokenNameCOMMA
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
schemaElement	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
fTraversed	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fLastSchemaWasDuplicate	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
schemaElement	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
schemaElement	TokenNameIdentifier
=	TokenNameEQUAL
schemaRootElement	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
getSchemaDocument0	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
schemaId	TokenNameIdentifier
,	TokenNameCOMMA
schemaElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
hasInput	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
exception	TokenNameIdentifier
=	TokenNameEQUAL
ioe	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
getSchemaDocument1	TokenNameIdentifier
(	TokenNameLPAREN
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
hasInput	TokenNameIdentifier
,	TokenNameCOMMA
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
referElement	TokenNameIdentifier
,	TokenNameCOMMA
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Element	TokenNameIdentifier
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
schemaNamespace	TokenNameIdentifier
,	TokenNameCOMMA
StAXInputSource	TokenNameIdentifier
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
short	TokenNameshort
referType	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
referElement	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
IOException	TokenNameIdentifier
exception	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
schemaElement	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
final	TokenNamefinal
boolean	TokenNameboolean
consumeRemainingContent	TokenNameIdentifier
=	TokenNameEQUAL
schemaSource	TokenNameIdentifier
.	TokenNameDOT
shouldConsumeRemainingContent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
XMLStreamReader	TokenNameIdentifier
streamReader	TokenNameIdentifier
=	TokenNameEQUAL
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getXMLStreamReader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
XMLEventReader	TokenNameIdentifier
eventReader	TokenNameIdentifier
=	TokenNameEQUAL
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getXMLEventReader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSDKey	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
schemaId	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
referType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
schemaId	TokenNameIdentifier
=	TokenNameEQUAL
XMLEntityManager	TokenNameIdentifier
.	TokenNameDOT
expandSystemId	TokenNameIdentifier
(	TokenNameLPAREN
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getBaseSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isDocument	TokenNameIdentifier
=	TokenNameEQUAL
consumeRemainingContent	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isDocument	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
streamReader	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
isDocument	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
streamReader	TokenNameIdentifier
.	TokenNameDOT
getEventType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLStreamReader	TokenNameIdentifier
.	TokenNameDOT
START_DOCUMENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
isDocument	TokenNameIdentifier
=	TokenNameEQUAL
eventReader	TokenNameIdentifier
.	TokenNameDOT
peek	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
isStartDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isDocument	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
key	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDKey	TokenNameIdentifier
(	TokenNameLPAREN
schemaId	TokenNameIdentifier
,	TokenNameCOMMA
referType	TokenNameIdentifier
,	TokenNameCOMMA
schemaNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
schemaElement	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
fTraversed	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fLastSchemaWasDuplicate	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
schemaElement	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fStAXSchemaParser	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fStAXSchemaParser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StAXSchemaParser	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fStAXSchemaParser	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSchemaParser	TokenNameIdentifier
,	TokenNameCOMMA
fSymbolTable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
streamReader	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fStAXSchemaParser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
streamReader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
consumeRemainingContent	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
streamReader	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
streamReader	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fStAXSchemaParser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
eventReader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
consumeRemainingContent	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
eventReader	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
eventReader	TokenNameIdentifier
.	TokenNameDOT
nextEvent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
Document	TokenNameIdentifier
schemaDocument	TokenNameIdentifier
=	TokenNameEQUAL
fStAXSchemaParser	TokenNameIdentifier
.	TokenNameDOT
getDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
schemaElement	TokenNameIdentifier
=	TokenNameEQUAL
schemaDocument	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getRoot	TokenNameIdentifier
(	TokenNameLPAREN
schemaDocument	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
getSchemaDocument0	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
schemaId	TokenNameIdentifier
,	TokenNameCOMMA
schemaElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLStreamException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Throwable	TokenNameIdentifier
t	TokenNameIdentifier
=	TokenNameEQUAL
e	TokenNameIdentifier
.	TokenNameDOT
getNestedException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
instanceof	TokenNameinstanceof
IOException	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
exception	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
IOException	TokenNameIdentifier
)	TokenNameRPAREN
t	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
StAXLocationWrapper	TokenNameIdentifier
slw	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StAXLocationWrapper	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
slw	TokenNameIdentifier
.	TokenNameDOT
setLocation	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
getLocation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
new	TokenNamenew
XMLParseException	TokenNameIdentifier
(	TokenNameLPAREN
slw	TokenNameIdentifier
,	TokenNameCOMMA
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
exception	TokenNameIdentifier
=	TokenNameEQUAL
e	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
getSchemaDocument1	TokenNameIdentifier
(	TokenNameLPAREN
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
referElement	TokenNameIdentifier
,	TokenNameCOMMA
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Element	TokenNameIdentifier
getSchemaDocument0	TokenNameIdentifier
(	TokenNameLPAREN
XSDKey	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
schemaId	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
schemaElement	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
key	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fTraversed	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
schemaElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
schemaId	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fDoc2SystemId	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
schemaElement	TokenNameIdentifier
,	TokenNameCOMMA
schemaId	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fLastSchemaWasDuplicate	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
schemaElement	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Element	TokenNameIdentifier
getSchemaDocument1	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
mustResolve	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
hasInput	TokenNameIdentifier
,	TokenNameCOMMA
XMLInputSource	TokenNameIdentifier
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
referElement	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
mustResolve	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
hasInput	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"schema_reference.4"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
referElement	TokenNameIdentifier
,	TokenNameCOMMA
ioe	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"schema_reference.4"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
schemaSource	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
""	TokenNameStringLiteral
:	TokenNameCOLON
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
referElement	TokenNameIdentifier
,	TokenNameCOMMA
ioe	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
hasInput	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaWarning	TokenNameIdentifier
(	TokenNameLPAREN
"schema_reference.4"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getSystemId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
referElement	TokenNameIdentifier
,	TokenNameCOMMA
ioe	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fLastSchemaWasDuplicate	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Element	TokenNameIdentifier
getSchemaDocument	TokenNameIdentifier
(	TokenNameLPAREN
XSInputSource	TokenNameIdentifier
schemaSource	TokenNameIdentifier
,	TokenNameCOMMA
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
grammars	TokenNameIdentifier
=	TokenNameEQUAL
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getGrammars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
referType	TokenNameIdentifier
=	TokenNameEQUAL
desc	TokenNameIdentifier
.	TokenNameDOT
getContextType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
grammars	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
grammars	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
Vector	TokenNameIdentifier
expandedGrammars	TokenNameIdentifier
=	TokenNameEQUAL
expandGrammars	TokenNameIdentifier
(	TokenNameLPAREN
grammars	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fNamespaceGrowth	TokenNameIdentifier
||	TokenNameOR_OR
!	TokenNameNOT
existingGrammars	TokenNameIdentifier
(	TokenNameLPAREN
expandedGrammars	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addGrammars	TokenNameIdentifier
(	TokenNameLPAREN
expandedGrammars	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
desc	TokenNameIdentifier
.	TokenNameDOT
setTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
grammars	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
XSObject	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
components	TokenNameIdentifier
=	TokenNameEQUAL
schemaSource	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
components	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
components	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
Hashtable	TokenNameIdentifier
importDependencies	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
expandedComponents	TokenNameIdentifier
=	TokenNameEQUAL
expandComponents	TokenNameIdentifier
(	TokenNameLPAREN
components	TokenNameIdentifier
,	TokenNameCOMMA
importDependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fNamespaceGrowth	TokenNameIdentifier
||	TokenNameOR_OR
canAddComponents	TokenNameIdentifier
(	TokenNameLPAREN
expandedComponents	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addGlobalComponents	TokenNameIdentifier
(	TokenNameLPAREN
expandedComponents	TokenNameIdentifier
,	TokenNameCOMMA
importDependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
referType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSDDescription	TokenNameIdentifier
.	TokenNameDOT
CONTEXT_PREPARSE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
desc	TokenNameIdentifier
.	TokenNameDOT
setTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
components	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Vector	TokenNameIdentifier
expandGrammars	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
grammars	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Vector	TokenNameIdentifier
currGrammars	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
grammars	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
currGrammars	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
grammars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
currGrammars	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
grammars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
SchemaGrammar	TokenNameIdentifier
sg1	TokenNameIdentifier
,	TokenNameCOMMA
sg2	TokenNameIdentifier
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
gs	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
currGrammars	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
sg1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
)	TokenNameRPAREN
currGrammars	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
gs	TokenNameIdentifier
=	TokenNameEQUAL
sg1	TokenNameIdentifier
.	TokenNameDOT
getImportedGrammars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
gs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
gs	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
sg2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
)	TokenNameRPAREN
gs	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
j	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
currGrammars	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
sg2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
currGrammars	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
sg2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
currGrammars	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
existingGrammars	TokenNameIdentifier
(	TokenNameLPAREN
Vector	TokenNameIdentifier
grammars	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
grammars	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDDescription	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
SchemaGrammar	TokenNameIdentifier
sg1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
)	TokenNameRPAREN
grammars	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
desc	TokenNameIdentifier
.	TokenNameDOT
setNamespace	TokenNameIdentifier
(	TokenNameLPAREN
sg1	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SchemaGrammar	TokenNameIdentifier
sg2	TokenNameIdentifier
=	TokenNameEQUAL
findGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg2	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
canAddComponents	TokenNameIdentifier
(	TokenNameLPAREN
Vector	TokenNameIdentifier
components	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
components	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDDescription	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
XSObject	TokenNameIdentifier
component	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSObject	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
canAddComponent	TokenNameIdentifier
(	TokenNameLPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
desc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
canAddComponent	TokenNameIdentifier
(	TokenNameLPAREN
XSObject	TokenNameIdentifier
component	TokenNameIdentifier
,	TokenNameCOMMA
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
desc	TokenNameIdentifier
.	TokenNameDOT
setNamespace	TokenNameIdentifier
(	TokenNameLPAREN
component	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
=	TokenNameEQUAL
findGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
isImmutable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
short	TokenNameshort
componentType	TokenNameIdentifier
=	TokenNameEQUAL
component	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
component	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
componentType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
TYPE_DEFINITION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
component	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
component	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_GROUP	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
component	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
component	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
MODEL_GROUP_DEFINITION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
component	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
NOTATION_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
component	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
IDENTITY_CONSTRAINT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_USE	TokenNameIdentifier
:	TokenNameCOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addGrammars	TokenNameIdentifier
(	TokenNameLPAREN
Vector	TokenNameIdentifier
grammars	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
grammars	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDDescription	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
SchemaGrammar	TokenNameIdentifier
sg1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
)	TokenNameRPAREN
grammars	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
desc	TokenNameIdentifier
.	TokenNameDOT
setNamespace	TokenNameIdentifier
(	TokenNameLPAREN
sg1	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SchemaGrammar	TokenNameIdentifier
sg2	TokenNameIdentifier
=	TokenNameEQUAL
findGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
,	TokenNameCOMMA
fNamespaceGrowth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
sg2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addGrammarComponents	TokenNameIdentifier
(	TokenNameLPAREN
sg1	TokenNameIdentifier
,	TokenNameCOMMA
sg2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addGrammarComponents	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dstGrammar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
createGrammarFrom	TokenNameIdentifier
(	TokenNameLPAREN
srcGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
SchemaGrammar	TokenNameIdentifier
tmpGrammar	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tmpGrammar	TokenNameIdentifier
.	TokenNameDOT
isImmutable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
tmpGrammar	TokenNameIdentifier
=	TokenNameEQUAL
createGrammarFrom	TokenNameIdentifier
(	TokenNameLPAREN
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addNewGrammarLocations	TokenNameIdentifier
(	TokenNameLPAREN
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
tmpGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addNewImportedGrammars	TokenNameIdentifier
(	TokenNameLPAREN
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
tmpGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addNewGrammarComponents	TokenNameIdentifier
(	TokenNameLPAREN
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
tmpGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
SchemaGrammar	TokenNameIdentifier
createGrammarFrom	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
grammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
newGrammar	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SchemaGrammar	TokenNameIdentifier
(	TokenNameLPAREN
grammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
putGrammar	TokenNameIdentifier
(	TokenNameLPAREN
newGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateImportListWith	TokenNameIdentifier
(	TokenNameLPAREN
newGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateImportListFor	TokenNameIdentifier
(	TokenNameLPAREN
newGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newGrammar	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addNewGrammarLocations	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
StringList	TokenNameIdentifier
locations	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getDocumentLocations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
locSize	TokenNameIdentifier
=	TokenNameEQUAL
locations	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
StringList	TokenNameIdentifier
locations2	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getDocumentLocations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
locSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
loc	TokenNameIdentifier
=	TokenNameEQUAL
locations	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
locations2	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
loc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addDocument	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
loc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addNewImportedGrammars	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Vector	TokenNameIdentifier
igs1	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getImportedGrammars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
igs1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
Vector	TokenNameIdentifier
igs2	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getImportedGrammars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
igs2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
igs2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
Vector	TokenNameIdentifier
)	TokenNameRPAREN
igs1	TokenNameIdentifier
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
setImportedGrammars	TokenNameIdentifier
(	TokenNameLPAREN
igs2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
updateImportList	TokenNameIdentifier
(	TokenNameLPAREN
igs1	TokenNameIdentifier
,	TokenNameCOMMA
igs2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
updateImportList	TokenNameIdentifier
(	TokenNameLPAREN
Vector	TokenNameIdentifier
importedSrc	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
importedDst	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
importedSrc	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
)	TokenNameRPAREN
importedSrc	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
containedImportedGrammar	TokenNameIdentifier
(	TokenNameLPAREN
importedDst	TokenNameIdentifier
,	TokenNameCOMMA
sg	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
importedDst	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addNewGrammarComponents	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
resetComponents	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addGlobalElementDecls	TokenNameIdentifier
(	TokenNameLPAREN
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addGlobalAttributeDecls	TokenNameIdentifier
(	TokenNameLPAREN
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addGlobalAttributeGroupDecls	TokenNameIdentifier
(	TokenNameLPAREN
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addGlobalGroupDecls	TokenNameIdentifier
(	TokenNameLPAREN
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addGlobalTypeDecls	TokenNameIdentifier
(	TokenNameLPAREN
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addGlobalNotationDecls	TokenNameIdentifier
(	TokenNameLPAREN
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addGlobalElementDecls	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSNamedMap	TokenNameIdentifier
components	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DECLARATION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
components	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSElementDecl	TokenNameIdentifier
srcDecl	TokenNameIdentifier
,	TokenNameCOMMA
dstDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
srcDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSElementDecl	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstDecl	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
ObjectList	TokenNameIdentifier
componentsExt	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getComponentsExt	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DECLARATION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
componentsExt	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
componentsExt	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
location	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
key	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
srcDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSElementDecl	TokenNameIdentifier
)	TokenNameRPAREN
componentsExt	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstDecl	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
,	TokenNameCOMMA
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addGlobalAttributeDecls	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSNamedMap	TokenNameIdentifier
components	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_DECLARATION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
components	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSAttributeDecl	TokenNameIdentifier
srcDecl	TokenNameIdentifier
,	TokenNameCOMMA
dstDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
srcDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSAttributeDecl	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstDecl	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcDecl	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
fTolerateDuplicates	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSharingError	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
ObjectList	TokenNameIdentifier
componentsExt	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getComponentsExt	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_DECLARATION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
componentsExt	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
componentsExt	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
location	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
key	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
srcDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSAttributeDecl	TokenNameIdentifier
)	TokenNameRPAREN
componentsExt	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstDecl	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
,	TokenNameCOMMA
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addGlobalAttributeGroupDecls	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSNamedMap	TokenNameIdentifier
components	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_GROUP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
components	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSAttributeGroupDecl	TokenNameIdentifier
srcDecl	TokenNameIdentifier
,	TokenNameCOMMA
dstDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
srcDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSAttributeGroupDecl	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstDecl	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalAttributeGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcDecl	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
fTolerateDuplicates	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSharingError	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
ObjectList	TokenNameIdentifier
componentsExt	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getComponentsExt	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_GROUP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
componentsExt	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
componentsExt	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
location	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
key	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
srcDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSAttributeGroupDecl	TokenNameIdentifier
)	TokenNameRPAREN
componentsExt	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstDecl	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalAttributeGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
,	TokenNameCOMMA
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addGlobalNotationDecls	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSNamedMap	TokenNameIdentifier
components	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
NOTATION_DECLARATION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
components	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSNotationDecl	TokenNameIdentifier
srcDecl	TokenNameIdentifier
,	TokenNameCOMMA
dstDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
srcDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSNotationDecl	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstDecl	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcDecl	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
fTolerateDuplicates	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSharingError	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
ObjectList	TokenNameIdentifier
componentsExt	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getComponentsExt	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
NOTATION_DECLARATION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
componentsExt	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
componentsExt	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
location	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
key	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
srcDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSNotationDecl	TokenNameIdentifier
)	TokenNameRPAREN
componentsExt	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstDecl	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
,	TokenNameCOMMA
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addGlobalGroupDecls	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSNamedMap	TokenNameIdentifier
components	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
MODEL_GROUP_DEFINITION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
components	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSGroupDecl	TokenNameIdentifier
srcDecl	TokenNameIdentifier
,	TokenNameCOMMA
dstDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
srcDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSGroupDecl	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstDecl	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
dstDecl	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
fTolerateDuplicates	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSharingError	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
ObjectList	TokenNameIdentifier
componentsExt	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getComponentsExt	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
MODEL_GROUP_DEFINITION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
componentsExt	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
componentsExt	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
location	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
key	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
srcDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSGroupDecl	TokenNameIdentifier
)	TokenNameRPAREN
componentsExt	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstDecl	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
,	TokenNameCOMMA
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addGlobalTypeDecls	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
srcGrammar	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
dstGrammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSNamedMap	TokenNameIdentifier
components	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
TYPE_DEFINITION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
components	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XSTypeDefinition	TokenNameIdentifier
srcDecl	TokenNameIdentifier
,	TokenNameCOMMA
dstDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
srcDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstDecl	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcDecl	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
fTolerateDuplicates	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSharingError	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
srcDecl	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
ObjectList	TokenNameIdentifier
componentsExt	TokenNameIdentifier
=	TokenNameEQUAL
srcGrammar	TokenNameIdentifier
.	TokenNameDOT
getComponentsExt	TokenNameIdentifier
(	TokenNameLPAREN
XSConstants	TokenNameIdentifier
.	TokenNameDOT
TYPE_DEFINITION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
componentsExt	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
componentsExt	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
location	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
key	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
srcDecl	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
componentsExt	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dstDecl	TokenNameIdentifier
=	TokenNameEQUAL
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
dstGrammar	TokenNameIdentifier
.	TokenNameDOT
addGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
srcDecl	TokenNameIdentifier
,	TokenNameCOMMA
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dstDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
srcDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
Vector	TokenNameIdentifier
expandComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSObject	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
components	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Vector	TokenNameIdentifier
newComponents	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
components	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
newComponents	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
components	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
newComponents	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
components	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
newComponents	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
XSObject	TokenNameIdentifier
component	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSObject	TokenNameIdentifier
)	TokenNameRPAREN
newComponents	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expandRelatedComponents	TokenNameIdentifier
(	TokenNameLPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
newComponents	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
newComponents	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandRelatedComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSObject	TokenNameIdentifier
component	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
short	TokenNameshort
componentType	TokenNameIdentifier
=	TokenNameEQUAL
component	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
componentType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
TYPE_DEFINITION	TokenNameIdentifier
:	TokenNameCOLON
expandRelatedTypeComponents	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
component	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
expandRelatedAttributeComponents	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSAttributeDeclaration	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
component	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_GROUP	TokenNameIdentifier
:	TokenNameCOLON
expandRelatedAttributeGroupComponents	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSAttributeGroupDefinition	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
component	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
expandRelatedElementComponents	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSElementDeclaration	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
component	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
MODEL_GROUP_DEFINITION	TokenNameIdentifier
:	TokenNameCOLON
expandRelatedModelGroupDefinitionComponents	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSModelGroupDefinition	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
component	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_USE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
NOTATION_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
IDENTITY_CONSTRAINT	TokenNameIdentifier
:	TokenNameCOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandRelatedAttributeComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSAttributeDeclaration	TokenNameIdentifier
decl	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addRelatedType	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
.	TokenNameDOT
getTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandRelatedElementComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSElementDeclaration	TokenNameIdentifier
decl	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addRelatedType	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
.	TokenNameDOT
getTypeDefinition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
XSElementDeclaration	TokenNameIdentifier
subElemDecl	TokenNameIdentifier
=	TokenNameEQUAL
decl	TokenNameIdentifier
.	TokenNameDOT
getSubstitutionGroupAffiliation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
subElemDecl	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
addRelatedElement	TokenNameIdentifier
(	TokenNameLPAREN
subElemDecl	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandRelatedTypeComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
type	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
XSComplexTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
expandRelatedComplexTypeComponents	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSComplexTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
type	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
XSSimpleTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
expandRelatedSimpleTypeComponents	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSSimpleTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
type	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandRelatedModelGroupDefinitionComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSModelGroupDefinition	TokenNameIdentifier
modelGroupDef	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
expandRelatedModelGroupComponents	TokenNameIdentifier
(	TokenNameLPAREN
modelGroupDef	TokenNameIdentifier
.	TokenNameDOT
getModelGroup	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandRelatedAttributeGroupComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSAttributeGroupDefinition	TokenNameIdentifier
attrGroup	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
expandRelatedAttributeUsesComponents	TokenNameIdentifier
(	TokenNameLPAREN
attrGroup	TokenNameIdentifier
.	TokenNameDOT
getAttributeUses	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandRelatedComplexTypeComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSComplexTypeDecl	TokenNameIdentifier
type	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addRelatedType	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getBaseType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expandRelatedAttributeUsesComponents	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
.	TokenNameDOT
getAttributeUses	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
XSParticle	TokenNameIdentifier
particle	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
.	TokenNameDOT
getParticle	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
particle	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
expandRelatedParticleComponents	TokenNameIdentifier
(	TokenNameLPAREN
particle	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandRelatedSimpleTypeComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSSimpleTypeDefinition	TokenNameIdentifier
type	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
XSTypeDefinition	TokenNameIdentifier
baseType	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
.	TokenNameDOT
getBaseType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
baseType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
addRelatedType	TokenNameIdentifier
(	TokenNameLPAREN
baseType	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
XSTypeDefinition	TokenNameIdentifier
itemType	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
.	TokenNameDOT
getItemType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
itemType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
addRelatedType	TokenNameIdentifier
(	TokenNameLPAREN
itemType	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
XSTypeDefinition	TokenNameIdentifier
primitiveType	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
.	TokenNameDOT
getPrimitiveType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
primitiveType	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
addRelatedType	TokenNameIdentifier
(	TokenNameLPAREN
primitiveType	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
XSObjectList	TokenNameIdentifier
memberTypes	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
.	TokenNameDOT
getMemberTypes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
memberTypes	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
memberTypes	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
addRelatedType	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
memberTypes	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandRelatedAttributeUsesComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSObjectList	TokenNameIdentifier
attrUses	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
attrUseSize	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
attrUses	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
attrUses	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
attrUseSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
expandRelatedAttributeUseComponents	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSAttributeUse	TokenNameIdentifier
)	TokenNameRPAREN
attrUses	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandRelatedAttributeUseComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSAttributeUse	TokenNameIdentifier
component	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addRelatedAttribute	TokenNameIdentifier
(	TokenNameLPAREN
component	TokenNameIdentifier
.	TokenNameDOT
getAttrDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandRelatedParticleComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSParticle	TokenNameIdentifier
component	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSTerm	TokenNameIdentifier
term	TokenNameIdentifier
=	TokenNameEQUAL
component	TokenNameIdentifier
.	TokenNameDOT
getTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
term	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
addRelatedElement	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSElementDeclaration	TokenNameIdentifier
)	TokenNameRPAREN
term	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
MODEL_GROUP	TokenNameIdentifier
:	TokenNameCOLON
expandRelatedModelGroupComponents	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSModelGroup	TokenNameIdentifier
)	TokenNameRPAREN
term	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandRelatedModelGroupComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSModelGroup	TokenNameIdentifier
modelGroup	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSObjectList	TokenNameIdentifier
particles	TokenNameIdentifier
=	TokenNameEQUAL
modelGroup	TokenNameIdentifier
.	TokenNameDOT
getParticles	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
particles	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
particles	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
expandRelatedParticleComponents	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSParticle	TokenNameIdentifier
)	TokenNameRPAREN
particles	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addRelatedType	TokenNameIdentifier
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
type	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
type	TokenNameIdentifier
.	TokenNameDOT
getAnonymous	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
type	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
URI_SCHEMAFORSCHEMA	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
componentList	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Vector	TokenNameIdentifier
importedNamespaces	TokenNameIdentifier
=	TokenNameEQUAL
findDependentNamespaces	TokenNameIdentifier
(	TokenNameLPAREN
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addNamespaceDependency	TokenNameIdentifier
(	TokenNameLPAREN
namespace	TokenNameIdentifier
,	TokenNameCOMMA
type	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
importedNamespaces	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
componentList	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
expandRelatedTypeComponents	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addRelatedElement	TokenNameIdentifier
(	TokenNameLPAREN
XSElementDeclaration	TokenNameIdentifier
decl	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
decl	TokenNameIdentifier
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
SCOPE_GLOBAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
componentList	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Vector	TokenNameIdentifier
importedNamespaces	TokenNameIdentifier
=	TokenNameEQUAL
findDependentNamespaces	TokenNameIdentifier
(	TokenNameLPAREN
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addNamespaceDependency	TokenNameIdentifier
(	TokenNameLPAREN
namespace	TokenNameIdentifier
,	TokenNameCOMMA
decl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
importedNamespaces	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
componentList	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
expandRelatedElementComponents	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addRelatedAttribute	TokenNameIdentifier
(	TokenNameLPAREN
XSAttributeDeclaration	TokenNameIdentifier
decl	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
componentList	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
decl	TokenNameIdentifier
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSConstants	TokenNameIdentifier
.	TokenNameDOT
SCOPE_GLOBAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
componentList	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Vector	TokenNameIdentifier
importedNamespaces	TokenNameIdentifier
=	TokenNameEQUAL
findDependentNamespaces	TokenNameIdentifier
(	TokenNameLPAREN
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addNamespaceDependency	TokenNameIdentifier
(	TokenNameLPAREN
namespace	TokenNameIdentifier
,	TokenNameCOMMA
decl	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
importedNamespaces	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
componentList	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
expandRelatedAttributeComponents	TokenNameIdentifier
(	TokenNameLPAREN
decl	TokenNameIdentifier
,	TokenNameCOMMA
componentList	TokenNameIdentifier
,	TokenNameCOMMA
namespace	TokenNameIdentifier
,	TokenNameCOMMA
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addGlobalComponents	TokenNameIdentifier
(	TokenNameLPAREN
Vector	TokenNameIdentifier
components	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
importDependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDDescription	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
components	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
addGlobalComponent	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSObject	TokenNameIdentifier
)	TokenNameRPAREN
components	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
desc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
updateImportDependencies	TokenNameIdentifier
(	TokenNameLPAREN
importDependencies	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addGlobalComponent	TokenNameIdentifier
(	TokenNameLPAREN
XSObject	TokenNameIdentifier
component	TokenNameIdentifier
,	TokenNameCOMMA
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
namespace	TokenNameIdentifier
=	TokenNameEQUAL
component	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
desc	TokenNameIdentifier
.	TokenNameDOT
setNamespace	TokenNameIdentifier
(	TokenNameLPAREN
namespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
=	TokenNameEQUAL
getSchemaGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
componentType	TokenNameIdentifier
=	TokenNameEQUAL
component	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
component	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
componentType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
TYPE_DEFINITION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getAnonymous	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalTypeDecl	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSTypeDefinition	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
XSAttributeDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSAttributeDecl	TokenNameIdentifier
.	TokenNameDOT
SCOPE_GLOBAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSAttributeDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSAttributeDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_GROUP	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalAttributeGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSAttributeGroupDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalAttributeDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalAttributeGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSAttributeGroupDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ELEMENT_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
XSElementDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XSElementDecl	TokenNameIdentifier
.	TokenNameDOT
SCOPE_GLOBAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalElementDeclAll	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSElementDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSElementDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalElementDecl	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSElementDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
MODEL_GROUP_DEFINITION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSGroupDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalGroupDecl	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSGroupDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
NOTATION_DECLARATION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSNotationDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
.	TokenNameDOT
addGlobalNotationDecl	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSNotationDecl	TokenNameIdentifier
)	TokenNameRPAREN
component	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
IDENTITY_CONSTRAINT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
XSConstants	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE_USE	TokenNameIdentifier
:	TokenNameCOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
updateImportDependencies	TokenNameIdentifier
(	TokenNameLPAREN
Hashtable	TokenNameIdentifier
table	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Enumeration	TokenNameIdentifier
keys	TokenNameIdentifier
=	TokenNameEQUAL
table	TokenNameIdentifier
.	TokenNameDOT
keys	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
namespace	TokenNameIdentifier
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
importList	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
keys	TokenNameIdentifier
.	TokenNameDOT
hasMoreElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
namespace	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
keys	TokenNameIdentifier
.	TokenNameDOT
nextElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
importList	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Vector	TokenNameIdentifier
)	TokenNameRPAREN
table	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
null2EmptyString	TokenNameIdentifier
(	TokenNameLPAREN
namespace	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
importList	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
expandImportList	TokenNameIdentifier
(	TokenNameLPAREN
namespace	TokenNameIdentifier
,	TokenNameCOMMA
importList	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expandImportList	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
namespaceList	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
namespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
Vector	TokenNameIdentifier
isgs	TokenNameIdentifier
=	TokenNameEQUAL
sg	TokenNameIdentifier
.	TokenNameDOT
getImportedGrammars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isgs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
isgs	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addImportList	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
,	TokenNameCOMMA
isgs	TokenNameIdentifier
,	TokenNameCOMMA
namespaceList	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sg	TokenNameIdentifier
.	TokenNameDOT
setImportedGrammars	TokenNameIdentifier
(	TokenNameLPAREN
isgs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
updateImportList	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
,	TokenNameCOMMA
isgs	TokenNameIdentifier
,	TokenNameCOMMA
namespaceList	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addImportList	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
importedGrammars	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
namespaceList	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
namespaceList	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
isg	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
isg	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
namespaceList	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isg	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
importedGrammars	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
isg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
updateImportList	TokenNameIdentifier
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
importedGrammars	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
namespaceList	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
namespaceList	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
isg	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
isg	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
namespaceList	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isg	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
containedImportedGrammar	TokenNameIdentifier
(	TokenNameLPAREN
importedGrammars	TokenNameIdentifier
,	TokenNameCOMMA
isg	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
importedGrammars	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
isg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
containedImportedGrammar	TokenNameIdentifier
(	TokenNameLPAREN
Vector	TokenNameIdentifier
importedGrammar	TokenNameIdentifier
,	TokenNameCOMMA
SchemaGrammar	TokenNameIdentifier
grammar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
importedGrammar	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SchemaGrammar	TokenNameIdentifier
)	TokenNameRPAREN
importedGrammar	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null2EmptyString	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
null2EmptyString	TokenNameIdentifier
(	TokenNameLPAREN
grammar	TokenNameIdentifier
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
SchemaGrammar	TokenNameIdentifier
getSchemaGrammar	TokenNameIdentifier
(	TokenNameLPAREN
XSDDescription	TokenNameIdentifier
desc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
sg	TokenNameIdentifier
=	TokenNameEQUAL
findGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
,	TokenNameCOMMA
fNamespaceGrowth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SchemaGrammar	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
desc	TokenNameIdentifier
.	TokenNameDOT
makeClone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
fSymbolTable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
putGrammar	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
isImmutable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sg	TokenNameIdentifier
=	TokenNameEQUAL
createGrammarFrom	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
sg	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Vector	TokenNameIdentifier
findDependentNamespaces	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
table	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
ns	TokenNameIdentifier
=	TokenNameEQUAL
null2EmptyString	TokenNameIdentifier
(	TokenNameLPAREN
namespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
namespaceList	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Vector	TokenNameIdentifier
)	TokenNameRPAREN
table	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
ns	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
namespaceList	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
namespaceList	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
table	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
ns	TokenNameIdentifier
,	TokenNameCOMMA
namespaceList	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
namespaceList	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addNamespaceDependency	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
namespace1	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespace2	TokenNameIdentifier
,	TokenNameCOMMA
Vector	TokenNameIdentifier
list	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
ns1	TokenNameIdentifier
=	TokenNameEQUAL
null2EmptyString	TokenNameIdentifier
(	TokenNameLPAREN
namespace1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
ns2	TokenNameIdentifier
=	TokenNameEQUAL
null2EmptyString	TokenNameIdentifier
(	TokenNameLPAREN
namespace2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ns1	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
ns2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
list	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
ns2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
list	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
ns2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
reportSharingError	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
qName	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
namespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
:	TokenNameCOLON
namespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
;	TokenNameSEMICOLON
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"sch-props-correct.2"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
qName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
createTraversers	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fAttributeChecker	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSAttributeChecker	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeGroupTraverser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDAttributeGroupTraverser	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
fAttributeChecker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeTraverser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDAttributeTraverser	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
fAttributeChecker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fComplexTypeTraverser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDComplexTypeTraverser	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
fAttributeChecker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementTraverser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDElementTraverser	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
fAttributeChecker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGroupTraverser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDGroupTraverser	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
fAttributeChecker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fKeyrefTraverser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDKeyrefTraverser	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
fAttributeChecker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNotationTraverser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDNotationTraverser	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
fAttributeChecker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSimpleTypeTraverser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDSimpleTypeTraverser	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
fAttributeChecker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUniqueOrKeyTraverser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDUniqueOrKeyTraverser	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
fAttributeChecker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fWildCardTraverser	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDWildcardTraverser	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
fAttributeChecker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
prepareForParse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fTraversed	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fDoc2SystemId	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fHiddenNodes	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fLastSchemaWasDuplicate	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
prepareForTraverse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fUnparsedAttributeRegistry	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedAttributeGroupRegistry	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedElementRegistry	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedGroupRegistry	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedIdentityConstraintRegistry	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedNotationRegistry	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedTypeRegistry	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedAttributeRegistrySub	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedAttributeGroupRegistrySub	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedElementRegistrySub	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedGroupRegistrySub	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedIdentityConstraintRegistrySub	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedNotationRegistrySub	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUnparsedTypeRegistrySub	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
TYPEDECL_TYPE	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
fUnparsedRegistriesExt	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fXSDocumentInfoRegistry	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fDependencyMap	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fDoc2XSDocumentMap	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fRedefine2XSDMap	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fRedefine2NSSupport	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAllTNSs	TokenNameIdentifier
.	TokenNameDOT
removeAllElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fImportMap	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fRoot	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fLocalElemStackPos	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
fParticle	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fLocalElementDecl	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fLocalElementDecl_schema	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fLocalElemNamespaceContext	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fLocalElemStackPos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fKeyrefStackPos	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
fKeyrefs	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fKeyrefElems	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fKeyrefNamespaceContext	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
fKeyrefsMapXSDocumentInfo	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fKeyrefStackPos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fAttributeChecker	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
createTraversers	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
=	TokenNameEQUAL
fErrorReporter	TokenNameIdentifier
.	TokenNameDOT
getLocale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeGroupTraverser	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
,	TokenNameCOMMA
fValidateAnnotations	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAttributeTraverser	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
,	TokenNameCOMMA
fValidateAnnotations	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fComplexTypeTraverser	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
,	TokenNameCOMMA
fValidateAnnotations	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
,	TokenNameCOMMA
fValidateAnnotations	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGroupTraverser	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
,	TokenNameCOMMA
fValidateAnnotations	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fKeyrefTraverser	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
,	TokenNameCOMMA
fValidateAnnotations	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fNotationTraverser	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
,	TokenNameCOMMA
fValidateAnnotations	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fSimpleTypeTraverser	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
,	TokenNameCOMMA
fValidateAnnotations	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fUniqueOrKeyTraverser	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
,	TokenNameCOMMA
fValidateAnnotations	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fWildCardTraverser	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
,	TokenNameCOMMA
fValidateAnnotations	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fRedefinedRestrictedAttributeGroupRegistry	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fRedefinedRestrictedGroupRegistry	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGlobalAttrDecls	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGlobalAttrGrpDecls	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGlobalElemDecls	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGlobalGroupDecls	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGlobalNotationDecls	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGlobalIDConstraintDecls	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fGlobalTypeDecls	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setDeclPool	TokenNameIdentifier
(	TokenNameLPAREN
XSDeclarationPool	TokenNameIdentifier
declPool	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fDeclPool	TokenNameIdentifier
=	TokenNameEQUAL
declPool	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setDVFactory	TokenNameIdentifier
(	TokenNameLPAREN
SchemaDVFactory	TokenNameIdentifier
dvFactory	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fDVFactory	TokenNameIdentifier
=	TokenNameEQUAL
dvFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
XMLComponentManager	TokenNameIdentifier
componentManager	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fSymbolTable	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SymbolTable	TokenNameIdentifier
)	TokenNameRPAREN
componentManager	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
SYMBOL_TABLE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fEntityResolver	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XMLEntityResolver	TokenNameIdentifier
)	TokenNameRPAREN
componentManager	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
ENTITY_MANAGER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XMLEntityResolver	TokenNameIdentifier
er	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XMLEntityResolver	TokenNameIdentifier
)	TokenNameRPAREN
componentManager	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
ENTITY_RESOLVER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
er	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
setEntityResolver	TokenNameIdentifier
(	TokenNameLPAREN
er	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fErrorReporter	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XMLErrorReporter	TokenNameIdentifier
)	TokenNameRPAREN
componentManager	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
ERROR_REPORTER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
XMLErrorHandler	TokenNameIdentifier
currErrorHandler	TokenNameIdentifier
=	TokenNameEQUAL
fErrorReporter	TokenNameIdentifier
.	TokenNameDOT
getErrorHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
currErrorHandler	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
ERROR_HANDLER	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
ERROR_HANDLER	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
currErrorHandler	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
currErrorHandler	TokenNameIdentifier
:	TokenNameCOLON
new	TokenNamenew
DefaultErrorHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fAnnotationValidator	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fAnnotationValidator	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
ERROR_HANDLER	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
currErrorHandler	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
currErrorHandler	TokenNameIdentifier
:	TokenNameCOLON
new	TokenNamenew
DefaultErrorHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
Locale	TokenNameIdentifier
currentLocale	TokenNameIdentifier
=	TokenNameEQUAL
fErrorReporter	TokenNameIdentifier
.	TokenNameDOT
getLocale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
currentLocale	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
LOCALE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
LOCALE	TokenNameIdentifier
,	TokenNameCOMMA
currentLocale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fAnnotationValidator	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fAnnotationValidator	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
LOCALE	TokenNameIdentifier
,	TokenNameCOMMA
currentLocale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
fValidateAnnotations	TokenNameIdentifier
=	TokenNameEQUAL
componentManager	TokenNameIdentifier
.	TokenNameDOT
getFeature	TokenNameIdentifier
(	TokenNameLPAREN
VALIDATE_ANNOTATIONS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fValidateAnnotations	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
fHonourAllSchemaLocations	TokenNameIdentifier
=	TokenNameEQUAL
componentManager	TokenNameIdentifier
.	TokenNameDOT
getFeature	TokenNameIdentifier
(	TokenNameLPAREN
HONOUR_ALL_SCHEMALOCATIONS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fHonourAllSchemaLocations	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
fNamespaceGrowth	TokenNameIdentifier
=	TokenNameEQUAL
componentManager	TokenNameIdentifier
.	TokenNameDOT
getFeature	TokenNameIdentifier
(	TokenNameLPAREN
NAMESPACE_GROWTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fNamespaceGrowth	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
fTolerateDuplicates	TokenNameIdentifier
=	TokenNameEQUAL
componentManager	TokenNameIdentifier
.	TokenNameDOT
getFeature	TokenNameIdentifier
(	TokenNameLPAREN
TOLERATE_DUPLICATES	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fTolerateDuplicates	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
setFeature	TokenNameIdentifier
(	TokenNameLPAREN
CONTINUE_AFTER_FATAL_ERROR	TokenNameIdentifier
,	TokenNameCOMMA
fErrorReporter	TokenNameIdentifier
.	TokenNameDOT
getFeature	TokenNameIdentifier
(	TokenNameLPAREN
CONTINUE_AFTER_FATAL_ERROR	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
setFeature	TokenNameIdentifier
(	TokenNameLPAREN
ALLOW_JAVA_ENCODINGS	TokenNameIdentifier
,	TokenNameCOMMA
componentManager	TokenNameIdentifier
.	TokenNameDOT
getFeature	TokenNameIdentifier
(	TokenNameLPAREN
ALLOW_JAVA_ENCODINGS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
setFeature	TokenNameIdentifier
(	TokenNameLPAREN
STANDARD_URI_CONFORMANT_FEATURE	TokenNameIdentifier
,	TokenNameCOMMA
componentManager	TokenNameIdentifier
.	TokenNameDOT
getFeature	TokenNameIdentifier
(	TokenNameLPAREN
STANDARD_URI_CONFORMANT_FEATURE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
fGrammarPool	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XMLGrammarPool	TokenNameIdentifier
)	TokenNameRPAREN
componentManager	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
XMLGRAMMAR_POOL	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fGrammarPool	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
setFeature	TokenNameIdentifier
(	TokenNameLPAREN
DISALLOW_DOCTYPE	TokenNameIdentifier
,	TokenNameCOMMA
componentManager	TokenNameIdentifier
.	TokenNameDOT
getFeature	TokenNameIdentifier
(	TokenNameLPAREN
DISALLOW_DOCTYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
Object	TokenNameIdentifier
security	TokenNameIdentifier
=	TokenNameEQUAL
componentManager	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
SECURITY_MANAGER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
security	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
SECURITY_MANAGER	TokenNameIdentifier
,	TokenNameCOMMA
security	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XMLConfigurationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
traverseLocalElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
fDeferTraversingLocalElements	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fLocalElemStackPos	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
Element	TokenNameIdentifier
currElem	TokenNameIdentifier
=	TokenNameEQUAL
fLocalElementDecl	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
XSDocumentInfo	TokenNameIdentifier
currSchema	TokenNameIdentifier
=	TokenNameEQUAL
fLocalElementDecl_schema	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
currGrammar	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fElementTraverser	TokenNameIdentifier
.	TokenNameDOT
traverseLocal	TokenNameIdentifier
(	TokenNameLPAREN
fParticle	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
currElem	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
,	TokenNameCOMMA
currGrammar	TokenNameIdentifier
,	TokenNameCOMMA
fAllContext	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fParent	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
fLocalElemNamespaceContext	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fParticle	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
fType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_EMPTY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSModelGroupImpl	TokenNameIdentifier
group	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fParent	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
instanceof	TokenNameinstanceof
XSComplexTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSParticle	TokenNameIdentifier
p	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
XSComplexTypeDecl	TokenNameIdentifier
)	TokenNameRPAREN
fParent	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
.	TokenNameDOT
getParticle	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
group	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSModelGroupImpl	TokenNameIdentifier
)	TokenNameRPAREN
p	TokenNameIdentifier
.	TokenNameDOT
getTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
group	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
XSGroupDecl	TokenNameIdentifier
)	TokenNameRPAREN
fParent	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
.	TokenNameDOT
fModelGroup	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
group	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
removeParticle	TokenNameIdentifier
(	TokenNameLPAREN
group	TokenNameIdentifier
,	TokenNameCOMMA
fParticle	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
removeParticle	TokenNameIdentifier
(	TokenNameLPAREN
XSModelGroupImpl	TokenNameIdentifier
group	TokenNameIdentifier
,	TokenNameCOMMA
XSParticleDecl	TokenNameIdentifier
particle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSParticleDecl	TokenNameIdentifier
member	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
member	TokenNameIdentifier
=	TokenNameEQUAL
group	TokenNameIdentifier
.	TokenNameDOT
fParticles	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
member	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
particle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
group	TokenNameIdentifier
.	TokenNameDOT
fParticles	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
group	TokenNameIdentifier
.	TokenNameDOT
fParticles	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
group	TokenNameIdentifier
.	TokenNameDOT
fParticleCount	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
member	TokenNameIdentifier
.	TokenNameDOT
fType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XSParticleDecl	TokenNameIdentifier
.	TokenNameDOT
PARTICLE_MODELGROUP	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
removeParticle	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSModelGroupImpl	TokenNameIdentifier
)	TokenNameRPAREN
member	TokenNameIdentifier
.	TokenNameDOT
fValue	TokenNameIdentifier
,	TokenNameCOMMA
particle	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
fillInLocalElemInfo	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
elmDecl	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
schemaDoc	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
allContextFlags	TokenNameIdentifier
,	TokenNameCOMMA
XSObject	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
XSParticleDecl	TokenNameIdentifier
particle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fParticle	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fLocalElemStackPos	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
XSParticleDecl	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newStackP	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSParticleDecl	TokenNameIdentifier
[	TokenNameLBRACKET
fLocalElemStackPos	TokenNameIdentifier
+	TokenNamePLUS
INC_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fParticle	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newStackP	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fLocalElemStackPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fParticle	TokenNameIdentifier
=	TokenNameEQUAL
newStackP	TokenNameIdentifier
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newStackE	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Element	TokenNameIdentifier
[	TokenNameLBRACKET
fLocalElemStackPos	TokenNameIdentifier
+	TokenNamePLUS
INC_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fLocalElementDecl	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newStackE	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fLocalElemStackPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fLocalElementDecl	TokenNameIdentifier
=	TokenNameEQUAL
newStackE	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDocumentInfo	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newStackE_schema	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSDocumentInfo	TokenNameIdentifier
[	TokenNameLBRACKET
fLocalElemStackPos	TokenNameIdentifier
+	TokenNamePLUS
INC_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fLocalElementDecl_schema	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newStackE_schema	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fLocalElemStackPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fLocalElementDecl_schema	TokenNameIdentifier
=	TokenNameEQUAL
newStackE_schema	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newStackI	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
fLocalElemStackPos	TokenNameIdentifier
+	TokenNamePLUS
INC_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fAllContext	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newStackI	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fLocalElemStackPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fAllContext	TokenNameIdentifier
=	TokenNameEQUAL
newStackI	TokenNameIdentifier
;	TokenNameSEMICOLON
XSObject	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newStackC	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XSObject	TokenNameIdentifier
[	TokenNameLBRACKET
fLocalElemStackPos	TokenNameIdentifier
+	TokenNamePLUS
INC_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fParent	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newStackC	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fLocalElemStackPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fParent	TokenNameIdentifier
=	TokenNameEQUAL
newStackC	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newStackN	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
fLocalElemStackPos	TokenNameIdentifier
+	TokenNamePLUS
INC_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fLocalElemNamespaceContext	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newStackN	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fLocalElemStackPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fLocalElemNamespaceContext	TokenNameIdentifier
=	TokenNameEQUAL
newStackN	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fParticle	TokenNameIdentifier
[	TokenNameLBRACKET
fLocalElemStackPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
particle	TokenNameIdentifier
;	TokenNameSEMICOLON
fLocalElementDecl	TokenNameIdentifier
[	TokenNameLBRACKET
fLocalElemStackPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
elmDecl	TokenNameIdentifier
;	TokenNameSEMICOLON
fLocalElementDecl_schema	TokenNameIdentifier
[	TokenNameLBRACKET
fLocalElemStackPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
schemaDoc	TokenNameIdentifier
;	TokenNameSEMICOLON
fAllContext	TokenNameIdentifier
[	TokenNameLBRACKET
fLocalElemStackPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
allContextFlags	TokenNameIdentifier
;	TokenNameSEMICOLON
fParent	TokenNameIdentifier
[	TokenNameLBRACKET
fLocalElemStackPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
parent	TokenNameIdentifier
;	TokenNameSEMICOLON
fLocalElemNamespaceContext	TokenNameIdentifier
[	TokenNameLBRACKET
fLocalElemStackPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fNamespaceSupport	TokenNameIdentifier
.	TokenNameDOT
getEffectiveLocalContext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
qName	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
declType	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
registry	TokenNameIdentifier
,	TokenNameCOMMA
Hashtable	TokenNameIdentifier
registry_sub	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
currComp	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
objElem	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
objElem	TokenNameIdentifier
=	TokenNameEQUAL
registry	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fNamespaceGrowth	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
fTolerateDuplicates	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
declType	TokenNameIdentifier
,	TokenNameCOMMA
currComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
registry	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
currComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
registry_sub	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
Element	TokenNameIdentifier
collidingElem	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Element	TokenNameIdentifier
)	TokenNameRPAREN
objElem	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDocumentInfo	TokenNameIdentifier
collidingElemSchema	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
registry_sub	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
collidingElem	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
currComp	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
Element	TokenNameIdentifier
elemParent	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
XSDocumentInfo	TokenNameIdentifier
redefinedSchema	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
boolean	TokenNameboolean
collidedWithRedefine	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
elemParent	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getParent	TokenNameIdentifier
(	TokenNameLPAREN
collidingElem	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_REDEFINE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
redefinedSchema	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
(	TokenNameLPAREN
fRedefine2XSDMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
elemParent	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getParent	TokenNameIdentifier
(	TokenNameLPAREN
currComp	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_REDEFINE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
redefinedSchema	TokenNameIdentifier
=	TokenNameEQUAL
collidingElemSchema	TokenNameIdentifier
;	TokenNameSEMICOLON
collidedWithRedefine	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
redefinedSchema	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
collidingElemSchema	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"sch-props-correct.2"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
qName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
currComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
newName	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
.	TokenNameDOT
lastIndexOf	TokenNameIdentifier
(	TokenNameLPAREN
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
REDEF_IDENTIFIER	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
redefinedSchema	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
currComp	TokenNameIdentifier
.	TokenNameDOT
setAttribute	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_NAME	TokenNameIdentifier
,	TokenNameCOMMA
newName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
registry	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
","	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
,	TokenNameCOMMA
currComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
registry_sub	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
","	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
registry	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
,	TokenNameCOMMA
currComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
registry_sub	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
","	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
,	TokenNameCOMMA
declType	TokenNameIdentifier
,	TokenNameCOMMA
registry	TokenNameIdentifier
,	TokenNameCOMMA
registry_sub	TokenNameIdentifier
,	TokenNameCOMMA
currComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
,	TokenNameCOMMA
declType	TokenNameIdentifier
,	TokenNameCOMMA
registry	TokenNameIdentifier
,	TokenNameCOMMA
registry_sub	TokenNameIdentifier
,	TokenNameCOMMA
currComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
collidedWithRedefine	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
","	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
,	TokenNameCOMMA
declType	TokenNameIdentifier
,	TokenNameCOMMA
registry	TokenNameIdentifier
,	TokenNameCOMMA
registry_sub	TokenNameIdentifier
,	TokenNameCOMMA
currComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
,	TokenNameCOMMA
declType	TokenNameIdentifier
,	TokenNameCOMMA
registry	TokenNameIdentifier
,	TokenNameCOMMA
registry_sub	TokenNameIdentifier
,	TokenNameCOMMA
currComp	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"sch-props-correct.2"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
qName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
currComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
fTolerateDuplicates	TokenNameIdentifier
||	TokenNameOR_OR
fUnparsedRegistriesExt	TokenNameIdentifier
[	TokenNameLBRACKET
declType	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"sch-props-correct.2"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
qName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
currComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fTolerateDuplicates	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fUnparsedRegistriesExt	TokenNameIdentifier
[	TokenNameLBRACKET
declType	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
checkForDuplicateNames	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
qName	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
declType	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
currComp	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
namespaceEnd	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
namespace	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
namespaceEnd	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SchemaGrammar	TokenNameIdentifier
grammar	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
emptyString2Null	TokenNameIdentifier
(	TokenNameLPAREN
namespace	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
grammar	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
obj	TokenNameIdentifier
=	TokenNameEQUAL
getGlobalDeclFromGrammar	TokenNameIdentifier
(	TokenNameLPAREN
grammar	TokenNameIdentifier
,	TokenNameCOMMA
declType	TokenNameIdentifier
,	TokenNameCOMMA
qName	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
namespaceEnd	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
obj	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"sch-props-correct.2"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
qName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
currComp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
renameRedefiningComponents	TokenNameIdentifier
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
currSchema	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
child	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
componentType	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
oldName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_SIMPLETYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Element	TokenNameIdentifier
grandKid	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
grandKid	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.5.a.a"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
String	TokenNameIdentifier
grandKidName	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
grandKid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
grandKidName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ANNOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
grandKid	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
grandKid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
grandKid	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.5.a.a"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
grandKidName	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
grandKid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
grandKidName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_RESTRICTION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.5.a.b"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
grandKidName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
attrs	TokenNameIdentifier
=	TokenNameEQUAL
fAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
checkAttributes	TokenNameIdentifier
(	TokenNameLPAREN
grandKid	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QName	TokenNameIdentifier
derivedBase	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
QName	TokenNameIdentifier
)	TokenNameRPAREN
attrs	TokenNameIdentifier
[	TokenNameLBRACKET
XSAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
ATTIDX_BASE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
derivedBase	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
derivedBase	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
||	TokenNameOR_OR
!	TokenNameNOT
derivedBase	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
oldName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.5.a.c"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
grandKidName	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
""	TokenNameStringLiteral
:	TokenNameCOLON
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
oldName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
derivedBase	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
derivedBase	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
grandKid	TokenNameIdentifier
.	TokenNameDOT
setAttribute	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_BASE	TokenNameIdentifier
,	TokenNameCOMMA
derivedBase	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
+	TokenNamePLUS
":"	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
grandKid	TokenNameIdentifier
.	TokenNameDOT
setAttribute	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_BASE	TokenNameIdentifier
,	TokenNameCOMMA
newName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
returnAttrArray	TokenNameIdentifier
(	TokenNameLPAREN
attrs	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_COMPLEXTYPE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Element	TokenNameIdentifier
grandKid	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
grandKid	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.5.b.a"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
grandKid	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ANNOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
grandKid	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
grandKid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
grandKid	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.5.b.a"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
Element	TokenNameIdentifier
greatGrandKid	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
grandKid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
greatGrandKid	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.5.b.b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
grandKid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
String	TokenNameIdentifier
greatGrandKidName	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
greatGrandKid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
greatGrandKidName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ANNOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
greatGrandKid	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
greatGrandKid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
greatGrandKid	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.5.b.b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
grandKid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
greatGrandKidName	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
greatGrandKid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
greatGrandKidName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_RESTRICTION	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
!	TokenNameNOT
greatGrandKidName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_EXTENSION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.5.b.c"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
greatGrandKidName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
greatGrandKid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
attrs	TokenNameIdentifier
=	TokenNameEQUAL
fAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
checkAttributes	TokenNameIdentifier
(	TokenNameLPAREN
greatGrandKid	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QName	TokenNameIdentifier
derivedBase	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
QName	TokenNameIdentifier
)	TokenNameRPAREN
attrs	TokenNameIdentifier
[	TokenNameLBRACKET
XSAttributeChecker	TokenNameIdentifier
.	TokenNameDOT
ATTIDX_BASE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
derivedBase	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
derivedBase	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
||	TokenNameOR_OR
!	TokenNameNOT
derivedBase	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
oldName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.5.b.d"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
greatGrandKidName	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
""	TokenNameStringLiteral
:	TokenNameCOLON
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
oldName	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
greatGrandKid	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
derivedBase	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
derivedBase	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
greatGrandKid	TokenNameIdentifier
.	TokenNameDOT
setAttribute	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_BASE	TokenNameIdentifier
,	TokenNameCOMMA
derivedBase	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
+	TokenNamePLUS
":"	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
greatGrandKid	TokenNameIdentifier
.	TokenNameDOT
setAttribute	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_BASE	TokenNameIdentifier
,	TokenNameCOMMA
newName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ATTRIBUTEGROUP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
processedBaseName	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
oldName	TokenNameIdentifier
:	TokenNameCOLON
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
oldName	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
attGroupRefsCount	TokenNameIdentifier
=	TokenNameEQUAL
changeRedefineGroup	TokenNameIdentifier
(	TokenNameLPAREN
processedBaseName	TokenNameIdentifier
,	TokenNameCOMMA
componentType	TokenNameIdentifier
,	TokenNameCOMMA
newName	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
attGroupRefsCount	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.7.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
attGroupRefsCount	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
attGroupRefsCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
fRedefinedRestrictedAttributeGroupRegistry	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
processedBaseName	TokenNameIdentifier
,	TokenNameCOMMA
","	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fRedefinedRestrictedAttributeGroupRegistry	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
processedBaseName	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
componentType	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_GROUP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
processedBaseName	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
","	TokenNameStringLiteral
+	TokenNamePLUS
oldName	TokenNameIdentifier
:	TokenNameCOLON
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
oldName	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
groupRefsCount	TokenNameIdentifier
=	TokenNameEQUAL
changeRedefineGroup	TokenNameIdentifier
(	TokenNameLPAREN
processedBaseName	TokenNameIdentifier
,	TokenNameCOMMA
componentType	TokenNameIdentifier
,	TokenNameCOMMA
newName	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
groupRefsCount	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.6.1.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
groupRefsCount	TokenNameIdentifier
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
groupRefsCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
fRedefinedRestrictedGroupRegistry	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
processedBaseName	TokenNameIdentifier
,	TokenNameCOMMA
","	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
fRedefinedRestrictedGroupRegistry	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
processedBaseName	TokenNameIdentifier
,	TokenNameCOMMA
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"Internal-Error"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"could not handle this particular <redefine>; please submit your schemas and instance document in a bug report!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
findQName	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
SchemaNamespaceSupport	TokenNameIdentifier
currNSMap	TokenNameIdentifier
=	TokenNameEQUAL
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fNamespaceSupport	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
colonPtr	TokenNameIdentifier
=	TokenNameEQUAL
name	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
EMPTY_STRING	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
colonPtr	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
prefix	TokenNameIdentifier
=	TokenNameEQUAL
name	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
colonPtr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
uri	TokenNameIdentifier
=	TokenNameEQUAL
currNSMap	TokenNameIdentifier
.	TokenNameDOT
getURI	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
localpart	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
colonPtr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
name	TokenNameIdentifier
:	TokenNameCOLON
name	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
colonPtr	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
prefix	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
EMPTY_STRING	TokenNameIdentifier
&&	TokenNameAND_AND
uri	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fIsChameleonSchema	TokenNameIdentifier
)	TokenNameRPAREN
uri	TokenNameIdentifier
=	TokenNameEQUAL
schemaDoc	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
uri	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
","	TokenNameStringLiteral
+	TokenNamePLUS
localpart	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
uri	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
localpart	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
changeRedefineGroup	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
originalQName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
elementSought	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
newName	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
curr	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
result	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Element	TokenNameIdentifier
child	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
curr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
child	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
child	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
name	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
elementSought	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
result	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
changeRedefineGroup	TokenNameIdentifier
(	TokenNameLPAREN
originalQName	TokenNameIdentifier
,	TokenNameCOMMA
elementSought	TokenNameIdentifier
,	TokenNameCOMMA
newName	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
{	TokenNameLBRACE
String	TokenNameIdentifier
ref	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
.	TokenNameDOT
getAttribute	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_REF	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ref	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
processedRef	TokenNameIdentifier
=	TokenNameEQUAL
findQName	TokenNameIdentifier
(	TokenNameLPAREN
ref	TokenNameIdentifier
,	TokenNameCOMMA
schemaDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
originalQName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
processedRef	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
EMPTY_STRING	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
colonptr	TokenNameIdentifier
=	TokenNameEQUAL
ref	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
":"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
colonptr	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
prefix	TokenNameIdentifier
=	TokenNameEQUAL
ref	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
colonptr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
child	TokenNameIdentifier
.	TokenNameDOT
setAttribute	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_REF	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
":"	TokenNameStringLiteral
+	TokenNamePLUS
newName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
child	TokenNameIdentifier
.	TokenNameDOT
setAttribute	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_REF	TokenNameIdentifier
,	TokenNameCOMMA
newName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
elementSought	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_GROUP	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
minOccurs	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
.	TokenNameDOT
getAttribute	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_MINOCCURS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
maxOccurs	TokenNameIdentifier
=	TokenNameEQUAL
child	TokenNameIdentifier
.	TokenNameDOT
getAttribute	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ATT_MAXOCCURS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
(	TokenNameLPAREN
maxOccurs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
maxOccurs	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"1"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
minOccurs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
minOccurs	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"1"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
"src-redefine.6.1.2"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
ref	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
XSDocumentInfo	TokenNameIdentifier
findXSDocumentForDecl	TokenNameIdentifier
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
currSchema	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
decl	TokenNameIdentifier
,	TokenNameCOMMA
XSDocumentInfo	TokenNameIdentifier
decl_Doc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG_NODE_POOL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"DOCUMENT NS:"	TokenNameStringLiteral
+	TokenNamePLUS
currSchema	TokenNameIdentifier
.	TokenNameDOT
fTargetNamespace	TokenNameIdentifier
+	TokenNamePLUS
" hashcode:"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
Object	TokenNameIdentifier
)	TokenNameRPAREN
currSchema	TokenNameIdentifier
.	TokenNameDOT
fSchemaElement	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Object	TokenNameIdentifier
temp	TokenNameIdentifier
=	TokenNameEQUAL
decl_Doc	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
temp	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XSDocumentInfo	TokenNameIdentifier
declDocInfo	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
temp	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
declDocInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
nonAnnotationContent	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
elem	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
Element	TokenNameIdentifier
child	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getFirstChildElement	TokenNameIdentifier
(	TokenNameLPAREN
elem	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
child	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
child	TokenNameIdentifier
=	TokenNameEQUAL
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getNextSiblingElement	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
ELT_ANNOTATION	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
setSchemasVisible	TokenNameIdentifier
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
startSchema	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
isHidden	TokenNameIdentifier
(	TokenNameLPAREN
startSchema	TokenNameIdentifier
.	TokenNameDOT
fSchemaElement	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
setVisible	TokenNameIdentifier
(	TokenNameLPAREN
startSchema	TokenNameIdentifier
.	TokenNameDOT
fSchemaElement	TokenNameIdentifier
,	TokenNameCOMMA
fHiddenNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
dependingSchemas	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Vector	TokenNameIdentifier
)	TokenNameRPAREN
fDependencyMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
startSchema	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
dependingSchemas	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
setSchemasVisible	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
XSDocumentInfo	TokenNameIdentifier
)	TokenNameRPAREN
dependingSchemas	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
SimpleLocator	TokenNameIdentifier
xl	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleLocator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
SimpleLocator	TokenNameIdentifier
element2Locator	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
e	TokenNameIdentifier
instanceof	TokenNameinstanceof
ElementImpl	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
SimpleLocator	TokenNameIdentifier
l	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleLocator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
element2Locator	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
,	TokenNameCOMMA
l	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
l	TokenNameIdentifier
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
element2Locator	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
e	TokenNameIdentifier
,	TokenNameCOMMA
SimpleLocator	TokenNameIdentifier
l	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
l	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
e	TokenNameIdentifier
instanceof	TokenNameinstanceof
ElementImpl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ElementImpl	TokenNameIdentifier
ele	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ElementImpl	TokenNameIdentifier
)	TokenNameRPAREN
e	TokenNameIdentifier
;	TokenNameSEMICOLON
Document	TokenNameIdentifier
doc	TokenNameIdentifier
=	TokenNameEQUAL
ele	TokenNameIdentifier
.	TokenNameDOT
getOwnerDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
sid	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
fDoc2SystemId	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
DOMUtil	TokenNameIdentifier
.	TokenNameDOT
getRoot	TokenNameIdentifier
(	TokenNameLPAREN
doc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
line	TokenNameIdentifier
=	TokenNameEQUAL
ele	TokenNameIdentifier
.	TokenNameDOT
getLineNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
column	TokenNameIdentifier
=	TokenNameEQUAL
ele	TokenNameIdentifier
.	TokenNameDOT
getColumnNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
l	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
sid	TokenNameIdentifier
,	TokenNameCOMMA
sid	TokenNameIdentifier
,	TokenNameCOMMA
line	TokenNameIdentifier
,	TokenNameCOMMA
column	TokenNameIdentifier
,	TokenNameCOMMA
ele	TokenNameIdentifier
.	TokenNameDOT
getCharacterOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
args	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
ele	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
args	TokenNameIdentifier
,	TokenNameCOMMA
ele	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
reportSchemaError	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
args	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
ele	TokenNameIdentifier
,	TokenNameCOMMA
Exception	TokenNameIdentifier
exception	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
element2Locator	TokenNameIdentifier
(	TokenNameLPAREN
ele	TokenNameIdentifier
,	TokenNameCOMMA
xl	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fErrorReporter	TokenNameIdentifier
.	TokenNameDOT
reportError	TokenNameIdentifier
(	TokenNameLPAREN
xl	TokenNameIdentifier
,	TokenNameCOMMA
XSMessageFormatter	TokenNameIdentifier
.	TokenNameDOT
SCHEMA_DOMAIN	TokenNameIdentifier
,	TokenNameCOMMA
key	TokenNameIdentifier
,	TokenNameCOMMA
args	TokenNameIdentifier
,	TokenNameCOMMA
XMLErrorReporter	TokenNameIdentifier
.	TokenNameDOT
SEVERITY_ERROR	TokenNameIdentifier
,	TokenNameCOMMA
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fErrorReporter	TokenNameIdentifier
.	TokenNameDOT
reportError	TokenNameIdentifier
(	TokenNameLPAREN
XSMessageFormatter	TokenNameIdentifier
.	TokenNameDOT
SCHEMA_DOMAIN	TokenNameIdentifier
,	TokenNameCOMMA
key	TokenNameIdentifier
,	TokenNameCOMMA
args	TokenNameIdentifier
,	TokenNameCOMMA
XMLErrorReporter	TokenNameIdentifier
.	TokenNameDOT
SEVERITY_ERROR	TokenNameIdentifier
,	TokenNameCOMMA
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
reportSchemaWarning	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
args	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
ele	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
reportSchemaWarning	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
args	TokenNameIdentifier
,	TokenNameCOMMA
ele	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
reportSchemaWarning	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
args	TokenNameIdentifier
,	TokenNameCOMMA
Element	TokenNameIdentifier
ele	TokenNameIdentifier
,	TokenNameCOMMA
Exception	TokenNameIdentifier
exception	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
element2Locator	TokenNameIdentifier
(	TokenNameLPAREN
ele	TokenNameIdentifier
,	TokenNameCOMMA
xl	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fErrorReporter	TokenNameIdentifier
.	TokenNameDOT
reportError	TokenNameIdentifier
(	TokenNameLPAREN
xl	TokenNameIdentifier
,	TokenNameCOMMA
XSMessageFormatter	TokenNameIdentifier
.	TokenNameDOT
SCHEMA_DOMAIN	TokenNameIdentifier
,	TokenNameCOMMA
key	TokenNameIdentifier
,	TokenNameCOMMA
args	TokenNameIdentifier
,	TokenNameCOMMA
XMLErrorReporter	TokenNameIdentifier
.	TokenNameDOT
SEVERITY_WARNING	TokenNameIdentifier
,	TokenNameCOMMA
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fErrorReporter	TokenNameIdentifier
.	TokenNameDOT
reportError	TokenNameIdentifier
(	TokenNameLPAREN
XSMessageFormatter	TokenNameIdentifier
.	TokenNameDOT
SCHEMA_DOMAIN	TokenNameIdentifier
,	TokenNameCOMMA
key	TokenNameIdentifier
,	TokenNameCOMMA
args	TokenNameIdentifier
,	TokenNameCOMMA
XMLErrorReporter	TokenNameIdentifier
.	TokenNameDOT
SEVERITY_WARNING	TokenNameIdentifier
,	TokenNameCOMMA
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
XSAnnotationGrammarPool	TokenNameIdentifier
implements	TokenNameimplements
XMLGrammarPool	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
XSGrammarBucket	TokenNameIdentifier
fGrammarBucket	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Grammar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fInitialGrammarSet	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Grammar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
retrieveInitialGrammarSet	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
grammarType	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
grammarType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XMLGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
XML_SCHEMA	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fInitialGrammarSet	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fGrammarBucket	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fInitialGrammarSet	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Grammar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
.	TokenNameDOT
Schema4Annotations	TokenNameIdentifier
.	TokenNameDOT
INSTANCE	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
SchemaGrammar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
schemaGrammars	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
schemaGrammars	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
URI_SCHEMAFORSCHEMA	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
schemaGrammars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fInitialGrammarSet	TokenNameIdentifier
=	TokenNameEQUAL
schemaGrammars	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
fInitialGrammarSet	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
Grammar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
grammars	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Grammar	TokenNameIdentifier
[	TokenNameLBRACKET
schemaGrammars	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
schemaGrammars	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
grammars	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
schemaGrammars	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
grammars	TokenNameIdentifier
[	TokenNameLBRACKET
grammars	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
SchemaGrammar	TokenNameIdentifier
.	TokenNameDOT
Schema4Annotations	TokenNameIdentifier
.	TokenNameDOT
INSTANCE	TokenNameIdentifier
;	TokenNameSEMICOLON
fInitialGrammarSet	TokenNameIdentifier
=	TokenNameEQUAL
grammars	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
fInitialGrammarSet	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
Grammar	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
cacheGrammars	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
grammarType	TokenNameIdentifier
,	TokenNameCOMMA
Grammar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
grammars	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
Grammar	TokenNameIdentifier
retrieveGrammar	TokenNameIdentifier
(	TokenNameLPAREN
XMLGrammarDescription	TokenNameIdentifier
desc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
desc	TokenNameIdentifier
.	TokenNameDOT
getGrammarType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XMLGrammarDescription	TokenNameIdentifier
.	TokenNameDOT
XML_SCHEMA	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
tns	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
XMLSchemaDescription	TokenNameIdentifier
)	TokenNameRPAREN
desc	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getTargetNamespace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fGrammarBucket	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
Grammar	TokenNameIdentifier
grammar	TokenNameIdentifier
=	TokenNameEQUAL
fGrammarBucket	TokenNameIdentifier
.	TokenNameDOT
getGrammar	TokenNameIdentifier
(	TokenNameLPAREN
tns	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
grammar	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
grammar	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
SchemaSymbols	TokenNameIdentifier
.	TokenNameDOT
URI_SCHEMAFORSCHEMA	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
tns	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
SchemaGrammar	TokenNameIdentifier
.	TokenNameDOT
Schema4Annotations	TokenNameIdentifier
.	TokenNameDOT
INSTANCE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
refreshGrammars	TokenNameIdentifier
(	TokenNameLPAREN
XSGrammarBucket	TokenNameIdentifier
gBucket	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fGrammarBucket	TokenNameIdentifier
=	TokenNameEQUAL
gBucket	TokenNameIdentifier
;	TokenNameSEMICOLON
fInitialGrammarSet	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
lockPool	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
unlockPool	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
XSDKey	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
systemId	TokenNameIdentifier
;	TokenNameSEMICOLON
short	TokenNameshort
referType	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
referNS	TokenNameIdentifier
;	TokenNameSEMICOLON
XSDKey	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
systemId	TokenNameIdentifier
,	TokenNameCOMMA
short	TokenNameshort
referType	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
referNS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
systemId	TokenNameIdentifier
=	TokenNameEQUAL
systemId	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
referType	TokenNameIdentifier
=	TokenNameEQUAL
referType	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
referNS	TokenNameIdentifier
=	TokenNameEQUAL
referNS	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
referNS	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
referNS	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
equals	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
obj	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
obj	TokenNameIdentifier
instanceof	TokenNameinstanceof
XSDKey	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
XSDKey	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
XSDKey	TokenNameIdentifier
)	TokenNameRPAREN
obj	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
referNS	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
key	TokenNameIdentifier
.	TokenNameDOT
referNS	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
systemId	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
!	TokenNameNOT
systemId	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
systemId	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
SAX2XNIUtil	TokenNameIdentifier
extends	TokenNameextends
ErrorHandlerWrapper	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
XMLParseException	TokenNameIdentifier
createXMLParseException0	TokenNameIdentifier
(	TokenNameLPAREN
SAXParseException	TokenNameIdentifier
exception	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
createXMLParseException	TokenNameIdentifier
(	TokenNameLPAREN
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
XNIException	TokenNameIdentifier
createXNIException0	TokenNameIdentifier
(	TokenNameLPAREN
SAXException	TokenNameIdentifier
exception	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
createXNIException	TokenNameIdentifier
(	TokenNameLPAREN
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setGenerateSyntheticAnnotations	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
state	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fSchemaParser	TokenNameIdentifier
.	TokenNameDOT
setFeature	TokenNameIdentifier
(	TokenNameLPAREN
GENERATE_SYNTHETIC_ANNOTATIONS	TokenNameIdentifier
,	TokenNameCOMMA
state	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
