package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
EOFException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
msg	TokenNameIdentifier
.	TokenNameDOT
XMLMessageFormatter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
XML11Char	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
XMLChar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
XMLStringBuffer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
QName	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
XMLString	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
XML11EntityScanner	TokenNameIdentifier
extends	TokenNameextends
XMLEntityScanner	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
XML11EntityScanner	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
peekChar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
isExternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'\r'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0x85	TokenNameIntegerLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
c	TokenNameIdentifier
:	TokenNameCOLON
'\n'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
scanChar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
boolean	TokenNameboolean
external	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
external	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
isExternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
lineNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
c	TokenNameIdentifier
;	TokenNameSEMICOLON
load	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
external	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
cc	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cc	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'\n'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
cc	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0x85	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
'\n'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
scanNmtoken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
offset	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11Name	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NameHighSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
char	TokenNamechar
ch2	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XMLChar	TokenNameIdentifier
.	TokenNameDOT
isLowSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch2	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11Name	TokenNameIdentifier
(	TokenNameLPAREN
XMLChar	TokenNameIdentifier
.	TokenNameDOT
supplemental	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
ch2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
length	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
symbol	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
symbol	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
symbol	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
scanName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
offset	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NameStart	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
String	TokenNameIdentifier
symbol	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
symbol	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NameHighSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
char	TokenNamechar
ch2	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XMLChar	TokenNameIdentifier
.	TokenNameDOT
isLowSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch2	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NameStart	TokenNameIdentifier
(	TokenNameLPAREN
XMLChar	TokenNameIdentifier
.	TokenNameDOT
supplemental	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
ch2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch2	TokenNameIdentifier
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
symbol	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
symbol	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
do	TokenNamedo
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11Name	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NameHighSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
char	TokenNamechar
ch2	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XMLChar	TokenNameIdentifier
.	TokenNameDOT
isLowSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch2	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11Name	TokenNameIdentifier
(	TokenNameLPAREN
XMLChar	TokenNameIdentifier
.	TokenNameDOT
supplemental	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
ch2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
length	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
symbol	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
symbol	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
symbol	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
scanNCName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
offset	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NCNameStart	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
String	TokenNameIdentifier
symbol	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
symbol	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NameHighSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
char	TokenNamechar
ch2	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XMLChar	TokenNameIdentifier
.	TokenNameDOT
isLowSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch2	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NCNameStart	TokenNameIdentifier
(	TokenNameLPAREN
XMLChar	TokenNameIdentifier
.	TokenNameDOT
supplemental	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
ch2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch2	TokenNameIdentifier
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
symbol	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
symbol	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
do	TokenNamedo
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NCName	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NameHighSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
char	TokenNamechar
ch2	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XMLChar	TokenNameIdentifier
.	TokenNameDOT
isLowSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch2	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NCName	TokenNameIdentifier
(	TokenNameLPAREN
XMLChar	TokenNameIdentifier
.	TokenNameDOT
supplemental	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
ch2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
length	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
symbol	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
symbol	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
symbol	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
scanQName	TokenNameIdentifier
(	TokenNameLPAREN
QName	TokenNameIdentifier
qname	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
offset	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NCNameStart	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qname	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
name	TokenNameIdentifier
,	TokenNameCOMMA
name	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NameHighSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
char	TokenNamechar
ch2	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XMLChar	TokenNameIdentifier
.	TokenNameDOT
isLowSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch2	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NCNameStart	TokenNameIdentifier
(	TokenNameLPAREN
XMLChar	TokenNameIdentifier
.	TokenNameDOT
supplemental	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
ch2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch2	TokenNameIdentifier
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qname	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
name	TokenNameIdentifier
,	TokenNameCOMMA
name	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
sawIncompleteSurrogatePair	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11Name	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
index	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
index	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NameHighSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
index	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sawIncompleteSurrogatePair	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
char	TokenNamechar
ch2	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XMLChar	TokenNameIdentifier
.	TokenNameDOT
isLowSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
ch2	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11Name	TokenNameIdentifier
(	TokenNameLPAREN
XMLChar	TokenNameIdentifier
.	TokenNameDOT
supplemental	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
ch2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sawIncompleteSurrogatePair	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
index	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
length	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
length	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
localpart	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
rawname	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
prefixLength	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
prefix	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
prefixLength	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
length	TokenNameIdentifier
-	TokenNameMINUS
prefixLength	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
startLocal	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NCNameStart	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
startLocal	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11NameHighSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
startLocal	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
||	TokenNameOR_OR
sawIncompleteSurrogatePair	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fErrorReporter	TokenNameIdentifier
.	TokenNameDOT
reportError	TokenNameIdentifier
(	TokenNameLPAREN
XMLMessageFormatter	TokenNameIdentifier
.	TokenNameDOT
XML_DOMAIN	TokenNameIdentifier
,	TokenNameCOMMA
"IllegalQName"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
XMLErrorReporter	TokenNameIdentifier
.	TokenNameDOT
SEVERITY_FATAL_ERROR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
localpart	TokenNameIdentifier
=	TokenNameEQUAL
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
index	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
localpart	TokenNameIdentifier
=	TokenNameEQUAL
rawname	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
qname	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
,	TokenNameCOMMA
localpart	TokenNameIdentifier
,	TokenNameCOMMA
rawname	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
scanContent	TokenNameIdentifier
(	TokenNameLPAREN
XMLString	TokenNameIdentifier
content	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
load	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
offset	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
newlines	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
external	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
isExternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
external	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
do	TokenNamedo
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
external	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
newlines	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
lineNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
baseCharOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
newlines	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
cc	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
cc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
newlines	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
external	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
newlines	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
lineNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
baseCharOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
newlines	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
<	TokenNameLESS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'\n'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
content	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
external	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
<	TokenNameLESS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11Content	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
<	TokenNameLESS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11InternalEntityContent	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
length	TokenNameIdentifier
-	TokenNameMINUS
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
content	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
external	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
'\n'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
scanLiteral	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
quote	TokenNameIdentifier
,	TokenNameCOMMA
XMLString	TokenNameIdentifier
content	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
load	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
offset	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
newlines	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
external	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
isExternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
external	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
do	TokenNamedo
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
external	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
newlines	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
lineNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
baseCharOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
newlines	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
cc	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
cc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
newlines	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
external	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
newlines	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
lineNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
baseCharOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
newlines	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
<	TokenNameLESS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'\n'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
content	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
external	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
<	TokenNameLESS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
quote	TokenNameIdentifier
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'%'	TokenNameCharacterLiteral
||	TokenNameOR_OR
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11Content	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
<	TokenNameLESS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
quote	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
literal	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'%'	TokenNameCharacterLiteral
||	TokenNameOR_OR
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11InternalEntityContent	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
length	TokenNameIdentifier
-	TokenNameMINUS
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
content	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
quote	TokenNameIdentifier
&&	TokenNameAND_AND
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
literal	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
scanData	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
delimiter	TokenNameIdentifier
,	TokenNameCOMMA
XMLStringBuffer	TokenNameIdentifier
buffer	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
boolean	TokenNameboolean
done	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
delimLen	TokenNameIdentifier
=	TokenNameEQUAL
delimiter	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
charAt0	TokenNameIdentifier
=	TokenNameEQUAL
delimiter	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
external	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
isExternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
bNextEntity	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
delimLen	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
!	TokenNameNOT
bNextEntity	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bNextEntity	TokenNameIdentifier
=	TokenNameEQUAL
load	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
delimLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
baseCharOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
;	TokenNameSEMICOLON
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
offset	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
newlines	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
external	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
do	TokenNamedo
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
external	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
newlines	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
lineNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
baseCharOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
newlines	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
cc	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
cc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
newlines	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
external	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
newlines	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
lineNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
baseCharOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
=	TokenNameEQUAL
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
newlines	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
<	TokenNameLESS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'\n'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
external	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
OUTER	TokenNameIdentifier
:	TokenNameCOLON
while	TokenNamewhile
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
<	TokenNameLESS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
charAt0	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
delimOffset	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
delimLen	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
OUTER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
delimiter	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
delimOffset	TokenNameIdentifier
+	TokenNamePLUS
delimLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
done	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11ValidLiteral	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
length	TokenNameIdentifier
-	TokenNameMINUS
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
OUTER	TokenNameIdentifier
:	TokenNameCOLON
while	TokenNamewhile
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
<	TokenNameLESS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
charAt0	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
delimOffset	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
delimLen	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
OUTER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
delimiter	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
delimOffset	TokenNameIdentifier
+	TokenNamePLUS
delimLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
done	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11Valid	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
length	TokenNameIdentifier
-	TokenNameMINUS
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
length	TokenNameIdentifier
-	TokenNameMINUS
newlines	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
done	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
length	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
delimLen	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
!	TokenNameNOT
done	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
!	TokenNameNOT
done	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
skipChar	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
cc	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
lineNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
(	TokenNameLPAREN
cc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
||	TokenNameOR_OR
cc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
isExternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
lineNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
cc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
isExternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
cc	TokenNameIdentifier
;	TokenNameSEMICOLON
load	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
ccc	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ccc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
ccc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
lineNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
skipSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
isExternal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11Space	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
do	TokenNamedo
{	TokenNameLBRACE
boolean	TokenNameboolean
entityChanged	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x85	TokenNameIntegerLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2028	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
lineNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
c	TokenNameIdentifier
;	TokenNameSEMICOLON
entityChanged	TokenNameIdentifier
=	TokenNameEQUAL
load	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
entityChanged	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
cc	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cc	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'\n'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
cc	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0x85	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
entityChanged	TokenNameIdentifier
)	TokenNameRPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
XML11Char	TokenNameIdentifier
.	TokenNameDOT
isXML11Space	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
XMLChar	TokenNameIdentifier
.	TokenNameDOT
isSpace	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
do	TokenNamedo
{	TokenNameLBRACE
boolean	TokenNameboolean
entityChanged	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
lineNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
c	TokenNameIdentifier
;	TokenNameSEMICOLON
entityChanged	TokenNameIdentifier
=	TokenNameEQUAL
load	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
entityChanged	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
entityChanged	TokenNameIdentifier
)	TokenNameRPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
XMLChar	TokenNameIdentifier
.	TokenNameDOT
isSpace	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
skipString	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
load	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
s	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
count	TokenNameIdentifier
-	TokenNameMINUS
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
ch	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
load	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
startPosition	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
fCurrentEntity	TokenNameIdentifier
.	TokenNameDOT
columnNumber	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
length	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
