package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dv	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
math	TokenNameIdentifier
.	TokenNameDOT
BigDecimal	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
datatype	TokenNameIdentifier
.	TokenNameDOT
DatatypeFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
datatype	TokenNameIdentifier
.	TokenNameDOT
Duration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
datatype	TokenNameIdentifier
.	TokenNameDOT
XMLGregorianCalendar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
Constants	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
jaxp	TokenNameIdentifier
.	TokenNameDOT
datatype	TokenNameIdentifier
.	TokenNameDOT
DatatypeFactoryImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
.	TokenNameDOT
datatypes	TokenNameIdentifier
.	TokenNameDOT
XSDateTime	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
abstract	TokenNameabstract
class	TokenNameclass
AbstractDateTimeDV	TokenNameIdentifier
extends	TokenNameextends
TypeValidator	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
DEBUG	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
YEAR	TokenNameIdentifier
=	TokenNameEQUAL
2000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
MONTH	TokenNameIdentifier
=	TokenNameEQUAL
01	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
DAY	TokenNameIdentifier
=	TokenNameEQUAL
01	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
DatatypeFactory	TokenNameIdentifier
datatypeFactory	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DatatypeFactoryImpl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
short	TokenNameshort
getAllowedFacets	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XSSimpleTypeDecl	TokenNameIdentifier
.	TokenNameDOT
FACET_PATTERN	TokenNameIdentifier
|	TokenNameOR
XSSimpleTypeDecl	TokenNameIdentifier
.	TokenNameDOT
FACET_WHITESPACE	TokenNameIdentifier
|	TokenNameOR
XSSimpleTypeDecl	TokenNameIdentifier
.	TokenNameDOT
FACET_ENUMERATION	TokenNameIdentifier
|	TokenNameOR
XSSimpleTypeDecl	TokenNameIdentifier
.	TokenNameDOT
FACET_MAXINCLUSIVE	TokenNameIdentifier
|	TokenNameOR
XSSimpleTypeDecl	TokenNameIdentifier
.	TokenNameDOT
FACET_MININCLUSIVE	TokenNameIdentifier
|	TokenNameOR
XSSimpleTypeDecl	TokenNameIdentifier
.	TokenNameDOT
FACET_MAXEXCLUSIVE	TokenNameIdentifier
|	TokenNameOR
XSSimpleTypeDecl	TokenNameIdentifier
.	TokenNameDOT
FACET_MINEXCLUSIVE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isIdentical	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
value1	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
value2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
value1	TokenNameIdentifier
instanceof	TokenNameinstanceof
DateTimeData	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
(	TokenNameLPAREN
value2	TokenNameIdentifier
instanceof	TokenNameinstanceof
DateTimeData	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
DateTimeData	TokenNameIdentifier
v1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
)	TokenNameRPAREN
value1	TokenNameIdentifier
;	TokenNameSEMICOLON
DateTimeData	TokenNameIdentifier
v2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
)	TokenNameRPAREN
value2	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
v1	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
v2	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
v1	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
v2	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
v1	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
v2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
compare	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
value1	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
value2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
compareDates	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
)	TokenNameRPAREN
value1	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
)	TokenNameRPAREN
value2	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
short	TokenNameshort
compareDates	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
date1	TokenNameIdentifier
,	TokenNameCOMMA
DateTimeData	TokenNameIdentifier
date2	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
strict	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
date2	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
compareOrder	TokenNameIdentifier
(	TokenNameLPAREN
date1	TokenNameIdentifier
,	TokenNameCOMMA
date2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
short	TokenNameshort
c1	TokenNameIdentifier
,	TokenNameCOMMA
c2	TokenNameIdentifier
;	TokenNameSEMICOLON
DateTimeData	TokenNameIdentifier
tempDate	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DateTimeData	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'Z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
cloneDate	TokenNameIdentifier
(	TokenNameLPAREN
date2	TokenNameIdentifier
,	TokenNameCOMMA
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
=	TokenNameEQUAL
14	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
=	TokenNameEQUAL
'+'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
normalize	TokenNameIdentifier
(	TokenNameLPAREN
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
c1	TokenNameIdentifier
=	TokenNameEQUAL
compareOrder	TokenNameIdentifier
(	TokenNameLPAREN
date1	TokenNameIdentifier
,	TokenNameCOMMA
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LESS_THAN	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
c1	TokenNameIdentifier
;	TokenNameSEMICOLON
cloneDate	TokenNameIdentifier
(	TokenNameLPAREN
date2	TokenNameIdentifier
,	TokenNameCOMMA
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
14	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
=	TokenNameEQUAL
'-'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
normalize	TokenNameIdentifier
(	TokenNameLPAREN
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
c2	TokenNameIdentifier
=	TokenNameEQUAL
compareOrder	TokenNameIdentifier
(	TokenNameLPAREN
date1	TokenNameIdentifier
,	TokenNameCOMMA
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
GREATER_THAN	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
c2	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
date2	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'Z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
cloneDate	TokenNameIdentifier
(	TokenNameLPAREN
date1	TokenNameIdentifier
,	TokenNameCOMMA
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
14	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
=	TokenNameEQUAL
'-'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"tempDate="	TokenNameStringLiteral
+	TokenNamePLUS
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
normalize	TokenNameIdentifier
(	TokenNameLPAREN
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
c1	TokenNameIdentifier
=	TokenNameEQUAL
compareOrder	TokenNameIdentifier
(	TokenNameLPAREN
tempDate	TokenNameIdentifier
,	TokenNameCOMMA
date2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"date="	TokenNameStringLiteral
+	TokenNamePLUS
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
date2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"tempDate="	TokenNameStringLiteral
+	TokenNamePLUS
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
c1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LESS_THAN	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
c1	TokenNameIdentifier
;	TokenNameSEMICOLON
cloneDate	TokenNameIdentifier
(	TokenNameLPAREN
date1	TokenNameIdentifier
,	TokenNameCOMMA
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
=	TokenNameEQUAL
14	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
=	TokenNameEQUAL
'+'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
normalize	TokenNameIdentifier
(	TokenNameLPAREN
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
c2	TokenNameIdentifier
=	TokenNameEQUAL
compareOrder	TokenNameIdentifier
(	TokenNameLPAREN
tempDate	TokenNameIdentifier
,	TokenNameCOMMA
date2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"tempDate="	TokenNameStringLiteral
+	TokenNamePLUS
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
c2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
GREATER_THAN	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
c2	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
short	TokenNameshort
compareOrder	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
date1	TokenNameIdentifier
,	TokenNameCOMMA
DateTimeData	TokenNameIdentifier
date2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
<	TokenNameLESS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
<	TokenNameLESS
date2	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
>	TokenNameGREATER
date2	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
<	TokenNameLESS
date2	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
>	TokenNameGREATER
date2	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
<	TokenNameLESS
date2	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
>	TokenNameGREATER
date2	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
<	TokenNameLESS
date2	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
>	TokenNameGREATER
date2	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
<	TokenNameLESS
date2	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
>	TokenNameGREATER
date2	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
<	TokenNameLESS
date2	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
>	TokenNameGREATER
date2	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
<	TokenNameLESS
date2	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date1	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
>	TokenNameGREATER
date2	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
getTime	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
buffer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
,	TokenNameCOMMA
DateTimeData	TokenNameIdentifier
data	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
RuntimeException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
stop	TokenNameIdentifier
=	TokenNameEQUAL
start	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
=	TokenNameEQUAL
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
stop	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
stop	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Error in parsing time zone"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
start	TokenNameIdentifier
=	TokenNameEQUAL
stop	TokenNameIdentifier
;	TokenNameSEMICOLON
stop	TokenNameIdentifier
=	TokenNameEQUAL
stop	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
=	TokenNameEQUAL
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
stop	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
stop	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Error in parsing time zone"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
sign	TokenNameIdentifier
=	TokenNameEQUAL
findUTCSign	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
start	TokenNameIdentifier
=	TokenNameEQUAL
stop	TokenNameIdentifier
;	TokenNameSEMICOLON
stop	TokenNameIdentifier
=	TokenNameEQUAL
sign	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
end	TokenNameIdentifier
:	TokenNameCOLON
sign	TokenNameIdentifier
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
=	TokenNameEQUAL
parseSecond	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
stop	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sign	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
getTimeZone	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
,	TokenNameCOMMA
sign	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
getDate	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
buffer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
,	TokenNameCOMMA
DateTimeData	TokenNameIdentifier
date	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
RuntimeException	TokenNameIdentifier
{	TokenNameLBRACE
start	TokenNameIdentifier
=	TokenNameEQUAL
getYearMonth	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
,	TokenNameCOMMA
date	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"CCYY-MM must be followed by '-' sign"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
stop	TokenNameIdentifier
=	TokenNameEQUAL
start	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
stop	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
stop	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
getYearMonth	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
buffer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
,	TokenNameCOMMA
DateTimeData	TokenNameIdentifier
date	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
RuntimeException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
start	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
,	TokenNameCOMMA
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Year separator is missing or misplaced"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
-	TokenNameMINUS
start	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
<	TokenNameLESS
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Year must have 'CCYY' format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
>	TokenNameGREATER
4	TokenNameIntegerLiteral
&&	TokenNameAND_AND
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Leading zeros are required if the year value would otherwise have fewer than four digits; otherwise they are forbidden"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
parseIntYear	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"CCYY must be followed by '-' sign"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
start	TokenNameIdentifier
=	TokenNameEQUAL
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
start	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
=	TokenNameEQUAL
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
parseTimeZone	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
buffer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
,	TokenNameCOMMA
DateTimeData	TokenNameIdentifier
date	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
RuntimeException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
start	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isNextCharUTCSign	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Error in month parsing"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
getTimeZone	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
date	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
getTimeZone	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
buffer	TokenNameIdentifier
,	TokenNameCOMMA
DateTimeData	TokenNameIdentifier
data	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
sign	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
RuntimeException	TokenNameIdentifier
{	TokenNameLBRACE
data	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'Z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
end	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
sign	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Error in parsing time zone"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sign	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
(	TokenNameLPAREN
end	TokenNameIdentifier
-	TokenNameMINUS
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
negate	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
stop	TokenNameIdentifier
=	TokenNameEQUAL
++	TokenNamePLUS_PLUS
sign	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
=	TokenNameEQUAL
negate	TokenNameIdentifier
*	TokenNameMULTIPLY
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
sign	TokenNameIdentifier
,	TokenNameCOMMA
stop	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
stop	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Error in parsing time zone"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
data	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
=	TokenNameEQUAL
negate	TokenNameIdentifier
*	TokenNameMULTIPLY
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
stop	TokenNameIdentifier
,	TokenNameCOMMA
stop	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stop	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
!=	TokenNameNOT_EQUAL
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Error in parsing time zone"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
data	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
data	TokenNameIdentifier
.	TokenNameDOT
normalized	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Error in parsing time zone"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"time[hh]="	TokenNameStringLiteral
+	TokenNamePLUS
data	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
+	TokenNamePLUS
" time[mm]="	TokenNameStringLiteral
+	TokenNamePLUS
data	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
buffer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
,	TokenNameCOMMA
char	TokenNamechar
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
start	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
validateDateTime	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
data	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
Constants	TokenNameIdentifier
.	TokenNameDOT
SCHEMA_1_1_SUPPORT	TokenNameIdentifier
&&	TokenNameAND_AND
data	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"The year "0000" is an illegal year value"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
<	TokenNameLESS
1	TokenNameIntegerLiteral
||	TokenNameOR_OR
data	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
>	TokenNameGREATER
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"The month must have values 1 to 12"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
>	TokenNameGREATER
maxDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
data	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
<	TokenNameLESS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"The day must have values 1 to 31"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
>	TokenNameGREATER
23	TokenNameIntegerLiteral
||	TokenNameOR_OR
data	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
24	TokenNameIntegerLiteral
&&	TokenNameAND_AND
data	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
data	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
data	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
>	TokenNameGREATER
maxDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
data	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
>	TokenNameGREATER
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
Constants	TokenNameIdentifier
.	TokenNameDOT
SCHEMA_1_1_SUPPORT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
++	TokenNamePLUS_PLUS
data	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
data	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Hour must have values 0-23, unless 24:00:00"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
>	TokenNameGREATER
59	TokenNameIntegerLiteral
||	TokenNameOR_OR
data	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Minute must have values 0-59"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
60	TokenNameIntegerLiteral
||	TokenNameOR_OR
data	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Second must have values 0-59"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
>	TokenNameGREATER
14	TokenNameIntegerLiteral
||	TokenNameOR_OR
data	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
<	TokenNameLESS
-	TokenNameMINUS
14	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Time zone should have range -14:00 to +14:00"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
14	TokenNameIntegerLiteral
||	TokenNameOR_OR
data	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
14	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
data	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Time zone should have range -14:00 to +14:00"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
>	TokenNameGREATER
59	TokenNameIntegerLiteral
||	TokenNameOR_OR
data	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
<	TokenNameLESS
-	TokenNameMINUS
59	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Minute must have values 0-59"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
findUTCSign	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
buffer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
c	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
start	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'Z'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'+'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
boolean	TokenNameboolean
isNextCharUTCSign	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
buffer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
start	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'Z'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'+'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
buffer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
NumberFormatException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
radix	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
result	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
digit	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
limit	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
multmin	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
/	TokenNameDIVIDE
radix	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
start	TokenNameIdentifier
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
digit	TokenNameIdentifier
=	TokenNameEQUAL
getDigit	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
digit	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
<	TokenNameLESS
multmin	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
radix	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
<	TokenNameLESS
limit	TokenNameIdentifier
+	TokenNamePLUS
digit	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
digit	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
-	TokenNameMINUS
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
parseIntYear	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
buffer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
radix	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
result	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
negative	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
limit	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
multmin	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
digit	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
negative	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
limit	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
limit	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
multmin	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
/	TokenNameDIVIDE
radix	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
digit	TokenNameIdentifier
=	TokenNameEQUAL
getDigit	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
digit	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
<	TokenNameLESS
multmin	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
radix	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
<	TokenNameLESS
limit	TokenNameIdentifier
+	TokenNamePLUS
digit	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
digit	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
negative	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
-	TokenNameMINUS
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
normalize	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
date	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
negate	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"==>date.minute"	TokenNameStringLiteral
+	TokenNamePLUS
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"==>date.timezoneMin"	TokenNameStringLiteral
+	TokenNamePLUS
date	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
temp	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
+	TokenNamePLUS
negate	TokenNameIdentifier
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
carry	TokenNameIdentifier
=	TokenNameEQUAL
fQuotient	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
60	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
=	TokenNameEQUAL
mod	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
60	TokenNameIntegerLiteral
,	TokenNameCOMMA
carry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"==>carry: "	TokenNameStringLiteral
+	TokenNamePLUS
carry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
temp	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
+	TokenNamePLUS
negate	TokenNameIdentifier
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
+	TokenNamePLUS
carry	TokenNameIdentifier
;	TokenNameSEMICOLON
carry	TokenNameIdentifier
=	TokenNameEQUAL
fQuotient	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
=	TokenNameEQUAL
mod	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
carry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"==>date.hour"	TokenNameStringLiteral
+	TokenNamePLUS
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"==>carry: "	TokenNameStringLiteral
+	TokenNamePLUS
carry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
+	TokenNamePLUS
carry	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
temp	TokenNameIdentifier
=	TokenNameEQUAL
maxDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
<	TokenNameLESS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
+	TokenNamePLUS
maxDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
carry	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
>	TokenNameGREATER
temp	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
-	TokenNameMINUS
temp	TokenNameIdentifier
;	TokenNameSEMICOLON
carry	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
temp	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
+	TokenNamePLUS
carry	TokenNameIdentifier
;	TokenNameSEMICOLON
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
=	TokenNameEQUAL
modulo	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
+	TokenNamePLUS
fQuotient	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
!	TokenNameNOT
Constants	TokenNameIdentifier
.	TokenNameDOT
SCHEMA_1_1_SUPPORT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
date	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
date	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
=	TokenNameEQUAL
'Z'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
saveUnnormalized	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
date	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
date	TokenNameIdentifier
.	TokenNameDOT
unNormYear	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
;	TokenNameSEMICOLON
date	TokenNameIdentifier
.	TokenNameDOT
unNormMonth	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
;	TokenNameSEMICOLON
date	TokenNameIdentifier
.	TokenNameDOT
unNormDay	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
;	TokenNameSEMICOLON
date	TokenNameIdentifier
.	TokenNameDOT
unNormHour	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
;	TokenNameSEMICOLON
date	TokenNameIdentifier
.	TokenNameDOT
unNormMinute	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
;	TokenNameSEMICOLON
date	TokenNameIdentifier
.	TokenNameDOT
unNormSecond	TokenNameIdentifier
=	TokenNameEQUAL
date	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
resetDateObj	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
data	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
maxDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
month	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
||	TokenNameOR_OR
month	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
6	TokenNameIntegerLiteral
||	TokenNameOR_OR
month	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
9	TokenNameIntegerLiteral
||	TokenNameOR_OR
month	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
11	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
30	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
month	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
isLeapYear	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
29	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
28	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
31	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
isLeapYear	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
year	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
year	TokenNameIdentifier
%	TokenNameREMAINDER
4	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
(	TokenNameLPAREN
year	TokenNameIdentifier
%	TokenNameREMAINDER
100	TokenNameIntegerLiteral
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
year	TokenNameIdentifier
%	TokenNameREMAINDER
400	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
mod	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
a	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
b	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
quotient	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
a	TokenNameIdentifier
-	TokenNameMINUS
quotient	TokenNameIdentifier
*	TokenNameMULTIPLY
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
fQuotient	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
a	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
b	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
floor	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
a	TokenNameIdentifier
/	TokenNameDIVIDE
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
modulo	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
temp	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
low	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
high	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
a	TokenNameIdentifier
=	TokenNameEQUAL
temp	TokenNameIdentifier
-	TokenNameMINUS
low	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
b	TokenNameIdentifier
=	TokenNameEQUAL
high	TokenNameIdentifier
-	TokenNameMINUS
low	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
mod	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
fQuotient	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
low	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
fQuotient	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
temp	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
low	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
high	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fQuotient	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
-	TokenNameMINUS
low	TokenNameIdentifier
,	TokenNameCOMMA
high	TokenNameIdentifier
-	TokenNameMINUS
low	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
String	TokenNameIdentifier
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
date	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
message	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
25	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
append	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
append	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
append	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'T'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
append	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
append	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
append	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
append	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
date	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
message	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
void	TokenNamevoid
append	TokenNameIdentifier
(	TokenNameLPAREN
StringBuffer	TokenNameIdentifier
message	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
value	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
nch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
value	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
nch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
<	TokenNameLESS
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"000"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
<	TokenNameLESS
100	TokenNameIntegerLiteral
)	TokenNameRPAREN
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"00"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
<	TokenNameLESS
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
<	TokenNameLESS
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
void	TokenNamevoid
append	TokenNameIdentifier
(	TokenNameLPAREN
StringBuffer	TokenNameIdentifier
message	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
value	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
<	TokenNameLESS
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
append2	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
void	TokenNamevoid
append2	TokenNameIdentifier
(	TokenNameLPAREN
StringBuffer	TokenNameIdentifier
message	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
intValue	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
value	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
intValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
intValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
append3	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
append3	TokenNameIdentifier
(	TokenNameLPAREN
StringBuffer	TokenNameIdentifier
message	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
d	TokenNameIdentifier
=	TokenNameEQUAL
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
eIndex	TokenNameIdentifier
=	TokenNameEQUAL
d	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
'E'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
eIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
exp	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
<	TokenNameLESS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
exp	TokenNameIdentifier
=	TokenNameEQUAL
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
,	TokenNameCOMMA
eIndex	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"0."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
exp	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
eIndex	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
end	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
d	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
--	TokenNameMINUS_MINUS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
end	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
d	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
exp	TokenNameIdentifier
=	TokenNameEQUAL
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
,	TokenNameCOMMA
eIndex	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
integerEnd	TokenNameIdentifier
=	TokenNameEQUAL
exp	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
eIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
d	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
integerEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
integerEnd	TokenNameIdentifier
-	TokenNameMINUS
eIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
double	TokenNamedouble
parseSecond	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
buffer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
NumberFormatException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
dot	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
start	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
dot	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>	TokenNameGREATER
'9'	TokenNameCharacterLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
<	TokenNameLESS
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
dot	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
start	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
!=	TokenNameNOT_EQUAL
end	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
start	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
!=	TokenNameNOT_EQUAL
dot	TokenNameIdentifier
||	TokenNameOR_OR
dot	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
Double	TokenNameIdentifier
.	TokenNameDOT
parseDouble	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
cloneDate	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
finalValue	TokenNameIdentifier
,	TokenNameCOMMA
DateTimeData	TokenNameIdentifier
tempDate	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tempDate	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
finalValue	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
=	TokenNameEQUAL
finalValue	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
finalValue	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
=	TokenNameEQUAL
finalValue	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
=	TokenNameEQUAL
finalValue	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
=	TokenNameEQUAL
finalValue	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
=	TokenNameEQUAL
finalValue	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
=	TokenNameEQUAL
finalValue	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
;	TokenNameSEMICOLON
tempDate	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
=	TokenNameEQUAL
finalValue	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
DateTimeData	TokenNameIdentifier
implements	TokenNameimplements
XSDateTime	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
year	TokenNameIdentifier
,	TokenNameCOMMA
month	TokenNameIdentifier
,	TokenNameCOMMA
day	TokenNameIdentifier
,	TokenNameCOMMA
hour	TokenNameIdentifier
,	TokenNameCOMMA
minute	TokenNameIdentifier
,	TokenNameCOMMA
utc	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
second	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
timezoneHr	TokenNameIdentifier
,	TokenNameCOMMA
timezoneMin	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
originalValue	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
normalized	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
int	TokenNameint
unNormYear	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
unNormMonth	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
unNormDay	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
unNormHour	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
unNormMinute	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
unNormSecond	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
position	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
AbstractDateTimeDV	TokenNameIdentifier
type	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
canonical	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
DateTimeData	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
originalValue	TokenNameIdentifier
,	TokenNameCOMMA
AbstractDateTimeDV	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
originalValue	TokenNameIdentifier
=	TokenNameEQUAL
originalValue	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DateTimeData	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
day	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
hour	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minute	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
second	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
utc	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
originalValue	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
normalized	TokenNameIdentifier
,	TokenNameCOMMA
AbstractDateTimeDV	TokenNameIdentifier
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
year	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
month	TokenNameIdentifier
=	TokenNameEQUAL
month	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
day	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
hour	TokenNameIdentifier
=	TokenNameEQUAL
hour	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
minute	TokenNameIdentifier
=	TokenNameEQUAL
minute	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
second	TokenNameIdentifier
=	TokenNameEQUAL
second	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
utc	TokenNameIdentifier
=	TokenNameEQUAL
utc	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
originalValue	TokenNameIdentifier
=	TokenNameEQUAL
originalValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
equals	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
obj	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
obj	TokenNameIdentifier
instanceof	TokenNameinstanceof
DateTimeData	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
type	TokenNameIdentifier
.	TokenNameDOT
compareDates	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
)	TokenNameRPAREN
obj	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
canonical	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
canonical	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
.	TokenNameDOT
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
canonical	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getYears	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
DurationDV	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
normalized	TokenNameIdentifier
?	TokenNameQUESTION
year	TokenNameIdentifier
:	TokenNameCOLON
unNormYear	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getMonths	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
DurationDV	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
year	TokenNameIdentifier
*	TokenNameMULTIPLY
12	TokenNameIntegerLiteral
+	TokenNamePLUS
month	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
normalized	TokenNameIdentifier
?	TokenNameQUESTION
month	TokenNameIdentifier
:	TokenNameCOLON
unNormMonth	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getDays	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
DurationDV	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
normalized	TokenNameIdentifier
?	TokenNameQUESTION
day	TokenNameIdentifier
:	TokenNameCOLON
unNormDay	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getHours	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
DurationDV	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
normalized	TokenNameIdentifier
?	TokenNameQUESTION
hour	TokenNameIdentifier
:	TokenNameCOLON
unNormHour	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getMinutes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
DurationDV	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
normalized	TokenNameIdentifier
?	TokenNameQUESTION
minute	TokenNameIdentifier
:	TokenNameCOLON
unNormMinute	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
getSeconds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
instanceof	TokenNameinstanceof
DurationDV	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
day	TokenNameIdentifier
*	TokenNameMULTIPLY
24	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
60	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
60	TokenNameIntegerLiteral
+	TokenNamePLUS
hour	TokenNameIdentifier
*	TokenNameMULTIPLY
60	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
60	TokenNameIntegerLiteral
+	TokenNamePLUS
minute	TokenNameIdentifier
*	TokenNameMULTIPLY
60	TokenNameIntegerLiteral
+	TokenNamePLUS
second	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
normalized	TokenNameIdentifier
?	TokenNameQUESTION
second	TokenNameIdentifier
:	TokenNameCOLON
unNormSecond	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
hasTimeZone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
utc	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getTimeZoneHours	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
timezoneHr	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getTimeZoneMinutes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
timezoneMin	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getLexicalValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
originalValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XSDateTime	TokenNameIdentifier
normalize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
normalized	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
DateTimeData	TokenNameIdentifier
dt	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dt	TokenNameIdentifier
.	TokenNameDOT
normalized	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
dt	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
this	TokenNamethis
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isNormalized	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
normalized	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
DateTimeData	TokenNameIdentifier
dt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DateTimeData	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
year	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
month	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
day	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
hour	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
minute	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
second	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
utc	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
originalValue	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
normalized	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dt	TokenNameIdentifier
.	TokenNameDOT
canonical	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
canonical	TokenNameIdentifier
;	TokenNameSEMICOLON
dt	TokenNameIdentifier
.	TokenNameDOT
position	TokenNameIdentifier
=	TokenNameEQUAL
position	TokenNameIdentifier
;	TokenNameSEMICOLON
dt	TokenNameIdentifier
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
timezoneHr	TokenNameIdentifier
;	TokenNameSEMICOLON
dt	TokenNameIdentifier
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
timezoneMin	TokenNameIdentifier
;	TokenNameSEMICOLON
dt	TokenNameIdentifier
.	TokenNameDOT
unNormYear	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
unNormYear	TokenNameIdentifier
;	TokenNameSEMICOLON
dt	TokenNameIdentifier
.	TokenNameDOT
unNormMonth	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
unNormMonth	TokenNameIdentifier
;	TokenNameSEMICOLON
dt	TokenNameIdentifier
.	TokenNameDOT
unNormDay	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
unNormDay	TokenNameIdentifier
;	TokenNameSEMICOLON
dt	TokenNameIdentifier
.	TokenNameDOT
unNormHour	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
unNormHour	TokenNameIdentifier
;	TokenNameSEMICOLON
dt	TokenNameIdentifier
.	TokenNameDOT
unNormMinute	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
unNormMinute	TokenNameIdentifier
;	TokenNameSEMICOLON
dt	TokenNameIdentifier
.	TokenNameDOT
unNormSecond	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
unNormSecond	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
dt	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XMLGregorianCalendar	TokenNameIdentifier
getXMLGregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
type	TokenNameIdentifier
.	TokenNameDOT
getXMLGregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Duration	TokenNameIdentifier
getDuration	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
type	TokenNameIdentifier
.	TokenNameDOT
getDuration	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
XMLGregorianCalendar	TokenNameIdentifier
getXMLGregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
data	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Duration	TokenNameIdentifier
getDuration	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
data	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
BigDecimal	TokenNameIdentifier
getFractionalSecondsAsBigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
data	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
StringBuffer	TokenNameIdentifier
buf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
append3	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
.	TokenNameDOT
unNormSecond	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
buf	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
value	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
BigDecimal	TokenNameIdentifier
_val	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
_val	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
BigDecimal	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
_val	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
