package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dv	TokenNameIdentifier
.	TokenNameDOT
xs	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
math	TokenNameIdentifier
.	TokenNameDOT
BigDecimal	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
math	TokenNameIdentifier
.	TokenNameDOT
BigInteger	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
datatype	TokenNameIdentifier
.	TokenNameDOT
DatatypeConstants	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
datatype	TokenNameIdentifier
.	TokenNameDOT
Duration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dv	TokenNameIdentifier
.	TokenNameDOT
InvalidDatatypeValueException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
dv	TokenNameIdentifier
.	TokenNameDOT
ValidationContext	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
DurationDV	TokenNameIdentifier
extends	TokenNameextends
AbstractDateTimeDV	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DURATION_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
YEARMONTHDURATION_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DAYTIMEDURATION_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
DateTimeData	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DATETIMES	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
new	TokenNamenew
DateTimeData	TokenNameIdentifier
(	TokenNameLPAREN
1696	TokenNameIntegerLiteral
,	TokenNameCOMMA
9	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
'Z'	TokenNameCharacterLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
DateTimeData	TokenNameIdentifier
(	TokenNameLPAREN
1697	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
'Z'	TokenNameCharacterLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
DateTimeData	TokenNameIdentifier
(	TokenNameLPAREN
1903	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
'Z'	TokenNameCharacterLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
DateTimeData	TokenNameIdentifier
(	TokenNameLPAREN
1903	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
'Z'	TokenNameCharacterLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
Object	TokenNameIdentifier
getActualValue	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
content	TokenNameIdentifier
,	TokenNameCOMMA
ValidationContext	TokenNameIdentifier
context	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
InvalidDatatypeValueException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
parse	TokenNameIdentifier
(	TokenNameLPAREN
content	TokenNameIdentifier
,	TokenNameCOMMA
DURATION_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
InvalidDatatypeValueException	TokenNameIdentifier
(	TokenNameLPAREN
"cvc-datatype-valid.1.2.1"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
content	TokenNameIdentifier
,	TokenNameCOMMA
"duration"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
DateTimeData	TokenNameIdentifier
parse	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
str	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
durationType	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
SchemaDateTimeException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DateTimeData	TokenNameIdentifier
date	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DateTimeData	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
start	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'P'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
SchemaDateTimeException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
date	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
str	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
'P'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
SchemaDateTimeException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
negate	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
negate	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
designator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
endDate	TokenNameIdentifier
=	TokenNameEQUAL
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
,	TokenNameCOMMA
'T'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
endDate	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
endDate	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
durationType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
YEARMONTHDURATION_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
SchemaDateTimeException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
'Y'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
end	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
durationType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DAYTIMEDURATION_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
SchemaDateTimeException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
negate	TokenNameIdentifier
*	TokenNameMULTIPLY
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
start	TokenNameIdentifier
=	TokenNameEQUAL
end	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
designator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
end	TokenNameIdentifier
=	TokenNameEQUAL
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
'M'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
end	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
durationType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DAYTIMEDURATION_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
SchemaDateTimeException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
=	TokenNameEQUAL
negate	TokenNameIdentifier
*	TokenNameMULTIPLY
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
start	TokenNameIdentifier
=	TokenNameEQUAL
end	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
designator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
end	TokenNameIdentifier
=	TokenNameEQUAL
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
'D'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
end	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
durationType	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
YEARMONTHDURATION_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
SchemaDateTimeException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
negate	TokenNameIdentifier
*	TokenNameMULTIPLY
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
start	TokenNameIdentifier
=	TokenNameEQUAL
end	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
designator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
len	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endDate	TokenNameIdentifier
&&	TokenNameAND_AND
start	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
len	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
SchemaDateTimeException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
len	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
endDate	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
end	TokenNameIdentifier
=	TokenNameEQUAL
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
++	TokenNamePLUS_PLUS
start	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
,	TokenNameCOMMA
'H'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
end	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
=	TokenNameEQUAL
negate	TokenNameIdentifier
*	TokenNameMULTIPLY
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
start	TokenNameIdentifier
=	TokenNameEQUAL
end	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
designator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
end	TokenNameIdentifier
=	TokenNameEQUAL
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
,	TokenNameCOMMA
'M'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
end	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
=	TokenNameEQUAL
negate	TokenNameIdentifier
*	TokenNameMULTIPLY
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
start	TokenNameIdentifier
=	TokenNameEQUAL
end	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
designator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
end	TokenNameIdentifier
=	TokenNameEQUAL
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
,	TokenNameCOMMA
'S'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
end	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
date	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
=	TokenNameEQUAL
negate	TokenNameIdentifier
*	TokenNameMULTIPLY
parseSecond	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
start	TokenNameIdentifier
=	TokenNameEQUAL
end	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
designator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
start	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
len	TokenNameIdentifier
||	TokenNameOR_OR
str	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
--	TokenNameMINUS_MINUS
start	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'T'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
SchemaDateTimeException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
designator	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
SchemaDateTimeException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
date	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
short	TokenNameshort
compareDates	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
date1	TokenNameIdentifier
,	TokenNameCOMMA
DateTimeData	TokenNameIdentifier
date2	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
strict	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
short	TokenNameshort
resultA	TokenNameIdentifier
,	TokenNameCOMMA
resultB	TokenNameIdentifier
=	TokenNameEQUAL
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
resultA	TokenNameIdentifier
=	TokenNameEQUAL
compareOrder	TokenNameIdentifier
(	TokenNameLPAREN
date1	TokenNameIdentifier
,	TokenNameCOMMA
date2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
resultA	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
DateTimeData	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DateTimeData	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
result	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
DateTimeData	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
DateTimeData	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DateTimeData	TokenNameIdentifier
tempA	TokenNameIdentifier
=	TokenNameEQUAL
addDuration	TokenNameIdentifier
(	TokenNameLPAREN
date1	TokenNameIdentifier
,	TokenNameCOMMA
DATETIMES	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
result	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DateTimeData	TokenNameIdentifier
tempB	TokenNameIdentifier
=	TokenNameEQUAL
addDuration	TokenNameIdentifier
(	TokenNameLPAREN
date2	TokenNameIdentifier
,	TokenNameCOMMA
DATETIMES	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
result	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
resultA	TokenNameIdentifier
=	TokenNameEQUAL
compareOrder	TokenNameIdentifier
(	TokenNameLPAREN
tempA	TokenNameIdentifier
,	TokenNameCOMMA
tempB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
resultA	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
INDETERMINATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tempA	TokenNameIdentifier
=	TokenNameEQUAL
addDuration	TokenNameIdentifier
(	TokenNameLPAREN
date1	TokenNameIdentifier
,	TokenNameCOMMA
DATETIMES	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
result	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempB	TokenNameIdentifier
=	TokenNameEQUAL
addDuration	TokenNameIdentifier
(	TokenNameLPAREN
date2	TokenNameIdentifier
,	TokenNameCOMMA
DATETIMES	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
result	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
resultB	TokenNameIdentifier
=	TokenNameEQUAL
compareOrder	TokenNameIdentifier
(	TokenNameLPAREN
tempA	TokenNameIdentifier
,	TokenNameCOMMA
tempB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
resultA	TokenNameIdentifier
=	TokenNameEQUAL
compareResults	TokenNameIdentifier
(	TokenNameLPAREN
resultA	TokenNameIdentifier
,	TokenNameCOMMA
resultB	TokenNameIdentifier
,	TokenNameCOMMA
strict	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
resultA	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
INDETERMINATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tempA	TokenNameIdentifier
=	TokenNameEQUAL
addDuration	TokenNameIdentifier
(	TokenNameLPAREN
date1	TokenNameIdentifier
,	TokenNameCOMMA
DATETIMES	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
result	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempB	TokenNameIdentifier
=	TokenNameEQUAL
addDuration	TokenNameIdentifier
(	TokenNameLPAREN
date2	TokenNameIdentifier
,	TokenNameCOMMA
DATETIMES	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
result	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
resultB	TokenNameIdentifier
=	TokenNameEQUAL
compareOrder	TokenNameIdentifier
(	TokenNameLPAREN
tempA	TokenNameIdentifier
,	TokenNameCOMMA
tempB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
resultA	TokenNameIdentifier
=	TokenNameEQUAL
compareResults	TokenNameIdentifier
(	TokenNameLPAREN
resultA	TokenNameIdentifier
,	TokenNameCOMMA
resultB	TokenNameIdentifier
,	TokenNameCOMMA
strict	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
resultA	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
INDETERMINATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tempA	TokenNameIdentifier
=	TokenNameEQUAL
addDuration	TokenNameIdentifier
(	TokenNameLPAREN
date1	TokenNameIdentifier
,	TokenNameCOMMA
DATETIMES	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
result	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempB	TokenNameIdentifier
=	TokenNameEQUAL
addDuration	TokenNameIdentifier
(	TokenNameLPAREN
date2	TokenNameIdentifier
,	TokenNameCOMMA
DATETIMES	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
result	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
resultB	TokenNameIdentifier
=	TokenNameEQUAL
compareOrder	TokenNameIdentifier
(	TokenNameLPAREN
tempA	TokenNameIdentifier
,	TokenNameCOMMA
tempB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
resultA	TokenNameIdentifier
=	TokenNameEQUAL
compareResults	TokenNameIdentifier
(	TokenNameLPAREN
resultA	TokenNameIdentifier
,	TokenNameCOMMA
resultB	TokenNameIdentifier
,	TokenNameCOMMA
strict	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
resultA	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
short	TokenNameshort
compareResults	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
resultA	TokenNameIdentifier
,	TokenNameCOMMA
short	TokenNameshort
resultB	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
strict	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
resultB	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
INDETERMINATE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
resultA	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
resultB	TokenNameIdentifier
&&	TokenNameAND_AND
strict	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
resultA	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
resultB	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
strict	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
resultA	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
resultB	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
INDETERMINATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
resultA	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
resultA	TokenNameIdentifier
:	TokenNameCOLON
resultB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
resultA	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
DateTimeData	TokenNameIdentifier
addDuration	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
date	TokenNameIdentifier
,	TokenNameCOMMA
DateTimeData	TokenNameIdentifier
addto	TokenNameIdentifier
,	TokenNameCOMMA
DateTimeData	TokenNameIdentifier
duration	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
resetDateObj	TokenNameIdentifier
(	TokenNameLPAREN
duration	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
temp	TokenNameIdentifier
=	TokenNameEQUAL
addto	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
+	TokenNamePLUS
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
;	TokenNameSEMICOLON
duration	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
=	TokenNameEQUAL
modulo	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
carry	TokenNameIdentifier
=	TokenNameEQUAL
fQuotient	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
duration	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
addto	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
+	TokenNamePLUS
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
+	TokenNamePLUS
carry	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
dtemp	TokenNameIdentifier
=	TokenNameEQUAL
addto	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
+	TokenNamePLUS
date	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
;	TokenNameSEMICOLON
carry	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
floor	TokenNameIdentifier
(	TokenNameLPAREN
dtemp	TokenNameIdentifier
/	TokenNameDIVIDE
60	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
duration	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
=	TokenNameEQUAL
dtemp	TokenNameIdentifier
-	TokenNameMINUS
carry	TokenNameIdentifier
*	TokenNameMULTIPLY
60	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
temp	TokenNameIdentifier
=	TokenNameEQUAL
addto	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
+	TokenNamePLUS
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
+	TokenNamePLUS
carry	TokenNameIdentifier
;	TokenNameSEMICOLON
carry	TokenNameIdentifier
=	TokenNameEQUAL
fQuotient	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
60	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
duration	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
=	TokenNameEQUAL
mod	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
60	TokenNameIntegerLiteral
,	TokenNameCOMMA
carry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
temp	TokenNameIdentifier
=	TokenNameEQUAL
addto	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
+	TokenNamePLUS
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
+	TokenNamePLUS
carry	TokenNameIdentifier
;	TokenNameSEMICOLON
carry	TokenNameIdentifier
=	TokenNameEQUAL
fQuotient	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
duration	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
=	TokenNameEQUAL
mod	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
carry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
duration	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
addto	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
+	TokenNamePLUS
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
+	TokenNamePLUS
carry	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
temp	TokenNameIdentifier
=	TokenNameEQUAL
maxDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
duration	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
,	TokenNameCOMMA
duration	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
duration	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
<	TokenNameLESS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
duration	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
duration	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
+	TokenNamePLUS
maxDayInMonthFor	TokenNameIdentifier
(	TokenNameLPAREN
duration	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
,	TokenNameCOMMA
duration	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
carry	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
duration	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
>	TokenNameGREATER
temp	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
duration	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
=	TokenNameEQUAL
duration	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
-	TokenNameMINUS
temp	TokenNameIdentifier
;	TokenNameSEMICOLON
carry	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
temp	TokenNameIdentifier
=	TokenNameEQUAL
duration	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
+	TokenNamePLUS
carry	TokenNameIdentifier
;	TokenNameSEMICOLON
duration	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
=	TokenNameEQUAL
modulo	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
duration	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
=	TokenNameEQUAL
duration	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
+	TokenNamePLUS
fQuotient	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
duration	TokenNameIdentifier
.	TokenNameDOT
utc	TokenNameIdentifier
=	TokenNameEQUAL
'Z'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
duration	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
double	TokenNamedouble
parseSecond	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
buffer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
NumberFormatException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
dot	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
start	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
dot	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>	TokenNameGREATER
'9'	TokenNameCharacterLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
<	TokenNameLESS
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
dot	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
double	TokenNamedouble
value	TokenNameIdentifier
=	TokenNameEQUAL
Double	TokenNameIdentifier
.	TokenNameDOT
parseDouble	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Double	TokenNameIdentifier
.	TokenNameDOT
POSITIVE_INFINITY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
"'"	TokenNameStringLiteral
+	TokenNamePLUS
buffer	TokenNameIdentifier
+	TokenNamePLUS
"' has wrong format"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
String	TokenNameIdentifier
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
date	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
message	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
30	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
date	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'P'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'Y'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'M'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'D'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'T'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'H'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'M'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
append2	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
message	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'S'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
message	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Duration	TokenNameIdentifier
getDuration	TokenNameIdentifier
(	TokenNameLPAREN
DateTimeData	TokenNameIdentifier
date	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
sign	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
date	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sign	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
datatypeFactory	TokenNameIdentifier
.	TokenNameDOT
newDuration	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
?	TokenNameQUESTION
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
year	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
?	TokenNameQUESTION
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
month	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
?	TokenNameQUESTION
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
day	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
?	TokenNameQUESTION
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
hour	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
?	TokenNameQUESTION
BigInteger	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
minute	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
,	TokenNameCOMMA
date	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
DatatypeConstants	TokenNameIdentifier
.	TokenNameDOT
FIELD_UNDEFINED	TokenNameIdentifier
?	TokenNameQUESTION
new	TokenNamenew
BigDecimal	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
sign	TokenNameIdentifier
*	TokenNameMULTIPLY
date	TokenNameIdentifier
.	TokenNameDOT
second	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
