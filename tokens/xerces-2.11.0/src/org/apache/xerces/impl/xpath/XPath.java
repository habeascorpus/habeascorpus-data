package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Vector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SymbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
XMLChar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
XMLSymbols	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
NamespaceContext	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
xni	TokenNameIdentifier
.	TokenNameDOT
QName	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
XPath	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
DEBUG_ALL	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
DEBUG_XPATH_PARSE	TokenNameIdentifier
=	TokenNameEQUAL
DEBUG_ALL	TokenNameIdentifier
||	TokenNameOR_OR
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
DEBUG_ANY	TokenNameIdentifier
=	TokenNameEQUAL
DEBUG_XPATH_PARSE	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
String	TokenNameIdentifier
fExpression	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
SymbolTable	TokenNameIdentifier
fSymbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
LocationPath	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fLocationPaths	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
XPath	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
xpath	TokenNameIdentifier
,	TokenNameCOMMA
SymbolTable	TokenNameIdentifier
symbolTable	TokenNameIdentifier
,	TokenNameCOMMA
NamespaceContext	TokenNameIdentifier
context	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XPathException	TokenNameIdentifier
{	TokenNameLBRACE
fExpression	TokenNameIdentifier
=	TokenNameEQUAL
xpath	TokenNameIdentifier
;	TokenNameSEMICOLON
fSymbolTable	TokenNameIdentifier
=	TokenNameEQUAL
symbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
fLocationPaths	TokenNameIdentifier
=	TokenNameEQUAL
parseExpression	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG_XPATH_PARSE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
">>> "	TokenNameStringLiteral
+	TokenNamePLUS
fLocationPaths	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
LocationPath	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getLocationPaths	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
LocationPath	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ret	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LocationPath	TokenNameIdentifier
[	TokenNameLBRACKET
fLocationPaths	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fLocationPaths	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
LocationPath	TokenNameIdentifier
)	TokenNameRPAREN
fLocationPaths	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
LocationPath	TokenNameIdentifier
getLocationPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
LocationPath	TokenNameIdentifier
)	TokenNameRPAREN
fLocationPaths	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
buf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fLocationPaths	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'|'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
fLocationPaths	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
buf	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
check	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
b	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XPathException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
b	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
LocationPath	TokenNameIdentifier
buildLocationPath	TokenNameIdentifier
(	TokenNameLPAREN
Vector	TokenNameIdentifier
stepsVector	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XPathException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
stepsVector	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
size	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Step	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
steps	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Step	TokenNameIdentifier
[	TokenNameLBRACKET
size	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
stepsVector	TokenNameIdentifier
.	TokenNameDOT
copyInto	TokenNameIdentifier
(	TokenNameLPAREN
steps	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stepsVector	TokenNameIdentifier
.	TokenNameDOT
removeAllElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
LocationPath	TokenNameIdentifier
(	TokenNameLPAREN
steps	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
LocationPath	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
parseExpression	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
NamespaceContext	TokenNameIdentifier
context	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XPathException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
xtokens	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XPath	TokenNameIdentifier
.	TokenNameDOT
Scanner	TokenNameIdentifier
scanner	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XPath	TokenNameIdentifier
.	TokenNameDOT
Scanner	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
protected	TokenNameprotected
void	TokenNamevoid
addToken	TokenNameIdentifier
(	TokenNameLPAREN
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
tokens	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
token	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XPathException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
token	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_ATSIGN	TokenNameIdentifier
||	TokenNameOR_OR
token	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_QNAME	TokenNameIdentifier
||	TokenNameOR_OR
token	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_SLASH	TokenNameIdentifier
||	TokenNameOR_OR
token	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_PERIOD	TokenNameIdentifier
||	TokenNameOR_OR
token	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_ANY	TokenNameIdentifier
||	TokenNameOR_OR
token	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_NAMESPACE	TokenNameIdentifier
||	TokenNameOR_OR
token	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_DOUBLE_SLASH	TokenNameIdentifier
||	TokenNameOR_OR
token	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_UNION	TokenNameIdentifier
||	TokenNameOR_OR
token	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_CHILD	TokenNameIdentifier
||	TokenNameOR_OR
token	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_ATTRIBUTE	TokenNameIdentifier
||	TokenNameOR_OR
token	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_DOUBLE_COLON	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
token	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
fExpression	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
success	TokenNameIdentifier
=	TokenNameEQUAL
scanner	TokenNameIdentifier
.	TokenNameDOT
scanExpr	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
,	TokenNameCOMMA
xtokens	TokenNameIdentifier
,	TokenNameCOMMA
fExpression	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
success	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
stepsVector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ArrayList	TokenNameIdentifier
locationPathsVector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
expectingStep	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
xtokens	TokenNameIdentifier
.	TokenNameDOT
hasMore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
token	TokenNameIdentifier
=	TokenNameEQUAL
xtokens	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_UNION	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
check	TokenNameIdentifier
(	TokenNameLPAREN
!	TokenNameNOT
expectingStep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
locationPathsVector	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
buildLocationPath	TokenNameIdentifier
(	TokenNameLPAREN
stepsVector	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectingStep	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_ATSIGN	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
check	TokenNameIdentifier
(	TokenNameLPAREN
expectingStep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Step	TokenNameIdentifier
step	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Step	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Axis	TokenNameIdentifier
(	TokenNameLPAREN
Axis	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
parseNodeTest	TokenNameIdentifier
(	TokenNameLPAREN
xtokens	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
xtokens	TokenNameIdentifier
,	TokenNameCOMMA
context	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stepsVector	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
step	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectingStep	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_ATTRIBUTE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
check	TokenNameIdentifier
(	TokenNameLPAREN
expectingStep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xtokens	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_DOUBLE_COLON	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Step	TokenNameIdentifier
step	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Step	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Axis	TokenNameIdentifier
(	TokenNameLPAREN
Axis	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
parseNodeTest	TokenNameIdentifier
(	TokenNameLPAREN
xtokens	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
xtokens	TokenNameIdentifier
,	TokenNameCOMMA
context	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stepsVector	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
step	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectingStep	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_ANY	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_NAMESPACE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_QNAME	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
check	TokenNameIdentifier
(	TokenNameLPAREN
expectingStep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Step	TokenNameIdentifier
step	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Step	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Axis	TokenNameIdentifier
(	TokenNameLPAREN
Axis	TokenNameIdentifier
.	TokenNameDOT
CHILD	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
parseNodeTest	TokenNameIdentifier
(	TokenNameLPAREN
token	TokenNameIdentifier
,	TokenNameCOMMA
xtokens	TokenNameIdentifier
,	TokenNameCOMMA
context	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stepsVector	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
step	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectingStep	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_CHILD	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
check	TokenNameIdentifier
(	TokenNameLPAREN
expectingStep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xtokens	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_DOUBLE_COLON	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Step	TokenNameIdentifier
step	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Step	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Axis	TokenNameIdentifier
(	TokenNameLPAREN
Axis	TokenNameIdentifier
.	TokenNameDOT
CHILD	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
parseNodeTest	TokenNameIdentifier
(	TokenNameLPAREN
xtokens	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
xtokens	TokenNameIdentifier
,	TokenNameCOMMA
context	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stepsVector	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
step	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectingStep	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_PERIOD	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
check	TokenNameIdentifier
(	TokenNameLPAREN
expectingStep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectingStep	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stepsVector	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
Axis	TokenNameIdentifier
axis	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Axis	TokenNameIdentifier
(	TokenNameLPAREN
Axis	TokenNameIdentifier
.	TokenNameDOT
SELF	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NodeTest	TokenNameIdentifier
nodeTest	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
NodeTest	TokenNameIdentifier
.	TokenNameDOT
NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Step	TokenNameIdentifier
step	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Step	TokenNameIdentifier
(	TokenNameLPAREN
axis	TokenNameIdentifier
,	TokenNameCOMMA
nodeTest	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stepsVector	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
step	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xtokens	TokenNameIdentifier
.	TokenNameDOT
hasMore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
xtokens	TokenNameIdentifier
.	TokenNameDOT
peekToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_DOUBLE_SLASH	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
xtokens	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
axis	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Axis	TokenNameIdentifier
(	TokenNameLPAREN
Axis	TokenNameIdentifier
.	TokenNameDOT
DESCENDANT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nodeTest	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
NodeTest	TokenNameIdentifier
.	TokenNameDOT
NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
step	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Step	TokenNameIdentifier
(	TokenNameLPAREN
axis	TokenNameIdentifier
,	TokenNameCOMMA
nodeTest	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stepsVector	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
step	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectingStep	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_DOUBLE_SLASH	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_DOUBLE_COLON	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_SLASH	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
check	TokenNameIdentifier
(	TokenNameLPAREN
!	TokenNameNOT
expectingStep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectingStep	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
InternalError	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
check	TokenNameIdentifier
(	TokenNameLPAREN
!	TokenNameNOT
expectingStep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
locationPathsVector	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
buildLocationPath	TokenNameIdentifier
(	TokenNameLPAREN
stepsVector	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
LocationPath	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
locationPathsVector	TokenNameIdentifier
.	TokenNameDOT
toArray	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
LocationPath	TokenNameIdentifier
[	TokenNameLBRACKET
locationPathsVector	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
NodeTest	TokenNameIdentifier
parseNodeTest	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
typeToken	TokenNameIdentifier
,	TokenNameCOMMA
Tokens	TokenNameIdentifier
xtokens	TokenNameIdentifier
,	TokenNameCOMMA
NamespaceContext	TokenNameIdentifier
context	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XPathException	TokenNameIdentifier
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
typeToken	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_ANY	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
new	TokenNamenew
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
NodeTest	TokenNameIdentifier
.	TokenNameDOT
WILDCARD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_NAMESPACE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_QNAME	TokenNameIdentifier
:	TokenNameCOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
xtokens	TokenNameIdentifier
.	TokenNameDOT
nextTokenAsString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
uri	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
context	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
prefix	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
EMPTY_STRING	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
uri	TokenNameIdentifier
=	TokenNameEQUAL
context	TokenNameIdentifier
.	TokenNameDOT
getURI	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
prefix	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
EMPTY_STRING	TokenNameIdentifier
&&	TokenNameAND_AND
context	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
uri	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath-ns"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
typeToken	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_NAMESPACE	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
new	TokenNamenew
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
,	TokenNameCOMMA
uri	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
localpart	TokenNameIdentifier
=	TokenNameEQUAL
xtokens	TokenNameIdentifier
.	TokenNameDOT
nextTokenAsString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
rawname	TokenNameIdentifier
=	TokenNameEQUAL
prefix	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
EMPTY_STRING	TokenNameIdentifier
?	TokenNameQUESTION
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
':'	TokenNameCharacterLiteral
+	TokenNamePLUS
localpart	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
localpart	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
,	TokenNameCOMMA
localpart	TokenNameIdentifier
,	TokenNameCOMMA
rawname	TokenNameIdentifier
,	TokenNameCOMMA
uri	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
LocationPath	TokenNameIdentifier
implements	TokenNameimplements
Cloneable	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
final	TokenNamefinal
Step	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
steps	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
LocationPath	TokenNameIdentifier
(	TokenNameLPAREN
Step	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
steps	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
steps	TokenNameIdentifier
=	TokenNameEQUAL
steps	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
LocationPath	TokenNameIdentifier
(	TokenNameLPAREN
LocationPath	TokenNameIdentifier
path	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
steps	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Step	TokenNameIdentifier
[	TokenNameLBRACKET
path	TokenNameIdentifier
.	TokenNameDOT
steps	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
steps	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
steps	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
Step	TokenNameIdentifier
)	TokenNameRPAREN
path	TokenNameIdentifier
.	TokenNameDOT
steps	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
str	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
steps	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
steps	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
axis	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
Axis	TokenNameIdentifier
.	TokenNameDOT
DESCENDANT	TokenNameIdentifier
&&	TokenNameAND_AND
steps	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
axis	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
Axis	TokenNameIdentifier
.	TokenNameDOT
DESCENDANT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
steps	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
{	TokenNameLBRACE
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'['	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
super	TokenNamesuper
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
'@'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
str	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
']'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
str	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
LocationPath	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
Step	TokenNameIdentifier
implements	TokenNameimplements
Cloneable	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
final	TokenNamefinal
Axis	TokenNameIdentifier
axis	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
NodeTest	TokenNameIdentifier
nodeTest	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Step	TokenNameIdentifier
(	TokenNameLPAREN
Axis	TokenNameIdentifier
axis	TokenNameIdentifier
,	TokenNameCOMMA
NodeTest	TokenNameIdentifier
nodeTest	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
axis	TokenNameIdentifier
=	TokenNameEQUAL
axis	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
nodeTest	TokenNameIdentifier
=	TokenNameEQUAL
nodeTest	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Step	TokenNameIdentifier
(	TokenNameLPAREN
Step	TokenNameIdentifier
step	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
axis	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Axis	TokenNameIdentifier
)	TokenNameRPAREN
step	TokenNameIdentifier
.	TokenNameDOT
axis	TokenNameIdentifier
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nodeTest	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
NodeTest	TokenNameIdentifier
)	TokenNameRPAREN
step	TokenNameIdentifier
.	TokenNameDOT
nodeTest	TokenNameIdentifier
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
axis	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Axis	TokenNameIdentifier
.	TokenNameDOT
SELF	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"."	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
axis	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Axis	TokenNameIdentifier
.	TokenNameDOT
ATTRIBUTE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"@"	TokenNameStringLiteral
+	TokenNamePLUS
nodeTest	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
axis	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Axis	TokenNameIdentifier
.	TokenNameDOT
CHILD	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
nodeTest	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
axis	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Axis	TokenNameIdentifier
.	TokenNameDOT
DESCENDANT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"//"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
"??? ("	TokenNameStringLiteral
+	TokenNamePLUS
axis	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
+	TokenNamePLUS
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Step	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
Axis	TokenNameIdentifier
implements	TokenNameimplements
Cloneable	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
CHILD	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
ATTRIBUTE	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
SELF	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
DESCENDANT	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
short	TokenNameshort
type	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Axis	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Axis	TokenNameIdentifier
(	TokenNameLPAREN
Axis	TokenNameIdentifier
axis	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
axis	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
CHILD	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"child"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
ATTRIBUTE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"attribute"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
SELF	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"self"	TokenNameStringLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
DESCENDANT	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
"descendant"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
"???"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Axis	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
NodeTest	TokenNameIdentifier
implements	TokenNameimplements
Cloneable	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
QNAME	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
WILDCARD	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
NODE	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
short	TokenNameshort
NAMESPACE	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
short	TokenNameshort
type	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
QName	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
short	TokenNameshort
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
QName	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
QNAME	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
prefix	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
uri	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
NAMESPACE	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
uri	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
NodeTest	TokenNameIdentifier
nodeTest	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
nodeTest	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
;	TokenNameSEMICOLON
name	TokenNameIdentifier
.	TokenNameDOT
setValues	TokenNameIdentifier
(	TokenNameLPAREN
nodeTest	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
QNAME	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
name	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
+	TokenNamePLUS
':'	TokenNameCharacterLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
"{"	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
+	TokenNamePLUS
'}'	TokenNameCharacterLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
+	TokenNamePLUS
':'	TokenNameCharacterLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
name	TokenNameIdentifier
.	TokenNameDOT
localpart	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
NAMESPACE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
name	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
+	TokenNamePLUS
":*"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
"{"	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
.	TokenNameDOT
uri	TokenNameIdentifier
+	TokenNamePLUS
'}'	TokenNameCharacterLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
.	TokenNameDOT
prefix	TokenNameIdentifier
+	TokenNamePLUS
":*"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
"???:*"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
WILDCARD	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
return	TokenNamereturn
"*"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
NODE	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
return	TokenNamereturn
"node()"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
"???"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
Tokens	TokenNameIdentifier
{	TokenNameLBRACE
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
DUMP_TOKENS	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
EXPRTOKEN_OPEN_PAREN	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_CLOSE_PAREN	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPEN_BRACKET	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_CLOSE_BRACKET	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_PERIOD	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_DOUBLE_PERIOD	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_ATSIGN	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_COMMA	TokenNameIdentifier
=	TokenNameEQUAL
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_DOUBLE_COLON	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_NAMETEST_ANY	TokenNameIdentifier
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_NAMETEST_NAMESPACE	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_NAMETEST_QNAME	TokenNameIdentifier
=	TokenNameEQUAL
11	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_NODETYPE_COMMENT	TokenNameIdentifier
=	TokenNameEQUAL
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_NODETYPE_TEXT	TokenNameIdentifier
=	TokenNameEQUAL
13	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_NODETYPE_PI	TokenNameIdentifier
=	TokenNameEQUAL
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_NODETYPE_NODE	TokenNameIdentifier
=	TokenNameEQUAL
15	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_AND	TokenNameIdentifier
=	TokenNameEQUAL
16	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_OR	TokenNameIdentifier
=	TokenNameEQUAL
17	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_MOD	TokenNameIdentifier
=	TokenNameEQUAL
18	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_DIV	TokenNameIdentifier
=	TokenNameEQUAL
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_MULT	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_SLASH	TokenNameIdentifier
=	TokenNameEQUAL
21	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_DOUBLE_SLASH	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_UNION	TokenNameIdentifier
=	TokenNameEQUAL
23	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_PLUS	TokenNameIdentifier
=	TokenNameEQUAL
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_MINUS	TokenNameIdentifier
=	TokenNameEQUAL
25	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_EQUAL	TokenNameIdentifier
=	TokenNameEQUAL
26	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_NOT_EQUAL	TokenNameIdentifier
=	TokenNameEQUAL
27	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_LESS	TokenNameIdentifier
=	TokenNameEQUAL
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_LESS_EQUAL	TokenNameIdentifier
=	TokenNameEQUAL
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_GREATER	TokenNameIdentifier
=	TokenNameEQUAL
30	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_OPERATOR_GREATER_EQUAL	TokenNameIdentifier
=	TokenNameEQUAL
31	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_FUNCTION_NAME	TokenNameIdentifier
=	TokenNameEQUAL
32	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_ANCESTOR	TokenNameIdentifier
=	TokenNameEQUAL
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF	TokenNameIdentifier
=	TokenNameEQUAL
34	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_ATTRIBUTE	TokenNameIdentifier
=	TokenNameEQUAL
35	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_CHILD	TokenNameIdentifier
=	TokenNameEQUAL
36	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_DESCENDANT	TokenNameIdentifier
=	TokenNameEQUAL
37	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF	TokenNameIdentifier
=	TokenNameEQUAL
38	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_FOLLOWING	TokenNameIdentifier
=	TokenNameEQUAL
39	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING	TokenNameIdentifier
=	TokenNameEQUAL
40	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_NAMESPACE	TokenNameIdentifier
=	TokenNameEQUAL
41	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_PARENT	TokenNameIdentifier
=	TokenNameEQUAL
42	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_PRECEDING	TokenNameIdentifier
=	TokenNameEQUAL
43	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_PRECEDING_SIBLING	TokenNameIdentifier
=	TokenNameEQUAL
44	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_AXISNAME_SELF	TokenNameIdentifier
=	TokenNameEQUAL
45	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_LITERAL	TokenNameIdentifier
=	TokenNameEQUAL
46	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_NUMBER	TokenNameIdentifier
=	TokenNameEQUAL
47	TokenNameIntegerLiteral
,	TokenNameCOMMA
EXPRTOKEN_VARIABLE_REFERENCE	TokenNameIdentifier
=	TokenNameEQUAL
48	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fgTokenNames	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"EXPRTOKEN_OPEN_PAREN"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_CLOSE_PAREN"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPEN_BRACKET"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_CLOSE_BRACKET"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_PERIOD"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_DOUBLE_PERIOD"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_ATSIGN"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_COMMA"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_DOUBLE_COLON"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_NAMETEST_ANY"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_NAMETEST_NAMESPACE"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_NAMETEST_QNAME"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_NODETYPE_COMMENT"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_NODETYPE_TEXT"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_NODETYPE_PI"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_NODETYPE_NODE"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_AND"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_OR"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_MOD"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_DIV"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_MULT"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_SLASH"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_DOUBLE_SLASH"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_UNION"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_PLUS"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_MINUS"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_EQUAL"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_NOT_EQUAL"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_LESS"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_LESS_EQUAL"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_GREATER"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_GREATER_EQUAL"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_FUNCTION_NAME"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_ANCESTOR"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_ATTRIBUTE"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_CHILD"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_DESCENDANT"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_FOLLOWING"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_NAMESPACE"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_PARENT"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_PRECEDING"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_PRECEDING_SIBLING"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_SELF"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_LITERAL"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_NUMBER"	TokenNameStringLiteral
,	TokenNameCOMMA
"EXPRTOKEN_VARIABLE_REFERENCE"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
INITIAL_TOKEN_COUNT	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fTokens	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
INITIAL_TOKEN_COUNT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fTokenCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
SymbolTable	TokenNameIdentifier
fSymbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Hashtable	TokenNameIdentifier
fSymbolMapping	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Hashtable	TokenNameIdentifier
fTokenNames	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
fCurrentTokenIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Tokens	TokenNameIdentifier
(	TokenNameLPAREN
SymbolTable	TokenNameIdentifier
symbolTable	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fSymbolTable	TokenNameIdentifier
=	TokenNameEQUAL
symbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
symbols	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"ancestor"	TokenNameStringLiteral
,	TokenNameCOMMA
"ancestor-or-self"	TokenNameStringLiteral
,	TokenNameCOMMA
"attribute"	TokenNameStringLiteral
,	TokenNameCOMMA
"child"	TokenNameStringLiteral
,	TokenNameCOMMA
"descendant"	TokenNameStringLiteral
,	TokenNameCOMMA
"descendant-or-self"	TokenNameStringLiteral
,	TokenNameCOMMA
"following"	TokenNameStringLiteral
,	TokenNameCOMMA
"following-sibling"	TokenNameStringLiteral
,	TokenNameCOMMA
"namespace"	TokenNameStringLiteral
,	TokenNameCOMMA
"parent"	TokenNameStringLiteral
,	TokenNameCOMMA
"preceding"	TokenNameStringLiteral
,	TokenNameCOMMA
"preceding-sibling"	TokenNameStringLiteral
,	TokenNameCOMMA
"self"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
symbols	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
fSymbolMapping	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
fSymbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
symbols	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPEN_PAREN	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPEN_PAREN"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_CLOSE_PAREN	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_CLOSE_PAREN"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPEN_BRACKET	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPEN_BRACKET"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_CLOSE_BRACKET	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_CLOSE_BRACKET"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_PERIOD	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_PERIOD"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_DOUBLE_PERIOD	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_DOUBLE_PERIOD"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_ATSIGN	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_ATSIGN"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_COMMA	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_COMMA"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_DOUBLE_COLON	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_DOUBLE_COLON"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_NAMETEST_ANY	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_NAMETEST_ANY"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_NAMETEST_NAMESPACE	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_NAMETEST_NAMESPACE"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_NAMETEST_QNAME	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_NAMETEST_QNAME"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_NODETYPE_COMMENT	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_NODETYPE_COMMENT"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_NODETYPE_TEXT	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_NODETYPE_TEXT"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_NODETYPE_PI	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_NODETYPE_PI"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_NODETYPE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_NODETYPE_NODE"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_AND	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_AND"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_OR	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_OR"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_MOD	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_MOD"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_DIV	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_DIV"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_MULT	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_MULT"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_SLASH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_SLASH"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_DOUBLE_SLASH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_DOUBLE_SLASH"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_UNION	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_UNION"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_PLUS	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_PLUS"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_MINUS	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_MINUS"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_EQUAL"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_NOT_EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_NOT_EQUAL"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_LESS	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_LESS"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_LESS_EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_LESS_EQUAL"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_GREATER	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_GREATER"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_OPERATOR_GREATER_EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_OPERATOR_GREATER_EQUAL"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_FUNCTION_NAME	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_FUNCTION_NAME"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_ANCESTOR	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_ANCESTOR"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_ATTRIBUTE	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_ATTRIBUTE"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_CHILD	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_CHILD"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_DESCENDANT	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_DESCENDANT"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_FOLLOWING	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_FOLLOWING"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_NAMESPACE	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_NAMESPACE"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_PARENT	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_PARENT"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_PRECEDING	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_PRECEDING"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_PRECEDING_SIBLING	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_PRECEDING_SIBLING"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_AXISNAME_SELF	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_AXISNAME_SELF"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_LITERAL"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_NUMBER	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_NUMBER"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
EXPRTOKEN_VARIABLE_REFERENCE	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"EXPRTOKEN_VARIABLE_REFERENCE"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getTokenString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
token	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addToken	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
tokenStr	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Integer	TokenNameIdentifier
tokenInt	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Integer	TokenNameIdentifier
)	TokenNameRPAREN
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
tokenStr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tokenInt	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
tokenInt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Integer	TokenNameIdentifier
(	TokenNameLPAREN
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokenNames	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
tokenInt	TokenNameIdentifier
,	TokenNameCOMMA
tokenStr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokenInt	TokenNameIdentifier
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addToken	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
fTokenCount	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
token	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ArrayIndexOutOfBoundsException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
oldList	TokenNameIdentifier
=	TokenNameEQUAL
fTokens	TokenNameIdentifier
;	TokenNameSEMICOLON
fTokens	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
fTokenCount	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
oldList	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fTokens	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fTokenCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
fTokenCount	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
token	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fTokenCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
rewind	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fCurrentTokenIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
hasMore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fCurrentTokenIndex	TokenNameIdentifier
<	TokenNameLESS
fTokenCount	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
XPathException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentTokenIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fTokenCount	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentTokenIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
peekToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
XPathException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fCurrentTokenIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fTokenCount	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
fCurrentTokenIndex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
nextTokenAsString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
XPathException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
getTokenString	TokenNameIdentifier
(	TokenNameLPAREN
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
s	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
s	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
dumpTokens	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
fTokenCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
EXPRTOKEN_OPEN_PAREN	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPEN_PAREN/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_CLOSE_PAREN	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<CLOSE_PAREN/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPEN_BRACKET	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPEN_BRACKET/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_CLOSE_BRACKET	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<CLOSE_BRACKET/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_PERIOD	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<PERIOD/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_DOUBLE_PERIOD	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<DOUBLE_PERIOD/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_ATSIGN	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<ATSIGN/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_COMMA	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<COMMA/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_DOUBLE_COLON	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<DOUBLE_COLON/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_NAMETEST_ANY	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<NAMETEST_ANY/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_NAMETEST_NAMESPACE	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<NAMETEST_NAMESPACE"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" prefix=""	TokenNameStringLiteral
+	TokenNamePLUS
getTokenString	TokenNameIdentifier
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
+	TokenNamePLUS
"""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_NAMETEST_QNAME	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<NAMETEST_QNAME"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" prefix=""	TokenNameStringLiteral
+	TokenNamePLUS
getTokenString	TokenNameIdentifier
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
+	TokenNamePLUS
"""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" localpart=""	TokenNameStringLiteral
+	TokenNamePLUS
getTokenString	TokenNameIdentifier
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
+	TokenNamePLUS
"""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_NODETYPE_COMMENT	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<NODETYPE_COMMENT/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_NODETYPE_TEXT	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<NODETYPE_TEXT/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_NODETYPE_PI	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<NODETYPE_PI/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_NODETYPE_NODE	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<NODETYPE_NODE/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_AND	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_AND/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_OR	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_OR/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_MOD	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_MOD/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_DIV	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_DIV/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_MULT	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_MULT/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_SLASH	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_SLASH/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
fTokenCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"  "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_DOUBLE_SLASH	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_DOUBLE_SLASH/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_UNION	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_UNION/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_PLUS	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_PLUS/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_MINUS	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_MINUS/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_EQUAL	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_EQUAL/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_NOT_EQUAL	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_NOT_EQUAL/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_LESS	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_LESS/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_LESS_EQUAL	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_LESS_EQUAL/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_GREATER	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_GREATER/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_OPERATOR_GREATER_EQUAL	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<OPERATOR_GREATER_EQUAL/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_FUNCTION_NAME	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<FUNCTION_NAME"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" prefix=""	TokenNameStringLiteral
+	TokenNamePLUS
getTokenString	TokenNameIdentifier
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
+	TokenNamePLUS
"""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" localpart=""	TokenNameStringLiteral
+	TokenNamePLUS
getTokenString	TokenNameIdentifier
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
+	TokenNamePLUS
"""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_ANCESTOR	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_ANCESTOR/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_ANCESTOR_OR_SELF/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_ATTRIBUTE	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_ATTRIBUTE/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_CHILD	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_CHILD/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_DESCENDANT	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_DESCENDANT/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_DESCENDANT_OR_SELF/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_FOLLOWING	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_FOLLOWING/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_FOLLOWING_SIBLING/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_NAMESPACE	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_NAMESPACE/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_PARENT	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_PARENT/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_PRECEDING	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_PRECEDING/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_PRECEDING_SIBLING	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_PRECEDING_SIBLING/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_AXISNAME_SELF	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<AXISNAME_SELF/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_LITERAL	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<LITERAL"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" value=""	TokenNameStringLiteral
+	TokenNamePLUS
getTokenString	TokenNameIdentifier
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
+	TokenNamePLUS
"""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_NUMBER	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<NUMBER"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" whole=""	TokenNameStringLiteral
+	TokenNamePLUS
getTokenString	TokenNameIdentifier
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
+	TokenNamePLUS
"""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" part=""	TokenNameStringLiteral
+	TokenNamePLUS
getTokenString	TokenNameIdentifier
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
+	TokenNamePLUS
"""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
EXPRTOKEN_VARIABLE_REFERENCE	TokenNameIdentifier
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"<VARIABLE_REFERENCE"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" prefix=""	TokenNameStringLiteral
+	TokenNamePLUS
getTokenString	TokenNameIdentifier
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
+	TokenNamePLUS
"""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
" localpart=""	TokenNameStringLiteral
+	TokenNamePLUS
getTokenString	TokenNameIdentifier
(	TokenNameLPAREN
fTokens	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
+	TokenNamePLUS
"""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
"/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"<???/>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
Scanner	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
byte	TokenNamebyte
CHARTYPE_INVALID	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_OTHER	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_WHITESPACE	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_EXCLAMATION	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_QUOTE	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_DOLLAR	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_OPEN_PAREN	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_CLOSE_PAREN	TokenNameIdentifier
=	TokenNameEQUAL
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_STAR	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_PLUS	TokenNameIdentifier
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_COMMA	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_MINUS	TokenNameIdentifier
=	TokenNameEQUAL
11	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_PERIOD	TokenNameIdentifier
=	TokenNameEQUAL
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_SLASH	TokenNameIdentifier
=	TokenNameEQUAL
13	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_DIGIT	TokenNameIdentifier
=	TokenNameEQUAL
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_COLON	TokenNameIdentifier
=	TokenNameEQUAL
15	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_LESS	TokenNameIdentifier
=	TokenNameEQUAL
16	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_EQUAL	TokenNameIdentifier
=	TokenNameEQUAL
17	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_GREATER	TokenNameIdentifier
=	TokenNameEQUAL
18	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_ATSIGN	TokenNameIdentifier
=	TokenNameEQUAL
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_LETTER	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_OPEN_BRACKET	TokenNameIdentifier
=	TokenNameEQUAL
21	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_CLOSE_BRACKET	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_UNDERSCORE	TokenNameIdentifier
=	TokenNameEQUAL
23	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_UNION	TokenNameIdentifier
=	TokenNameEQUAL
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
CHARTYPE_NONASCII	TokenNameIdentifier
=	TokenNameEQUAL
25	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fASCIICharMap	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
9	TokenNameIntegerLiteral
,	TokenNameCOMMA
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
11	TokenNameIntegerLiteral
,	TokenNameCOMMA
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
15	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
16	TokenNameIntegerLiteral
,	TokenNameCOMMA
17	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
21	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
22	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
23	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
SymbolTable	TokenNameIdentifier
fSymbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fAndSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"and"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fOrSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"or"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fModSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"mod"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fDivSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"div"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fCommentSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"comment"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fTextSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"text"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fPISymbol	TokenNameIdentifier
=	TokenNameEQUAL
"processing-instruction"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fNodeSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"node"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fAncestorSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"ancestor"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fAncestorOrSelfSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"ancestor-or-self"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fAttributeSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"attribute"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fChildSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"child"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fDescendantSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"descendant"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fDescendantOrSelfSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"descendant-or-self"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fFollowingSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"following"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fFollowingSiblingSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"following-sibling"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fNamespaceSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"namespace"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fParentSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"parent"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fPrecedingSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"preceding"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fPrecedingSiblingSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"preceding-sibling"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
fSelfSymbol	TokenNameIdentifier
=	TokenNameEQUAL
"self"	TokenNameStringLiteral
.	TokenNameDOT
intern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
Scanner	TokenNameIdentifier
(	TokenNameLPAREN
SymbolTable	TokenNameIdentifier
symbolTable	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fSymbolTable	TokenNameIdentifier
=	TokenNameEQUAL
symbolTable	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
scanExpr	TokenNameIdentifier
(	TokenNameLPAREN
SymbolTable	TokenNameIdentifier
symbolTable	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
tokens	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
data	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
currentOffset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XPathException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
nameOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
nameHandle	TokenNameIdentifier
,	TokenNameCOMMA
prefixHandle	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
' '	TokenNameCharacterLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x0A	TokenNameIntegerLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x09	TokenNameIntegerLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x0D	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
byte	TokenNamebyte
chartype	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ch	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0x80	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
CHARTYPE_NONASCII	TokenNameIdentifier
:	TokenNameCOLON
fASCIICharMap	TokenNameIdentifier
[	TokenNameLBRACKET
ch	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
chartype	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
CHARTYPE_OPEN_PAREN	TokenNameIdentifier
:	TokenNameCOLON
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPEN_PAREN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_CLOSE_PAREN	TokenNameIdentifier
:	TokenNameCOLON
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_CLOSE_PAREN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_OPEN_BRACKET	TokenNameIdentifier
:	TokenNameCOLON
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPEN_BRACKET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_CLOSE_BRACKET	TokenNameIdentifier
:	TokenNameCOLON
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_CLOSE_BRACKET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_PERIOD	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_PERIOD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
currentOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_DOUBLE_PERIOD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
currentOffset	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NUMBER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
currentOffset	TokenNameIdentifier
=	TokenNameEQUAL
scanNumber	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
,	TokenNameCOMMA
endOffset	TokenNameIdentifier
,	TokenNameCOMMA
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_PERIOD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
currentOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'|'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_PERIOD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
currentOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
' '	TokenNameCharacterLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x0A	TokenNameIntegerLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x09	TokenNameIntegerLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x0D	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
do	TokenNamedo
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
' '	TokenNameCharacterLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x0A	TokenNameIntegerLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x09	TokenNameIntegerLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x0D	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'|'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_PERIOD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
XPathException	TokenNameIdentifier
(	TokenNameLPAREN
"c-general-xpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_ATSIGN	TokenNameIdentifier
:	TokenNameCOLON
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_ATSIGN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_COMMA	TokenNameIdentifier
:	TokenNameCOLON
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_COMMA	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_COLON	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_DOUBLE_COLON	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_SLASH	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_SLASH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_DOUBLE_SLASH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_SLASH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_UNION	TokenNameIdentifier
:	TokenNameCOLON
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_UNION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_PLUS	TokenNameIdentifier
:	TokenNameCOLON
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_PLUS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_MINUS	TokenNameIdentifier
:	TokenNameCOLON
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_MINUS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_EQUAL	TokenNameIdentifier
:	TokenNameCOLON
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_EXCLAMATION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'='	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_NOT_EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_LESS	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_LESS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'='	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_LESS_EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_LESS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_GREATER	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_GREATER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'='	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_GREATER_EQUAL	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_GREATER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_QUOTE	TokenNameIdentifier
:	TokenNameCOLON
int	TokenNameint
qchar	TokenNameIdentifier
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
litOffset	TokenNameIdentifier
=	TokenNameEQUAL
currentOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
ch	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
qchar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
litLength	TokenNameIdentifier
=	TokenNameEQUAL
currentOffset	TokenNameIdentifier
-	TokenNameMINUS
litOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
tokens	TokenNameIdentifier
.	TokenNameDOT
addToken	TokenNameIdentifier
(	TokenNameLPAREN
symbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
litOffset	TokenNameIdentifier
,	TokenNameCOMMA
litOffset	TokenNameIdentifier
+	TokenNamePLUS
litLength	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_DIGIT	TokenNameIdentifier
:	TokenNameCOLON
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NUMBER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
currentOffset	TokenNameIdentifier
=	TokenNameEQUAL
scanNumber	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
,	TokenNameCOMMA
endOffset	TokenNameIdentifier
,	TokenNameCOMMA
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_DOLLAR	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nameOffset	TokenNameIdentifier
=	TokenNameEQUAL
currentOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
currentOffset	TokenNameIdentifier
=	TokenNameEQUAL
scanNCName	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
endOffset	TokenNameIdentifier
,	TokenNameCOMMA
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
nameOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
<	TokenNameLESS
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nameHandle	TokenNameIdentifier
=	TokenNameEQUAL
symbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
nameOffset	TokenNameIdentifier
,	TokenNameCOMMA
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
prefixHandle	TokenNameIdentifier
=	TokenNameEQUAL
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
EMPTY_STRING	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
prefixHandle	TokenNameIdentifier
=	TokenNameEQUAL
nameHandle	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nameOffset	TokenNameIdentifier
=	TokenNameEQUAL
currentOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
currentOffset	TokenNameIdentifier
=	TokenNameEQUAL
scanNCName	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
endOffset	TokenNameIdentifier
,	TokenNameCOMMA
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
nameOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
<	TokenNameLESS
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nameHandle	TokenNameIdentifier
=	TokenNameEQUAL
symbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
nameOffset	TokenNameIdentifier
,	TokenNameCOMMA
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_VARIABLE_REFERENCE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
tokens	TokenNameIdentifier
.	TokenNameDOT
addToken	TokenNameIdentifier
(	TokenNameLPAREN
prefixHandle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tokens	TokenNameIdentifier
.	TokenNameDOT
addToken	TokenNameIdentifier
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_STAR	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
starIsMultiplyOperator	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_MULT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_ANY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CHARTYPE_NONASCII	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
CHARTYPE_LETTER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
CHARTYPE_UNDERSCORE	TokenNameIdentifier
:	TokenNameCOLON
nameOffset	TokenNameIdentifier
=	TokenNameEQUAL
currentOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
currentOffset	TokenNameIdentifier
=	TokenNameEQUAL
scanNCName	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
endOffset	TokenNameIdentifier
,	TokenNameCOMMA
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
nameOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
<	TokenNameLESS
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nameHandle	TokenNameIdentifier
=	TokenNameEQUAL
symbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
nameOffset	TokenNameIdentifier
,	TokenNameCOMMA
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isNameTestNCName	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isAxisName	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
prefixHandle	TokenNameIdentifier
=	TokenNameEQUAL
XMLSymbols	TokenNameIdentifier
.	TokenNameDOT
EMPTY_STRING	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'*'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
<	TokenNameLESS
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
isNameTestNCName	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
<	TokenNameLESS
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
isAxisName	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
prefixHandle	TokenNameIdentifier
=	TokenNameEQUAL
nameHandle	TokenNameIdentifier
;	TokenNameSEMICOLON
nameOffset	TokenNameIdentifier
=	TokenNameEQUAL
currentOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
currentOffset	TokenNameIdentifier
=	TokenNameEQUAL
scanNCName	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
endOffset	TokenNameIdentifier
,	TokenNameCOMMA
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
nameOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
<	TokenNameLESS
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nameHandle	TokenNameIdentifier
=	TokenNameEQUAL
symbolTable	TokenNameIdentifier
.	TokenNameDOT
addSymbol	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
nameOffset	TokenNameIdentifier
,	TokenNameCOMMA
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
' '	TokenNameCharacterLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x0A	TokenNameIntegerLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x09	TokenNameIntegerLiteral
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x0D	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
starIsMultiplyOperator	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fAndSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_AND	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fOrSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_OR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fModSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_MOD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fDivSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPERATOR_DIV	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isNameTestNCName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
isAxisName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'('	TokenNameCharacterLiteral
&&	TokenNameAND_AND
!	TokenNameNOT
isNameTestNCName	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
isAxisName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fCommentSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NODETYPE_COMMENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fTextSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NODETYPE_TEXT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fPISymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NODETYPE_PI	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fNodeSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NODETYPE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_FUNCTION_NAME	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tokens	TokenNameIdentifier
.	TokenNameDOT
addToken	TokenNameIdentifier
(	TokenNameLPAREN
prefixHandle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tokens	TokenNameIdentifier
.	TokenNameDOT
addToken	TokenNameIdentifier
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_OPEN_PAREN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isAxisName	TokenNameIdentifier
||	TokenNameOR_OR
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
':'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
currentOffset	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
endOffset	TokenNameIdentifier
&&	TokenNameAND_AND
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fAncestorSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_ANCESTOR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fAncestorOrSelfSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fAttributeSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_ATTRIBUTE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fChildSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_CHILD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fDescendantSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_DESCENDANT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fDescendantOrSelfSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fFollowingSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_FOLLOWING	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fFollowingSiblingSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fNamespaceSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_NAMESPACE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fParentSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_PARENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fPrecedingSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_PRECEDING	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fPrecedingSiblingSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_PRECEDING_SIBLING	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
fSelfSymbol	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_AXISNAME_SELF	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isNameTestNCName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_DOUBLE_COLON	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isAxisName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
currentOffset	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
isNameTestNCName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_NAMESPACE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
tokens	TokenNameIdentifier
.	TokenNameDOT
addToken	TokenNameIdentifier
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
addToken	TokenNameIdentifier
(	TokenNameLPAREN
tokens	TokenNameIdentifier
,	TokenNameCOMMA
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
EXPRTOKEN_NAMETEST_QNAME	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
starIsMultiplyOperator	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
tokens	TokenNameIdentifier
.	TokenNameDOT
addToken	TokenNameIdentifier
(	TokenNameLPAREN
prefixHandle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tokens	TokenNameIdentifier
.	TokenNameDOT
addToken	TokenNameIdentifier
(	TokenNameLPAREN
nameHandle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
.	TokenNameDOT
DUMP_TOKENS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tokens	TokenNameIdentifier
.	TokenNameDOT
dumpTokens	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
scanNCName	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
data	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
endOffset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0x80	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XMLChar	TokenNameIdentifier
.	TokenNameDOT
isNameStart	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
currentOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
byte	TokenNamebyte
chartype	TokenNameIdentifier
=	TokenNameEQUAL
fASCIICharMap	TokenNameIdentifier
[	TokenNameLBRACKET
ch	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
chartype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
CHARTYPE_LETTER	TokenNameIdentifier
&&	TokenNameAND_AND
chartype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
CHARTYPE_UNDERSCORE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
currentOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
<	TokenNameLESS
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0x80	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
XMLChar	TokenNameIdentifier
.	TokenNameDOT
isName	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
byte	TokenNamebyte
chartype	TokenNameIdentifier
=	TokenNameEQUAL
fASCIICharMap	TokenNameIdentifier
[	TokenNameLBRACKET
ch	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
chartype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
CHARTYPE_LETTER	TokenNameIdentifier
&&	TokenNameAND_AND
chartype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
CHARTYPE_DIGIT	TokenNameIdentifier
&&	TokenNameAND_AND
chartype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
CHARTYPE_PERIOD	TokenNameIdentifier
&&	TokenNameAND_AND
chartype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
CHARTYPE_MINUS	TokenNameIdentifier
&&	TokenNameAND_AND
chartype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
CHARTYPE_UNDERSCORE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
currentOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
scanNumber	TokenNameIdentifier
(	TokenNameLPAREN
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
tokens	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
data	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
endOffset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
whole	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
part	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
ch	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
whole	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
whole	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
ch	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
<	TokenNameLESS
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
ch	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
part	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
part	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
ch	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
currentOffset	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
part	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"find a solution!"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
tokens	TokenNameIdentifier
.	TokenNameDOT
addToken	TokenNameIdentifier
(	TokenNameLPAREN
whole	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tokens	TokenNameIdentifier
.	TokenNameDOT
addToken	TokenNameIdentifier
(	TokenNameLPAREN
part	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
currentOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
addToken	TokenNameIdentifier
(	TokenNameLPAREN
XPath	TokenNameIdentifier
.	TokenNameDOT
Tokens	TokenNameIdentifier
tokens	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
token	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
XPathException	TokenNameIdentifier
{	TokenNameLBRACE
tokens	TokenNameIdentifier
.	TokenNameDOT
addToken	TokenNameIdentifier
(	TokenNameLPAREN
token	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
main	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
argv	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
argv	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
expression	TokenNameIdentifier
=	TokenNameEQUAL
argv	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"# XPath expression: ""	TokenNameStringLiteral
+	TokenNamePLUS
expression	TokenNameIdentifier
+	TokenNamePLUS
'"'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
SymbolTable	TokenNameIdentifier
symbolTable	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SymbolTable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
XPath	TokenNameIdentifier
xpath	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XPath	TokenNameIdentifier
(	TokenNameLPAREN
expression	TokenNameIdentifier
,	TokenNameCOMMA
symbolTable	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"expanded xpath: ""	TokenNameStringLiteral
+	TokenNamePLUS
xpath	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
'"'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
XPathException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"error: "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
