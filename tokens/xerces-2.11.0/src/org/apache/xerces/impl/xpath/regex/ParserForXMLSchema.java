package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
.	TokenNameDOT
regex	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Hashtable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
class	TokenNameclass
ParserForXMLSchema	TokenNameIdentifier
extends	TokenNameextends
RegexParser	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
ParserForXMLSchema	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
ParserForXMLSchema	TokenNameIdentifier
(	TokenNameLPAREN
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processCaret	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
Token	TokenNameIdentifier
.	TokenNameDOT
createChar	TokenNameIdentifier
(	TokenNameLPAREN
'^'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processDollar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
Token	TokenNameIdentifier
.	TokenNameDOT
createChar	TokenNameIdentifier
(	TokenNameLPAREN
'$'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processLookahead	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processNegativelookahead	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processLookbehind	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processNegativelookbehind	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_A	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_Z	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_z	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_b	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_B	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_lt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_gt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processStar	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
Token	TokenNameIdentifier
.	TokenNameDOT
createClosure	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processPlus	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
Token	TokenNameIdentifier
.	TokenNameDOT
createConcat	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
createClosure	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processQuestion	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
par	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createUnion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
par	TokenNameIdentifier
.	TokenNameDOT
addChild	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
par	TokenNameIdentifier
.	TokenNameDOT
addChild	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
createEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
par	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
checkQuestion	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
off	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processParen	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
tok	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createParen	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
parseRegex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
T_RPAREN	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.factor.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tok	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processParen2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processCondition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processModifiers	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processIndependent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_c	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
getTokenForShorthand	TokenNameIdentifier
(	TokenNameLPAREN
'c'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_C	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
getTokenForShorthand	TokenNameIdentifier
(	TokenNameLPAREN
'C'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_i	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
getTokenForShorthand	TokenNameIdentifier
(	TokenNameLPAREN
'i'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_I	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
getTokenForShorthand	TokenNameIdentifier
(	TokenNameLPAREN
'I'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_g	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBacksolidus_X	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
processBackreference	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
processCIinCharacterClass	TokenNameIdentifier
(	TokenNameLPAREN
RangeToken	TokenNameIdentifier
tok	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tok	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getTokenForShorthand	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
RangeToken	TokenNameIdentifier
parseCharacterClass	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
useNrange	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
setContext	TokenNameIdentifier
(	TokenNameLPAREN
S_INBRACKETS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
nrange	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
boolean	TokenNameboolean
wasDecoded	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
RangeToken	TokenNameIdentifier
base	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
RangeToken	TokenNameIdentifier
tok	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
T_CHAR	TokenNameIdentifier
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'^'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nrange	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
base	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
base	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
UTF16_MAX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tok	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
type	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
firstloop	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
type	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
T_EOF	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
wasDecoded	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
T_CHAR	TokenNameIdentifier
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
']'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
!	TokenNameNOT
firstloop	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nrange	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
base	TokenNameIdentifier
.	TokenNameDOT
subtractRanges	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
=	TokenNameEQUAL
base	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
end	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
T_BACKSOLIDUS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'd'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'D'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'w'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'W'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
's'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'S'	TokenNameCharacterLiteral
:	TokenNameCOLON
tok	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getTokenForShorthand	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
end	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'i'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'I'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'c'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'C'	TokenNameCharacterLiteral
:	TokenNameCOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
processCIinCharacterClass	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
,	TokenNameCOMMA
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
end	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'p'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'P'	TokenNameCharacterLiteral
:	TokenNameCOLON
int	TokenNameint
pstart	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
RangeToken	TokenNameIdentifier
tok2	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
processBacksolidus_pP	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tok2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.atom.5"	TokenNameStringLiteral
,	TokenNameCOMMA
pstart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
tok2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
end	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
decodeEscaped	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
wasDecoded	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
decodeEscaped	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
T_XMLSCHEMA_CC_SUBTRACTION	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
firstloop	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nrange	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
base	TokenNameIdentifier
.	TokenNameDOT
subtractRanges	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
=	TokenNameEQUAL
base	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
RangeToken	TokenNameIdentifier
range2	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
parseCharacterClass	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
.	TokenNameDOT
subtractRanges	TokenNameIdentifier
(	TokenNameLPAREN
range2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
T_CHAR	TokenNameIdentifier
||	TokenNameOR_OR
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
']'	TokenNameCharacterLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.cc.5"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
T_CHAR	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'['	TokenNameCharacterLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.cc.6"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
']'	TokenNameCharacterLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.cc.7"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
']'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
!	TokenNameNOT
firstloop	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.cc.8"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
T_CHAR	TokenNameIdentifier
||	TokenNameOR_OR
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'-'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
firstloop	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
this	TokenNamethis
.	TokenNameDOT
isSet	TokenNameIdentifier
(	TokenNameLPAREN
RegularExpression	TokenNameIdentifier
.	TokenNameDOT
IGNORE_CASE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
c	TokenNameIdentifier
>	TokenNameGREATER
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
tok	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
,	TokenNameCOMMA
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
addCaseInsensitiveChar	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
,	TokenNameCOMMA
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
type	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
T_EOF	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.cc.2"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
T_CHAR	TokenNameIdentifier
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
']'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
this	TokenNamethis
.	TokenNameDOT
isSet	TokenNameIdentifier
(	TokenNameLPAREN
RegularExpression	TokenNameIdentifier
.	TokenNameDOT
IGNORE_CASE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
c	TokenNameIdentifier
>	TokenNameGREATER
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
tok	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
,	TokenNameCOMMA
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
addCaseInsensitiveChar	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
,	TokenNameCOMMA
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tok	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'-'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
T_XMLSCHEMA_CC_SUBTRACTION	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.cc.8"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
rangeend	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
T_CHAR	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
rangeend	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'['	TokenNameCharacterLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.cc.6"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
rangeend	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
']'	TokenNameCharacterLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.cc.7"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
rangeend	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.cc.8"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
T_BACKSOLIDUS	TokenNameIdentifier
)	TokenNameRPAREN
rangeend	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
decodeEscaped	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
>	TokenNameGREATER
rangeend	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.ope.3"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
this	TokenNamethis
.	TokenNameDOT
isSet	TokenNameIdentifier
(	TokenNameLPAREN
RegularExpression	TokenNameIdentifier
.	TokenNameDOT
IGNORE_CASE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
c	TokenNameIdentifier
>	TokenNameGREATER
0xffff	TokenNameIntegerLiteral
&&	TokenNameAND_AND
rangeend	TokenNameIdentifier
>	TokenNameGREATER
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
tok	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
,	TokenNameCOMMA
rangeend	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
addCaseInsensitiveCharRange	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
,	TokenNameCOMMA
c	TokenNameIdentifier
,	TokenNameCOMMA
rangeend	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
firstloop	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
T_EOF	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.cc.2"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
.	TokenNameDOT
sortRanges	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
.	TokenNameDOT
compactRanges	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
setContext	TokenNameIdentifier
(	TokenNameLPAREN
S_NORMAL	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tok	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
RangeToken	TokenNameIdentifier
parseSetOperations	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
this	TokenNamethis
.	TokenNameDOT
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
getTokenForShorthand	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'd'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
ParserForXMLSchema	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isDigit"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
'D'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
ParserForXMLSchema	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isDigit"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
'w'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
ParserForXMLSchema	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isWord"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
'W'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
ParserForXMLSchema	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isWord"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
's'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
ParserForXMLSchema	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isSpace"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
'S'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
ParserForXMLSchema	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isSpace"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
'c'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
ParserForXMLSchema	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isNameChar"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
'C'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
ParserForXMLSchema	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isNameChar"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
'i'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
ParserForXMLSchema	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isInitialNameChar"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
'I'	TokenNameCharacterLiteral
:	TokenNameCOLON
return	TokenNamereturn
ParserForXMLSchema	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isInitialNameChar"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Internal Error: shorthands: \u"	TokenNameStringLiteral
+	TokenNamePLUS
Integer	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
decodeEscaped	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
T_BACKSOLIDUS	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.next.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'n'	TokenNameCharacterLiteral
:	TokenNameCOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
'\n'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'r'	TokenNameCharacterLiteral
:	TokenNameCOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
'\r'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
't'	TokenNameCharacterLiteral
:	TokenNameCOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
'\t'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'\\'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'|'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'^'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'?'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'*'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'{'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'}'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'('	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
')'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'['	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
']'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
ex	TokenNameIdentifier
(	TokenNameLPAREN
"parser.process.1"	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
offset	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
private	TokenNameprivate
Hashtable	TokenNameIdentifier
ranges	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
static	TokenNamestatic
private	TokenNameprivate
Hashtable	TokenNameIdentifier
ranges2	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
static	TokenNamestatic
synchronized	TokenNamesynchronized
protected	TokenNameprotected
RangeToken	TokenNameIdentifier
getRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
positive	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ranges	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
ranges	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
tok	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setupRange	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
,	TokenNameCOMMA
SPACES	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isSpace"	TokenNameStringLiteral
,	TokenNameCOMMA
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isSpace"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setupRange	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
,	TokenNameCOMMA
DIGITS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isDigit"	TokenNameStringLiteral
,	TokenNameCOMMA
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isDigit"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setupRange	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
,	TokenNameCOMMA
DIGITS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isDigit"	TokenNameStringLiteral
,	TokenNameCOMMA
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isDigit"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setupRange	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
,	TokenNameCOMMA
LETTERS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
ranges	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isDigit"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isWord"	TokenNameStringLiteral
,	TokenNameCOMMA
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isWord"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setupRange	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
,	TokenNameCOMMA
NAMECHARS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isNameChar"	TokenNameStringLiteral
,	TokenNameCOMMA
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isNameChar"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setupRange	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
,	TokenNameCOMMA
LETTERS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'_'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'_'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
,	TokenNameCOMMA
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isInitialNameChar"	TokenNameStringLiteral
,	TokenNameCOMMA
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ranges2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"xml:isInitialNameChar"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
RangeToken	TokenNameIdentifier
tok	TokenNameIdentifier
=	TokenNameEQUAL
positive	TokenNameIdentifier
?	TokenNameQUESTION
(	TokenNameLPAREN
RangeToken	TokenNameIdentifier
)	TokenNameRPAREN
ranges	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
(	TokenNameLPAREN
RangeToken	TokenNameIdentifier
)	TokenNameRPAREN
ranges2	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tok	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
void	TokenNamevoid
setupRange	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
range	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
src	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
src	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
range	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
src	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
src	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
SPACES	TokenNameIdentifier
=	TokenNameEQUAL
"    "	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
NAMECHARS	TokenNameIdentifier
=	TokenNameEQUAL
"-.0:AZ__az··ÀÖ"	TokenNameStringLiteral
+	TokenNamePLUS
"ØöøıĴľŁňŊžƀǃǍǰ"	TokenNameStringLiteral
+	TokenNamePLUS
"ǴǵǺȗɐʨʻˁːˑ̀͠͡ͅ"	TokenNameStringLiteral
+	TokenNamePLUS
"ΆΊΌΌΎΡΣώϐϖϚϚϜϜ"	TokenNameStringLiteral
+	TokenNamePLUS
"ϞϞϠϠϢϳЁЌЎяёќўҁ"	TokenNameStringLiteral
+	TokenNamePLUS
"҃҆ҐӄӇӈӋӌӐӫӮӵӸӹ"	TokenNameStringLiteral
+	TokenNamePLUS
"ԱՖՙՙաֆֹֻֽֿֿ֑֣֡"	TokenNameStringLiteral
+	TokenNamePLUS
"ׁׂׄׄאתװײءغـْ٠٩"	TokenNameStringLiteral
+	TokenNamePLUS
"ٰڷںھۀێېۓە۪ۭۨ۰۹"	TokenNameStringLiteral
+	TokenNamePLUS
"ँःअह़्॑॔क़ॣ०९ঁঃ"	TokenNameStringLiteral
+	TokenNamePLUS
"অঌএঐওনপরললশহ়়"	TokenNameStringLiteral
+	TokenNamePLUS
"াৄেৈো্ৗৗড়ঢ়য়ৣ০ৱ"	TokenNameStringLiteral
+	TokenNamePLUS
"ਂਂਅਊਏਐਓਨਪਰਲਲ਼ਵਸ਼"	TokenNameStringLiteral
+	TokenNamePLUS
"ਸਹ਼਼ਾੂੇੈੋ੍ਖ਼ੜਫ਼ਫ਼"	TokenNameStringLiteral
+	TokenNamePLUS
"੦ੴઁઃઅઋઍઍએઑઓનપર"	TokenNameStringLiteral
+	TokenNamePLUS
"લળવહ઼ૅેૉો્ૠૠ૦૯"	TokenNameStringLiteral
+	TokenNamePLUS
"ଁଃଅଌଏଐଓନପରଲଳଶହ"	TokenNameStringLiteral
+	TokenNamePLUS
"଼ୃେୈୋ୍ୖୗଡ଼ଢ଼ୟୡ୦୯"	TokenNameStringLiteral
+	TokenNamePLUS
"ஂஃஅஊஎஐஒகஙசஜஜஞட"	TokenNameStringLiteral
+	TokenNamePLUS
"ணதநபமவஷஹாூெைொ்"	TokenNameStringLiteral
+	TokenNamePLUS
"ௗௗ௧௯ఁఃఅఌఎఐఒనపళ"	TokenNameStringLiteral
+	TokenNamePLUS
"వహాౄెైొ్ౕౖౠౡ౦౯"	TokenNameStringLiteral
+	TokenNamePLUS
"ಂಃಅಌಎಐಒನಪಳವಹಾೄ"	TokenNameStringLiteral
+	TokenNamePLUS
"ೆೈೊ್ೕೖೞೞೠೡ೦೯ംഃ"	TokenNameStringLiteral
+	TokenNamePLUS
"അഌഎഐഒനപഹാൃെൈൊ്"	TokenNameStringLiteral
+	TokenNamePLUS
"ൗൗൠൡ൦൯กฮะฺเ๎๐๙"	TokenNameStringLiteral
+	TokenNamePLUS
"ກຂຄຄງຈຊຊຍຍດທນຟ"	TokenNameStringLiteral
+	TokenNamePLUS
"ມຣລລວວສຫອຮະູົຽ"	TokenNameStringLiteral
+	TokenNamePLUS
"ເໄໆໆ່ໍ໐໙༘༙༠༩༵༵"	TokenNameStringLiteral
+	TokenNamePLUS
"༹༹༷༷༾ཇཉཀྵ྄ཱ྆ྋྐྕ"	TokenNameStringLiteral
+	TokenNamePLUS
"ྗྗྙྭྱྷྐྵྐྵႠჅაჶᄀᄀ"	TokenNameStringLiteral
+	TokenNamePLUS
"ᄂᄃᄅᄇᄉᄉᄋᄌᄎᄒᄼᄼᄾᄾ"	TokenNameStringLiteral
+	TokenNamePLUS
"ᅀᅀᅌᅌᅎᅎᅐᅐᅔᅕᅙᅙᅟᅡ"	TokenNameStringLiteral
+	TokenNamePLUS
"ᅣᅣᅥᅥᅧᅧᅩᅩᅭᅮᅲᅳᅵᅵ"	TokenNameStringLiteral
+	TokenNamePLUS
"ᆞᆞᆨᆨᆫᆫᆮᆯᆷᆸᆺᆺᆼᇂ"	TokenNameStringLiteral
+	TokenNamePLUS
"ᇫᇫᇰᇰᇹᇹḀẛẠỹἀἕἘἝ"	TokenNameStringLiteral
+	TokenNamePLUS
"ἠὅὈὍὐὗὙὙὛὛὝὝὟώ"	TokenNameStringLiteral
+	TokenNamePLUS
"ᾀᾴᾶᾼιιῂῄῆῌῐΐῖΊ"	TokenNameStringLiteral
+	TokenNamePLUS
"ῠῬῲῴῶῼ⃐⃜⃡⃡ΩΩKÅ"	TokenNameStringLiteral
+	TokenNamePLUS
"℮℮ↀↂ々々〇〇〡〯〱〵ぁゔ"	TokenNameStringLiteral
+	TokenNamePLUS
"゙゚ゝゞァヺーヾㄅㄬ一龥가힣"	TokenNameStringLiteral
+	TokenNamePLUS
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
LETTERS	TokenNameIdentifier
=	TokenNameEQUAL
"AZazÀÖØöøıĴľŁň"	TokenNameStringLiteral
+	TokenNamePLUS
"ŊžƀǃǍǰǴǵǺȗɐʨʻˁ"	TokenNameStringLiteral
+	TokenNamePLUS
"ΆΆΈΊΌΌΎΡΣώϐϖϚϚ"	TokenNameStringLiteral
+	TokenNamePLUS
"ϜϜϞϞϠϠϢϳЁЌЎяёќ"	TokenNameStringLiteral
+	TokenNamePLUS
"ўҁҐӄӇӈӋӌӐӫӮӵӸӹ"	TokenNameStringLiteral
+	TokenNamePLUS
"ԱՖՙՙաֆאתװײءغفي"	TokenNameStringLiteral
+	TokenNamePLUS
"ٱڷںھۀێېۓەەۥۦअह"	TokenNameStringLiteral
+	TokenNamePLUS
"ऽऽक़ॡঅঌএঐওনপরলল"	TokenNameStringLiteral
+	TokenNamePLUS
"শহড়ঢ়য়ৡৰৱਅਊਏਐਓਨ"	TokenNameStringLiteral
+	TokenNamePLUS
"ਪਰਲਲ਼ਵਸ਼ਸਹਖ਼ੜਫ਼ਫ਼ੲੴ"	TokenNameStringLiteral
+	TokenNamePLUS
"અઋઍઍએઑઓનપરલળવહ"	TokenNameStringLiteral
+	TokenNamePLUS
"ઽઽૠૠଅଌଏଐଓନପରଲଳ"	TokenNameStringLiteral
+	TokenNamePLUS
"ଶହଽଽଡ଼ଢ଼ୟୡஅஊஎஐஒக"	TokenNameStringLiteral
+	TokenNamePLUS
"ஙசஜஜஞடணதநபமவஷஹ"	TokenNameStringLiteral
+	TokenNamePLUS
"అఌఎఐఒనపళవహౠౡಅಌ"	TokenNameStringLiteral
+	TokenNamePLUS
"ಎಐಒನಪಳವಹೞೞೠೡഅഌ"	TokenNameStringLiteral
+	TokenNamePLUS
"എഐഒനപഹൠൡกฮะะาำ"	TokenNameStringLiteral
+	TokenNamePLUS
"เๅກຂຄຄງຈຊຊຍຍດທ"	TokenNameStringLiteral
+	TokenNamePLUS
"ນຟມຣລລວວສຫອຮະະ"	TokenNameStringLiteral
+	TokenNamePLUS
"າຳຽຽເໄཀཇཉཀྵႠჅაჶ"	TokenNameStringLiteral
+	TokenNamePLUS
"ᄀᄀᄂᄃᄅᄇᄉᄉᄋᄌᄎᄒᄼᄼ"	TokenNameStringLiteral
+	TokenNamePLUS
"ᄾᄾᅀᅀᅌᅌᅎᅎᅐᅐᅔᅕᅙᅙ"	TokenNameStringLiteral
+	TokenNamePLUS
"ᅟᅡᅣᅣᅥᅥᅧᅧᅩᅩᅭᅮᅲᅳ"	TokenNameStringLiteral
+	TokenNamePLUS
"ᅵᅵᆞᆞᆨᆨᆫᆫᆮᆯᆷᆸᆺᆺ"	TokenNameStringLiteral
+	TokenNamePLUS
"ᆼᇂᇫᇫᇰᇰᇹᇹḀẛẠỹἀἕ"	TokenNameStringLiteral
+	TokenNamePLUS
"ἘἝἠὅὈὍὐὗὙὙὛὛὝὝ"	TokenNameStringLiteral
+	TokenNamePLUS
"Ὗώᾀᾴᾶᾼιιῂῄῆῌῐΐ"	TokenNameStringLiteral
+	TokenNamePLUS
"ῖΊῠῬῲῴῶῼΩΩKÅ℮℮"	TokenNameStringLiteral
+	TokenNamePLUS
"ↀↂ〇〇〡〩ぁゔァヺㄅㄬ一龥"	TokenNameStringLiteral
+	TokenNamePLUS
"가힣"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DIGITS	TokenNameIdentifier
=	TokenNameEQUAL
"09٠٩۰۹०९০৯੦੯૦૯"	TokenNameStringLiteral
+	TokenNamePLUS
"୦୯௧௯౦౯೦೯൦൯๐๙໐໙"	TokenNameStringLiteral
+	TokenNamePLUS
"༠༩"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
