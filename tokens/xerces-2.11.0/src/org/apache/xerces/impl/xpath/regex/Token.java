package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
.	TokenNameDOT
regex	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Hashtable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Vector	TokenNameIdentifier
;	TokenNameSEMICOLON
class	TokenNameclass
Token	TokenNameIdentifier
implements	TokenNameimplements
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Serializable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
serialVersionUID	TokenNameIdentifier
=	TokenNameEQUAL
8484976002585487481L	TokenNameLongLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
COUNTTOKENS	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
static	TokenNamestatic
int	TokenNameint
tokens	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHAR	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DOT	TokenNameIdentifier
=	TokenNameEQUAL
11	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONCAT	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
UNION	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CLOSURE	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
RANGE	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
NRANGE	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
PAREN	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
EMPTY	TokenNameIdentifier
=	TokenNameEQUAL
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
ANCHOR	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
NONGREEDYCLOSURE	TokenNameIdentifier
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
STRING	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
BACKREFERENCE	TokenNameIdentifier
=	TokenNameEQUAL
12	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
LOOKAHEAD	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
NEGATIVELOOKAHEAD	TokenNameIdentifier
=	TokenNameEQUAL
21	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
LOOKBEHIND	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
NEGATIVELOOKBEHIND	TokenNameIdentifier
=	TokenNameEQUAL
23	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
INDEPENDENT	TokenNameIdentifier
=	TokenNameEQUAL
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MODIFIERGROUP	TokenNameIdentifier
=	TokenNameEQUAL
25	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONDITION	TokenNameIdentifier
=	TokenNameEQUAL
26	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
UTF16_MAX	TokenNameIdentifier
=	TokenNameEQUAL
0x10ffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
type	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_dot	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_0to9	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_wordchars	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_not_0to9	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_not_wordchars	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_spaces	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_not_spaces	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_empty	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_linebeginning	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_linebeginning2	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_lineend	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_stringbeginning	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_stringend	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_stringend2	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_wordedge	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_not_wordedge	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_wordbeginning	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
Token	TokenNameIdentifier
token_wordend	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
Token	TokenNameIdentifier
.	TokenNameDOT
token_empty	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
EMPTY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_linebeginning	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createAnchor	TokenNameIdentifier
(	TokenNameLPAREN
'^'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_linebeginning2	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createAnchor	TokenNameIdentifier
(	TokenNameLPAREN
'@'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_lineend	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createAnchor	TokenNameIdentifier
(	TokenNameLPAREN
'$'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_stringbeginning	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createAnchor	TokenNameIdentifier
(	TokenNameLPAREN
'A'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_stringend	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createAnchor	TokenNameIdentifier
(	TokenNameLPAREN
'z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_stringend2	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createAnchor	TokenNameIdentifier
(	TokenNameLPAREN
'Z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_wordedge	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createAnchor	TokenNameIdentifier
(	TokenNameLPAREN
'b'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_not_wordedge	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createAnchor	TokenNameIdentifier
(	TokenNameLPAREN
'B'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_wordbeginning	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createAnchor	TokenNameIdentifier
(	TokenNameLPAREN
'<'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_wordend	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createAnchor	TokenNameIdentifier
(	TokenNameLPAREN
'>'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_dot	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
DOT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_0to9	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_0to9	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_wordchars	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_wordchars	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_wordchars	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'A'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_wordchars	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'_'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'_'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_wordchars	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'a'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_spaces	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_spaces	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'\t'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\t'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_spaces	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'\n'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\n'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_spaces	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'\f'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\f'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_spaces	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'\r'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\r'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_spaces	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
' '	TokenNameCharacterLiteral
,	TokenNameCOMMA
' '	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_not_0to9	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
token_0to9	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_not_wordchars	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
token_wordchars	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_not_spaces	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
token_spaces	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
.	TokenNameDOT
ParenToken	TokenNameIdentifier
createLook	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
type	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
ParenToken	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
.	TokenNameDOT
ParenToken	TokenNameIdentifier
createParen	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
child	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
pnumber	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
ParenToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
PAREN	TokenNameIdentifier
,	TokenNameCOMMA
child	TokenNameIdentifier
,	TokenNameCOMMA
pnumber	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
.	TokenNameDOT
ClosureToken	TokenNameIdentifier
createClosure	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
ClosureToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
CLOSURE	TokenNameIdentifier
,	TokenNameCOMMA
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
.	TokenNameDOT
ClosureToken	TokenNameIdentifier
createNGClosure	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
ClosureToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
NONGREEDYCLOSURE	TokenNameIdentifier
,	TokenNameCOMMA
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
.	TokenNameDOT
ConcatToken	TokenNameIdentifier
createConcat	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok1	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
tok2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
ConcatToken	TokenNameIdentifier
(	TokenNameLPAREN
tok1	TokenNameIdentifier
,	TokenNameCOMMA
tok2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
.	TokenNameDOT
UnionToken	TokenNameIdentifier
createConcat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
UnionToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
CONCAT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
.	TokenNameDOT
UnionToken	TokenNameIdentifier
createUnion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
UnionToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
UNION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
createEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
Token	TokenNameIdentifier
.	TokenNameDOT
token_empty	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
RangeToken	TokenNameIdentifier
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
RangeToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
RANGE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
RangeToken	TokenNameIdentifier
createNRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
RangeToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
NRANGE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
.	TokenNameDOT
CharToken	TokenNameIdentifier
createChar	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
CharToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
CHAR	TokenNameIdentifier
,	TokenNameCOMMA
ch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
private	TokenNameprivate
Token	TokenNameIdentifier
.	TokenNameDOT
CharToken	TokenNameIdentifier
createAnchor	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
CharToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
ANCHOR	TokenNameIdentifier
,	TokenNameCOMMA
ch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
.	TokenNameDOT
StringToken	TokenNameIdentifier
createBackReference	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
refno	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
StringToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
BACKREFERENCE	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
refno	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
.	TokenNameDOT
StringToken	TokenNameIdentifier
createString	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
str	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
StringToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
STRING	TokenNameIdentifier
,	TokenNameCOMMA
str	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
.	TokenNameDOT
ModifierToken	TokenNameIdentifier
createModifierGroup	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
child	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
add	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
mask	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
ModifierToken	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
add	TokenNameIdentifier
,	TokenNameCOMMA
mask	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
.	TokenNameDOT
ConditionToken	TokenNameIdentifier
createCondition	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
refno	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
condition	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
yespat	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
nopat	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
COUNTTOKENS	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
tokens	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Token	TokenNameIdentifier
.	TokenNameDOT
ConditionToken	TokenNameIdentifier
(	TokenNameLPAREN
refno	TokenNameIdentifier
,	TokenNameCOMMA
condition	TokenNameIdentifier
,	TokenNameCOMMA
yespat	TokenNameIdentifier
,	TokenNameCOMMA
nopat	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Token	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
getChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
addChild	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Not supported."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
addRange	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Not supported."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
sortRanges	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Not supported."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
compactRanges	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Not supported."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Not supported."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
subtractRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Not supported."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
intersectRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Not supported."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Token	TokenNameIdentifier
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
RangeToken	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
setMin	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
min	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
void	TokenNamevoid
setMax	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
max	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
int	TokenNameint
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
getReferenceNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
getParenNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
getChar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
options	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
DOT	TokenNameIdentifier
?	TokenNameQUESTION
"."	TokenNameStringLiteral
:	TokenNameCOLON
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
getMinLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
CONCAT	TokenNameIdentifier
:	TokenNameCOLON
int	TokenNameint
sum	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
sum	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getMinLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
sum	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
CONDITION	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
UNION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
getMinLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
min	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getMinLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
min	TokenNameIdentifier
<	TokenNameLESS
ret	TokenNameIdentifier
)	TokenNameRPAREN
ret	TokenNameIdentifier
=	TokenNameEQUAL
min	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
CLOSURE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NONGREEDYCLOSURE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
getMinLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
EMPTY	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ANCHOR	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
DOT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
CHAR	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
RANGE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NRANGE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
INDEPENDENT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
PAREN	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
MODIFIERGROUP	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
getMinLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
BACKREFERENCE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
STRING	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LOOKAHEAD	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NEGATIVELOOKAHEAD	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LOOKBEHIND	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NEGATIVELOOKBEHIND	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Token#getMinLength(): Invalid Type: "	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
getMaxLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
CONCAT	TokenNameIdentifier
:	TokenNameCOLON
int	TokenNameint
sum	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
d	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getMaxLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
d	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sum	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
d	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
sum	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
CONDITION	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
UNION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
getMaxLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ret	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
i	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
max	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getMaxLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
max	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
max	TokenNameIdentifier
>	TokenNameGREATER
ret	TokenNameIdentifier
)	TokenNameRPAREN
ret	TokenNameIdentifier
=	TokenNameEQUAL
max	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
CLOSURE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NONGREEDYCLOSURE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
getMaxLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
EMPTY	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ANCHOR	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
CHAR	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
DOT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
RANGE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NRANGE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
INDEPENDENT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
PAREN	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
MODIFIERGROUP	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
getMaxLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
BACKREFERENCE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
case	TokenNamecase
STRING	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LOOKAHEAD	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NEGATIVELOOKAHEAD	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LOOKBEHIND	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NEGATIVELOOKBEHIND	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Token#getMaxLength(): Invalid Type: "	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
FC_CONTINUE	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
FC_TERMINAL	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
FC_ANY	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
isSet	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
options	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
flag	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
options	TokenNameIdentifier
&	TokenNameAND
flag	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
flag	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
analyzeFirstCharacter	TokenNameIdentifier
(	TokenNameLPAREN
RangeToken	TokenNameIdentifier
result	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
options	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
CONCAT	TokenNameIdentifier
:	TokenNameCOLON
int	TokenNameint
ret	TokenNameIdentifier
=	TokenNameEQUAL
FC_CONTINUE	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
analyzeFirstCharacter	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
options	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
FC_CONTINUE	TokenNameIdentifier
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
UNION	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
FC_CONTINUE	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
ret2	TokenNameIdentifier
=	TokenNameEQUAL
FC_CONTINUE	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
hasEmpty	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
ret2	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
analyzeFirstCharacter	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ret2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
FC_ANY	TokenNameIdentifier
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ret2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
FC_CONTINUE	TokenNameIdentifier
)	TokenNameRPAREN
hasEmpty	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
hasEmpty	TokenNameIdentifier
?	TokenNameQUESTION
FC_CONTINUE	TokenNameIdentifier
:	TokenNameCOLON
ret2	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
CONDITION	TokenNameIdentifier
:	TokenNameCOLON
int	TokenNameint
ret3	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
analyzeFirstCharacter	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
FC_CONTINUE	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ret3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
FC_ANY	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
ret3	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
ret4	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
analyzeFirstCharacter	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ret4	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
FC_ANY	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
ret4	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
ret3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
FC_CONTINUE	TokenNameIdentifier
||	TokenNameOR_OR
ret4	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
FC_CONTINUE	TokenNameIdentifier
?	TokenNameQUESTION
FC_CONTINUE	TokenNameIdentifier
:	TokenNameCOLON
FC_TERMINAL	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
CLOSURE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NONGREEDYCLOSURE	TokenNameIdentifier
:	TokenNameCOLON
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
analyzeFirstCharacter	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
FC_CONTINUE	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
EMPTY	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ANCHOR	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
FC_CONTINUE	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
CHAR	TokenNameIdentifier
:	TokenNameCOLON
int	TokenNameint
ch	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
ch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
<	TokenNameLESS
0x10000	TokenNameIntegerLiteral
&&	TokenNameAND_AND
isSet	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
,	TokenNameCOMMA
RegularExpression	TokenNameIdentifier
.	TokenNameDOT
IGNORE_CASE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toUpperCase	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
ch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ch	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
ch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
FC_TERMINAL	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
DOT	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
FC_ANY	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
RANGE	TokenNameIdentifier
:	TokenNameCOLON
result	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
FC_TERMINAL	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
NRANGE	TokenNameIdentifier
:	TokenNameCOLON
result	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
FC_TERMINAL	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
INDEPENDENT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
PAREN	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
analyzeFirstCharacter	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
MODIFIERGROUP	TokenNameIdentifier
:	TokenNameCOLON
options	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
ModifierToken	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
)	TokenNameRPAREN
.	TokenNameDOT
getOptions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
options	TokenNameIdentifier
&=	TokenNameAND_EQUAL
~	TokenNameTWIDDLE
(	TokenNameLPAREN
(	TokenNameLPAREN
ModifierToken	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
)	TokenNameRPAREN
.	TokenNameDOT
getOptionsMask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
analyzeFirstCharacter	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
BACKREFERENCE	TokenNameIdentifier
:	TokenNameCOLON
result	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
UTF16_MAX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
FC_ANY	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
STRING	TokenNameIdentifier
:	TokenNameCOLON
int	TokenNameint
cha	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ch2	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
REUtil	TokenNameIdentifier
.	TokenNameDOT
isHighSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
cha	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
2	TokenNameIntegerLiteral
&&	TokenNameAND_AND
REUtil	TokenNameIdentifier
.	TokenNameDOT
isLowSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
ch2	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
cha	TokenNameIdentifier
=	TokenNameEQUAL
REUtil	TokenNameIdentifier
.	TokenNameDOT
composeFromSurrogates	TokenNameIdentifier
(	TokenNameLPAREN
cha	TokenNameIdentifier
,	TokenNameCOMMA
ch2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
cha	TokenNameIdentifier
,	TokenNameCOMMA
cha	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cha	TokenNameIdentifier
<	TokenNameLESS
0x10000	TokenNameIntegerLiteral
&&	TokenNameAND_AND
isSet	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
,	TokenNameCOMMA
RegularExpression	TokenNameIdentifier
.	TokenNameDOT
IGNORE_CASE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
cha	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toUpperCase	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
cha	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
cha	TokenNameIdentifier
,	TokenNameCOMMA
cha	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cha	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
cha	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
cha	TokenNameIdentifier
,	TokenNameCOMMA
cha	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
FC_TERMINAL	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
LOOKAHEAD	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NEGATIVELOOKAHEAD	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LOOKBEHIND	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NEGATIVELOOKBEHIND	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
FC_CONTINUE	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Token#analyzeHeadCharacter(): Invalid Type: "	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
isShorterThan	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tok	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
mylength	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
STRING	TokenNameIdentifier
)	TokenNameRPAREN
mylength	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Internal Error: Illegal type: "	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
otherlength	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tok	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
STRING	TokenNameIdentifier
)	TokenNameRPAREN
otherlength	TokenNameIdentifier
=	TokenNameEQUAL
tok	TokenNameIdentifier
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Internal Error: Illegal type: "	TokenNameStringLiteral
+	TokenNamePLUS
tok	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
mylength	TokenNameIdentifier
<	TokenNameLESS
otherlength	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
class	TokenNameclass
FixedStringContainer	TokenNameIdentifier
{	TokenNameLBRACE
Token	TokenNameIdentifier
token	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
options	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
FixedStringContainer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
final	TokenNamefinal
void	TokenNamevoid
findFixedString	TokenNameIdentifier
(	TokenNameLPAREN
FixedStringContainer	TokenNameIdentifier
container	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
options	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
CONCAT	TokenNameIdentifier
:	TokenNameCOLON
Token	TokenNameIdentifier
prevToken	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
prevOptions	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
findFixedString	TokenNameIdentifier
(	TokenNameLPAREN
container	TokenNameIdentifier
,	TokenNameCOMMA
options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
prevToken	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
prevToken	TokenNameIdentifier
.	TokenNameDOT
isShorterThan	TokenNameIdentifier
(	TokenNameLPAREN
container	TokenNameIdentifier
.	TokenNameDOT
token	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
prevToken	TokenNameIdentifier
=	TokenNameEQUAL
container	TokenNameIdentifier
.	TokenNameDOT
token	TokenNameIdentifier
;	TokenNameSEMICOLON
prevOptions	TokenNameIdentifier
=	TokenNameEQUAL
container	TokenNameIdentifier
.	TokenNameDOT
options	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
container	TokenNameIdentifier
.	TokenNameDOT
token	TokenNameIdentifier
=	TokenNameEQUAL
prevToken	TokenNameIdentifier
;	TokenNameSEMICOLON
container	TokenNameIdentifier
.	TokenNameDOT
options	TokenNameIdentifier
=	TokenNameEQUAL
prevOptions	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
UNION	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
CLOSURE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NONGREEDYCLOSURE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
EMPTY	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ANCHOR	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
RANGE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
DOT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NRANGE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
BACKREFERENCE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LOOKAHEAD	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NEGATIVELOOKAHEAD	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
LOOKBEHIND	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
NEGATIVELOOKBEHIND	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
CONDITION	TokenNameIdentifier
:	TokenNameCOLON
container	TokenNameIdentifier
.	TokenNameDOT
token	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
CHAR	TokenNameIdentifier
:	TokenNameCOLON
container	TokenNameIdentifier
.	TokenNameDOT
token	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
STRING	TokenNameIdentifier
:	TokenNameCOLON
container	TokenNameIdentifier
.	TokenNameDOT
token	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
;	TokenNameSEMICOLON
container	TokenNameIdentifier
.	TokenNameDOT
options	TokenNameIdentifier
=	TokenNameEQUAL
options	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
INDEPENDENT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
PAREN	TokenNameIdentifier
:	TokenNameCOLON
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
findFixedString	TokenNameIdentifier
(	TokenNameLPAREN
container	TokenNameIdentifier
,	TokenNameCOMMA
options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
case	TokenNamecase
MODIFIERGROUP	TokenNameIdentifier
:	TokenNameCOLON
options	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
ModifierToken	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
)	TokenNameRPAREN
.	TokenNameDOT
getOptions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
options	TokenNameIdentifier
&=	TokenNameAND_EQUAL
~	TokenNameTWIDDLE
(	TokenNameLPAREN
(	TokenNameLPAREN
ModifierToken	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
)	TokenNameRPAREN
.	TokenNameDOT
getOptionsMask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
findFixedString	TokenNameIdentifier
(	TokenNameLPAREN
container	TokenNameIdentifier
,	TokenNameCOMMA
options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Token#findFixedString(): Invalid Type: "	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
boolean	TokenNameboolean
match	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"NFAArrow#match(): Internal error: "	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
Hashtable	TokenNameIdentifier
categories	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
Hashtable	TokenNameIdentifier
categories2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
categoryNames	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"Cn"	TokenNameStringLiteral
,	TokenNameCOMMA
"Lu"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ll"	TokenNameStringLiteral
,	TokenNameCOMMA
"Lt"	TokenNameStringLiteral
,	TokenNameCOMMA
"Lm"	TokenNameStringLiteral
,	TokenNameCOMMA
"Lo"	TokenNameStringLiteral
,	TokenNameCOMMA
"Mn"	TokenNameStringLiteral
,	TokenNameCOMMA
"Me"	TokenNameStringLiteral
,	TokenNameCOMMA
"Mc"	TokenNameStringLiteral
,	TokenNameCOMMA
"Nd"	TokenNameStringLiteral
,	TokenNameCOMMA
"Nl"	TokenNameStringLiteral
,	TokenNameCOMMA
"No"	TokenNameStringLiteral
,	TokenNameCOMMA
"Zs"	TokenNameStringLiteral
,	TokenNameCOMMA
"Zl"	TokenNameStringLiteral
,	TokenNameCOMMA
"Zp"	TokenNameStringLiteral
,	TokenNameCOMMA
"Cc"	TokenNameStringLiteral
,	TokenNameCOMMA
"Cf"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"Co"	TokenNameStringLiteral
,	TokenNameCOMMA
"Cs"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pd"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ps"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pe"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pc"	TokenNameStringLiteral
,	TokenNameCOMMA
"Po"	TokenNameStringLiteral
,	TokenNameCOMMA
"Sm"	TokenNameStringLiteral
,	TokenNameCOMMA
"Sc"	TokenNameStringLiteral
,	TokenNameCOMMA
"Sk"	TokenNameStringLiteral
,	TokenNameCOMMA
"So"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pi"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pf"	TokenNameStringLiteral
,	TokenNameCOMMA
"L"	TokenNameStringLiteral
,	TokenNameCOMMA
"M"	TokenNameStringLiteral
,	TokenNameCOMMA
"N"	TokenNameStringLiteral
,	TokenNameCOMMA
"Z"	TokenNameStringLiteral
,	TokenNameCOMMA
"C"	TokenNameStringLiteral
,	TokenNameCOMMA
"P"	TokenNameStringLiteral
,	TokenNameCOMMA
"S"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHAR_INIT_QUOTE	TokenNameIdentifier
=	TokenNameEQUAL
29	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHAR_FINAL_QUOTE	TokenNameIdentifier
=	TokenNameEQUAL
30	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHAR_LETTER	TokenNameIdentifier
=	TokenNameEQUAL
31	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHAR_MARK	TokenNameIdentifier
=	TokenNameEQUAL
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHAR_NUMBER	TokenNameIdentifier
=	TokenNameEQUAL
33	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHAR_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
34	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHAR_OTHER	TokenNameIdentifier
=	TokenNameEQUAL
35	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHAR_PUNCTUATION	TokenNameIdentifier
=	TokenNameEQUAL
36	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHAR_SYMBOL	TokenNameIdentifier
=	TokenNameEQUAL
37	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
blockNames	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"Basic Latin"	TokenNameStringLiteral
,	TokenNameCOMMA
"Latin-1 Supplement"	TokenNameStringLiteral
,	TokenNameCOMMA
"Latin Extended-A"	TokenNameStringLiteral
,	TokenNameCOMMA
"Latin Extended-B"	TokenNameStringLiteral
,	TokenNameCOMMA
"IPA Extensions"	TokenNameStringLiteral
,	TokenNameCOMMA
"Spacing Modifier Letters"	TokenNameStringLiteral
,	TokenNameCOMMA
"Combining Diacritical Marks"	TokenNameStringLiteral
,	TokenNameCOMMA
"Greek"	TokenNameStringLiteral
,	TokenNameCOMMA
"Cyrillic"	TokenNameStringLiteral
,	TokenNameCOMMA
"Armenian"	TokenNameStringLiteral
,	TokenNameCOMMA
"Hebrew"	TokenNameStringLiteral
,	TokenNameCOMMA
"Arabic"	TokenNameStringLiteral
,	TokenNameCOMMA
"Syriac"	TokenNameStringLiteral
,	TokenNameCOMMA
"Thaana"	TokenNameStringLiteral
,	TokenNameCOMMA
"Devanagari"	TokenNameStringLiteral
,	TokenNameCOMMA
"Bengali"	TokenNameStringLiteral
,	TokenNameCOMMA
"Gurmukhi"	TokenNameStringLiteral
,	TokenNameCOMMA
"Gujarati"	TokenNameStringLiteral
,	TokenNameCOMMA
"Oriya"	TokenNameStringLiteral
,	TokenNameCOMMA
"Tamil"	TokenNameStringLiteral
,	TokenNameCOMMA
"Telugu"	TokenNameStringLiteral
,	TokenNameCOMMA
"Kannada"	TokenNameStringLiteral
,	TokenNameCOMMA
"Malayalam"	TokenNameStringLiteral
,	TokenNameCOMMA
"Sinhala"	TokenNameStringLiteral
,	TokenNameCOMMA
"Thai"	TokenNameStringLiteral
,	TokenNameCOMMA
"Lao"	TokenNameStringLiteral
,	TokenNameCOMMA
"Tibetan"	TokenNameStringLiteral
,	TokenNameCOMMA
"Myanmar"	TokenNameStringLiteral
,	TokenNameCOMMA
"Georgian"	TokenNameStringLiteral
,	TokenNameCOMMA
"Hangul Jamo"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ethiopic"	TokenNameStringLiteral
,	TokenNameCOMMA
"Cherokee"	TokenNameStringLiteral
,	TokenNameCOMMA
"Unified Canadian Aboriginal Syllabics"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ogham"	TokenNameStringLiteral
,	TokenNameCOMMA
"Runic"	TokenNameStringLiteral
,	TokenNameCOMMA
"Khmer"	TokenNameStringLiteral
,	TokenNameCOMMA
"Mongolian"	TokenNameStringLiteral
,	TokenNameCOMMA
"Latin Extended Additional"	TokenNameStringLiteral
,	TokenNameCOMMA
"Greek Extended"	TokenNameStringLiteral
,	TokenNameCOMMA
"General Punctuation"	TokenNameStringLiteral
,	TokenNameCOMMA
"Superscripts and Subscripts"	TokenNameStringLiteral
,	TokenNameCOMMA
"Currency Symbols"	TokenNameStringLiteral
,	TokenNameCOMMA
"Combining Marks for Symbols"	TokenNameStringLiteral
,	TokenNameCOMMA
"Letterlike Symbols"	TokenNameStringLiteral
,	TokenNameCOMMA
"Number Forms"	TokenNameStringLiteral
,	TokenNameCOMMA
"Arrows"	TokenNameStringLiteral
,	TokenNameCOMMA
"Mathematical Operators"	TokenNameStringLiteral
,	TokenNameCOMMA
"Miscellaneous Technical"	TokenNameStringLiteral
,	TokenNameCOMMA
"Control Pictures"	TokenNameStringLiteral
,	TokenNameCOMMA
"Optical Character Recognition"	TokenNameStringLiteral
,	TokenNameCOMMA
"Enclosed Alphanumerics"	TokenNameStringLiteral
,	TokenNameCOMMA
"Box Drawing"	TokenNameStringLiteral
,	TokenNameCOMMA
"Block Elements"	TokenNameStringLiteral
,	TokenNameCOMMA
"Geometric Shapes"	TokenNameStringLiteral
,	TokenNameCOMMA
"Miscellaneous Symbols"	TokenNameStringLiteral
,	TokenNameCOMMA
"Dingbats"	TokenNameStringLiteral
,	TokenNameCOMMA
"Braille Patterns"	TokenNameStringLiteral
,	TokenNameCOMMA
"CJK Radicals Supplement"	TokenNameStringLiteral
,	TokenNameCOMMA
"Kangxi Radicals"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ideographic Description Characters"	TokenNameStringLiteral
,	TokenNameCOMMA
"CJK Symbols and Punctuation"	TokenNameStringLiteral
,	TokenNameCOMMA
"Hiragana"	TokenNameStringLiteral
,	TokenNameCOMMA
"Katakana"	TokenNameStringLiteral
,	TokenNameCOMMA
"Bopomofo"	TokenNameStringLiteral
,	TokenNameCOMMA
"Hangul Compatibility Jamo"	TokenNameStringLiteral
,	TokenNameCOMMA
"Kanbun"	TokenNameStringLiteral
,	TokenNameCOMMA
"Bopomofo Extended"	TokenNameStringLiteral
,	TokenNameCOMMA
"Enclosed CJK Letters and Months"	TokenNameStringLiteral
,	TokenNameCOMMA
"CJK Compatibility"	TokenNameStringLiteral
,	TokenNameCOMMA
"CJK Unified Ideographs Extension A"	TokenNameStringLiteral
,	TokenNameCOMMA
"CJK Unified Ideographs"	TokenNameStringLiteral
,	TokenNameCOMMA
"Yi Syllables"	TokenNameStringLiteral
,	TokenNameCOMMA
"Yi Radicals"	TokenNameStringLiteral
,	TokenNameCOMMA
"Hangul Syllables"	TokenNameStringLiteral
,	TokenNameCOMMA
"Private Use"	TokenNameStringLiteral
,	TokenNameCOMMA
"CJK Compatibility Ideographs"	TokenNameStringLiteral
,	TokenNameCOMMA
"Alphabetic Presentation Forms"	TokenNameStringLiteral
,	TokenNameCOMMA
"Arabic Presentation Forms-A"	TokenNameStringLiteral
,	TokenNameCOMMA
"Combining Half Marks"	TokenNameStringLiteral
,	TokenNameCOMMA
"CJK Compatibility Forms"	TokenNameStringLiteral
,	TokenNameCOMMA
"Small Form Variants"	TokenNameStringLiteral
,	TokenNameCOMMA
"Arabic Presentation Forms-B"	TokenNameStringLiteral
,	TokenNameCOMMA
"Specials"	TokenNameStringLiteral
,	TokenNameCOMMA
"Halfwidth and Fullwidth Forms"	TokenNameStringLiteral
,	TokenNameCOMMA
"Old Italic"	TokenNameStringLiteral
,	TokenNameCOMMA
"Gothic"	TokenNameStringLiteral
,	TokenNameCOMMA
"Deseret"	TokenNameStringLiteral
,	TokenNameCOMMA
"Byzantine Musical Symbols"	TokenNameStringLiteral
,	TokenNameCOMMA
"Musical Symbols"	TokenNameStringLiteral
,	TokenNameCOMMA
"Mathematical Alphanumeric Symbols"	TokenNameStringLiteral
,	TokenNameCOMMA
"CJK Unified Ideographs Extension B"	TokenNameStringLiteral
,	TokenNameCOMMA
"CJK Compatibility Ideographs Supplement"	TokenNameStringLiteral
,	TokenNameCOMMA
"Tags"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
blockRanges	TokenNameIdentifier
=	TokenNameEQUAL
" ÿĀſƀɏɐʯʰ˿̀ͯ"	TokenNameStringLiteral
+	TokenNamePLUS
"ͰϿЀӿ԰֏֐׿؀ۿ܀ݏހ޿"	TokenNameStringLiteral
+	TokenNamePLUS
"ऀॿঀ৿਀੿઀૿଀୿஀௿ఀ౿ಀ೿"	TokenNameStringLiteral
+	TokenNamePLUS
"ഀൿ඀෿฀๿຀໿ༀ࿿က႟Ⴀჿᄀᇿ"	TokenNameStringLiteral
+	TokenNamePLUS
"ሀ፿Ꭰ᏿᐀ᙿ ᚟ᚠ᛿ក៿᠀᢯Ḁỿ"	TokenNameStringLiteral
+	TokenNamePLUS
"ἀ῿ ⁯⁰₟₠⃏⃐⃿℀⅏⅐↏←⇿∀⋿"	TokenNameStringLiteral
+	TokenNamePLUS
"⌀⏿␀␿⑀⑟①⓿─╿▀▟■◿☀⛿✀➿"	TokenNameStringLiteral
+	TokenNamePLUS
"⠀⣿⺀⻿⼀⿟⿰⿿　〿぀ゟ゠ヿ㄀ㄯ㄰㆏"	TokenNameStringLiteral
+	TokenNamePLUS
"㆐㆟ㆠㆿ㈀㋿㌀㏿㐀䶵一鿿ꀀ꒏꒐꓏"	TokenNameStringLiteral
+	TokenNamePLUS
"가힣豈﫿ﬀﭏﭐ﷿"	TokenNameStringLiteral
+	TokenNamePLUS
"︠︯︰﹏﹐﹯ﹰ﻾﻿﻿＀￯"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
nonBMPBlockRanges	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0x10300	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1032F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10330	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1034F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10400	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1044F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D0FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D100	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D1FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D400	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D7FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x20000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2A6D6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2F800	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2FA1F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xE0000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xE007F	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
NONBMP_BLOCK_START	TokenNameIdentifier
=	TokenNameEQUAL
84	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
protected	TokenNameprotected
RangeToken	TokenNameIdentifier
getRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
positive	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
synchronized	TokenNamesynchronized
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ranges	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
Token	TokenNameIdentifier
.	TokenNameDOT
categoryNames	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
ranges	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
type	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
0x10000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
START_PUNCTUATION	TokenNameIdentifier
||	TokenNameOR_OR
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
END_PUNCTUATION	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x00AB	TokenNameIntegerLiteral
||	TokenNameOR_OR
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2018	TokenNameIntegerLiteral
||	TokenNameOR_OR
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x201B	TokenNameIntegerLiteral
||	TokenNameOR_OR
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x201C	TokenNameIntegerLiteral
||	TokenNameOR_OR
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x201F	TokenNameIntegerLiteral
||	TokenNameOR_OR
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2039	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
CHAR_INIT_QUOTE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x00BB	TokenNameIntegerLiteral
||	TokenNameOR_OR
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x2019	TokenNameIntegerLiteral
||	TokenNameOR_OR
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x201D	TokenNameIntegerLiteral
||	TokenNameOR_OR
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x203A	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
CHAR_FINAL_QUOTE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
type	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
,	TokenNameCOMMA
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
UPPERCASE_LETTER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
LOWERCASE_LETTER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
TITLECASE_LETTER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
MODIFIER_LETTER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
OTHER_LETTER	TokenNameIdentifier
:	TokenNameCOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
CHAR_LETTER	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
NON_SPACING_MARK	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
COMBINING_SPACING_MARK	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
ENCLOSING_MARK	TokenNameIdentifier
:	TokenNameCOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
CHAR_MARK	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
DECIMAL_DIGIT_NUMBER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
LETTER_NUMBER	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
OTHER_NUMBER	TokenNameIdentifier
:	TokenNameCOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
CHAR_NUMBER	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
SPACE_SEPARATOR	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
LINE_SEPARATOR	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
PARAGRAPH_SEPARATOR	TokenNameIdentifier
:	TokenNameCOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
CHAR_SEPARATOR	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
CONTROL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
FORMAT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
SURROGATE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
PRIVATE_USE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
UNASSIGNED	TokenNameIdentifier
:	TokenNameCOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
CHAR_OTHER	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
CONNECTOR_PUNCTUATION	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
DASH_PUNCTUATION	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
START_PUNCTUATION	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
END_PUNCTUATION	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
CHAR_INIT_QUOTE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
CHAR_FINAL_QUOTE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
OTHER_PUNCTUATION	TokenNameIdentifier
:	TokenNameCOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
CHAR_PUNCTUATION	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
MATH_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
CURRENCY_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
MODIFIER_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
Character	TokenNameIdentifier
.	TokenNameDOT
OTHER_SYMBOL	TokenNameIdentifier
:	TokenNameCOLON
type	TokenNameIdentifier
=	TokenNameEQUAL
CHAR_SYMBOL	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"org.apache.xerces.utils.regex.Token#getRange(): Unknown Unicode category: "	TokenNameStringLiteral
+	TokenNamePLUS
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
type	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
,	TokenNameCOMMA
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
Character	TokenNameIdentifier
.	TokenNameDOT
UNASSIGNED	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
0x10000	TokenNameIntegerLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
UTF16_MAX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
ranges	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
categoryNames	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
UNASSIGNED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
0x10000	TokenNameIntegerLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
UTF16_MAX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
categoryNames	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
categoryNames	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
StringBuffer	TokenNameIdentifier
buffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
50	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
Token	TokenNameIdentifier
.	TokenNameDOT
blockNames	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
Token	TokenNameIdentifier
r1	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
location	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
NONBMP_BLOCK_START	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
location	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
rstart	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
blockRanges	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
location	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
rend	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
blockRanges	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
location	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
rstart	TokenNameIdentifier
,	TokenNameCOMMA
rend	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
location	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
i	TokenNameIdentifier
-	TokenNameMINUS
NONBMP_BLOCK_START	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
nonBMPBlockRanges	TokenNameIdentifier
[	TokenNameLBRACKET
location	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
nonBMPBlockRanges	TokenNameIdentifier
[	TokenNameLBRACKET
location	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
n	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
blockNames	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"Specials"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
r1	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
0xfff0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xfffd	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"Private Use"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
r1	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
0xF0000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFFFFD	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
r1	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
0x100000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10FFFD	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
,	TokenNameCOMMA
r1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
r1	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buffer	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"Is"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
' '	TokenNameCharacterLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
ci	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ci	TokenNameIdentifier
<	TokenNameLESS
n	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ci	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
ci	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
' '	TokenNameCharacterLiteral
)	TokenNameRPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
n	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
ci	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
n	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"ASSIGNED"	TokenNameStringLiteral
,	TokenNameCOMMA
"Cn"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"UNASSIGNED"	TokenNameStringLiteral
,	TokenNameCOMMA
"Cn"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
all	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
all	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
UTF16_MAX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"ALL"	TokenNameStringLiteral
,	TokenNameCOMMA
all	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"ALL"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
all	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"ASSIGNED"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"UNASSIGNED"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"ALL"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
isalpha	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isalpha	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
Character	TokenNameIdentifier
.	TokenNameDOT
UPPERCASE_LETTER	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isalpha	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
Character	TokenNameIdentifier
.	TokenNameDOT
LOWERCASE_LETTER	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isalpha	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
Character	TokenNameIdentifier
.	TokenNameDOT
OTHER_LETTER	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsAlpha"	TokenNameStringLiteral
,	TokenNameCOMMA
isalpha	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsAlpha"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
isalpha	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsAlpha"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
isalnum	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isalnum	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
isalpha	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isalnum	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
Character	TokenNameIdentifier
.	TokenNameDOT
DECIMAL_DIGIT_NUMBER	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsAlnum"	TokenNameStringLiteral
,	TokenNameCOMMA
isalnum	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsAlnum"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
isalnum	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsAlnum"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
isspace	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isspace	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
token_spaces	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isspace	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
CHAR_SEPARATOR	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsSpace"	TokenNameStringLiteral
,	TokenNameCOMMA
isspace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsSpace"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
isspace	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsSpace"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
isword	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isword	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
isalnum	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isword	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'_'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'_'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsWord"	TokenNameStringLiteral
,	TokenNameCOMMA
isword	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsWord"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
isword	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsWord"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
isascii	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isascii	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
127	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsASCII"	TokenNameStringLiteral
,	TokenNameCOMMA
isascii	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsASCII"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
isascii	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsASCII"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
isnotgraph	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isnotgraph	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
ranges	TokenNameIdentifier
[	TokenNameLBRACKET
CHAR_OTHER	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isnotgraph	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
' '	TokenNameCharacterLiteral
,	TokenNameCOMMA
' '	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsGraph"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
isnotgraph	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsGraph"	TokenNameStringLiteral
,	TokenNameCOMMA
isnotgraph	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsGraph"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
isxdigit	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isxdigit	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isxdigit	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'A'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'F'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isxdigit	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
'a'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'f'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsXDigit"	TokenNameStringLiteral
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
complementRanges	TokenNameIdentifier
(	TokenNameLPAREN
isxdigit	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"IsXDigit"	TokenNameStringLiteral
,	TokenNameCOMMA
isxdigit	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsXDigit"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"IsDigit"	TokenNameStringLiteral
,	TokenNameCOMMA
"Nd"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"IsUpper"	TokenNameStringLiteral
,	TokenNameCOMMA
"Lu"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"IsLower"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ll"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"IsCntrl"	TokenNameStringLiteral
,	TokenNameCOMMA
"C"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"IsPrint"	TokenNameStringLiteral
,	TokenNameCOMMA
"C"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"IsPunct"	TokenNameStringLiteral
,	TokenNameCOMMA
"P"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsDigit"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsUpper"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsLower"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsCntrl"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsPrint"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"IsPunct"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"alpha"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsAlpha"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"alnum"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsAlnum"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"ascii"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsASCII"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"cntrl"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsCntrl"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"digit"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsDigit"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"graph"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsGraph"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"lower"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsLower"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"print"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsPrint"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"punct"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsPunct"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"space"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsSpace"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"upper"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsUpper"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsWord"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
"xdigit"	TokenNameStringLiteral
,	TokenNameCOMMA
"IsXDigit"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"alpha"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"alnum"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"ascii"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"cntrl"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"digit"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"graph"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"lower"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"print"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"punct"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"space"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"upper"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"word"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
"xdigit"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
RangeToken	TokenNameIdentifier
tok	TokenNameIdentifier
=	TokenNameEQUAL
positive	TokenNameIdentifier
?	TokenNameQUESTION
(	TokenNameLPAREN
RangeToken	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
(	TokenNameLPAREN
RangeToken	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tok	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
protected	TokenNameprotected
RangeToken	TokenNameIdentifier
getRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
positive	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
xs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
RangeToken	TokenNameIdentifier
range	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
positive	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
xs	TokenNameIdentifier
&&	TokenNameAND_AND
range	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
Token	TokenNameIdentifier
.	TokenNameDOT
isRegisterNonXS	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
range	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
range	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
Hashtable	TokenNameIdentifier
nonxs	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
static	TokenNamestatic
protected	TokenNameprotected
void	TokenNamevoid
registerNonXS	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
nonxs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
nonxs	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
nonxs	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
protected	TokenNameprotected
boolean	TokenNameboolean
isRegisterNonXS	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
nonxs	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
Token	TokenNameIdentifier
.	TokenNameDOT
nonxs	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
setAlias	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
newName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
positive	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Token	TokenNameIdentifier
t1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
t2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
positive	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
newName	TokenNameIdentifier
,	TokenNameCOMMA
t1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
newName	TokenNameIdentifier
,	TokenNameCOMMA
t2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
Token	TokenNameIdentifier
.	TokenNameDOT
categories2	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
newName	TokenNameIdentifier
,	TokenNameCOMMA
t1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
categories	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
newName	TokenNameIdentifier
,	TokenNameCOMMA
t2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
viramaString	TokenNameIdentifier
=	TokenNameEQUAL
"्"	TokenNameStringLiteral
+	TokenNamePLUS
"্"	TokenNameStringLiteral
+	TokenNamePLUS
"੍"	TokenNameStringLiteral
+	TokenNamePLUS
"્"	TokenNameStringLiteral
+	TokenNamePLUS
"୍"	TokenNameStringLiteral
+	TokenNamePLUS
"்"	TokenNameStringLiteral
+	TokenNamePLUS
"్"	TokenNameStringLiteral
+	TokenNamePLUS
"್"	TokenNameStringLiteral
+	TokenNamePLUS
"്"	TokenNameStringLiteral
+	TokenNamePLUS
"ฺ"	TokenNameStringLiteral
+	TokenNamePLUS
"྄"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
private	TokenNameprivate
Token	TokenNameIdentifier
token_grapheme	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
static	TokenNamestatic
synchronized	TokenNamesynchronized
Token	TokenNameIdentifier
getGraphemePattern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
token_grapheme	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
Token	TokenNameIdentifier
.	TokenNameDOT
token_grapheme	TokenNameIdentifier
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
base_char	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
base_char	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"ASSIGNED"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
base_char	TokenNameIdentifier
.	TokenNameDOT
subtractRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"M"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
base_char	TokenNameIdentifier
.	TokenNameDOT
subtractRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"C"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
virama	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
Token	TokenNameIdentifier
.	TokenNameDOT
viramaString	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
virama	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
,	TokenNameCOMMA
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
combiner_wo_virama	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
combiner_wo_virama	TokenNameIdentifier
.	TokenNameDOT
mergeRanges	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"M"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
combiner_wo_virama	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
0x1160	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
combiner_wo_virama	TokenNameIdentifier
.	TokenNameDOT
addRange	TokenNameIdentifier
(	TokenNameLPAREN
0xff9e	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xff9f	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
left	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createUnion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
left	TokenNameIdentifier
.	TokenNameDOT
addChild	TokenNameIdentifier
(	TokenNameLPAREN
base_char	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
left	TokenNameIdentifier
.	TokenNameDOT
addChild	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
token_empty	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
foo	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createUnion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
foo	TokenNameIdentifier
.	TokenNameDOT
addChild	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
createConcat	TokenNameIdentifier
(	TokenNameLPAREN
virama	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"L"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
foo	TokenNameIdentifier
.	TokenNameDOT
addChild	TokenNameIdentifier
(	TokenNameLPAREN
combiner_wo_virama	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
foo	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createClosure	TokenNameIdentifier
(	TokenNameLPAREN
foo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
foo	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createConcat	TokenNameIdentifier
(	TokenNameLPAREN
left	TokenNameIdentifier
,	TokenNameCOMMA
foo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_grapheme	TokenNameIdentifier
=	TokenNameEQUAL
foo	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
Token	TokenNameIdentifier
.	TokenNameDOT
token_grapheme	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
private	TokenNameprivate
Token	TokenNameIdentifier
token_ccs	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
static	TokenNamestatic
synchronized	TokenNamesynchronized
Token	TokenNameIdentifier
getCombiningCharacterSequence	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
token_ccs	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
Token	TokenNameIdentifier
.	TokenNameDOT
token_ccs	TokenNameIdentifier
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
foo	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createClosure	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"M"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
foo	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createConcat	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
getRange	TokenNameIdentifier
(	TokenNameLPAREN
"M"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
,	TokenNameCOMMA
foo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
.	TokenNameDOT
token_ccs	TokenNameIdentifier
=	TokenNameEQUAL
foo	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
Token	TokenNameIdentifier
.	TokenNameDOT
token_ccs	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
class	TokenNameclass
StringToken	TokenNameIdentifier
extends	TokenNameextends
Token	TokenNameIdentifier
implements	TokenNameimplements
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Serializable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
serialVersionUID	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
4614366944218504172L	TokenNameLongLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
string	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
refNumber	TokenNameIdentifier
;	TokenNameSEMICOLON
StringToken	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
type	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
str	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
string	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
refNumber	TokenNameIdentifier
=	TokenNameEQUAL
n	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
getReferenceNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
refNumber	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
string	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
options	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
BACKREFERENCE	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
"\"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
refNumber	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
return	TokenNamereturn
REUtil	TokenNameIdentifier
.	TokenNameDOT
quoteMeta	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
string	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
class	TokenNameclass
ConcatToken	TokenNameIdentifier
extends	TokenNameextends
Token	TokenNameIdentifier
implements	TokenNameimplements
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Serializable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
serialVersionUID	TokenNameIdentifier
=	TokenNameEQUAL
8717321425541346381L	TokenNameLongLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
Token	TokenNameIdentifier
child	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Token	TokenNameIdentifier
child2	TokenNameIdentifier
;	TokenNameSEMICOLON
ConcatToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
t1	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
t2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
CONCAT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
=	TokenNameEQUAL
t1	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
child2	TokenNameIdentifier
=	TokenNameEQUAL
t2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
getChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
index	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
:	TokenNameCOLON
this	TokenNamethis
.	TokenNameDOT
child2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
options	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
child2	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CLOSURE	TokenNameIdentifier
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
child2	TokenNameIdentifier
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"+"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
child2	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
NONGREEDYCLOSURE	TokenNameIdentifier
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
child2	TokenNameIdentifier
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"+?"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
child2	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
class	TokenNameclass
CharToken	TokenNameIdentifier
extends	TokenNameextends
Token	TokenNameIdentifier
implements	TokenNameimplements
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Serializable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
serialVersionUID	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
4394272816279496989L	TokenNameLongLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
chardata	TokenNameIdentifier
;	TokenNameSEMICOLON
CharToken	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
type	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
getChar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
options	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
CHAR	TokenNameIdentifier
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'|'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'*'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'+'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'?'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'('	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
')'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'['	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'{'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'\\'	TokenNameCharacterLiteral
:	TokenNameCOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
"\"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'\f'	TokenNameCharacterLiteral
:	TokenNameCOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
"\f"	TokenNameStringLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'\n'	TokenNameCharacterLiteral
:	TokenNameCOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
"\n"	TokenNameStringLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'\r'	TokenNameCharacterLiteral
:	TokenNameCOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
"\r"	TokenNameStringLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'\t'	TokenNameCharacterLiteral
:	TokenNameCOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
"\t"	TokenNameStringLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
0x1b	TokenNameIntegerLiteral
:	TokenNameCOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
"\e"	TokenNameStringLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0x10000	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
pre	TokenNameIdentifier
=	TokenNameEQUAL
"0"	TokenNameStringLiteral
+	TokenNamePLUS
Integer	TokenNameIdentifier
.	TokenNameDOT
toHexString	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
"\v"	TokenNameStringLiteral
+	TokenNamePLUS
pre	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
pre	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
pre	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
ret	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
ANCHOR	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
==	TokenNameEQUAL_EQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
token_linebeginning	TokenNameIdentifier
||	TokenNameOR_OR
this	TokenNamethis
==	TokenNameEQUAL_EQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
token_lineend	TokenNameIdentifier
)	TokenNameRPAREN
ret	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
ret	TokenNameIdentifier
=	TokenNameEQUAL
"\"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
match	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CHAR	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
this	TokenNamethis
.	TokenNameDOT
chardata	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"NFAArrow#match(): Internal error: "	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
class	TokenNameclass
ClosureToken	TokenNameIdentifier
extends	TokenNameextends
Token	TokenNameIdentifier
implements	TokenNameimplements
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Serializable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
serialVersionUID	TokenNameIdentifier
=	TokenNameEQUAL
1308971930673997452L	TokenNameLongLiteral
;	TokenNameSEMICOLON
int	TokenNameint
min	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
max	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Token	TokenNameIdentifier
child	TokenNameIdentifier
;	TokenNameSEMICOLON
ClosureToken	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
type	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
=	TokenNameEQUAL
tok	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
setMin	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
setMax	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
getChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
void	TokenNamevoid
setMin	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
min	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
min	TokenNameIdentifier
=	TokenNameEQUAL
min	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
void	TokenNamevoid
setMax	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
max	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
max	TokenNameIdentifier
=	TokenNameEQUAL
max	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
min	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
max	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
options	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CLOSURE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"*"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"{"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"}"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"{"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"}"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"{"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
",}"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Token#toString(): CLOSURE "	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
", "	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"*?"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"{"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"}?"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"{"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"}?"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"{"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
",}?"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Token#toString(): NONGREEDYCLOSURE "	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
getMin	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
", "	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
getMax	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
class	TokenNameclass
ParenToken	TokenNameIdentifier
extends	TokenNameextends
Token	TokenNameIdentifier
implements	TokenNameimplements
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Serializable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
serialVersionUID	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
5938014719827987704L	TokenNameLongLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
Token	TokenNameIdentifier
child	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
parennumber	TokenNameIdentifier
;	TokenNameSEMICOLON
ParenToken	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
type	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
tok	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
paren	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
=	TokenNameEQUAL
tok	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
parennumber	TokenNameIdentifier
=	TokenNameEQUAL
paren	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
getChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
getParenNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
parennumber	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
options	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
ret	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
PAREN	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
parennumber	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
"(?:"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
"("	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LOOKAHEAD	TokenNameIdentifier
:	TokenNameCOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
"(?="	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
NEGATIVELOOKAHEAD	TokenNameIdentifier
:	TokenNameCOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
"(?!"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
LOOKBEHIND	TokenNameIdentifier
:	TokenNameCOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
"(?<="	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
NEGATIVELOOKBEHIND	TokenNameIdentifier
:	TokenNameCOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
"(?<!"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
INDEPENDENT	TokenNameIdentifier
:	TokenNameCOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
"(?>"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
class	TokenNameclass
ConditionToken	TokenNameIdentifier
extends	TokenNameextends
Token	TokenNameIdentifier
implements	TokenNameimplements
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Serializable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
serialVersionUID	TokenNameIdentifier
=	TokenNameEQUAL
4353765277910594411L	TokenNameLongLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
refNumber	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Token	TokenNameIdentifier
condition	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Token	TokenNameIdentifier
yes	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Token	TokenNameIdentifier
no	TokenNameIdentifier
;	TokenNameSEMICOLON
ConditionToken	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
refno	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
cond	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
yespat	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
nopat	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
CONDITION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
refNumber	TokenNameIdentifier
=	TokenNameEQUAL
refno	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
condition	TokenNameIdentifier
=	TokenNameEQUAL
cond	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
yes	TokenNameIdentifier
=	TokenNameEQUAL
yespat	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
no	TokenNameIdentifier
=	TokenNameEQUAL
nopat	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
no	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
getChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
yes	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
no	TokenNameIdentifier
;	TokenNameSEMICOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Internal Error: "	TokenNameStringLiteral
+	TokenNamePLUS
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
options	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
refNumber	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
"(?("	TokenNameStringLiteral
+	TokenNamePLUS
refNumber	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
condition	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
ANCHOR	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
"(?("	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
condition	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
"(?"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
condition	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
no	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
this	TokenNamethis
.	TokenNameDOT
yes	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ret	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
this	TokenNamethis
.	TokenNameDOT
yes	TokenNameIdentifier
+	TokenNamePLUS
"|"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
no	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
class	TokenNameclass
ModifierToken	TokenNameIdentifier
extends	TokenNameextends
Token	TokenNameIdentifier
implements	TokenNameimplements
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Serializable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
serialVersionUID	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
9114536559696480356L	TokenNameLongLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
Token	TokenNameIdentifier
child	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
add	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
mask	TokenNameIdentifier
;	TokenNameSEMICOLON
ModifierToken	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
add	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
mask	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
Token	TokenNameIdentifier
.	TokenNameDOT
MODIFIERGROUP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
=	TokenNameEQUAL
tok	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
add	TokenNameIdentifier
=	TokenNameEQUAL
add	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
mask	TokenNameIdentifier
=	TokenNameEQUAL
mask	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
getChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
getOptions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
add	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
getOptionsMask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
mask	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
options	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"(?"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
add	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
""	TokenNameStringLiteral
:	TokenNameCOLON
REUtil	TokenNameIdentifier
.	TokenNameDOT
createOptionString	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
add	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
mask	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
""	TokenNameStringLiteral
:	TokenNameCOLON
REUtil	TokenNameIdentifier
.	TokenNameDOT
createOptionString	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
mask	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
":"	TokenNameStringLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
child	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
class	TokenNameclass
UnionToken	TokenNameIdentifier
extends	TokenNameextends
Token	TokenNameIdentifier
implements	TokenNameimplements
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Serializable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
serialVersionUID	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
2568843945989489861L	TokenNameLongLiteral
;	TokenNameSEMICOLON
Vector	TokenNameIdentifier
children	TokenNameIdentifier
;	TokenNameSEMICOLON
UnionToken	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
addChild	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
tok	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tok	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
UNION	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
tok	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CONCAT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
tok	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
addChild	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
size	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
previous	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
size	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
(	TokenNameLPAREN
previous	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CHAR	TokenNameIdentifier
||	TokenNameOR_OR
previous	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
STRING	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
tok	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CHAR	TokenNameIdentifier
||	TokenNameOR_OR
tok	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
STRING	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
StringBuffer	TokenNameIdentifier
buffer	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nextMaxLength	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
tok	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CHAR	TokenNameIdentifier
?	TokenNameQUESTION
2	TokenNameIntegerLiteral
:	TokenNameCOLON
tok	TokenNameIdentifier
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
previous	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CHAR	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
buffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
+	TokenNamePLUS
nextMaxLength	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ch	TokenNameIdentifier
=	TokenNameEQUAL
previous	TokenNameIdentifier
.	TokenNameDOT
getChar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0x10000	TokenNameIntegerLiteral
)	TokenNameRPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
REUtil	TokenNameIdentifier
.	TokenNameDOT
decomposeToSurrogates	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
previous	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
createString	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
setElementAt	TokenNameIdentifier
(	TokenNameLPAREN
previous	TokenNameIdentifier
,	TokenNameCOMMA
size	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
buffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
previous	TokenNameIdentifier
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
nextMaxLength	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
previous	TokenNameIdentifier
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
tok	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CHAR	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
ch	TokenNameIdentifier
=	TokenNameEQUAL
tok	TokenNameIdentifier
.	TokenNameDOT
getChar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0x10000	TokenNameIntegerLiteral
)	TokenNameRPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
REUtil	TokenNameIdentifier
.	TokenNameDOT
decomposeToSurrogates	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
tok	TokenNameIdentifier
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
StringToken	TokenNameIdentifier
)	TokenNameRPAREN
previous	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
string	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Token	TokenNameIdentifier
getChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
index	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
options	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CONCAT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
Token	TokenNameIdentifier
ch	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Token	TokenNameIdentifier
ch2	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
CLOSURE	TokenNameIdentifier
&&	TokenNameAND_AND
ch2	TokenNameIdentifier
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
ch	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"+"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
NONGREEDYCLOSURE	TokenNameIdentifier
&&	TokenNameAND_AND
ch2	TokenNameIdentifier
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
ch	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"+?"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
ret	TokenNameIdentifier
=	TokenNameEQUAL
ch	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
ch2	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
sb	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
sb	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
sb	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
EMPTY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"?"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
&&	TokenNameAND_AND
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
EMPTY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getChild	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"??"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
sb	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sb	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
sb	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
'|'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sb	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
Token	TokenNameIdentifier
)	TokenNameRPAREN
this	TokenNamethis
.	TokenNameDOT
children	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
options	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ret	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
sb	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
