package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
serialize	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
UnsupportedEncodingException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Hashtable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xerces	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
EncodingMap	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Encodings	TokenNameIdentifier
{	TokenNameLBRACE
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DEFAULT_LAST_PRINTABLE	TokenNameIdentifier
=	TokenNameEQUAL
0x7F	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
LAST_PRINTABLE_UNICODE	TokenNameIdentifier
=	TokenNameEQUAL
0xffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
UNICODE_ENCODINGS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"Unicode"	TokenNameStringLiteral
,	TokenNameCOMMA
"UnicodeBig"	TokenNameStringLiteral
,	TokenNameCOMMA
"UnicodeLittle"	TokenNameStringLiteral
,	TokenNameCOMMA
"GB2312"	TokenNameStringLiteral
,	TokenNameCOMMA
"UTF8"	TokenNameStringLiteral
,	TokenNameCOMMA
"UTF-16"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
DEFAULT_ENCODING	TokenNameIdentifier
=	TokenNameEQUAL
"UTF8"	TokenNameStringLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
Hashtable	TokenNameIdentifier
_encodings	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Hashtable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
EncodingInfo	TokenNameIdentifier
getEncodingInfo	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
encoding	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
allowJavaNames	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
UnsupportedEncodingException	TokenNameIdentifier
{	TokenNameLBRACE
EncodingInfo	TokenNameIdentifier
eInfo	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
encoding	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
eInfo	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
EncodingInfo	TokenNameIdentifier
)	TokenNameRPAREN
_encodings	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
DEFAULT_ENCODING	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
eInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
eInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
EncodingInfo	TokenNameIdentifier
(	TokenNameLPAREN
EncodingMap	TokenNameIdentifier
.	TokenNameDOT
getJava2IANAMapping	TokenNameIdentifier
(	TokenNameLPAREN
DEFAULT_ENCODING	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
DEFAULT_ENCODING	TokenNameIdentifier
,	TokenNameCOMMA
LAST_PRINTABLE_UNICODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
_encodings	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
DEFAULT_ENCODING	TokenNameIdentifier
,	TokenNameCOMMA
eInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
eInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
encoding	TokenNameIdentifier
=	TokenNameEQUAL
encoding	TokenNameIdentifier
.	TokenNameDOT
toUpperCase	TokenNameIdentifier
(	TokenNameLPAREN
Locale	TokenNameIdentifier
.	TokenNameDOT
ENGLISH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
jName	TokenNameIdentifier
=	TokenNameEQUAL
EncodingMap	TokenNameIdentifier
.	TokenNameDOT
getIANA2JavaMapping	TokenNameIdentifier
(	TokenNameLPAREN
encoding	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
jName	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
allowJavaNames	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
EncodingInfo	TokenNameIdentifier
.	TokenNameDOT
testJavaEncodingName	TokenNameIdentifier
(	TokenNameLPAREN
encoding	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
eInfo	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
EncodingInfo	TokenNameIdentifier
)	TokenNameRPAREN
_encodings	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
encoding	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
eInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
UNICODE_ENCODINGS	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
UNICODE_ENCODINGS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
encoding	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
eInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
EncodingInfo	TokenNameIdentifier
(	TokenNameLPAREN
EncodingMap	TokenNameIdentifier
.	TokenNameDOT
getJava2IANAMapping	TokenNameIdentifier
(	TokenNameLPAREN
encoding	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
encoding	TokenNameIdentifier
,	TokenNameCOMMA
LAST_PRINTABLE_UNICODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
UNICODE_ENCODINGS	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
eInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
EncodingInfo	TokenNameIdentifier
(	TokenNameLPAREN
EncodingMap	TokenNameIdentifier
.	TokenNameDOT
getJava2IANAMapping	TokenNameIdentifier
(	TokenNameLPAREN
encoding	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
encoding	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_LAST_PRINTABLE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
_encodings	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
encoding	TokenNameIdentifier
,	TokenNameCOMMA
eInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
eInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
throw	TokenNamethrow
new	TokenNamenew
UnsupportedEncodingException	TokenNameIdentifier
(	TokenNameLPAREN
encoding	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
eInfo	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
EncodingInfo	TokenNameIdentifier
)	TokenNameRPAREN
_encodings	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
jName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
eInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
UNICODE_ENCODINGS	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
UNICODE_ENCODINGS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
jName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
eInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
EncodingInfo	TokenNameIdentifier
(	TokenNameLPAREN
encoding	TokenNameIdentifier
,	TokenNameCOMMA
jName	TokenNameIdentifier
,	TokenNameCOMMA
LAST_PRINTABLE_UNICODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
UNICODE_ENCODINGS	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
eInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
EncodingInfo	TokenNameIdentifier
(	TokenNameLPAREN
encoding	TokenNameIdentifier
,	TokenNameCOMMA
jName	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_LAST_PRINTABLE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
_encodings	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
jName	TokenNameIdentifier
,	TokenNameCOMMA
eInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
eInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
JIS_DANGER_CHARS	TokenNameIdentifier
=	TokenNameEQUAL
"\~¢£¥¬"	TokenNameStringLiteral
+	TokenNamePLUS
"—―‖…‾‾∥∯〜"	TokenNameStringLiteral
+	TokenNamePLUS
"＼～￠￡￢￣"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
