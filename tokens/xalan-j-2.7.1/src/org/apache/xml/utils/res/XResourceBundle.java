package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
res	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ListResourceBundle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
MissingResourceException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ResourceBundle	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
XResourceBundle	TokenNameIdentifier
extends	TokenNameextends
ListResourceBundle	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ERROR_RESOURCES	TokenNameIdentifier
=	TokenNameEQUAL
"org.apache.xalan.res.XSLTErrorResources"	TokenNameStringLiteral
,	TokenNameCOMMA
XSLT_RESOURCE	TokenNameIdentifier
=	TokenNameEQUAL
"org.apache.xml.utils.res.XResourceBundle"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_BUNDLE_NAME	TokenNameIdentifier
=	TokenNameEQUAL
"org.apache.xml.utils.res.XResources"	TokenNameStringLiteral
,	TokenNameCOMMA
MULT_ORDER	TokenNameIdentifier
=	TokenNameEQUAL
"multiplierOrder"	TokenNameStringLiteral
,	TokenNameCOMMA
MULT_PRECEDES	TokenNameIdentifier
=	TokenNameEQUAL
"precedes"	TokenNameStringLiteral
,	TokenNameCOMMA
MULT_FOLLOWS	TokenNameIdentifier
=	TokenNameEQUAL
"follows"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_ORIENTATION	TokenNameIdentifier
=	TokenNameEQUAL
"orientation"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_RIGHTTOLEFT	TokenNameIdentifier
=	TokenNameEQUAL
"rightToLeft"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_LEFTTORIGHT	TokenNameIdentifier
=	TokenNameEQUAL
"leftToRight"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_NUMBERING	TokenNameIdentifier
=	TokenNameEQUAL
"numbering"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_ADDITIVE	TokenNameIdentifier
=	TokenNameEQUAL
"additive"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_MULT_ADD	TokenNameIdentifier
=	TokenNameEQUAL
"multiplicative-additive"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_MULTIPLIER	TokenNameIdentifier
=	TokenNameEQUAL
"multiplier"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_MULTIPLIER_CHAR	TokenNameIdentifier
=	TokenNameEQUAL
"multiplierChar"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_NUMBERGROUPS	TokenNameIdentifier
=	TokenNameEQUAL
"numberGroups"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_NUM_TABLES	TokenNameIdentifier
=	TokenNameEQUAL
"tables"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_ALPHABET	TokenNameIdentifier
=	TokenNameEQUAL
"alphabet"	TokenNameStringLiteral
,	TokenNameCOMMA
LANG_TRAD_ALPHABET	TokenNameIdentifier
=	TokenNameEQUAL
"tradAlphabet"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
XResourceBundle	TokenNameIdentifier
loadResourceBundle	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
className	TokenNameIdentifier
,	TokenNameCOMMA
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MissingResourceException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
suffix	TokenNameIdentifier
=	TokenNameEQUAL
getResourceSuffix	TokenNameIdentifier
(	TokenNameLPAREN
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
String	TokenNameIdentifier
resourceName	TokenNameIdentifier
=	TokenNameEQUAL
className	TokenNameIdentifier
+	TokenNamePLUS
suffix	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
XResourceBundle	TokenNameIdentifier
)	TokenNameRPAREN
ResourceBundle	TokenNameIdentifier
.	TokenNameDOT
getBundle	TokenNameIdentifier
(	TokenNameLPAREN
resourceName	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MissingResourceException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XResourceBundle	TokenNameIdentifier
)	TokenNameRPAREN
ResourceBundle	TokenNameIdentifier
.	TokenNameDOT
getBundle	TokenNameIdentifier
(	TokenNameLPAREN
XSLT_RESOURCE	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
"en"	TokenNameStringLiteral
,	TokenNameCOMMA
"US"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MissingResourceException	TokenNameIdentifier
e2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
MissingResourceException	TokenNameIdentifier
(	TokenNameLPAREN
"Could not load any resource bundles."	TokenNameStringLiteral
,	TokenNameCOMMA
className	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
getResourceSuffix	TokenNameIdentifier
(	TokenNameLPAREN
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
lang	TokenNameIdentifier
=	TokenNameEQUAL
locale	TokenNameIdentifier
.	TokenNameDOT
getLanguage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
country	TokenNameIdentifier
=	TokenNameEQUAL
locale	TokenNameIdentifier
.	TokenNameDOT
getCountry	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
variant	TokenNameIdentifier
=	TokenNameEQUAL
locale	TokenNameIdentifier
.	TokenNameDOT
getVariant	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
suffix	TokenNameIdentifier
=	TokenNameEQUAL
"_"	TokenNameStringLiteral
+	TokenNamePLUS
locale	TokenNameIdentifier
.	TokenNameDOT
getLanguage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lang	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"zh"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
suffix	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
"_"	TokenNameStringLiteral
+	TokenNamePLUS
country	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
country	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"JP"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
suffix	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
"_"	TokenNameStringLiteral
+	TokenNamePLUS
country	TokenNameIdentifier
+	TokenNamePLUS
"_"	TokenNameStringLiteral
+	TokenNamePLUS
variant	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
suffix	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getContents	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
{	TokenNameLBRACE
"ui_language"	TokenNameStringLiteral
,	TokenNameCOMMA
"en"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"help_language"	TokenNameStringLiteral
,	TokenNameCOMMA
"en"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"language"	TokenNameStringLiteral
,	TokenNameCOMMA
"en"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"alphabet"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
CharArrayWrapper	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
'A'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'B'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'C'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'D'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'E'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'F'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'G'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'H'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'I'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'J'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'K'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'L'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'M'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'N'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'O'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'P'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Q'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'R'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'S'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'T'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'U'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'V'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'W'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'X'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Y'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Z'	TokenNameCharacterLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"tradAlphabet"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
CharArrayWrapper	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
'A'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'B'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'C'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'D'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'E'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'F'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'G'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'H'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'I'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'J'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'K'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'L'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'M'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'N'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'O'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'P'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Q'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'R'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'S'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'T'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'U'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'V'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'W'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'X'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Y'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Z'	TokenNameCharacterLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"orientation"	TokenNameStringLiteral
,	TokenNameCOMMA
"LeftToRight"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"numbering"	TokenNameStringLiteral
,	TokenNameCOMMA
"additive"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
