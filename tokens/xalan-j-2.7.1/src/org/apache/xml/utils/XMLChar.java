package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
XMLChar	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
CHARS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MASK_VALID	TokenNameIdentifier
=	TokenNameEQUAL
0x01	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MASK_SPACE	TokenNameIdentifier
=	TokenNameEQUAL
0x02	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MASK_NAME_START	TokenNameIdentifier
=	TokenNameEQUAL
0x04	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MASK_NAME	TokenNameIdentifier
=	TokenNameEQUAL
0x08	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MASK_PUBID	TokenNameIdentifier
=	TokenNameEQUAL
0x10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MASK_CONTENT	TokenNameIdentifier
=	TokenNameEQUAL
0x20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MASK_NCNAME_START	TokenNameIdentifier
=	TokenNameEQUAL
0x40	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MASK_NCNAME	TokenNameIdentifier
=	TokenNameEQUAL
0x80	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
int	TokenNameint
charRange	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x0009	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x000A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x000D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x000D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0020	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xD7FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xE000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFFFD	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
spaceChar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x0020	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0009	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x000D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x000A	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
nameChar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x002D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x002E	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
nameStartChar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x003A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x005F	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
pubidChar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x000A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x000D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0020	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0021	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0023	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0024	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0025	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x003D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x005F	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
pubidRange	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x0027	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x003B	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x003F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x005A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0061	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x007A	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
letterRange	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x0041	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x005A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0061	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x007A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x00C0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x00D6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x00D8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x00F6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x00F8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0131	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0134	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x013E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0141	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0148	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x014A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x017E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0180	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x01C3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x01CD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x01F0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x01F4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x01F5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x01FA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0217	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0250	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x02A8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x02BB	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x02C1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0388	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x038A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x038E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x03A1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x03A3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x03CE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x03D0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x03D6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x03E2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x03F3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0401	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x040C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x040E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x044F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0451	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x045C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x045E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0481	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0490	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x04C4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x04C7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x04C8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x04CB	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x04CC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x04D0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x04EB	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x04EE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x04F5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x04F8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x04F9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0531	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0556	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0561	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0586	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05D0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05EA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05F0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05F2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0621	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x063A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0641	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x064A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0671	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06B7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06BA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06BE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06C0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06CE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06D0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06D3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06E5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06E6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0905	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0939	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0958	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0961	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0985	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x098C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x098F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0990	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0993	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09A8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09AA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09B0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09B6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09B9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09DC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09DD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09DF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09E1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09F0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09F1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A05	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A0A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A0F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A10	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A13	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A28	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A2A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A30	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A32	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A33	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A35	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A36	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A38	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A39	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A59	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A5C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A72	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A74	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A85	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A8B	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A8F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A91	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A93	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AA8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AAA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AB0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AB2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AB3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AB5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AB9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B05	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B0C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B0F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B10	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B13	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B28	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B2A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B30	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B32	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B33	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B36	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B39	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B5C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B5D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B5F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B61	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B85	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B8A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B8E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B90	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B92	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B95	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B99	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B9A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B9E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B9F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BA3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BA4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BA8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BAA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BAE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BB5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BB7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BB9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C05	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C0C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C0E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C10	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C12	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C28	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C2A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C33	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C35	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C39	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C60	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C61	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C85	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C8C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C8E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C90	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C92	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CA8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CAA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CB3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CB5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CB9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CE0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CE1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D05	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D0C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D0E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D10	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D12	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D28	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D2A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D39	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D60	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D61	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E01	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E2E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E32	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E33	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E40	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E45	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E81	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E82	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E87	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E88	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E94	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E97	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E99	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E9F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EA1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EA3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EAA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EAB	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EAD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EAE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EB2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EB3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EC0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EC4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F40	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F47	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F49	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F69	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10A0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10C5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10D0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10F6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1102	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1103	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1105	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1107	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x110B	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x110C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x110E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1112	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1154	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1155	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x115F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1161	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x116D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x116E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1172	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1173	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11AE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11AF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11B7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11B8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11BC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11C2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1E00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1E9B	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1EA0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1EF9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F15	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F18	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F1D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F20	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F45	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F48	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F4D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F50	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F57	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F5F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F7D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FB4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FB6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FBC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FC2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FC4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FC6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FCC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FD0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FD3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FD6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FDB	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FE0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FEC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FF2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FF4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FF6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FFC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x212A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x212B	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2180	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2182	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3041	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3094	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x30A1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x30FA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3105	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x312C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xAC00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xD7A3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3021	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3029	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x4E00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x9FA5	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
letterChar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x0386	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x038C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x03DA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x03DC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x03DE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x03E0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0559	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06D5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x093D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09B2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A5E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A8D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0ABD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AE0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B3D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B9C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CDE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E30	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E84	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E8A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E8D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EA5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EA7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EB0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EBD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1100	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1109	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x113C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x113E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1140	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x114C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x114E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1150	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1159	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1163	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1165	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1167	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1169	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1175	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x119E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11A8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11AB	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11BA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11EB	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11F0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11F9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F59	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F5B	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F5D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FBE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2126	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x212E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3007	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
combiningCharRange	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x0300	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0345	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0360	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0361	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0483	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0486	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0591	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05A1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05A3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05B9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05BB	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05BD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05C1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05C2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x064B	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0652	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06D6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06DC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06DD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06DF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06E0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06E4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06E7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06E8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06EA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06ED	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0901	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0903	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x093E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x094C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0951	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0954	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0962	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0963	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0981	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0983	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09C0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09C4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09C7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09C8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09CB	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09CD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09E2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09E3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A40	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A42	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A47	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A48	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A4B	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A4D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A70	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A71	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A81	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A83	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0ABE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AC5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AC7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AC9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0ACB	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0ACD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B01	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B03	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B3E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B43	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B47	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B48	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B4B	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B4D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B56	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B57	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B82	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B83	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BBE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BC2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BC6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BC8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BCA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BCD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C01	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C03	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C3E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C44	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C46	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C48	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C4A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C4D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C55	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C56	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C82	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C83	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CBE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CC4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CC6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CC8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CCA	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CCD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CD5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CD6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D02	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D03	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D3E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D43	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D46	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D48	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D4A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D4D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E34	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E3A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E47	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E4E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EB4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EB9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EBB	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EBC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EC8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0ECD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F18	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F19	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F71	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F84	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F86	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F8B	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F90	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F95	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F99	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0FAD	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0FB1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0FB7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x20D0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x20DC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x302A	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x302F	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
combiningCharChar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x05BF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05C4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0670	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x093C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x094D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09BC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09BE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09BF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09D7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A02	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A3C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A3E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A3F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0ABC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B3C	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BD7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D57	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E31	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EB1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F35	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F37	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F39	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F3E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F3F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F97	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0FB9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x20E1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3099	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x309A	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
digitRange	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x0030	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0039	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0660	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0669	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06F0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06F9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0966	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x096F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09E6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09EF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A66	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A6F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AE6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AEF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B66	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B6F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BE7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BEF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C66	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C6F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CE6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CEF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D66	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D6F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E50	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E59	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0ED0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0ED9	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F20	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F29	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
extenderRange	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x3031	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3035	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x309D	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x309E	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x30FC	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x30FE	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
extenderChar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
0x00B7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x02D0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x02D1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0387	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0640	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E46	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EC6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3005	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
specialChar	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
'<'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'&'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\n'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'\r'	TokenNameCharacterLiteral
,	TokenNameCOMMA
']'	TokenNameCharacterLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
charRange	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
charRange	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
charRange	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_VALID	TokenNameIdentifier
|	TokenNameOR
MASK_CONTENT	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
specialChar	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
specialChar	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
specialChar	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
MASK_CONTENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
spaceChar	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
spaceChar	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_SPACE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nameStartChar	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
nameStartChar	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_NAME_START	TokenNameIdentifier
|	TokenNameOR
MASK_NAME	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME_START	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
letterRange	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
letterRange	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
letterRange	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_NAME_START	TokenNameIdentifier
|	TokenNameOR
MASK_NAME	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME_START	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
letterChar	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
letterChar	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_NAME_START	TokenNameIdentifier
|	TokenNameOR
MASK_NAME	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME_START	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nameChar	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
nameChar	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_NAME	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
digitRange	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
digitRange	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
digitRange	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_NAME	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
combiningCharRange	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
combiningCharRange	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
combiningCharRange	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_NAME	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
combiningCharChar	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
combiningCharChar	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_NAME	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
extenderRange	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
extenderRange	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
extenderRange	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_NAME	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
extenderChar	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
extenderChar	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_NAME	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
':'	TokenNameCharacterLiteral
]	TokenNameRBRACKET
&=	TokenNameAND_EQUAL
~	TokenNameTWIDDLE
(	TokenNameLPAREN
MASK_NCNAME_START	TokenNameIdentifier
|	TokenNameOR
MASK_NCNAME	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
pubidChar	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
pubidChar	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_PUBID	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
pubidRange	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
pubidRange	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
pubidRange	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
MASK_PUBID	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isSupplemental	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0x10000	TokenNameIntegerLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0x10FFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
supplemental	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
h	TokenNameIdentifier
,	TokenNameCOMMA
char	TokenNamechar
l	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
h	TokenNameIdentifier
-	TokenNameMINUS
0xD800	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
0x400	TokenNameIntegerLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
l	TokenNameIdentifier
-	TokenNameMINUS
0xDC00	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
0x10000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
char	TokenNamechar
highSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
-	TokenNameMINUS
0x00010000	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
0xD800	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
char	TokenNamechar
lowSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
-	TokenNameMINUS
0x00010000	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x3FF	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
0xDC00	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isHighSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
0xD800	TokenNameIntegerLiteral
<=	TokenNameLESS_EQUAL
c	TokenNameIdentifier
&&	TokenNameAND_AND
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0xDBFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isLowSurrogate	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
0xDC00	TokenNameIntegerLiteral
<=	TokenNameLESS_EQUAL
c	TokenNameIdentifier
&&	TokenNameAND_AND
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0xDFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isValid	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
0x10000	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
MASK_VALID	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
0x10000	TokenNameIntegerLiteral
<=	TokenNameLESS_EQUAL
c	TokenNameIdentifier
&&	TokenNameAND_AND
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0x10FFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isInvalid	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
!	TokenNameNOT
isValid	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isContent	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
0x10000	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
MASK_CONTENT	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
0x10000	TokenNameIntegerLiteral
<=	TokenNameLESS_EQUAL
c	TokenNameIdentifier
&&	TokenNameAND_AND
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0x10FFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isMarkup	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'<'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'&'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'%'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isSpace	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
<	TokenNameLESS
0x10000	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
MASK_SPACE	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isNameStart	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
<	TokenNameLESS
0x10000	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
MASK_NAME_START	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isName	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
<	TokenNameLESS
0x10000	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
MASK_NAME	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isNCNameStart	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
<	TokenNameLESS
0x10000	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
MASK_NCNAME_START	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isNCName	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
<	TokenNameLESS
0x10000	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
MASK_NCNAME	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isPubid	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
<	TokenNameLESS
0x10000	TokenNameIntegerLiteral
&&	TokenNameAND_AND
(	TokenNameLPAREN
CHARS	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
MASK_PUBID	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isValidName	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
name	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isNameStart	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
false	TokenNamefalse
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
name	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
name	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isName	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
false	TokenNamefalse
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isValidNCName	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
ncName	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ncName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
ncName	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isNCNameStart	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
false	TokenNamefalse
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
ncName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
ncName	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isNCName	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
false	TokenNamefalse
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isValidNmtoken	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
nmtoken	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nmtoken	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nmtoken	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
nmtoken	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isName	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isValidIANAEncoding	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
ianaEncoding	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ianaEncoding	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
ianaEncoding	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
ianaEncoding	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'A'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'Z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'a'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
ianaEncoding	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
'A'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
>	TokenNameGREATER
'Z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
'a'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
>	TokenNameGREATER
'z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
'0'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
>	TokenNameGREATER
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'.'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'_'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isValidJavaEncoding	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
javaEncoding	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
javaEncoding	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
javaEncoding	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
javaEncoding	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
'A'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
>	TokenNameGREATER
'Z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
'a'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
>	TokenNameGREATER
'z'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
'0'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
>	TokenNameGREATER
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'.'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'_'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isValidQName	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
str	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
colon	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
colon	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
colon	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
str	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
colon	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
colon	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
localPart	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
colon	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
isValidNCName	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
isValidNCName	TokenNameIdentifier
(	TokenNameLPAREN
localPart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
isValidNCName	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
