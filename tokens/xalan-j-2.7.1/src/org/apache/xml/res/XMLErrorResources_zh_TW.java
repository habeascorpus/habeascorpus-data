package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
res	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ListResourceBundle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
MissingResourceException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ResourceBundle	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
XMLErrorResources_zh_TW	TokenNameIdentifier
extends	TokenNameextends
ListResourceBundle	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FUNCTION_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FUNCTION_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_OVERWRITE_CAUSE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_OVERWRITE_CAUSE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_DEFAULT_IMPL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_DEFAULT_IMPL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CHUNKEDINTARRAY_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CHUNKEDINTARRAY_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_OFFSET_BIGGER_THAN_SLOT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_OFFSET_BIGGER_THAN_SLOT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COROUTINE_NOT_AVAIL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COROUTINE_NOT_AVAIL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COROUTINE_CO_EXIT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COROUTINE_CO_EXIT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COJOINROUTINESET_FAILED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COJOINROUTINESET_FAILED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COROUTINE_PARAM	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COROUTINE_PARAM"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PARSER_DOTERMINATE_ANSWERS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PARSER_DOTERMINATE_ANSWERS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_PARSE_CALL_WHILE_PARSING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_PARSE_CALL_WHILE_PARSING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_TYPED_ITERATOR_AXIS_NOT_IMPLEMENTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_TYPED_ITERATOR_AXIS_NOT_IMPLEMENTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ITERATOR_AXIS_NOT_IMPLEMENTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ITERATOR_AXIS_NOT_IMPLEMENTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ITERATOR_CLONE_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ITERATOR_CLONE_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNKNOWN_AXIS_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNKNOWN_AXIS_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_AXIS_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_AXIS_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_DTMIDS_AVAIL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_DTMIDS_AVAIL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODE_NON_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODE_NON_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULD_NOT_RESOLVE_NODE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULD_NOT_RESOLVE_NODE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_STARTPARSE_WHILE_PARSING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_STARTPARSE_WHILE_PARSING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_STARTPARSE_NEEDS_SAXPARSER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_STARTPARSE_NEEDS_SAXPARSER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULD_NOT_INIT_PARSER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULD_NOT_INIT_PARSER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXCEPTION_CREATING_POOL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXCEPTION_CREATING_POOL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SCHEME_REQUIRED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SCHEME_REQUIRED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_SCHEME_IN_URI	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_SCHEME_IN_URI"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_SCHEME_INURI	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_SCHEME_INURI"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PATH_INVALID_CHAR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PATH_INVALID_CHAR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SCHEME_FROM_NULL_STRING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SCHEME_FROM_NULL_STRING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SCHEME_NOT_CONFORMANT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SCHEME_NOT_CONFORMANT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_HOST_ADDRESS_NOT_WELLFORMED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_HOST_ADDRESS_NOT_WELLFORMED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PORT_WHEN_HOST_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PORT_WHEN_HOST_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INVALID_PORT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INVALID_PORT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FRAG_FOR_GENERIC_URI	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FRAG_FOR_GENERIC_URI"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FRAG_WHEN_PATH_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FRAG_WHEN_PATH_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FRAG_INVALID_CHAR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FRAG_INVALID_CHAR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PARSER_IN_USE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PARSER_IN_USE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_CHANGE_WHILE_PARSING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_CHANGE_WHILE_PARSING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SELF_CAUSATION_NOT_PERMITTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SELF_CAUSATION_NOT_PERMITTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_USERINFO_IF_NO_HOST	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_USERINFO_IF_NO_HOST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_PORT_IF_NO_HOST	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_PORT_IF_NO_HOST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_QUERY_STRING_IN_PATH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_QUERY_STRING_IN_PATH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_FRAGMENT_STRING_IN_PATH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_FRAGMENT_STRING_IN_PATH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_INIT_URI_EMPTY_PARMS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_INIT_URI_EMPTY_PARMS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_METHOD_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_METHOD_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INCRSAXSRCFILTER_NOT_RESTARTABLE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INCRSAXSRCFILTER_NOT_RESTARTABLE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XMLRDR_NOT_BEFORE_STARTPARSE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XMLRDR_NOT_BEFORE_STARTPARSE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_AXIS_TRAVERSER_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_AXIS_TRAVERSER_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ERRORHANDLER_CREATED_WITH_NULL_PRINTWRITER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ERRORHANDLER_CREATED_WITH_NULL_PRINTWRITER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SYSTEMID_UNKNOWN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SYSTEMID_UNKNOWN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_LOCATION_UNKNOWN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_LOCATION_UNKNOWN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PREFIX_MUST_RESOLVE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PREFIX_MUST_RESOLVE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CREATEDOCUMENT_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CREATEDOCUMENT_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CHILD_HAS_NO_OWNER_DOCUMENT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CHILD_HAS_NO_OWNER_DOCUMENT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CHILD_HAS_NO_OWNER_DOCUMENT_ELEMENT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CHILD_HAS_NO_OWNER_DOCUMENT_ELEMENT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_OUTPUT_TEXT_BEFORE_DOC	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_OUTPUT_TEXT_BEFORE_DOC"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_HAVE_MORE_THAN_ONE_ROOT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_HAVE_MORE_THAN_ONE_ROOT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ARG_LOCALNAME_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ARG_LOCALNAME_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ARG_LOCALNAME_INVALID	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ARG_LOCALNAME_INVALID"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ARG_PREFIX_INVALID	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ARG_PREFIX_INVALID"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NAME_CANT_START_WITH_COLON	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NAME_CANT_START_WITH_COLON"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getContents	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
{	TokenNameLBRACE
"ER0000"	TokenNameStringLiteral
,	TokenNameCOMMA
"{0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FUNCTION_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"函數不受支援！"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_OVERWRITE_CAUSE	TokenNameIdentifier
,	TokenNameCOMMA
"無法改寫原因"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_DEFAULT_IMPL	TokenNameIdentifier
,	TokenNameCOMMA
"找不到預設實作"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CHUNKEDINTARRAY_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"ChunkedIntArray({0}) 目前不受支援"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_OFFSET_BIGGER_THAN_SLOT	TokenNameIdentifier
,	TokenNameCOMMA
"偏移比槽大"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COROUTINE_NOT_AVAIL	TokenNameIdentifier
,	TokenNameCOMMA
"沒有 Coroutine 可用，id={0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COROUTINE_CO_EXIT	TokenNameIdentifier
,	TokenNameCOMMA
"CoroutineManager 收到 co_exit() 要求"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COJOINROUTINESET_FAILED	TokenNameIdentifier
,	TokenNameCOMMA
"co_joinCoroutineSet() 失效"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COROUTINE_PARAM	TokenNameIdentifier
,	TokenNameCOMMA
"Coroutine 參數錯誤 ({0})"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PARSER_DOTERMINATE_ANSWERS	TokenNameIdentifier
,	TokenNameCOMMA
" 非預期的結果：剖析器 doTerminate 回答 {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_PARSE_CALL_WHILE_PARSING	TokenNameIdentifier
,	TokenNameCOMMA
"在剖析時未呼叫 parse"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_TYPED_ITERATOR_AXIS_NOT_IMPLEMENTED	TokenNameIdentifier
,	TokenNameCOMMA
"錯誤：針對軸 {0} 輸入的重複項目沒有實作"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ITERATOR_AXIS_NOT_IMPLEMENTED	TokenNameIdentifier
,	TokenNameCOMMA
"錯誤：軸 {0} 的重複項目沒有實作"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ITERATOR_CLONE_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"重複項目複製不受支援"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNKNOWN_AXIS_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"不明的軸遍歷類型：{0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_AXIS_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"不支援軸遍歷：{0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_DTMIDS_AVAIL	TokenNameIdentifier
,	TokenNameCOMMA
"沒有可用的 DTM ID"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"不支援：{0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODE_NON_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"對 getDTMHandleFromNode 而言，節點必須為非空值"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULD_NOT_RESOLVE_NODE	TokenNameIdentifier
,	TokenNameCOMMA
"無法解析節點為控點"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_STARTPARSE_WHILE_PARSING	TokenNameIdentifier
,	TokenNameCOMMA
"在剖析時未呼叫 startParse"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_STARTPARSE_NEEDS_SAXPARSER	TokenNameIdentifier
,	TokenNameCOMMA
"startParse 需要非空值的 SAXParser"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULD_NOT_INIT_PARSER	TokenNameIdentifier
,	TokenNameCOMMA
"無法使用以下項目起始設定剖析器"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXCEPTION_CREATING_POOL	TokenNameIdentifier
,	TokenNameCOMMA
"建立儲存池的新實例時發生異常"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE	TokenNameIdentifier
,	TokenNameCOMMA
"路徑包含無效的跳脫字元"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SCHEME_REQUIRED	TokenNameIdentifier
,	TokenNameCOMMA
"綱要是必需的！"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_SCHEME_IN_URI	TokenNameIdentifier
,	TokenNameCOMMA
"在 URI：{0} 找不到綱要"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_SCHEME_INURI	TokenNameIdentifier
,	TokenNameCOMMA
"在 URI 找不到綱要"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PATH_INVALID_CHAR	TokenNameIdentifier
,	TokenNameCOMMA
"路徑包含無效的字元：{0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SCHEME_FROM_NULL_STRING	TokenNameIdentifier
,	TokenNameCOMMA
"無法從空字串設定綱要"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SCHEME_NOT_CONFORMANT	TokenNameIdentifier
,	TokenNameCOMMA
"綱要不是 conformant。"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_HOST_ADDRESS_NOT_WELLFORMED	TokenNameIdentifier
,	TokenNameCOMMA
"主機沒有完整的位址"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PORT_WHEN_HOST_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"主機為空值時，無法設定埠"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INVALID_PORT	TokenNameIdentifier
,	TokenNameCOMMA
"無效的埠編號"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FRAG_FOR_GENERIC_URI	TokenNameIdentifier
,	TokenNameCOMMA
"只能對通用的 URI 設定片段"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FRAG_WHEN_PATH_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"路徑為空值時，無法設定片段"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FRAG_INVALID_CHAR	TokenNameIdentifier
,	TokenNameCOMMA
"片段包含無效的字元"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PARSER_IN_USE	TokenNameIdentifier
,	TokenNameCOMMA
"剖析器已在使用中"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_CHANGE_WHILE_PARSING	TokenNameIdentifier
,	TokenNameCOMMA
"剖析時無法變更 {0} {1}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SELF_CAUSATION_NOT_PERMITTED	TokenNameIdentifier
,	TokenNameCOMMA
"不允許本身的因果關係"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_USERINFO_IF_NO_HOST	TokenNameIdentifier
,	TokenNameCOMMA
"如果沒有指定主機，不可指定 Userinfo"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_PORT_IF_NO_HOST	TokenNameIdentifier
,	TokenNameCOMMA
"如果沒有指定主機，不可指定埠"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_QUERY_STRING_IN_PATH	TokenNameIdentifier
,	TokenNameCOMMA
"在路徑及查詢字串中不可指定查詢字串"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_FRAGMENT_STRING_IN_PATH	TokenNameIdentifier
,	TokenNameCOMMA
"片段無法同時在路徑和片段中指定"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_INIT_URI_EMPTY_PARMS	TokenNameIdentifier
,	TokenNameCOMMA
"無法以空白參數起始設定 URI"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_METHOD_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"方法不受支援"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INCRSAXSRCFILTER_NOT_RESTARTABLE	TokenNameIdentifier
,	TokenNameCOMMA
"IncrementalSAXSource_Filter 目前無法重新啟動"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XMLRDR_NOT_BEFORE_STARTPARSE	TokenNameIdentifier
,	TokenNameCOMMA
"XMLReader 沒有在 startParse 要求之前"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_AXIS_TRAVERSER_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"不支援軸遍歷：{0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ERRORHANDLER_CREATED_WITH_NULL_PRINTWRITER	TokenNameIdentifier
,	TokenNameCOMMA
"以空值 PrintWriter 建立的 ListingErrorHandler！"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SYSTEMID_UNKNOWN	TokenNameIdentifier
,	TokenNameCOMMA
"不明的 SystemId"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_LOCATION_UNKNOWN	TokenNameIdentifier
,	TokenNameCOMMA
"錯誤位置不明"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PREFIX_MUST_RESOLVE	TokenNameIdentifier
,	TokenNameCOMMA
"字首必須解析為名稱空間：{0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CREATEDOCUMENT_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"在 XPathContext 中不支援 createDocument()"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CHILD_HAS_NO_OWNER_DOCUMENT	TokenNameIdentifier
,	TokenNameCOMMA
"屬性子項元件沒有擁有者文件！"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CHILD_HAS_NO_OWNER_DOCUMENT_ELEMENT	TokenNameIdentifier
,	TokenNameCOMMA
"屬性子項元件沒有擁有者文件元素！"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_OUTPUT_TEXT_BEFORE_DOC	TokenNameIdentifier
,	TokenNameCOMMA
"警告：不能輸出文件元素之前的文字！忽略..."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_HAVE_MORE_THAN_ONE_ROOT	TokenNameIdentifier
,	TokenNameCOMMA
"一個 DOM 只能有一個根目錄！"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ARG_LOCALNAME_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"引數 'localName' 為空值"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ARG_LOCALNAME_INVALID	TokenNameIdentifier
,	TokenNameCOMMA
"QNAME 中的本端名稱應該是有效的 NCName"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ARG_PREFIX_INVALID	TokenNameIdentifier
,	TokenNameCOMMA
"QNAME 中的字首應該是有效的 NCName"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NAME_CANT_START_WITH_COLON	TokenNameIdentifier
,	TokenNameCOMMA
"名稱的開頭不可為冒號"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"BAD_CODE"	TokenNameStringLiteral
,	TokenNameCOMMA
"createMessage 的參數超出界限"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"FORMAT_FAILED"	TokenNameStringLiteral
,	TokenNameCOMMA
"在 messageFormat 呼叫期間擲出異常"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"line"	TokenNameStringLiteral
,	TokenNameCOMMA
"行號"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"column"	TokenNameStringLiteral
,	TokenNameCOMMA
"欄號"	TokenNameStringLiteral
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
XMLErrorResources	TokenNameIdentifier
loadResourceBundle	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
className	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MissingResourceException	TokenNameIdentifier
{	TokenNameLBRACE
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
=	TokenNameEQUAL
Locale	TokenNameIdentifier
.	TokenNameDOT
getDefault	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
suffix	TokenNameIdentifier
=	TokenNameEQUAL
getResourceSuffix	TokenNameIdentifier
(	TokenNameLPAREN
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XMLErrorResources	TokenNameIdentifier
)	TokenNameRPAREN
ResourceBundle	TokenNameIdentifier
.	TokenNameDOT
getBundle	TokenNameIdentifier
(	TokenNameLPAREN
className	TokenNameIdentifier
+	TokenNamePLUS
suffix	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MissingResourceException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XMLErrorResources	TokenNameIdentifier
)	TokenNameRPAREN
ResourceBundle	TokenNameIdentifier
.	TokenNameDOT
getBundle	TokenNameIdentifier
(	TokenNameLPAREN
className	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
"zh"	TokenNameStringLiteral
,	TokenNameCOMMA
"TW"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MissingResourceException	TokenNameIdentifier
e2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
MissingResourceException	TokenNameIdentifier
(	TokenNameLPAREN
"Could not load any resource bundles."	TokenNameStringLiteral
,	TokenNameCOMMA
className	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
getResourceSuffix	TokenNameIdentifier
(	TokenNameLPAREN
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
suffix	TokenNameIdentifier
=	TokenNameEQUAL
"_"	TokenNameStringLiteral
+	TokenNamePLUS
locale	TokenNameIdentifier
.	TokenNameDOT
getLanguage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
country	TokenNameIdentifier
=	TokenNameEQUAL
locale	TokenNameIdentifier
.	TokenNameDOT
getCountry	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
country	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"TW"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
suffix	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
"_"	TokenNameStringLiteral
+	TokenNamePLUS
country	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
suffix	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
