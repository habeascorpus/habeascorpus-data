package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
res	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ListResourceBundle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
MissingResourceException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ResourceBundle	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
XMLErrorResources_pt_BR	TokenNameIdentifier
extends	TokenNameextends
ListResourceBundle	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FUNCTION_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FUNCTION_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_OVERWRITE_CAUSE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_OVERWRITE_CAUSE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_DEFAULT_IMPL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_DEFAULT_IMPL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CHUNKEDINTARRAY_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CHUNKEDINTARRAY_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_OFFSET_BIGGER_THAN_SLOT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_OFFSET_BIGGER_THAN_SLOT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COROUTINE_NOT_AVAIL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COROUTINE_NOT_AVAIL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COROUTINE_CO_EXIT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COROUTINE_CO_EXIT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COJOINROUTINESET_FAILED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COJOINROUTINESET_FAILED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COROUTINE_PARAM	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COROUTINE_PARAM"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PARSER_DOTERMINATE_ANSWERS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PARSER_DOTERMINATE_ANSWERS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_PARSE_CALL_WHILE_PARSING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_PARSE_CALL_WHILE_PARSING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_TYPED_ITERATOR_AXIS_NOT_IMPLEMENTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_TYPED_ITERATOR_AXIS_NOT_IMPLEMENTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ITERATOR_AXIS_NOT_IMPLEMENTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ITERATOR_AXIS_NOT_IMPLEMENTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ITERATOR_CLONE_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ITERATOR_CLONE_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNKNOWN_AXIS_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNKNOWN_AXIS_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_AXIS_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_AXIS_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_DTMIDS_AVAIL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_DTMIDS_AVAIL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODE_NON_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODE_NON_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULD_NOT_RESOLVE_NODE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULD_NOT_RESOLVE_NODE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_STARTPARSE_WHILE_PARSING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_STARTPARSE_WHILE_PARSING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_STARTPARSE_NEEDS_SAXPARSER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_STARTPARSE_NEEDS_SAXPARSER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULD_NOT_INIT_PARSER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULD_NOT_INIT_PARSER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXCEPTION_CREATING_POOL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXCEPTION_CREATING_POOL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SCHEME_REQUIRED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SCHEME_REQUIRED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_SCHEME_IN_URI	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_SCHEME_IN_URI"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_SCHEME_INURI	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_SCHEME_INURI"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PATH_INVALID_CHAR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PATH_INVALID_CHAR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SCHEME_FROM_NULL_STRING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SCHEME_FROM_NULL_STRING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SCHEME_NOT_CONFORMANT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SCHEME_NOT_CONFORMANT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_HOST_ADDRESS_NOT_WELLFORMED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_HOST_ADDRESS_NOT_WELLFORMED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PORT_WHEN_HOST_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PORT_WHEN_HOST_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INVALID_PORT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INVALID_PORT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FRAG_FOR_GENERIC_URI	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FRAG_FOR_GENERIC_URI"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FRAG_WHEN_PATH_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FRAG_WHEN_PATH_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FRAG_INVALID_CHAR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FRAG_INVALID_CHAR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PARSER_IN_USE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PARSER_IN_USE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_CHANGE_WHILE_PARSING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_CHANGE_WHILE_PARSING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SELF_CAUSATION_NOT_PERMITTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SELF_CAUSATION_NOT_PERMITTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_USERINFO_IF_NO_HOST	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_USERINFO_IF_NO_HOST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_PORT_IF_NO_HOST	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_PORT_IF_NO_HOST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_QUERY_STRING_IN_PATH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_QUERY_STRING_IN_PATH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NO_FRAGMENT_STRING_IN_PATH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NO_FRAGMENT_STRING_IN_PATH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_INIT_URI_EMPTY_PARMS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_INIT_URI_EMPTY_PARMS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_METHOD_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_METHOD_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INCRSAXSRCFILTER_NOT_RESTARTABLE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INCRSAXSRCFILTER_NOT_RESTARTABLE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XMLRDR_NOT_BEFORE_STARTPARSE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XMLRDR_NOT_BEFORE_STARTPARSE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_AXIS_TRAVERSER_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_AXIS_TRAVERSER_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ERRORHANDLER_CREATED_WITH_NULL_PRINTWRITER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ERRORHANDLER_CREATED_WITH_NULL_PRINTWRITER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SYSTEMID_UNKNOWN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SYSTEMID_UNKNOWN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_LOCATION_UNKNOWN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_LOCATION_UNKNOWN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PREFIX_MUST_RESOLVE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PREFIX_MUST_RESOLVE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CREATEDOCUMENT_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CREATEDOCUMENT_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CHILD_HAS_NO_OWNER_DOCUMENT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CHILD_HAS_NO_OWNER_DOCUMENT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CHILD_HAS_NO_OWNER_DOCUMENT_ELEMENT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CHILD_HAS_NO_OWNER_DOCUMENT_ELEMENT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_OUTPUT_TEXT_BEFORE_DOC	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_OUTPUT_TEXT_BEFORE_DOC"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_HAVE_MORE_THAN_ONE_ROOT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_HAVE_MORE_THAN_ONE_ROOT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ARG_LOCALNAME_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ARG_LOCALNAME_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ARG_LOCALNAME_INVALID	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ARG_LOCALNAME_INVALID"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ARG_PREFIX_INVALID	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ARG_PREFIX_INVALID"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NAME_CANT_START_WITH_COLON	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NAME_CANT_START_WITH_COLON"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getContents	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
{	TokenNameLBRACE
"ER0000"	TokenNameStringLiteral
,	TokenNameCOMMA
"{0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FUNCTION_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"Função não suportada!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_OVERWRITE_CAUSE	TokenNameIdentifier
,	TokenNameCOMMA
"Impossível sobrepor causa"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_DEFAULT_IMPL	TokenNameIdentifier
,	TokenNameCOMMA
"Nenhuma implementação padrão encontrada"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CHUNKEDINTARRAY_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"ChunkedIntArray({0}) não suportado atualmente"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_OFFSET_BIGGER_THAN_SLOT	TokenNameIdentifier
,	TokenNameCOMMA
"Deslocamento maior que slot"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COROUTINE_NOT_AVAIL	TokenNameIdentifier
,	TokenNameCOMMA
"Co-rotina não disponível, id={0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COROUTINE_CO_EXIT	TokenNameIdentifier
,	TokenNameCOMMA
"CoroutineManager recebido para pedido co_exit()"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COJOINROUTINESET_FAILED	TokenNameIdentifier
,	TokenNameCOMMA
"Falha de co_joinCoroutineSet()"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COROUTINE_PARAM	TokenNameIdentifier
,	TokenNameCOMMA
"Erro de parâmetro coroutine ({0})"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PARSER_DOTERMINATE_ANSWERS	TokenNameIdentifier
,	TokenNameCOMMA
" INESPERADO: doTerminate do analisador respondeu {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_PARSE_CALL_WHILE_PARSING	TokenNameIdentifier
,	TokenNameCOMMA
"parse não pode ser chamado durante análise"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_TYPED_ITERATOR_AXIS_NOT_IMPLEMENTED	TokenNameIdentifier
,	TokenNameCOMMA
"Erro: digitado repetidor para eixo {0} não implementado"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ITERATOR_AXIS_NOT_IMPLEMENTED	TokenNameIdentifier
,	TokenNameCOMMA
"Erro: repetidor para eixo {0} não implementado"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ITERATOR_CLONE_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"Clone de repetidor não suportado"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNKNOWN_AXIS_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Tipo de passagem de eixo desconhecida: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_AXIS_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"Atravessador de eixo não suportado: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_DTMIDS_AVAIL	TokenNameIdentifier
,	TokenNameCOMMA
"Não existem mais IDs de DTM disponíveis"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"Não suportado: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODE_NON_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"O nó não deve ser nulo para getDTMHandleFromNode"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULD_NOT_RESOLVE_NODE	TokenNameIdentifier
,	TokenNameCOMMA
"Não foi possível resolver o nó para um identificador"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_STARTPARSE_WHILE_PARSING	TokenNameIdentifier
,	TokenNameCOMMA
"startParse não pode ser chamado durante análise"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_STARTPARSE_NEEDS_SAXPARSER	TokenNameIdentifier
,	TokenNameCOMMA
"startParse precisa de um SAXParser não-nulo"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULD_NOT_INIT_PARSER	TokenNameIdentifier
,	TokenNameCOMMA
"não foi possível inicializar analisador com"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXCEPTION_CREATING_POOL	TokenNameIdentifier
,	TokenNameCOMMA
"exceção ao criar nova instância para o conjunto"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE	TokenNameIdentifier
,	TokenNameCOMMA
"O caminho contém seqüência de escape inválida"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SCHEME_REQUIRED	TokenNameIdentifier
,	TokenNameCOMMA
"O esquema é obrigatório!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_SCHEME_IN_URI	TokenNameIdentifier
,	TokenNameCOMMA
"Nenhum esquema encontrado no URI: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_SCHEME_INURI	TokenNameIdentifier
,	TokenNameCOMMA
"Nenhum esquema encontrado no URI"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PATH_INVALID_CHAR	TokenNameIdentifier
,	TokenNameCOMMA
"O caminho contém caractere inválido: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SCHEME_FROM_NULL_STRING	TokenNameIdentifier
,	TokenNameCOMMA
"Impossível definir esquema a partir da cadeia nula"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SCHEME_NOT_CONFORMANT	TokenNameIdentifier
,	TokenNameCOMMA
"O esquema não está em conformidade."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_HOST_ADDRESS_NOT_WELLFORMED	TokenNameIdentifier
,	TokenNameCOMMA
"O host não é um endereço formado corretamente"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PORT_WHEN_HOST_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"A porta não pode ser definida quando o host é nulo"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INVALID_PORT	TokenNameIdentifier
,	TokenNameCOMMA
"Número de porta inválido"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FRAG_FOR_GENERIC_URI	TokenNameIdentifier
,	TokenNameCOMMA
"O fragmento só pode ser definido para um URI genérico"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FRAG_WHEN_PATH_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"O fragmento não pode ser definido quando o caminho é nulo"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FRAG_INVALID_CHAR	TokenNameIdentifier
,	TokenNameCOMMA
"O fragmento contém caractere inválido"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PARSER_IN_USE	TokenNameIdentifier
,	TokenNameCOMMA
"O analisador já está sendo utilizado"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_CHANGE_WHILE_PARSING	TokenNameIdentifier
,	TokenNameCOMMA
"Impossível alterar {0} {1} durante análise"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SELF_CAUSATION_NOT_PERMITTED	TokenNameIdentifier
,	TokenNameCOMMA
"Auto-causação não permitida"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_USERINFO_IF_NO_HOST	TokenNameIdentifier
,	TokenNameCOMMA
"Userinfo não pode ser especificado se host não for especificado"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_PORT_IF_NO_HOST	TokenNameIdentifier
,	TokenNameCOMMA
"Port não pode ser especificado se host não for especificado"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_QUERY_STRING_IN_PATH	TokenNameIdentifier
,	TokenNameCOMMA
"A cadeia de consulta não pode ser especificada na cadeia de consulta e caminho"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NO_FRAGMENT_STRING_IN_PATH	TokenNameIdentifier
,	TokenNameCOMMA
"O fragmento não pode ser especificado no caminho e fragmento"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_INIT_URI_EMPTY_PARMS	TokenNameIdentifier
,	TokenNameCOMMA
"Impossível inicializar URI com parâmetros vazios"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_METHOD_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"Método ainda não suportado"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INCRSAXSRCFILTER_NOT_RESTARTABLE	TokenNameIdentifier
,	TokenNameCOMMA
"IncrementalSAXSource_Filter atualmente não reinicializável"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XMLRDR_NOT_BEFORE_STARTPARSE	TokenNameIdentifier
,	TokenNameCOMMA
"XMLReader não antes do pedido startParse"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_AXIS_TRAVERSER_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"Atravessador de eixo não suportado: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ERRORHANDLER_CREATED_WITH_NULL_PRINTWRITER	TokenNameIdentifier
,	TokenNameCOMMA
"ListingErrorHandler criado com nulo PrintWriter!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SYSTEMID_UNKNOWN	TokenNameIdentifier
,	TokenNameCOMMA
"SystemId Desconhecido"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_LOCATION_UNKNOWN	TokenNameIdentifier
,	TokenNameCOMMA
"Localização de erro desconhecido"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PREFIX_MUST_RESOLVE	TokenNameIdentifier
,	TokenNameCOMMA
"O prefixo deve ser resolvido para um espaço de nomes: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CREATEDOCUMENT_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"createDocument() não suportado em XPathContext!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CHILD_HAS_NO_OWNER_DOCUMENT	TokenNameIdentifier
,	TokenNameCOMMA
"O atributo child não possui um documento do proprietário!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CHILD_HAS_NO_OWNER_DOCUMENT_ELEMENT	TokenNameIdentifier
,	TokenNameCOMMA
"O atributo child não possui um elemento de documento do proprietário!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_OUTPUT_TEXT_BEFORE_DOC	TokenNameIdentifier
,	TokenNameCOMMA
"Aviso: impossível emitir texto antes do elemento document! Ignorando..."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_HAVE_MORE_THAN_ONE_ROOT	TokenNameIdentifier
,	TokenNameCOMMA
"Impossível ter mais de uma raiz em um DOM!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ARG_LOCALNAME_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"O argumento 'localName' é nulo"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ARG_LOCALNAME_INVALID	TokenNameIdentifier
,	TokenNameCOMMA
"Localname em QNAME deve ser um NCName válido"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ARG_PREFIX_INVALID	TokenNameIdentifier
,	TokenNameCOMMA
"O prefixo em QNAME deve ser um NCName válido"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NAME_CANT_START_WITH_COLON	TokenNameIdentifier
,	TokenNameCOMMA
"O nome não pode começar com um caractere de dois pontos (:)"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"BAD_CODE"	TokenNameStringLiteral
,	TokenNameCOMMA
"O parâmetro para createMessage estava fora dos limites"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"FORMAT_FAILED"	TokenNameStringLiteral
,	TokenNameCOMMA
"Exceção emitida durante chamada messageFormat"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"line"	TokenNameStringLiteral
,	TokenNameCOMMA
"Linha n°"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"column"	TokenNameStringLiteral
,	TokenNameCOMMA
"Coluna n°"	TokenNameStringLiteral
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
XMLErrorResources	TokenNameIdentifier
loadResourceBundle	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
className	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MissingResourceException	TokenNameIdentifier
{	TokenNameLBRACE
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
=	TokenNameEQUAL
Locale	TokenNameIdentifier
.	TokenNameDOT
getDefault	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
suffix	TokenNameIdentifier
=	TokenNameEQUAL
getResourceSuffix	TokenNameIdentifier
(	TokenNameLPAREN
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XMLErrorResources	TokenNameIdentifier
)	TokenNameRPAREN
ResourceBundle	TokenNameIdentifier
.	TokenNameDOT
getBundle	TokenNameIdentifier
(	TokenNameLPAREN
className	TokenNameIdentifier
+	TokenNamePLUS
suffix	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MissingResourceException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XMLErrorResources	TokenNameIdentifier
)	TokenNameRPAREN
ResourceBundle	TokenNameIdentifier
.	TokenNameDOT
getBundle	TokenNameIdentifier
(	TokenNameLPAREN
className	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
"pt"	TokenNameStringLiteral
,	TokenNameCOMMA
"BR"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MissingResourceException	TokenNameIdentifier
e2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
MissingResourceException	TokenNameIdentifier
(	TokenNameLPAREN
"Could not load any resource bundles."	TokenNameStringLiteral
,	TokenNameCOMMA
className	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
getResourceSuffix	TokenNameIdentifier
(	TokenNameLPAREN
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
suffix	TokenNameIdentifier
=	TokenNameEQUAL
"_"	TokenNameStringLiteral
+	TokenNamePLUS
locale	TokenNameIdentifier
.	TokenNameDOT
getLanguage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
country	TokenNameIdentifier
=	TokenNameEQUAL
locale	TokenNameIdentifier
.	TokenNameDOT
getCountry	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
country	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"TW"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
suffix	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
"_"	TokenNameStringLiteral
+	TokenNamePLUS
country	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
suffix	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
