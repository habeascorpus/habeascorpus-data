package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
dtm	TokenNameIdentifier
.	TokenNameDOT
ref	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
SourceLocator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
dtm	TokenNameIdentifier
.	TokenNameDOT
DTM	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
dtm	TokenNameIdentifier
.	TokenNameDOT
DTMAxisIterator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
dtm	TokenNameIdentifier
.	TokenNameDOT
DTMAxisTraverser	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
dtm	TokenNameIdentifier
.	TokenNameDOT
DTMManager	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
dtm	TokenNameIdentifier
.	TokenNameDOT
DTMWSFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
FastStringBuffer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
XMLString	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
XMLStringFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
Attributes	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
ContentHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
Locator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
LexicalHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
DTMDocumentImpl	TokenNameIdentifier
implements	TokenNameimplements
DTM	TokenNameIdentifier
,	TokenNameCOMMA
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
ContentHandler	TokenNameIdentifier
,	TokenNameCOMMA
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
LexicalHandler	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
byte	TokenNamebyte
DOCHANDLE_SHIFT	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
NODEHANDLE_MASK	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
DOCHANDLE_SHIFT	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DOCHANDLE_MASK	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
-	TokenNameMINUS
NODEHANDLE_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
m_docHandle	TokenNameIdentifier
=	TokenNameEQUAL
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
m_docElement	TokenNameIdentifier
=	TokenNameEQUAL
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
currentParent	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
previousSibling	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
m_currentNode	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
previousSiblingWasParent	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
done	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
boolean	TokenNameboolean
m_isError	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
DEBUG	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
m_documentBaseURI	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
IncrementalSAXSource	TokenNameIdentifier
m_incrSAXSource	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
ChunkedIntArray	TokenNameIdentifier
nodes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ChunkedIntArray	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
FastStringBuffer	TokenNameIdentifier
m_char	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FastStringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
m_char_current_start	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
DTMStringPool	TokenNameIdentifier
m_localNames	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DTMStringPool	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
DTMStringPool	TokenNameIdentifier
m_nsNames	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DTMStringPool	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
DTMStringPool	TokenNameIdentifier
m_prefixNames	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DTMStringPool	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
ExpandedNameTable	TokenNameIdentifier
m_expandedNames	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ExpandedNameTable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
XMLStringFactory	TokenNameIdentifier
m_xsf	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
DTMDocumentImpl	TokenNameIdentifier
(	TokenNameLPAREN
DTMManager	TokenNameIdentifier
mgr	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
documentNumber	TokenNameIdentifier
,	TokenNameCOMMA
DTMWSFilter	TokenNameIdentifier
whiteSpaceFilter	TokenNameIdentifier
,	TokenNameCOMMA
XMLStringFactory	TokenNameIdentifier
xstringfactory	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
initDocument	TokenNameIdentifier
(	TokenNameLPAREN
documentNumber	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_xsf	TokenNameIdentifier
=	TokenNameEQUAL
xstringfactory	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setIncrementalSAXSource	TokenNameIdentifier
(	TokenNameLPAREN
IncrementalSAXSource	TokenNameIdentifier
source	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
m_incrSAXSource	TokenNameIdentifier
=	TokenNameEQUAL
source	TokenNameIdentifier
;	TokenNameSEMICOLON
source	TokenNameIdentifier
.	TokenNameDOT
setContentHandler	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
source	TokenNameIdentifier
.	TokenNameDOT
setLexicalHandler	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
appendNode	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
w0	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
w1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
w2	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
w3	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
slotnumber	TokenNameIdentifier
=	TokenNameEQUAL
nodes	TokenNameIdentifier
.	TokenNameDOT
appendSlot	TokenNameIdentifier
(	TokenNameLPAREN
w0	TokenNameIdentifier
,	TokenNameCOMMA
w1	TokenNameIdentifier
,	TokenNameCOMMA
w2	TokenNameIdentifier
,	TokenNameCOMMA
w3	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DEBUG	TokenNameIdentifier
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
slotnumber	TokenNameIdentifier
+	TokenNamePLUS
": "	TokenNameStringLiteral
+	TokenNamePLUS
w0	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
w1	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
w2	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
w3	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
previousSiblingWasParent	TokenNameIdentifier
)	TokenNameRPAREN
nodes	TokenNameIdentifier
.	TokenNameDOT
writeEntry	TokenNameIdentifier
(	TokenNameLPAREN
previousSibling	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
slotnumber	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
previousSiblingWasParent	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
slotnumber	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setFeature	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
featureId	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
state	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
setLocalNameTable	TokenNameIdentifier
(	TokenNameLPAREN
DTMStringPool	TokenNameIdentifier
poolRef	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
m_localNames	TokenNameIdentifier
=	TokenNameEQUAL
poolRef	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DTMStringPool	TokenNameIdentifier
getLocalNameTable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
m_localNames	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setNsNameTable	TokenNameIdentifier
(	TokenNameLPAREN
DTMStringPool	TokenNameIdentifier
poolRef	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
m_nsNames	TokenNameIdentifier
=	TokenNameEQUAL
poolRef	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DTMStringPool	TokenNameIdentifier
getNsNameTable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
m_nsNames	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setPrefixNameTable	TokenNameIdentifier
(	TokenNameLPAREN
DTMStringPool	TokenNameIdentifier
poolRef	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
m_prefixNames	TokenNameIdentifier
=	TokenNameEQUAL
poolRef	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DTMStringPool	TokenNameIdentifier
getPrefixNameTable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
m_prefixNames	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
setContentBuffer	TokenNameIdentifier
(	TokenNameLPAREN
FastStringBuffer	TokenNameIdentifier
buffer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
m_char	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
FastStringBuffer	TokenNameIdentifier
getContentBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
m_char	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
ContentHandler	TokenNameIdentifier
getContentHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
m_incrSAXSource	TokenNameIdentifier
instanceof	TokenNameinstanceof
IncrementalSAXSource_Filter	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
(	TokenNameLPAREN
ContentHandler	TokenNameIdentifier
)	TokenNameRPAREN
m_incrSAXSource	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
return	TokenNamereturn
this	TokenNamethis
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
LexicalHandler	TokenNameIdentifier
getLexicalHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
m_incrSAXSource	TokenNameIdentifier
instanceof	TokenNameinstanceof
IncrementalSAXSource_Filter	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
(	TokenNameLPAREN
LexicalHandler	TokenNameIdentifier
)	TokenNameRPAREN
m_incrSAXSource	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
return	TokenNamereturn
this	TokenNamethis
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
EntityResolver	TokenNameIdentifier
getEntityResolver	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
DTDHandler	TokenNameIdentifier
getDTDHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
ErrorHandler	TokenNameIdentifier
getErrorHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
DeclHandler	TokenNameIdentifier
getDeclHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
needsTwoThreads	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_incrSAXSource	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
characters	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ch	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
length	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
m_char	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processAccumulatedText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
m_char	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
len	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
m_char_current_start	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
appendTextChild	TokenNameIdentifier
(	TokenNameLPAREN
m_char_current_start	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
-	TokenNameMINUS
m_char_current_start	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_char_current_start	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
appendEndDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endElement	TokenNameIdentifier
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
,	TokenNameCOMMA
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
localName	TokenNameIdentifier
,	TokenNameCOMMA
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
qName	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
processAccumulatedText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendEndElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endPrefixMapping	TokenNameIdentifier
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
prefix	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
ignorableWhitespace	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ch	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
length	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
processingInstruction	TokenNameIdentifier
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
target	TokenNameIdentifier
,	TokenNameCOMMA
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
data	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
processAccumulatedText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setDocumentLocator	TokenNameIdentifier
(	TokenNameLPAREN
Locator	TokenNameIdentifier
locator	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
skippedEntity	TokenNameIdentifier
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
processAccumulatedText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
appendStartDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startElement	TokenNameIdentifier
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
,	TokenNameCOMMA
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
localName	TokenNameIdentifier
,	TokenNameCOMMA
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
qName	TokenNameIdentifier
,	TokenNameCOMMA
Attributes	TokenNameIdentifier
atts	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
processAccumulatedText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
colon	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
colon	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
prefix	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
colon	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Prefix="	TokenNameStringLiteral
+	TokenNamePLUS
prefix	TokenNameIdentifier
+	TokenNamePLUS
" index="	TokenNameStringLiteral
+	TokenNamePLUS
m_prefixNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendStartElement	TokenNameIdentifier
(	TokenNameLPAREN
m_nsNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
m_localNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
localName	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
m_prefixNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
nAtts	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
atts	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
atts	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
nAtts	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
qName	TokenNameIdentifier
=	TokenNameEQUAL
atts	TokenNameIdentifier
.	TokenNameDOT
getQName	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
qName	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"xmlns:"	TokenNameStringLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
"xmlns"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
prefix	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
colon	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
colon	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
prefix	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
colon	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
prefix	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
appendNSDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
m_prefixNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
m_nsNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
atts	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
atts	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"ID"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
nAtts	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
qName	TokenNameIdentifier
=	TokenNameEQUAL
atts	TokenNameIdentifier
.	TokenNameDOT
getQName	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
qName	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"xmlns:"	TokenNameStringLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
"xmlns"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
prefix	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
colon	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
colon	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
prefix	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
colon	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
localName	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
colon	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
prefix	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
localName	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_char	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
atts	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
contentEnd	TokenNameIdentifier
=	TokenNameEQUAL
m_char	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
"xmlns"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
"xmlns"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
qName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
appendAttribute	TokenNameIdentifier
(	TokenNameLPAREN
m_nsNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
atts	TokenNameIdentifier
.	TokenNameDOT
getURI	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
m_localNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
localName	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
m_prefixNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
atts	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
"ID"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
m_char_current_start	TokenNameIdentifier
,	TokenNameCOMMA
contentEnd	TokenNameIdentifier
-	TokenNameMINUS
m_char_current_start	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_char_current_start	TokenNameIdentifier
=	TokenNameEQUAL
contentEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startPrefixMapping	TokenNameIdentifier
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
prefix	TokenNameIdentifier
,	TokenNameCOMMA
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
uri	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
comment	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ch	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
length	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
processAccumulatedText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_char	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendComment	TokenNameIdentifier
(	TokenNameLPAREN
m_char_current_start	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_char_current_start	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
length	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endCDATA	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endDTD	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
endEntity	TokenNameIdentifier
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startCDATA	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startDTD	TokenNameIdentifier
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
publicId	TokenNameIdentifier
,	TokenNameCOMMA
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
systemId	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
startEntity	TokenNameIdentifier
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
final	TokenNamefinal
void	TokenNamevoid
initDocument	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
documentNumber	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
m_docHandle	TokenNameIdentifier
=	TokenNameEQUAL
documentNumber	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
DOCHANDLE_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
nodes	TokenNameIdentifier
.	TokenNameDOT
writeSlot	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
DOCUMENT_NODE	TokenNameIdentifier
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
done	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
hasChildNodes	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
getFirstChild	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
NULL	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getFirstChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeHandle	TokenNameIdentifier
&=	TokenNameAND_EQUAL
NODEHANDLE_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
type	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ELEMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DOCUMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ENTITY_REFERENCE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
kid	TokenNameIdentifier
=	TokenNameEQUAL
nodeHandle	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
kid	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
ATTRIBUTE_NODE	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
kid	TokenNameIdentifier
=	TokenNameEQUAL
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kid	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
NULL	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
kid	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
firstChild	TokenNameIdentifier
=	TokenNameEQUAL
kid	TokenNameIdentifier
|	TokenNameOR
m_docHandle	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
firstChild	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getLastChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeHandle	TokenNameIdentifier
&=	TokenNameAND_EQUAL
NODEHANDLE_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
lastChild	TokenNameIdentifier
=	TokenNameEQUAL
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
nextkid	TokenNameIdentifier
=	TokenNameEQUAL
getFirstChild	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextkid	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
nextkid	TokenNameIdentifier
=	TokenNameEQUAL
getNextSibling	TokenNameIdentifier
(	TokenNameLPAREN
nextkid	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
lastChild	TokenNameIdentifier
=	TokenNameEQUAL
nextkid	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
lastChild	TokenNameIdentifier
|	TokenNameOR
m_docHandle	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getAttributeNode	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
namespaceURI	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nsIndex	TokenNameIdentifier
=	TokenNameEQUAL
m_nsNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
namespaceURI	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
nameIndex	TokenNameIdentifier
=	TokenNameEQUAL
m_localNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nodeHandle	TokenNameIdentifier
&=	TokenNameAND_EQUAL
NODEHANDLE_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
type	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ELEMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
nodeHandle	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ATTRIBUTE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
nsIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
nameIndex	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
nodeHandle	TokenNameIdentifier
|	TokenNameOR
m_docHandle	TokenNameIdentifier
;	TokenNameSEMICOLON
nodeHandle	TokenNameIdentifier
=	TokenNameEQUAL
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getFirstAttribute	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeHandle	TokenNameIdentifier
&=	TokenNameAND_EQUAL
NODEHANDLE_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ELEMENT_NODE	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
(	TokenNameLPAREN
nodes	TokenNameIdentifier
.	TokenNameDOT
readEntry	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
nodeHandle	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
ATTRIBUTE_NODE	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
(	TokenNameLPAREN
nodes	TokenNameIdentifier
.	TokenNameDOT
readEntry	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
nodeHandle	TokenNameIdentifier
|	TokenNameOR
m_docHandle	TokenNameIdentifier
:	TokenNameCOLON
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getFirstNamespaceNode	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
inScope	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNextSibling	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeHandle	TokenNameIdentifier
&=	TokenNameAND_EQUAL
NODEHANDLE_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
short	TokenNameshort
type	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
nodes	TokenNameIdentifier
.	TokenNameDOT
readEntry	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ELEMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ATTRIBUTE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ENTITY_REFERENCE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
nextSib	TokenNameIdentifier
=	TokenNameEQUAL
nodes	TokenNameIdentifier
.	TokenNameDOT
readEntry	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextSib	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
NULL	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextSib	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
(	TokenNameLPAREN
m_docHandle	TokenNameIdentifier
|	TokenNameOR
nextSib	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
thisParent	TokenNameIdentifier
=	TokenNameEQUAL
nodes	TokenNameIdentifier
.	TokenNameDOT
readEntry	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodes	TokenNameIdentifier
.	TokenNameDOT
readEntry	TokenNameIdentifier
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
thisParent	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
(	TokenNameLPAREN
m_docHandle	TokenNameIdentifier
|	TokenNameOR
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getPreviousSibling	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeHandle	TokenNameIdentifier
&=	TokenNameAND_EQUAL
NODEHANDLE_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
parent	TokenNameIdentifier
=	TokenNameEQUAL
nodes	TokenNameIdentifier
.	TokenNameDOT
readEntry	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
kid	TokenNameIdentifier
=	TokenNameEQUAL
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
nextkid	TokenNameIdentifier
=	TokenNameEQUAL
getFirstChild	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextkid	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
nodeHandle	TokenNameIdentifier
;	TokenNameSEMICOLON
nextkid	TokenNameIdentifier
=	TokenNameEQUAL
getNextSibling	TokenNameIdentifier
(	TokenNameLPAREN
nextkid	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
kid	TokenNameIdentifier
=	TokenNameEQUAL
nextkid	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
kid	TokenNameIdentifier
|	TokenNameOR
m_docHandle	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNextAttribute	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeHandle	TokenNameIdentifier
&=	TokenNameAND_EQUAL
NODEHANDLE_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
type	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ELEMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getFirstAttribute	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ATTRIBUTE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
NULL	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
(	TokenNameLPAREN
m_docHandle	TokenNameIdentifier
|	TokenNameOR
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNextNamespaceNode	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
baseHandle	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
namespaceHandle	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
inScope	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNextDescendant	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
subtreeRootHandle	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
subtreeRootHandle	TokenNameIdentifier
&=	TokenNameAND_EQUAL
NODEHANDLE_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
nodeHandle	TokenNameIdentifier
&=	TokenNameAND_EQUAL
NODEHANDLE_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
!	TokenNameNOT
m_isError	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
done	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
>	TokenNameGREATER
nodes	TokenNameIdentifier
.	TokenNameDOT
slotsUsed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
>	TokenNameGREATER
subtreeRootHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
short	TokenNameshort
type	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ATTRIBUTE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeHandle	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
nextParentPos	TokenNameIdentifier
=	TokenNameEQUAL
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextParentPos	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
subtreeRootHandle	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
(	TokenNameLPAREN
m_docHandle	TokenNameIdentifier
|	TokenNameOR
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
done	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
else	TokenNameelse
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nodeHandle	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNextFollowing	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
axisContextHandle	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getNextPreceding	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
axisContextHandle	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeHandle	TokenNameIdentifier
&=	TokenNameAND_EQUAL
NODEHANDLE_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeHandle	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ATTRIBUTE_NODE	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
(	TokenNameLPAREN
nodes	TokenNameIdentifier
.	TokenNameDOT
readEntry	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
continue	TokenNamecontinue
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
m_docHandle	TokenNameIdentifier
|	TokenNameOR
nodes	TokenNameIdentifier
.	TokenNameDOT
specialFind	TokenNameIdentifier
(	TokenNameLPAREN
axisContextHandle	TokenNameIdentifier
,	TokenNameCOMMA
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getParent	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
m_docHandle	TokenNameIdentifier
|	TokenNameOR
nodes	TokenNameIdentifier
.	TokenNameDOT
readEntry	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getDocumentRoot	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
m_docHandle	TokenNameIdentifier
|	TokenNameOR
m_docElement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
m_docHandle	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getOwnerDocument	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
&	TokenNameAND
NODEHANDLE_MASK	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
&	TokenNameAND
DOCHANDLE_MASK	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getDocumentRoot	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
&	TokenNameAND
NODEHANDLE_MASK	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
&	TokenNameAND
DOCHANDLE_MASK	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
XMLString	TokenNameIdentifier
getStringValue	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
nodetype	TokenNameIdentifier
=	TokenNameEQUAL
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
nodetype	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
TEXT_NODE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
COMMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
CDATA_SECTION_NODE	TokenNameIdentifier
:	TokenNameCOLON
value	TokenNameIdentifier
=	TokenNameEQUAL
m_char	TokenNameIdentifier
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PROCESSING_INSTRUCTION_NODE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ATTRIBUTE_NODE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ELEMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ENTITY_REFERENCE_NODE	TokenNameIdentifier
:	TokenNameCOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
m_xsf	TokenNameIdentifier
.	TokenNameDOT
newstr	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getStringValueChunkCount	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getStringValueChunk	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
chunkIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
startAndLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getExpandedTypeID	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
qName	TokenNameIdentifier
=	TokenNameEQUAL
m_localNames	TokenNameIdentifier
.	TokenNameDOT
indexToString	TokenNameIdentifier
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
colonpos	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
":"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
localName	TokenNameIdentifier
=	TokenNameEQUAL
qName	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
colonpos	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
namespace	TokenNameIdentifier
=	TokenNameEQUAL
m_nsNames	TokenNameIdentifier
.	TokenNameDOT
indexToString	TokenNameIdentifier
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
expandedName	TokenNameIdentifier
=	TokenNameEQUAL
namespace	TokenNameIdentifier
+	TokenNamePLUS
":"	TokenNameStringLiteral
+	TokenNamePLUS
localName	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
expandedNameID	TokenNameIdentifier
=	TokenNameEQUAL
m_nsNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
expandedName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
expandedNameID	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getExpandedTypeID	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
namespace	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
localName	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
expandedName	TokenNameIdentifier
=	TokenNameEQUAL
namespace	TokenNameIdentifier
+	TokenNamePLUS
":"	TokenNameStringLiteral
+	TokenNamePLUS
localName	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
expandedNameID	TokenNameIdentifier
=	TokenNameEQUAL
m_nsNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
expandedName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
expandedNameID	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getLocalNameFromExpandedNameID	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ExpandedNameID	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
expandedName	TokenNameIdentifier
=	TokenNameEQUAL
m_localNames	TokenNameIdentifier
.	TokenNameDOT
indexToString	TokenNameIdentifier
(	TokenNameLPAREN
ExpandedNameID	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
colonpos	TokenNameIdentifier
=	TokenNameEQUAL
expandedName	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
":"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
localName	TokenNameIdentifier
=	TokenNameEQUAL
expandedName	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
colonpos	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
localName	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getNamespaceFromExpandedNameID	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ExpandedNameID	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
expandedName	TokenNameIdentifier
=	TokenNameEQUAL
m_localNames	TokenNameIdentifier
.	TokenNameDOT
indexToString	TokenNameIdentifier
(	TokenNameLPAREN
ExpandedNameID	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
colonpos	TokenNameIdentifier
=	TokenNameEQUAL
expandedName	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
":"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
nsName	TokenNameIdentifier
=	TokenNameEQUAL
expandedName	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
colonpos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
nsName	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fixednames	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"#text"	TokenNameStringLiteral
,	TokenNameCOMMA
"#cdata_section"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"#comment"	TokenNameStringLiteral
,	TokenNameCOMMA
"#document"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"#document-fragment"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
String	TokenNameIdentifier
getNodeName	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
type	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
fixednames	TokenNameIdentifier
[	TokenNameLBRACKET
type	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
==	TokenNameEQUAL_EQUAL
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"got i="	TokenNameStringLiteral
+	TokenNamePLUS
i	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
i	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
"/"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
name	TokenNameIdentifier
=	TokenNameEQUAL
m_localNames	TokenNameIdentifier
.	TokenNameDOT
indexToString	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
m_prefixNames	TokenNameIdentifier
.	TokenNameDOT
indexToString	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
prefix	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
prefix	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
name	TokenNameIdentifier
=	TokenNameEQUAL
prefix	TokenNameIdentifier
+	TokenNamePLUS
":"	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
name	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getNodeNameX	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getLocalName	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
type	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ELEMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ATTRIBUTE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
name	TokenNameIdentifier
=	TokenNameEQUAL
m_localNames	TokenNameIdentifier
.	TokenNameDOT
indexToString	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
name	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
name	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getPrefix	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
type	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ELEMENT_NODE	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
type	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ATTRIBUTE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
name	TokenNameIdentifier
=	TokenNameEQUAL
m_prefixNames	TokenNameIdentifier
.	TokenNameDOT
indexToString	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
name	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
name	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
name	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getNamespaceURI	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getNodeValue	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
nodetype	TokenNameIdentifier
=	TokenNameEQUAL
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
nodetype	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ATTRIBUTE_NODE	TokenNameIdentifier
:	TokenNameCOLON
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
TEXT_NODE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
COMMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
CDATA_SECTION_NODE	TokenNameIdentifier
:	TokenNameCOLON
value	TokenNameIdentifier
=	TokenNameEQUAL
m_char	TokenNameIdentifier
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
PROCESSING_INSTRUCTION_NODE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ELEMENT_NODE	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
ENTITY_REFERENCE_NODE	TokenNameIdentifier
:	TokenNameCOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
short	TokenNameshort
getNodeType	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
nodes	TokenNameIdentifier
.	TokenNameDOT
readEntry	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
short	TokenNameshort
getLevel	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
short	TokenNameshort
count	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
nodeHandle	TokenNameIdentifier
=	TokenNameEQUAL
nodes	TokenNameIdentifier
.	TokenNameDOT
readEntry	TokenNameIdentifier
(	TokenNameLPAREN
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
count	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isSupported	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
feature	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
version	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDocumentBaseURI	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
m_documentBaseURI	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setDocumentBaseURI	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
baseURI	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
m_documentBaseURI	TokenNameIdentifier
=	TokenNameEQUAL
baseURI	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDocumentSystemIdentifier	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDocumentEncoding	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDocumentStandalone	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDocumentVersion	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
documentHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
getDocumentAllDeclarationsProcessed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDocumentTypeDeclarationSystemIdentifier	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDocumentTypeDeclarationPublicIdentifier	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getElementById	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
elementId	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getUnparsedEntityURI	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
supportsPreStripping	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isNodeAfter	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
nodeHandle2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isCharacterElementContentWhitespace	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isDocumentAllDeclarationsProcessed	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
documentHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isAttributeSpecified	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
attributeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatchCharactersEvents	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
ContentHandler	TokenNameIdentifier
ch	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
normalize	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
dispatchToEvents	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
,	TokenNameCOMMA
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
ContentHandler	TokenNameIdentifier
ch	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
SAXException	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Node	TokenNameIdentifier
getNode	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
nodeHandle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
appendChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
newChild	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
clone	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
cloneDepth	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
sameDoc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
newChild	TokenNameIdentifier
&	TokenNameAND
DOCHANDLE_MASK	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
m_docHandle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
clone	TokenNameIdentifier
||	TokenNameOR_OR
!	TokenNameNOT
sameDoc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
appendTextChild	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
str	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
void	TokenNamevoid
appendTextChild	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
m_char_current_start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
contentLength	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
w0	TokenNameIdentifier
=	TokenNameEQUAL
TEXT_NODE	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
w1	TokenNameIdentifier
=	TokenNameEQUAL
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
w2	TokenNameIdentifier
=	TokenNameEQUAL
m_char_current_start	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
w3	TokenNameIdentifier
=	TokenNameEQUAL
contentLength	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
ourslot	TokenNameIdentifier
=	TokenNameEQUAL
appendNode	TokenNameIdentifier
(	TokenNameLPAREN
w0	TokenNameIdentifier
,	TokenNameCOMMA
w1	TokenNameIdentifier
,	TokenNameCOMMA
w2	TokenNameIdentifier
,	TokenNameCOMMA
w3	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
previousSibling	TokenNameIdentifier
=	TokenNameEQUAL
ourslot	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
appendComment	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
m_char_current_start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
contentLength	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
w0	TokenNameIdentifier
=	TokenNameEQUAL
COMMENT_NODE	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
w1	TokenNameIdentifier
=	TokenNameEQUAL
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
w2	TokenNameIdentifier
=	TokenNameEQUAL
m_char_current_start	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
w3	TokenNameIdentifier
=	TokenNameEQUAL
contentLength	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
ourslot	TokenNameIdentifier
=	TokenNameEQUAL
appendNode	TokenNameIdentifier
(	TokenNameLPAREN
w0	TokenNameIdentifier
,	TokenNameCOMMA
w1	TokenNameIdentifier
,	TokenNameCOMMA
w2	TokenNameIdentifier
,	TokenNameCOMMA
w3	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
previousSibling	TokenNameIdentifier
=	TokenNameEQUAL
ourslot	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
appendStartElement	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
namespaceIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
localNameIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
prefixIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
w0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
namespaceIndex	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
ELEMENT_NODE	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
w1	TokenNameIdentifier
=	TokenNameEQUAL
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
w2	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
w3	TokenNameIdentifier
=	TokenNameEQUAL
localNameIndex	TokenNameIdentifier
|	TokenNameOR
prefixIndex	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"set w3="	TokenNameStringLiteral
+	TokenNamePLUS
w3	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
w3	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
"/"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
w3	TokenNameIdentifier
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ourslot	TokenNameIdentifier
=	TokenNameEQUAL
appendNode	TokenNameIdentifier
(	TokenNameLPAREN
w0	TokenNameIdentifier
,	TokenNameCOMMA
w1	TokenNameIdentifier
,	TokenNameCOMMA
w2	TokenNameIdentifier
,	TokenNameCOMMA
w3	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentParent	TokenNameIdentifier
=	TokenNameEQUAL
ourslot	TokenNameIdentifier
;	TokenNameSEMICOLON
previousSibling	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
m_docElement	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
NULL	TokenNameIdentifier
)	TokenNameRPAREN
m_docElement	TokenNameIdentifier
=	TokenNameEQUAL
ourslot	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
appendNSDeclaration	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
prefixIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
namespaceIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
isID	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
namespaceForNamespaces	TokenNameIdentifier
=	TokenNameEQUAL
m_nsNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
"http://www.w3.org/2000/xmlns/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
w0	TokenNameIdentifier
=	TokenNameEQUAL
NAMESPACE_NODE	TokenNameIdentifier
|	TokenNameOR
(	TokenNameLPAREN
m_nsNames	TokenNameIdentifier
.	TokenNameDOT
stringToIndex	TokenNameIdentifier
(	TokenNameLPAREN
"http://www.w3.org/2000/xmlns/"	TokenNameStringLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
w1	TokenNameIdentifier
=	TokenNameEQUAL
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
w2	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
w3	TokenNameIdentifier
=	TokenNameEQUAL
namespaceIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
ourslot	TokenNameIdentifier
=	TokenNameEQUAL
appendNode	TokenNameIdentifier
(	TokenNameLPAREN
w0	TokenNameIdentifier
,	TokenNameCOMMA
w1	TokenNameIdentifier
,	TokenNameCOMMA
w2	TokenNameIdentifier
,	TokenNameCOMMA
w3	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
previousSibling	TokenNameIdentifier
=	TokenNameEQUAL
ourslot	TokenNameIdentifier
;	TokenNameSEMICOLON
previousSiblingWasParent	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
appendAttribute	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
namespaceIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
localNameIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
prefixIndex	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
isID	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
m_char_current_start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
contentLength	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
w0	TokenNameIdentifier
=	TokenNameEQUAL
ATTRIBUTE_NODE	TokenNameIdentifier
|	TokenNameOR
namespaceIndex	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
w1	TokenNameIdentifier
=	TokenNameEQUAL
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
w2	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
w3	TokenNameIdentifier
=	TokenNameEQUAL
localNameIndex	TokenNameIdentifier
|	TokenNameOR
prefixIndex	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"set w3="	TokenNameStringLiteral
+	TokenNamePLUS
w3	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
w3	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
"/"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
w3	TokenNameIdentifier
&	TokenNameAND
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ourslot	TokenNameIdentifier
=	TokenNameEQUAL
appendNode	TokenNameIdentifier
(	TokenNameLPAREN
w0	TokenNameIdentifier
,	TokenNameCOMMA
w1	TokenNameIdentifier
,	TokenNameCOMMA
w2	TokenNameIdentifier
,	TokenNameCOMMA
w3	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
previousSibling	TokenNameIdentifier
=	TokenNameEQUAL
ourslot	TokenNameIdentifier
;	TokenNameSEMICOLON
w0	TokenNameIdentifier
=	TokenNameEQUAL
TEXT_NODE	TokenNameIdentifier
;	TokenNameSEMICOLON
w1	TokenNameIdentifier
=	TokenNameEQUAL
ourslot	TokenNameIdentifier
;	TokenNameSEMICOLON
w2	TokenNameIdentifier
=	TokenNameEQUAL
m_char_current_start	TokenNameIdentifier
;	TokenNameSEMICOLON
w3	TokenNameIdentifier
=	TokenNameEQUAL
contentLength	TokenNameIdentifier
;	TokenNameSEMICOLON
appendNode	TokenNameIdentifier
(	TokenNameLPAREN
w0	TokenNameIdentifier
,	TokenNameCOMMA
w1	TokenNameIdentifier
,	TokenNameCOMMA
w2	TokenNameIdentifier
,	TokenNameCOMMA
w3	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
previousSiblingWasParent	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DTMAxisTraverser	TokenNameIdentifier
getAxisTraverser	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
axis	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DTMAxisIterator	TokenNameIdentifier
getAxisIterator	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
axis	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DTMAxisIterator	TokenNameIdentifier
getTypedAxisIterator	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
axis	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
appendEndElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
previousSiblingWasParent	TokenNameIdentifier
)	TokenNameRPAREN
nodes	TokenNameIdentifier
.	TokenNameDOT
writeEntry	TokenNameIdentifier
(	TokenNameLPAREN
previousSibling	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
NULL	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
previousSibling	TokenNameIdentifier
=	TokenNameEQUAL
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
nodes	TokenNameIdentifier
.	TokenNameDOT
readSlot	TokenNameIdentifier
(	TokenNameLPAREN
currentParent	TokenNameIdentifier
,	TokenNameCOMMA
gotslot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentParent	TokenNameIdentifier
=	TokenNameEQUAL
gotslot	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
previousSiblingWasParent	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
appendStartDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
m_docElement	TokenNameIdentifier
=	TokenNameEQUAL
NULL	TokenNameIdentifier
;	TokenNameSEMICOLON
initDocument	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
appendEndDocument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
done	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
property	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
SourceLocator	TokenNameIdentifier
getSourceLocatorFor	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
node	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
documentRegistration	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
documentRelease	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
migrateTo	TokenNameIdentifier
(	TokenNameLPAREN
DTMManager	TokenNameIdentifier
manager	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
