package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xalan	TokenNameIdentifier
.	TokenNameDOT
lib	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
DOMHelper	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
.	TokenNameDOT
NodeSet	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Node	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
NodeList	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
ExsltSets	TokenNameIdentifier
extends	TokenNameextends
ExsltBase	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
NodeList	TokenNameIdentifier
leading	TokenNameIdentifier
(	TokenNameLPAREN
NodeList	TokenNameIdentifier
nl1	TokenNameIdentifier
,	TokenNameCOMMA
NodeList	TokenNameIdentifier
nl2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nl2	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
nl1	TokenNameIdentifier
;	TokenNameSEMICOLON
NodeSet	TokenNameIdentifier
ns1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
nl1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NodeSet	TokenNameIdentifier
leadNodes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Node	TokenNameIdentifier
endNode	TokenNameIdentifier
=	TokenNameEQUAL
nl2	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ns1	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
endNode	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
leadNodes	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nl1	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
Node	TokenNameIdentifier
testNode	TokenNameIdentifier
=	TokenNameEQUAL
nl1	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DOMHelper	TokenNameIdentifier
.	TokenNameDOT
isNodeAfter	TokenNameIdentifier
(	TokenNameLPAREN
testNode	TokenNameIdentifier
,	TokenNameCOMMA
endNode	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
!	TokenNameNOT
DOMHelper	TokenNameIdentifier
.	TokenNameDOT
isNodeTheSame	TokenNameIdentifier
(	TokenNameLPAREN
testNode	TokenNameIdentifier
,	TokenNameCOMMA
endNode	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
leadNodes	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
testNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
leadNodes	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
NodeList	TokenNameIdentifier
trailing	TokenNameIdentifier
(	TokenNameLPAREN
NodeList	TokenNameIdentifier
nl1	TokenNameIdentifier
,	TokenNameCOMMA
NodeList	TokenNameIdentifier
nl2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nl2	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
nl1	TokenNameIdentifier
;	TokenNameSEMICOLON
NodeSet	TokenNameIdentifier
ns1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
nl1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NodeSet	TokenNameIdentifier
trailNodes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Node	TokenNameIdentifier
startNode	TokenNameIdentifier
=	TokenNameEQUAL
nl2	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ns1	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
startNode	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
trailNodes	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nl1	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
Node	TokenNameIdentifier
testNode	TokenNameIdentifier
=	TokenNameEQUAL
nl1	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DOMHelper	TokenNameIdentifier
.	TokenNameDOT
isNodeAfter	TokenNameIdentifier
(	TokenNameLPAREN
startNode	TokenNameIdentifier
,	TokenNameCOMMA
testNode	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
!	TokenNameNOT
DOMHelper	TokenNameIdentifier
.	TokenNameDOT
isNodeTheSame	TokenNameIdentifier
(	TokenNameLPAREN
startNode	TokenNameIdentifier
,	TokenNameCOMMA
testNode	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
trailNodes	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
testNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
trailNodes	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
NodeList	TokenNameIdentifier
intersection	TokenNameIdentifier
(	TokenNameLPAREN
NodeList	TokenNameIdentifier
nl1	TokenNameIdentifier
,	TokenNameCOMMA
NodeList	TokenNameIdentifier
nl2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
NodeSet	TokenNameIdentifier
ns1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
nl1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NodeSet	TokenNameIdentifier
ns2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
nl2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NodeSet	TokenNameIdentifier
inter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inter	TokenNameIdentifier
.	TokenNameDOT
setShouldCacheNodes	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
ns1	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
Node	TokenNameIdentifier
n	TokenNameIdentifier
=	TokenNameEQUAL
ns1	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ns2	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
inter	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
inter	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
NodeList	TokenNameIdentifier
difference	TokenNameIdentifier
(	TokenNameLPAREN
NodeList	TokenNameIdentifier
nl1	TokenNameIdentifier
,	TokenNameCOMMA
NodeList	TokenNameIdentifier
nl2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
NodeSet	TokenNameIdentifier
ns1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
nl1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NodeSet	TokenNameIdentifier
ns2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
nl2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NodeSet	TokenNameIdentifier
diff	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
diff	TokenNameIdentifier
.	TokenNameDOT
setShouldCacheNodes	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
ns1	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
Node	TokenNameIdentifier
n	TokenNameIdentifier
=	TokenNameEQUAL
ns1	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ns2	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
diff	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
n	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
diff	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
NodeList	TokenNameIdentifier
distinct	TokenNameIdentifier
(	TokenNameLPAREN
NodeList	TokenNameIdentifier
nl	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
NodeSet	TokenNameIdentifier
dist	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dist	TokenNameIdentifier
.	TokenNameDOT
setShouldCacheNodes	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
stringTable	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nl	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
Node	TokenNameIdentifier
currNode	TokenNameIdentifier
=	TokenNameEQUAL
nl	TokenNameIdentifier
.	TokenNameDOT
item	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
toString	TokenNameIdentifier
(	TokenNameLPAREN
currNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
key	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
dist	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
currNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
stringTable	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
stringTable	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
currNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dist	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
currNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
dist	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
hasSameNode	TokenNameIdentifier
(	TokenNameLPAREN
NodeList	TokenNameIdentifier
nl1	TokenNameIdentifier
,	TokenNameCOMMA
NodeList	TokenNameIdentifier
nl2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
NodeSet	TokenNameIdentifier
ns1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
nl1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NodeSet	TokenNameIdentifier
ns2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NodeSet	TokenNameIdentifier
(	TokenNameLPAREN
nl2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
ns1	TokenNameIdentifier
.	TokenNameDOT
getLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ns2	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
ns1	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
