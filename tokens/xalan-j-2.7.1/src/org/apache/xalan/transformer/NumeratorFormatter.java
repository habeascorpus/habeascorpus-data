package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xalan	TokenNameIdentifier
.	TokenNameDOT
transformer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
NoSuchElementException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
w3c	TokenNameIdentifier
.	TokenNameDOT
dom	TokenNameIdentifier
.	TokenNameDOT
Element	TokenNameIdentifier
;	TokenNameSEMICOLON
class	TokenNameclass
NumeratorFormatter	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
Element	TokenNameIdentifier
m_xslNumberElement	TokenNameIdentifier
;	TokenNameSEMICOLON
NumberFormatStringTokenizer	TokenNameIdentifier
m_formatTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
Locale	TokenNameIdentifier
m_locale	TokenNameIdentifier
;	TokenNameSEMICOLON
java	TokenNameIdentifier
.	TokenNameDOT
text	TokenNameIdentifier
.	TokenNameDOT
NumberFormat	TokenNameIdentifier
m_formatter	TokenNameIdentifier
;	TokenNameSEMICOLON
TransformerImpl	TokenNameIdentifier
m_processor	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
DecimalToRoman	TokenNameIdentifier
m_romanConvertTable	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
new	TokenNamenew
DecimalToRoman	TokenNameIdentifier
(	TokenNameLPAREN
1000	TokenNameIntegerLiteral
,	TokenNameCOMMA
"M"	TokenNameStringLiteral
,	TokenNameCOMMA
900	TokenNameIntegerLiteral
,	TokenNameCOMMA
"CM"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
DecimalToRoman	TokenNameIdentifier
(	TokenNameLPAREN
500	TokenNameIntegerLiteral
,	TokenNameCOMMA
"D"	TokenNameStringLiteral
,	TokenNameCOMMA
400	TokenNameIntegerLiteral
,	TokenNameCOMMA
"CD"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
DecimalToRoman	TokenNameIdentifier
(	TokenNameLPAREN
100L	TokenNameLongLiteral
,	TokenNameCOMMA
"C"	TokenNameStringLiteral
,	TokenNameCOMMA
90L	TokenNameLongLiteral
,	TokenNameCOMMA
"XC"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
DecimalToRoman	TokenNameIdentifier
(	TokenNameLPAREN
50L	TokenNameLongLiteral
,	TokenNameCOMMA
"L"	TokenNameStringLiteral
,	TokenNameCOMMA
40L	TokenNameLongLiteral
,	TokenNameCOMMA
"XL"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
DecimalToRoman	TokenNameIdentifier
(	TokenNameLPAREN
10L	TokenNameLongLiteral
,	TokenNameCOMMA
"X"	TokenNameStringLiteral
,	TokenNameCOMMA
9L	TokenNameLongLiteral
,	TokenNameCOMMA
"IX"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
DecimalToRoman	TokenNameIdentifier
(	TokenNameLPAREN
5L	TokenNameLongLiteral
,	TokenNameCOMMA
"V"	TokenNameStringLiteral
,	TokenNameCOMMA
4L	TokenNameLongLiteral
,	TokenNameCOMMA
"IV"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
DecimalToRoman	TokenNameIdentifier
(	TokenNameLPAREN
1L	TokenNameLongLiteral
,	TokenNameCOMMA
"I"	TokenNameStringLiteral
,	TokenNameCOMMA
1L	TokenNameLongLiteral
,	TokenNameCOMMA
"I"	TokenNameStringLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
m_alphaCountTable	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
'Z'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'A'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'B'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'C'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'D'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'E'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'F'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'G'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'H'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'I'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'J'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'K'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'L'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'M'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'N'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'O'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'P'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Q'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'R'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'S'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'T'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'U'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'V'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'W'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'X'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Y'	TokenNameCharacterLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
NumeratorFormatter	TokenNameIdentifier
(	TokenNameLPAREN
Element	TokenNameIdentifier
xslNumberElement	TokenNameIdentifier
,	TokenNameCOMMA
TransformerImpl	TokenNameIdentifier
processor	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
m_xslNumberElement	TokenNameIdentifier
=	TokenNameEQUAL
xslNumberElement	TokenNameIdentifier
;	TokenNameSEMICOLON
m_processor	TokenNameIdentifier
=	TokenNameEQUAL
processor	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
String	TokenNameIdentifier
int2alphaCount	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
val	TokenNameIdentifier
,	TokenNameCOMMA
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
table	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
radix	TokenNameIdentifier
=	TokenNameEQUAL
table	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
char	TokenNamechar
buf	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
100	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
charPos	TokenNameIdentifier
=	TokenNameEQUAL
buf	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
lookupIndex	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
correction	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
correction	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
lookupIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
correction	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
lookupIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
radix	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
radix	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
:	TokenNameCOLON
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
lookupIndex	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
val	TokenNameIdentifier
+	TokenNamePLUS
correction	TokenNameIdentifier
)	TokenNameRPAREN
%	TokenNameREMAINDER
radix	TokenNameIdentifier
;	TokenNameSEMICOLON
val	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
val	TokenNameIdentifier
/	TokenNameDIVIDE
radix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lookupIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
val	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
[	TokenNameLBRACKET
charPos	TokenNameIdentifier
--	TokenNameMINUS_MINUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
table	TokenNameIdentifier
[	TokenNameLBRACKET
lookupIndex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
val	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
,	TokenNameCOMMA
charPos	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
buf	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
charPos	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
long2roman	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
val	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
prefixesAreOK	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
val	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"#E("	TokenNameStringLiteral
+	TokenNamePLUS
val	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
roman	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
int	TokenNameint
place	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
val	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
3999L	TokenNameLongLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
do	TokenNamedo
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
val	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
m_romanConvertTable	TokenNameIdentifier
[	TokenNameLBRACKET
place	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
m_postValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
roman	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
m_romanConvertTable	TokenNameIdentifier
[	TokenNameLBRACKET
place	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
m_postLetter	TokenNameIdentifier
;	TokenNameSEMICOLON
val	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
m_romanConvertTable	TokenNameIdentifier
[	TokenNameLBRACKET
place	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
m_postValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
prefixesAreOK	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
val	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
m_romanConvertTable	TokenNameIdentifier
[	TokenNameLBRACKET
place	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
m_preValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
roman	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
m_romanConvertTable	TokenNameIdentifier
[	TokenNameLBRACKET
place	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
m_preLetter	TokenNameIdentifier
;	TokenNameSEMICOLON
val	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
m_romanConvertTable	TokenNameIdentifier
[	TokenNameLBRACKET
place	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
m_preValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
place	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
val	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
roman	TokenNameIdentifier
=	TokenNameEQUAL
"#error"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
roman	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
class	TokenNameclass
NumberFormatStringTokenizer	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
int	TokenNameint
currentPosition	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
maxPosition	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
str	TokenNameIdentifier
;	TokenNameSEMICOLON
NumberFormatStringTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
str	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
str	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
;	TokenNameSEMICOLON
maxPosition	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
currentPosition	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currentPosition	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
maxPosition	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
NoSuchElementException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
start	TokenNameIdentifier
=	TokenNameEQUAL
currentPosition	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
currentPosition	TokenNameIdentifier
<	TokenNameLESS
maxPosition	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
Character	TokenNameIdentifier
.	TokenNameDOT
isLetterOrDigit	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentPosition	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
currentPosition	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
start	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
currentPosition	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
!	TokenNameNOT
Character	TokenNameIdentifier
.	TokenNameDOT
isLetterOrDigit	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currentPosition	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
currentPosition	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
str	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
currentPosition	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
hasMoreTokens	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
currentPosition	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
maxPosition	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
false	TokenNamefalse
:	TokenNameCOLON
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
countTokens	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
count	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
currpos	TokenNameIdentifier
=	TokenNameEQUAL
currentPosition	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
currpos	TokenNameIdentifier
<	TokenNameLESS
maxPosition	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
start	TokenNameIdentifier
=	TokenNameEQUAL
currpos	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
currpos	TokenNameIdentifier
<	TokenNameLESS
maxPosition	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
Character	TokenNameIdentifier
.	TokenNameDOT
isLetterOrDigit	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currpos	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
currpos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
start	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
currpos	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
Character	TokenNameIdentifier
.	TokenNameDOT
isLetterOrDigit	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
currpos	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
currpos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
count	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
