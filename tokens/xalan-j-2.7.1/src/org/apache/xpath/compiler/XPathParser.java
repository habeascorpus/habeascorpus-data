package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
.	TokenNameDOT
compiler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
ErrorListener	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xalan	TokenNameIdentifier
.	TokenNameDOT
res	TokenNameIdentifier
.	TokenNameDOT
XSLMessages	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
PrefixResolver	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
.	TokenNameDOT
XPathProcessorException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
.	TokenNameDOT
domapi	TokenNameIdentifier
.	TokenNameDOT
XPathStylesheetDOM3Exception	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
.	TokenNameDOT
objects	TokenNameIdentifier
.	TokenNameDOT
XNumber	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
.	TokenNameDOT
objects	TokenNameIdentifier
.	TokenNameDOT
XString	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
.	TokenNameDOT
res	TokenNameIdentifier
.	TokenNameDOT
XPATHErrorResources	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
XPathParser	TokenNameIdentifier
{	TokenNameLBRACE
static	TokenNamestatic
public	TokenNamepublic
final	TokenNamefinal
String	TokenNameIdentifier
CONTINUE_AFTER_FATAL_ERROR	TokenNameIdentifier
=	TokenNameEQUAL
"CONTINUE_AFTER_FATAL_ERROR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
OpMap	TokenNameIdentifier
m_ops	TokenNameIdentifier
;	TokenNameSEMICOLON
transient	TokenNametransient
String	TokenNameIdentifier
m_token	TokenNameIdentifier
;	TokenNameSEMICOLON
transient	TokenNametransient
char	TokenNamechar
m_tokenChar	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
m_queueMark	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
FILTER_MATCH_FAILED	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
FILTER_MATCH_PRIMARY	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
FILTER_MATCH_PREDICATES	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
XPathParser	TokenNameIdentifier
(	TokenNameLPAREN
ErrorListener	TokenNameIdentifier
errorListener	TokenNameIdentifier
,	TokenNameCOMMA
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
SourceLocator	TokenNameIdentifier
sourceLocator	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
m_errorListener	TokenNameIdentifier
=	TokenNameEQUAL
errorListener	TokenNameIdentifier
;	TokenNameSEMICOLON
m_sourceLocator	TokenNameIdentifier
=	TokenNameEQUAL
sourceLocator	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
PrefixResolver	TokenNameIdentifier
m_namespaceContext	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
initXPath	TokenNameIdentifier
(	TokenNameLPAREN
Compiler	TokenNameIdentifier
compiler	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
expression	TokenNameIdentifier
,	TokenNameCOMMA
PrefixResolver	TokenNameIdentifier
namespaceContext	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
=	TokenNameEQUAL
compiler	TokenNameIdentifier
;	TokenNameSEMICOLON
m_namespaceContext	TokenNameIdentifier
=	TokenNameEQUAL
namespaceContext	TokenNameIdentifier
;	TokenNameSEMICOLON
m_functionTable	TokenNameIdentifier
=	TokenNameEQUAL
compiler	TokenNameIdentifier
.	TokenNameDOT
getFunctionTable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Lexer	TokenNameIdentifier
lexer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Lexer	TokenNameIdentifier
(	TokenNameLPAREN
compiler	TokenNameIdentifier
,	TokenNameCOMMA
namespaceContext	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lexer	TokenNameIdentifier
.	TokenNameDOT
tokenize	TokenNameIdentifier
(	TokenNameLPAREN
expression	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_XPATH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Expr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
extraTokens	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
extraTokens	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
"'"	TokenNameStringLiteral
+	TokenNamePLUS
m_token	TokenNameIdentifier
+	TokenNamePLUS
"'"	TokenNameStringLiteral
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
extraTokens	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
", "	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXTRA_ILLEGAL_TOKENS	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
extraTokens	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
.	TokenNameDOT
XPathProcessorException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
CONTINUE_AFTER_FATAL_ERROR	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
initXPath	TokenNameIdentifier
(	TokenNameLPAREN
compiler	TokenNameIdentifier
,	TokenNameCOMMA
"/.."	TokenNameStringLiteral
,	TokenNameCOMMA
namespaceContext	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
throw	TokenNamethrow
e	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
compiler	TokenNameIdentifier
.	TokenNameDOT
shrink	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
initMatchPattern	TokenNameIdentifier
(	TokenNameLPAREN
Compiler	TokenNameIdentifier
compiler	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
expression	TokenNameIdentifier
,	TokenNameCOMMA
PrefixResolver	TokenNameIdentifier
namespaceContext	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
=	TokenNameEQUAL
compiler	TokenNameIdentifier
;	TokenNameSEMICOLON
m_namespaceContext	TokenNameIdentifier
=	TokenNameEQUAL
namespaceContext	TokenNameIdentifier
;	TokenNameSEMICOLON
m_functionTable	TokenNameIdentifier
=	TokenNameEQUAL
compiler	TokenNameIdentifier
.	TokenNameDOT
getFunctionTable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Lexer	TokenNameIdentifier
lexer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Lexer	TokenNameIdentifier
(	TokenNameLPAREN
compiler	TokenNameIdentifier
,	TokenNameCOMMA
namespaceContext	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lexer	TokenNameIdentifier
.	TokenNameDOT
tokenize	TokenNameIdentifier
(	TokenNameLPAREN
expression	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_MATCHPATTERN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Pattern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
extraTokens	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
extraTokens	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
"'"	TokenNameStringLiteral
+	TokenNamePLUS
m_token	TokenNameIdentifier
+	TokenNamePLUS
"'"	TokenNameStringLiteral
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
extraTokens	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
", "	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXTRA_ILLEGAL_TOKENS	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
extraTokens	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
ENDOP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
shrink	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
ErrorListener	TokenNameIdentifier
m_errorListener	TokenNameIdentifier
;	TokenNameSEMICOLON
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
SourceLocator	TokenNameIdentifier
m_sourceLocator	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
FunctionTable	TokenNameIdentifier
m_functionTable	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
setErrorHandler	TokenNameIdentifier
(	TokenNameLPAREN
ErrorListener	TokenNameIdentifier
handler	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
m_errorListener	TokenNameIdentifier
=	TokenNameEQUAL
handler	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ErrorListener	TokenNameIdentifier
getErrorListener	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
m_errorListener	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
boolean	TokenNameboolean
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
m_token	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
m_token	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
(	TokenNameLPAREN
s	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
boolean	TokenNameboolean
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
m_token	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
m_tokenChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
c	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
boolean	TokenNameboolean
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
pos	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
m_queueMark	TokenNameIdentifier
+	TokenNamePLUS
n	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
b	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
pos	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getTokenQueueSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
pos	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getTokenQueueSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
tok	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
m_tokenQueue	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
pos	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
tok	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
tok	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
c	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
b	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
lookbehind	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
isToken	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
lookBehindPos	TokenNameIdentifier
=	TokenNameEQUAL
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
n	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lookBehindPos	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
lookbehind	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
m_tokenQueue	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
lookBehindPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lookbehind	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
c0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
lookbehind	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
'|'	TokenNameCharacterLiteral
:	TokenNameCOLON
lookbehind	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isToken	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
c0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'|'	TokenNameCharacterLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
false	TokenNamefalse
:	TokenNameCOLON
(	TokenNameLPAREN
c0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
isToken	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
isToken	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
isToken	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
lookbehindHasToken	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
hasToken	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
n	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
lookbehind	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
m_tokenQueue	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
n	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
c0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
lookbehind	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
'|'	TokenNameCharacterLiteral
:	TokenNameCOLON
lookbehind	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hasToken	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
c0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'|'	TokenNameCharacterLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
false	TokenNamefalse
:	TokenNameCOLON
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
hasToken	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
hasToken	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
isToken	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
m_queueMark	TokenNameIdentifier
+	TokenNamePLUS
n	TokenNameIdentifier
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getTokenQueueSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
lookahead	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
m_tokenQueue	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
m_queueMark	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
n	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isToken	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
lookahead	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
lookahead	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
(	TokenNameLPAREN
s	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
isToken	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
null	TokenNamenull
==	TokenNameEQUAL_EQUAL
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
isToken	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
m_queueMark	TokenNameIdentifier
<	TokenNameLESS
m_ops	TokenNameIdentifier
.	TokenNameDOT
getTokenQueueSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
m_token	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
m_tokenQueue	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
m_queueMark	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_tokenChar	TokenNameIdentifier
=	TokenNameEQUAL
m_token	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
m_token	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
m_tokenChar	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
getTokenRelative	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
tok	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
relative	TokenNameIdentifier
=	TokenNameEQUAL
m_queueMark	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
relative	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
relative	TokenNameIdentifier
<	TokenNameLESS
m_ops	TokenNameIdentifier
.	TokenNameDOT
getTokenQueueSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
tok	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
m_tokenQueue	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
relative	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tok	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
tok	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
prevToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
m_queueMark	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
m_queueMark	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
m_token	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
m_tokenQueue	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
m_queueMark	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_tokenChar	TokenNameIdentifier
=	TokenNameEQUAL
m_token	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
m_token	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
m_tokenChar	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
consumeExpected	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
expected	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXPECTED_BUT_FOUND	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
expected	TokenNameIdentifier
,	TokenNameCOMMA
m_token	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
new	TokenNamenew
XPathProcessorException	TokenNameIdentifier
(	TokenNameLPAREN
CONTINUE_AFTER_FATAL_ERROR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
consumeExpected	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
expected	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXPECTED_BUT_FOUND	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
String	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
m_token	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
new	TokenNamenew
XPathProcessorException	TokenNameIdentifier
(	TokenNameLPAREN
CONTINUE_AFTER_FATAL_ERROR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
warn	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
msg	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
args	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
fmsg	TokenNameIdentifier
=	TokenNameEQUAL
XSLMessages	TokenNameIdentifier
.	TokenNameDOT
createXPATHWarning	TokenNameIdentifier
(	TokenNameLPAREN
msg	TokenNameIdentifier
,	TokenNameCOMMA
args	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ErrorListener	TokenNameIdentifier
ehandler	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getErrorListener	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
ehandler	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ehandler	TokenNameIdentifier
.	TokenNameDOT
warning	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TransformerException	TokenNameIdentifier
(	TokenNameLPAREN
fmsg	TokenNameIdentifier
,	TokenNameCOMMA
m_sourceLocator	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
fmsg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
assertion	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
b	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
msg	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
b	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
fMsg	TokenNameIdentifier
=	TokenNameEQUAL
XSLMessages	TokenNameIdentifier
.	TokenNameDOT
createXPATHMessage	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_INCORRECT_PROGRAMMER_ASSERTION	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
msg	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
fMsg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
error	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
msg	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
args	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
fmsg	TokenNameIdentifier
=	TokenNameEQUAL
XSLMessages	TokenNameIdentifier
.	TokenNameDOT
createXPATHMessage	TokenNameIdentifier
(	TokenNameLPAREN
msg	TokenNameIdentifier
,	TokenNameCOMMA
args	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ErrorListener	TokenNameIdentifier
ehandler	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getErrorListener	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TransformerException	TokenNameIdentifier
te	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TransformerException	TokenNameIdentifier
(	TokenNameLPAREN
fmsg	TokenNameIdentifier
,	TokenNameCOMMA
m_sourceLocator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
ehandler	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ehandler	TokenNameIdentifier
.	TokenNameDOT
fatalError	TokenNameIdentifier
(	TokenNameLPAREN
te	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
te	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
errorForDOM3	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
msg	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
args	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
fmsg	TokenNameIdentifier
=	TokenNameEQUAL
XSLMessages	TokenNameIdentifier
.	TokenNameDOT
createXPATHMessage	TokenNameIdentifier
(	TokenNameLPAREN
msg	TokenNameIdentifier
,	TokenNameCOMMA
args	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ErrorListener	TokenNameIdentifier
ehandler	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
getErrorListener	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TransformerException	TokenNameIdentifier
te	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XPathStylesheetDOM3Exception	TokenNameIdentifier
(	TokenNameLPAREN
fmsg	TokenNameIdentifier
,	TokenNameCOMMA
m_sourceLocator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
ehandler	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ehandler	TokenNameIdentifier
.	TokenNameDOT
fatalError	TokenNameIdentifier
(	TokenNameLPAREN
te	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
te	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
String	TokenNameIdentifier
dumpRemainingTokenQueue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
q	TokenNameIdentifier
=	TokenNameEQUAL
m_queueMark	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
returnMsg	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
q	TokenNameIdentifier
<	TokenNameLESS
m_ops	TokenNameIdentifier
.	TokenNameDOT
getTokenQueueSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
msg	TokenNameIdentifier
=	TokenNameEQUAL
"  Remaining tokens: ("	TokenNameStringLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
q	TokenNameIdentifier
<	TokenNameLESS
m_ops	TokenNameIdentifier
.	TokenNameDOT
getTokenQueueSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
m_tokenQueue	TokenNameIdentifier
.	TokenNameDOT
elementAt	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
msg	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
" '"	TokenNameStringLiteral
+	TokenNamePLUS
t	TokenNameIdentifier
+	TokenNamePLUS
"'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
returnMsg	TokenNameIdentifier
=	TokenNameEQUAL
msg	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
returnMsg	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
returnMsg	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
getFunctionToken	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
tok	TokenNameIdentifier
;	TokenNameSEMICOLON
Object	TokenNameIdentifier
id	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
id	TokenNameIdentifier
=	TokenNameEQUAL
Keywords	TokenNameIdentifier
.	TokenNameDOT
lookupNodeTest	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
==	TokenNameEQUAL_EQUAL
id	TokenNameIdentifier
)	TokenNameRPAREN
id	TokenNameIdentifier
=	TokenNameEQUAL
m_functionTable	TokenNameIdentifier
.	TokenNameDOT
getFunctionID	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tok	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
Integer	TokenNameIdentifier
)	TokenNameRPAREN
id	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NullPointerException	TokenNameIdentifier
npe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tok	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ClassCastException	TokenNameIdentifier
cce	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tok	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
tok	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
pos	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
length	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
op	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
totalLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
totalLen	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
pos	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
length	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
pos	TokenNameIdentifier
,	TokenNameCOMMA
op	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
totalLen	TokenNameIdentifier
+	TokenNamePLUS
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
length	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
op	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
totalLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
totalLen	TokenNameIdentifier
,	TokenNameCOMMA
op	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
totalLen	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
totalLen	TokenNameIdentifier
+	TokenNamePLUS
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
Expr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
OrExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
OrExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
AndExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
"or"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_OR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
OrExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
AndExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
EqualityExpr	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
"and"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_AND	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
AndExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
EqualityExpr	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
addPos	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
addPos	TokenNameIdentifier
)	TokenNameRPAREN
addPos	TokenNameIdentifier
=	TokenNameEQUAL
opPos	TokenNameIdentifier
;	TokenNameSEMICOLON
RelationalExpr	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'!'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
'='	TokenNameCharacterLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_NOTEQUALS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
opPlusLeftHandLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
=	TokenNameEQUAL
EqualityExpr	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'='	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_EQUALS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
opPlusLeftHandLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
=	TokenNameEQUAL
EqualityExpr	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
RelationalExpr	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
addPos	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
addPos	TokenNameIdentifier
)	TokenNameRPAREN
addPos	TokenNameIdentifier
=	TokenNameEQUAL
opPos	TokenNameIdentifier
;	TokenNameSEMICOLON
AdditiveExpr	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'<'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'='	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_LTE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_LT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
opPlusLeftHandLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
=	TokenNameEQUAL
RelationalExpr	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'>'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'='	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_GTE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_GT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
opPlusLeftHandLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
=	TokenNameEQUAL
RelationalExpr	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
AdditiveExpr	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
addPos	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
addPos	TokenNameIdentifier
)	TokenNameRPAREN
addPos	TokenNameIdentifier
=	TokenNameEQUAL
opPos	TokenNameIdentifier
;	TokenNameSEMICOLON
MultiplicativeExpr	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'+'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_PLUS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
opPlusLeftHandLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
=	TokenNameEQUAL
AdditiveExpr	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_MINUS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
opPlusLeftHandLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
=	TokenNameEQUAL
AdditiveExpr	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
MultiplicativeExpr	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
addPos	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
addPos	TokenNameIdentifier
)	TokenNameRPAREN
addPos	TokenNameIdentifier
=	TokenNameEQUAL
opPos	TokenNameIdentifier
;	TokenNameSEMICOLON
UnaryExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'*'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_MULT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
opPlusLeftHandLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
=	TokenNameEQUAL
MultiplicativeExpr	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
"div"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_DIV	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
opPlusLeftHandLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
=	TokenNameEQUAL
MultiplicativeExpr	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
"mod"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_MOD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
opPlusLeftHandLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
=	TokenNameEQUAL
MultiplicativeExpr	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
"quo"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_QUO	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
opPlusLeftHandLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
=	TokenNameEQUAL
MultiplicativeExpr	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
addPos	TokenNameIdentifier
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
opPlusLeftHandLen	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addPos	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
addPos	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
UnaryExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isNeg	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
m_tokenChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'-'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_NEG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isNeg	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
UnionExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isNeg	TokenNameIdentifier
)	TokenNameRPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
StringExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_STRING	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Expr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
BooleanExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_BOOL	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Expr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
opLen	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
opLen	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_BOOLEAN_ARG_NO_LONGER_OPTIONAL	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
opLen	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
NumberExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_NUMBER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Expr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
UnionExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
continueOrLoop	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
boolean	TokenNameboolean
foundUnion	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
PathExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'|'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
false	TokenNamefalse
==	TokenNameEQUAL_EQUAL
foundUnion	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
foundUnion	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_UNION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
continueOrLoop	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
PathExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
filterExprMatch	TokenNameIdentifier
=	TokenNameEQUAL
FilterExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
filterExprMatch	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
FILTER_MATCH_FAILED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
locationPathStarted	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
filterExprMatch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
FILTER_MATCH_PREDICATES	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
locationPathStarted	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_LOCATIONPATH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
locationPathStarted	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
RelativeLocationPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXPECTED_REL_LOC_PATH	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
locationPathStarted	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
ENDOP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
LocationPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
FilterExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
filterMatch	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
PrimaryExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'['	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
insertOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_LOCATIONPATH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'['	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Predicate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
filterMatch	TokenNameIdentifier
=	TokenNameEQUAL
FILTER_MATCH_PREDICATES	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
filterMatch	TokenNameIdentifier
=	TokenNameEQUAL
FILTER_MATCH_PRIMARY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
filterMatch	TokenNameIdentifier
=	TokenNameEQUAL
FILTER_MATCH_FAILED	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
filterMatch	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
PrimaryExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
boolean	TokenNameboolean
matchFound	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
m_tokenChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\''	TokenNameCharacterLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
m_tokenChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'"'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_LITERAL	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Literal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
matchFound	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
m_tokenChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'$'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_VARIABLE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
matchFound	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
m_tokenChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_GROUP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Expr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
consumeExpected	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
matchFound	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
'.'	TokenNameCharacterLiteral
==	TokenNameEQUAL_EQUAL
m_tokenChar	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
m_token	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
Character	TokenNameIdentifier
.	TokenNameDOT
isDigit	TokenNameIdentifier
(	TokenNameLPAREN
m_token	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
||	TokenNameOR_OR
Character	TokenNameIdentifier
.	TokenNameDOT
isDigit	TokenNameIdentifier
(	TokenNameLPAREN
m_tokenChar	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_NUMBERLIT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Number	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
matchFound	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
matchFound	TokenNameIdentifier
=	TokenNameEQUAL
FunctionCall	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
matchFound	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
matchFound	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
Argument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_ARGUMENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Expr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
FunctionCall	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_EXTFUNCTION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
consumeExpected	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
funcTok	TokenNameIdentifier
=	TokenNameEQUAL
getFunctionToken	TokenNameIdentifier
(	TokenNameLPAREN
m_token	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
funcTok	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_COULDNOT_FIND_FUNCTION	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
m_token	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
funcTok	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
OpCodes	TokenNameIdentifier
.	TokenNameDOT
NODETYPE_PI	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
OpCodes	TokenNameIdentifier
.	TokenNameDOT
NODETYPE_COMMENT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
OpCodes	TokenNameIdentifier
.	TokenNameDOT
NODETYPE_TEXT	TokenNameIdentifier
:	TokenNameCOLON
case	TokenNamecase
OpCodes	TokenNameIdentifier
.	TokenNameDOT
NODETYPE_NODE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_FUNCTION	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
funcTok	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
consumeExpected	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
!	TokenNameNOT
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
m_token	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_FOUND_COMMA_BUT_NO_PRECEDING_ARG	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Argument	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
consumeExpected	TokenNameIdentifier
(	TokenNameLPAREN
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_FOUND_COMMA_BUT_NO_FOLLOWING_ARG	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
consumeExpected	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
ENDOP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
LocationPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_LOCATIONPATH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
seenSlash	TokenNameIdentifier
=	TokenNameEQUAL
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
seenSlash	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
FROM_ROOT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
NODETYPE_ROOT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
m_token	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXPECTED_LOC_PATH_AT_END_EXPR	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
m_token	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
RelativeLocationPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
!	TokenNameNOT
seenSlash	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXPECTED_LOC_PATH	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
m_token	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
ENDOP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
RelativeLocationPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
Step	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
Step	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXPECTED_LOC_STEP	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
Step	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
doubleSlash	TokenNameIdentifier
=	TokenNameEQUAL
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
doubleSlash	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
FROM_DESCENDANTS_OR_SELF	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
NODETYPE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
"."	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'['	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_PREDICATE_ILLEGAL_SYNTAX	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
FROM_SELF	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
NODETYPE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
".."	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
FROM_PARENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
NODETYPE_NODE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'*'	TokenNameCharacterLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'@'	TokenNameCharacterLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'_'	TokenNameCharacterLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
m_token	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
Character	TokenNameIdentifier
.	TokenNameDOT
isLetter	TokenNameIdentifier
(	TokenNameLPAREN
m_token	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Basis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'['	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Predicate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
doubleSlash	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXPECTED_LOC_STEP	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
Basis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
axesType	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
"::"	TokenNameStringLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
axesType	TokenNameIdentifier
=	TokenNameEQUAL
AxisName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'@'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
axesType	TokenNameIdentifier
=	TokenNameEQUAL
OpCodes	TokenNameIdentifier
.	TokenNameDOT
FROM_ATTRIBUTES	TokenNameIdentifier
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
axesType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
axesType	TokenNameIdentifier
=	TokenNameEQUAL
OpCodes	TokenNameIdentifier
.	TokenNameDOT
FROM_CHILDREN	TokenNameIdentifier
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
axesType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
axesType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
AxisName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
Object	TokenNameIdentifier
val	TokenNameIdentifier
=	TokenNameEQUAL
Keywords	TokenNameIdentifier
.	TokenNameDOT
getAxisName	TokenNameIdentifier
(	TokenNameLPAREN
m_token	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
==	TokenNameEQUAL_EQUAL
val	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_ILLEGAL_AXIS_NAME	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
m_token	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
axesType	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
Integer	TokenNameIdentifier
)	TokenNameRPAREN
val	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
axesType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
axesType	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
axesType	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
nodeTestOp	TokenNameIdentifier
=	TokenNameEQUAL
Keywords	TokenNameIdentifier
.	TokenNameDOT
getNodeType	TokenNameIdentifier
(	TokenNameLPAREN
m_token	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
==	TokenNameEQUAL_EQUAL
nodeTestOp	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_UNKNOWN_NODETYPE	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
m_token	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
nt	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
Integer	TokenNameIdentifier
)	TokenNameRPAREN
nodeTestOp	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
nt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
consumeExpected	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
OpCodes	TokenNameIdentifier
.	TokenNameDOT
NODETYPE_PI	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
nt	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Literal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
consumeExpected	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
NODENAME	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'*'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
ELEMWILDCARD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
Character	TokenNameIdentifier
.	TokenNameDOT
isLetter	TokenNameIdentifier
(	TokenNameLPAREN
m_tokenChar	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
!	TokenNameNOT
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'_'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXPECTED_NODE_TEST	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
consumeExpected	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
EMPTY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'*'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
ELEMWILDCARD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
Character	TokenNameIdentifier
.	TokenNameDOT
isLetter	TokenNameIdentifier
(	TokenNameLPAREN
m_tokenChar	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
!	TokenNameNOT
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'_'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXPECTED_NODE_TEST	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
Predicate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'['	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PredicateExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
consumeExpected	TokenNameIdentifier
(	TokenNameLPAREN
']'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
PredicateExpr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_PREDICATE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Expr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
ENDOP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
QName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
consumeExpected	TokenNameIdentifier
(	TokenNameLPAREN
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
EMPTY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
NCName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
Literal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
last	TokenNameIdentifier
=	TokenNameEQUAL
m_token	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
char	TokenNamechar
c0	TokenNameIdentifier
=	TokenNameEQUAL
m_tokenChar	TokenNameIdentifier
;	TokenNameSEMICOLON
char	TokenNamechar
cX	TokenNameIdentifier
=	TokenNameEQUAL
m_token	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
last	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
c0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\"'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
cX	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\"'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
c0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\''	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
cX	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\''	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
tokenQueuePos	TokenNameIdentifier
=	TokenNameEQUAL
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
m_tokenQueue	TokenNameIdentifier
.	TokenNameDOT
setElementAt	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
tokenQueuePos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Object	TokenNameIdentifier
obj	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
XString	TokenNameIdentifier
(	TokenNameLPAREN
m_token	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
last	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
m_tokenQueue	TokenNameIdentifier
.	TokenNameDOT
setElementAt	TokenNameIdentifier
(	TokenNameLPAREN
obj	TokenNameIdentifier
,	TokenNameCOMMA
tokenQueuePos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
tokenQueuePos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_PATTERN_LITERAL_NEEDS_BE_QUOTED	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
m_token	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
Number	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
num	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
m_token	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
'e'	TokenNameCharacterLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
m_token	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
'E'	TokenNameCharacterLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
NumberFormatException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
num	TokenNameIdentifier
=	TokenNameEQUAL
Double	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
m_token	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
doubleValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NumberFormatException	TokenNameIdentifier
nfe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
num	TokenNameIdentifier
=	TokenNameEQUAL
0.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_COULDNOT_BE_FORMATTED_TO_NUMBER	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
m_token	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
m_tokenQueue	TokenNameIdentifier
.	TokenNameDOT
setElementAt	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
XNumber	TokenNameIdentifier
(	TokenNameLPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
m_queueMark	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
Pattern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
LocationPathPattern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'|'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
LocationPathPattern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
RELATIVE_PATH_NOT_PERMITTED	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
RELATIVE_PATH_PERMITTED	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
RELATIVE_PATH_REQUIRED	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
relativePathStatus	TokenNameIdentifier
=	TokenNameEQUAL
RELATIVE_PATH_NOT_PERMITTED	TokenNameIdentifier
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
OP_LOCATIONPATHPATTERN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
Keywords	TokenNameIdentifier
.	TokenNameDOT
FUNC_ID_STRING	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
Keywords	TokenNameIdentifier
.	TokenNameDOT
FUNC_KEY_STRING	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
IdKeyPattern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
MATCH_ANY_ANCESTOR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
MATCH_IMMEDIATE_ANCESTOR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
NODETYPE_FUNCTEST	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
relativePathStatus	TokenNameIdentifier
=	TokenNameEQUAL
RELATIVE_PATH_REQUIRED	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
MATCH_ANY_ANCESTOR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
relativePathStatus	TokenNameIdentifier
=	TokenNameEQUAL
RELATIVE_PATH_REQUIRED	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
FROM_ROOT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
relativePathStatus	TokenNameIdentifier
=	TokenNameEQUAL
RELATIVE_PATH_PERMITTED	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
NODETYPE_ROOT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
relativePathStatus	TokenNameIdentifier
=	TokenNameEQUAL
RELATIVE_PATH_REQUIRED	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
relativePathStatus	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
RELATIVE_PATH_NOT_PERMITTED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'|'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
m_token	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
RelativePathPattern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
relativePathStatus	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
RELATIVE_PATH_REQUIRED	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXPECTED_REL_PATH_PATTERN	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
ENDOP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
IdKeyPattern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
FunctionCall	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
RelativePathPattern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
boolean	TokenNameboolean
trailingSlashConsumed	TokenNameIdentifier
=	TokenNameEQUAL
StepPattern	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
trailingSlashConsumed	TokenNameIdentifier
=	TokenNameEQUAL
StepPattern	TokenNameIdentifier
(	TokenNameLPAREN
!	TokenNameNOT
trailingSlashConsumed	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
StepPattern	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
isLeadingSlashPermitted	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
AbbreviatedNodeTestStep	TokenNameIdentifier
(	TokenNameLPAREN
isLeadingSlashPermitted	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
AbbreviatedNodeTestStep	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
isLeadingSlashPermitted	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
javax	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
transform	TokenNameIdentifier
.	TokenNameDOT
TransformerException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
opPos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
axesType	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
matchTypePos	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'@'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
axesType	TokenNameIdentifier
=	TokenNameEQUAL
OpCodes	TokenNameIdentifier
.	TokenNameDOT
MATCH_ATTRIBUTE	TokenNameIdentifier
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
axesType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
"::"	TokenNameStringLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
"attribute"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
axesType	TokenNameIdentifier
=	TokenNameEQUAL
OpCodes	TokenNameIdentifier
.	TokenNameDOT
MATCH_ATTRIBUTE	TokenNameIdentifier
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
axesType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
"child"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
matchTypePos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
axesType	TokenNameIdentifier
=	TokenNameEQUAL
OpCodes	TokenNameIdentifier
.	TokenNameDOT
MATCH_IMMEDIATE_ANCESTOR	TokenNameIdentifier
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
axesType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
axesType	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_AXES_NOT_ALLOWED	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
m_token	TokenNameIdentifier
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isLeadingSlashPermitted	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
error	TokenNameIdentifier
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
.	TokenNameDOT
ER_EXPECTED_STEP_PATTERN	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
axesType	TokenNameIdentifier
=	TokenNameEQUAL
OpCodes	TokenNameIdentifier
.	TokenNameDOT
MATCH_ANY_ANCESTOR	TokenNameIdentifier
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
axesType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
matchTypePos	TokenNameIdentifier
=	TokenNameEQUAL
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
axesType	TokenNameIdentifier
=	TokenNameEQUAL
OpCodes	TokenNameIdentifier
.	TokenNameDOT
MATCH_IMMEDIATE_ANCESTOR	TokenNameIdentifier
;	TokenNameSEMICOLON
appendOp	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
axesType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NodeTest	TokenNameIdentifier
(	TokenNameLPAREN
axesType	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'['	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Predicate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
trailingSlashConsumed	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
matchTypePos	TokenNameIdentifier
>	TokenNameGREATER
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
tokenIs	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
lookahead	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
matchTypePos	TokenNameIdentifier
,	TokenNameCOMMA
OpCodes	TokenNameIdentifier
.	TokenNameDOT
MATCH_ANY_ANCESTOR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
trailingSlashConsumed	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
trailingSlashConsumed	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
m_ops	TokenNameIdentifier
.	TokenNameDOT
setOp	TokenNameIdentifier
(	TokenNameLPAREN
opPos	TokenNameIdentifier
+	TokenNamePLUS
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
m_ops	TokenNameIdentifier
.	TokenNameDOT
getOp	TokenNameIdentifier
(	TokenNameLPAREN
OpMap	TokenNameIdentifier
.	TokenNameDOT
MAPINDEX_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
opPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
trailingSlashConsumed	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
