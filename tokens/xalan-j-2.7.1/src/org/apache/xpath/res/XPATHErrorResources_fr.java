package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
.	TokenNameDOT
res	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ListResourceBundle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
MissingResourceException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ResourceBundle	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
XPATHErrorResources_fr	TokenNameIdentifier
extends	TokenNameextends
ListResourceBundle	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ERROR0000	TokenNameIdentifier
=	TokenNameEQUAL
"ERROR0000"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CURRENT_NOT_ALLOWED_IN_MATCH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CURRENT_NOT_ALLOWED_IN_MATCH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CURRENT_TAKES_NO_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CURRENT_TAKES_NO_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_DOCUMENT_REPLACED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_DOCUMENT_REPLACED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CONTEXT_HAS_NO_OWNERDOC	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CONTEXT_HAS_NO_OWNERDOC"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_LOCALNAME_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_LOCALNAME_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NAMESPACEURI_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NAMESPACEURI_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NORMALIZESPACE_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NORMALIZESPACE_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NUMBER_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NUMBER_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NAME_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NAME_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_STRING_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_STRING_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_STRINGLENGTH_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_STRINGLENGTH_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_TRANSLATE_TAKES_3_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_TRANSLATE_TAKES_3_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNPARSEDENTITYURI_TAKES_1_ARG	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNPARSEDENTITYURI_TAKES_1_ARG"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NAMESPACEAXIS_NOT_IMPLEMENTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NAMESPACEAXIS_NOT_IMPLEMENTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNKNOWN_AXIS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNKNOWN_AXIS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNKNOWN_MATCH_OPERATION	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNKNOWN_MATCH_OPERATION"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INCORRECT_ARG_LENGTH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INCORRECT_ARG_LENGTH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_NUMBER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_NUMBER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_XPATHRESULTTYPE_TO_NUMBER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_XPATHRESULTTYPE_TO_NUMBER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_NODELIST	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_NODELIST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_MUTABLENODELIST	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_MUTABLENODELIST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_MATCH_PATTERN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_MATCH_PATTERN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULDNOT_GET_VAR_NAMED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULDNOT_GET_VAR_NAMED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNKNOWN_OPCODE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNKNOWN_OPCODE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXTRA_ILLEGAL_TOKENS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXTRA_ILLEGAL_TOKENS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_DOUBLE_QUOTE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_DOUBLE_QUOTE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_SINGLE_QUOTE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_SINGLE_QUOTE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EMPTY_EXPRESSION	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EMPTY_EXPRESSION"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_BUT_FOUND	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_BUT_FOUND"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INCORRECT_PROGRAMMER_ASSERTION	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INCORRECT_PROGRAMMER_ASSERTION"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_BOOLEAN_ARG_NO_LONGER_OPTIONAL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_BOOLEAN_ARG_NO_LONGER_OPTIONAL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FOUND_COMMA_BUT_NO_PRECEDING_ARG	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FOUND_COMMA_BUT_NO_PRECEDING_ARG"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FOUND_COMMA_BUT_NO_FOLLOWING_ARG	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FOUND_COMMA_BUT_NO_FOLLOWING_ARG"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PREDICATE_ILLEGAL_SYNTAX	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PREDICATE_ILLEGAL_SYNTAX"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ILLEGAL_AXIS_NAME	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ILLEGAL_AXIS_NAME"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNKNOWN_NODETYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNKNOWN_NODETYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PATTERN_LITERAL_NEEDS_BE_QUOTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PATTERN_LITERAL_NEEDS_BE_QUOTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULDNOT_BE_FORMATTED_TO_NUMBER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULDNOT_BE_FORMATTED_TO_NUMBER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULDNOT_CREATE_XMLPROCESSORLIAISON	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULDNOT_CREATE_XMLPROCESSORLIAISON"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_DIDNOT_FIND_XPATH_SELECT_EXP	TokenNameIdentifier
=	TokenNameEQUAL
"ER_DIDNOT_FIND_XPATH_SELECT_EXP"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULDNOT_FIND_ENDOP_AFTER_OPLOCATIONPATH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULDNOT_FIND_ENDOP_AFTER_OPLOCATIONPATH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ERROR_OCCURED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ERROR_OCCURED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ILLEGAL_VARIABLE_REFERENCE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ILLEGAL_VARIABLE_REFERENCE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_AXES_NOT_ALLOWED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_AXES_NOT_ALLOWED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_KEY_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_KEY_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COUNT_TAKES_1_ARG	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COUNT_TAKES_1_ARG"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULDNOT_FIND_FUNCTION	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULDNOT_FIND_FUNCTION"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNSUPPORTED_ENCODING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNSUPPORTED_ENCODING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PROBLEM_IN_DTM_NEXTSIBLING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PROBLEM_IN_DTM_NEXTSIBLING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_WRITE_TO_EMPTYNODELISTIMPL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_WRITE_TO_EMPTYNODELISTIMPL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SETDOMFACTORY_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SETDOMFACTORY_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PREFIX_MUST_RESOLVE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PREFIX_MUST_RESOLVE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PARSE_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PARSE_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SAX_API_NOT_HANDLED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SAX_API_NOT_HANDLED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_IGNORABLE_WHITESPACE_NOT_HANDLED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_IGNORABLE_WHITESPACE_NOT_HANDLED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_DTM_CANNOT_HANDLE_NODES	TokenNameIdentifier
=	TokenNameEQUAL
"ER_DTM_CANNOT_HANDLE_NODES"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XERCES_CANNOT_HANDLE_NODES	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XERCES_CANNOT_HANDLE_NODES"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XERCES_PARSE_ERROR_DETAILS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XERCES_PARSE_ERROR_DETAILS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XERCES_PARSE_ERROR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XERCES_PARSE_ERROR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INVALID_UTF16_SURROGATE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INVALID_UTF16_SURROGATE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_OIERROR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_OIERROR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_CREATE_URL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_CREATE_URL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XPATH_READOBJECT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XPATH_READOBJECT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FUNCTION_TOKEN_NOT_FOUND	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FUNCTION_TOKEN_NOT_FOUND"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_DEAL_XPATH_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_DEAL_XPATH_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODESET_NOT_MUTABLE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODESET_NOT_MUTABLE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODESETDTM_NOT_MUTABLE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODESETDTM_NOT_MUTABLE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_VAR_NOT_RESOLVABLE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_VAR_NOT_RESOLVABLE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NULL_ERROR_HANDLER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NULL_ERROR_HANDLER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PROG_ASSERT_UNKNOWN_OPCODE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PROG_ASSERT_UNKNOWN_OPCODE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ZERO_OR_ONE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ZERO_OR_ONE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ASNODEITERATOR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ASNODEITERATOR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FSB_NOT_SUPPORTED_XSTRINGFORCHARS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FSB_NOT_SUPPORTED_XSTRINGFORCHARS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULD_NOT_FIND_VAR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULD_NOT_FIND_VAR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XSTRINGFORCHARS_CANNOT_TAKE_STRING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XSTRINGFORCHARS_CANNOT_TAKE_STRING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FASTSTRINGBUFFER_CANNOT_BE_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FASTSTRINGBUFFER_CANNOT_BE_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_TWO_OR_THREE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_TWO_OR_THREE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_VARIABLE_ACCESSED_BEFORE_BIND	TokenNameIdentifier
=	TokenNameEQUAL
"ER_VARIABLE_ACCESSED_BEFORE_BIND"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FSB_CANNOT_TAKE_STRING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FSB_CANNOT_TAKE_STRING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SETTING_WALKER_ROOT_TO_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SETTING_WALKER_ROOT_TO_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODESETDTM_CANNOT_ITERATE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODESETDTM_CANNOT_ITERATE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODESET_CANNOT_ITERATE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODESET_CANNOT_ITERATE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODESETDTM_CANNOT_INDEX	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODESETDTM_CANNOT_INDEX"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODESET_CANNOT_INDEX	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODESET_CANNOT_INDEX"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_CALL_SETSHOULDCACHENODE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_CALL_SETSHOULDCACHENODE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ONLY_ALLOWS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ONLY_ALLOWS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNKNOWN_STEP	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNKNOWN_STEP"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_REL_LOC_PATH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_REL_LOC_PATH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_LOC_PATH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_LOC_PATH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_LOC_PATH_AT_END_EXPR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_LOC_PATH_AT_END_EXPR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_LOC_STEP	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_LOC_STEP"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_NODE_TEST	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_NODE_TEST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_STEP_PATTERN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_STEP_PATTERN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_REL_PATH_PATTERN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_REL_PATH_PATTERN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_BOOLEAN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_BOOLEAN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_SINGLENODE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_SINGLENODE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_GET_SNAPSHOT_LENGTH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_GET_SNAPSHOT_LENGTH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NON_ITERATOR_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NON_ITERATOR_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_DOC_MUTATED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_DOC_MUTATED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INVALID_XPATH_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INVALID_XPATH_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EMPTY_XPATH_RESULT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EMPTY_XPATH_RESULT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INCOMPATIBLE_TYPES	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INCOMPATIBLE_TYPES"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NULL_RESOLVER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NULL_RESOLVER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_STRING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_STRING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NON_SNAPSHOT_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NON_SNAPSHOT_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_WRONG_DOCUMENT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_WRONG_DOCUMENT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_WRONG_NODETYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_WRONG_NODETYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XPATH_ERROR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XPATH_ERROR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_RESOLVE_VARIABLE_RETURNS_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_RESOLVE_VARIABLE_RETURNS_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNSUPPORTED_RETURN_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNSUPPORTED_RETURN_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SOURCE_RETURN_TYPE_CANNOT_BE_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SOURCE_RETURN_TYPE_CANNOT_BE_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ARG_CANNOT_BE_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ARG_CANNOT_BE_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_OBJECT_MODEL_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_OBJECT_MODEL_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_OBJECT_MODEL_EMPTY	TokenNameIdentifier
=	TokenNameEQUAL
"ER_OBJECT_MODEL_EMPTY"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FEATURE_NAME_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FEATURE_NAME_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FEATURE_UNKNOWN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FEATURE_UNKNOWN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_GETTING_NULL_FEATURE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_GETTING_NULL_FEATURE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_GETTING_UNKNOWN_FEATURE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_GETTING_UNKNOWN_FEATURE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NULL_XPATH_FUNCTION_RESOLVER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NULL_XPATH_FUNCTION_RESOLVER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NULL_XPATH_VARIABLE_RESOLVER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NULL_XPATH_VARIABLE_RESOLVER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_LOCALE_NAME_NOT_HANDLED	TokenNameIdentifier
=	TokenNameEQUAL
"WG_LOCALE_NAME_NOT_HANDLED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_PROPERTY_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"WG_PROPERTY_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_DONT_DO_ANYTHING_WITH_NS	TokenNameIdentifier
=	TokenNameEQUAL
"WG_DONT_DO_ANYTHING_WITH_NS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_SECURITY_EXCEPTION	TokenNameIdentifier
=	TokenNameEQUAL
"WG_SECURITY_EXCEPTION"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_QUO_NO_LONGER_DEFINED	TokenNameIdentifier
=	TokenNameEQUAL
"WG_QUO_NO_LONGER_DEFINED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_NEED_DERIVED_OBJECT_TO_IMPLEMENT_NODETEST	TokenNameIdentifier
=	TokenNameEQUAL
"WG_NEED_DERIVED_OBJECT_TO_IMPLEMENT_NODETEST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_FUNCTION_TOKEN_NOT_FOUND	TokenNameIdentifier
=	TokenNameEQUAL
"WG_FUNCTION_TOKEN_NOT_FOUND"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_COULDNOT_FIND_FUNCTION	TokenNameIdentifier
=	TokenNameEQUAL
"WG_COULDNOT_FIND_FUNCTION"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_CANNOT_MAKE_URL_FROM	TokenNameIdentifier
=	TokenNameEQUAL
"WG_CANNOT_MAKE_URL_FROM"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_EXPAND_ENTITIES_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"WG_EXPAND_ENTITIES_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_ILLEGAL_VARIABLE_REFERENCE	TokenNameIdentifier
=	TokenNameEQUAL
"WG_ILLEGAL_VARIABLE_REFERENCE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_UNSUPPORTED_ENCODING	TokenNameIdentifier
=	TokenNameEQUAL
"WG_UNSUPPORTED_ENCODING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_DETACH_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_DETACH_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NUM_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NUM_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XSTR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XSTR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_STR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_STR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getContents	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
{	TokenNameLBRACE
"ERROR0000"	TokenNameStringLiteral
,	TokenNameCOMMA
"{0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CURRENT_NOT_ALLOWED_IN_MATCH	TokenNameIdentifier
,	TokenNameCOMMA
"La fonction current() n'est pas admise dans un motif de correspondance !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CURRENT_TAKES_NO_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"La fonction current() n'accepte pas d'arguments !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_DOCUMENT_REPLACED	TokenNameIdentifier
,	TokenNameCOMMA
"L'implémentation de la fonction document() a été remplacée par org.apache.xalan.xslt.FuncDocument !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CONTEXT_HAS_NO_OWNERDOC	TokenNameIdentifier
,	TokenNameCOMMA
"Le contexte ne possède pas de document propriétaire !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_LOCALNAME_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"local-name() possède trop d'arguments."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NAMESPACEURI_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"namespace-uri() possède trop d'arguments."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NORMALIZESPACE_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"normalize-space() possède trop d'arguments."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NUMBER_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"number() possède trop d'arguments."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NAME_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"name() possède trop d'arguments."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_STRING_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"string() possède trop d'arguments."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_STRINGLENGTH_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"string-length() possède trop d'arguments."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_TRANSLATE_TAKES_3_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"La fonction translate() accepte trois arguments !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNPARSEDENTITYURI_TAKES_1_ARG	TokenNameIdentifier
,	TokenNameCOMMA
"Un argument doit être fournie à la fonction unparsed-entity-uri !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NAMESPACEAXIS_NOT_IMPLEMENTED	TokenNameIdentifier
,	TokenNameCOMMA
"L'axe de l'espace de noms n'est pas implémenté !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNKNOWN_AXIS	TokenNameIdentifier
,	TokenNameCOMMA
"axe inconnu : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNKNOWN_MATCH_OPERATION	TokenNameIdentifier
,	TokenNameCOMMA
"opération de correspondance inconnue !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INCORRECT_ARG_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
"La longueur d'argument du test du noeud processing-instruction() n'est pas correcte !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_NUMBER	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible de convertir {0} en un nombre"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_NODELIST	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible de convertir {0} en un NodeList !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_MUTABLENODELIST	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible de convertir {0} en un NodeSetDTM !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible de convertir {0} en un type#{1}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_MATCH_PATTERN	TokenNameIdentifier
,	TokenNameCOMMA
"Motif de correspondance obligatoire dans getMatchScore !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULDNOT_GET_VAR_NAMED	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible d''extraire la variable {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNKNOWN_OPCODE	TokenNameIdentifier
,	TokenNameCOMMA
"ERREUR ! Code opération inconnu : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXTRA_ILLEGAL_TOKENS	TokenNameIdentifier
,	TokenNameCOMMA
"Jetons incorrects supplémentaires : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_DOUBLE_QUOTE	TokenNameIdentifier
,	TokenNameCOMMA
"Erreur de guillemets dans un littéral... Guillemet double obligatoire !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_SINGLE_QUOTE	TokenNameIdentifier
,	TokenNameCOMMA
"Erreur de guillemets dans un littéral... Guillemet simple obligatoire !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EMPTY_EXPRESSION	TokenNameIdentifier
,	TokenNameCOMMA
"Expression vide !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_BUT_FOUND	TokenNameIdentifier
,	TokenNameCOMMA
"{1} a été trouvé alors que {0} était attendu :"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INCORRECT_PROGRAMMER_ASSERTION	TokenNameIdentifier
,	TokenNameCOMMA
"Assertion de programme incorrecte ! - {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_BOOLEAN_ARG_NO_LONGER_OPTIONAL	TokenNameIdentifier
,	TokenNameCOMMA
"L'argument booléen(...) n'est plus optionnel avec le document de normalisation XPath 19990709."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FOUND_COMMA_BUT_NO_PRECEDING_ARG	TokenNameIdentifier
,	TokenNameCOMMA
"Virgule trouvée sans argument qui la précède !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FOUND_COMMA_BUT_NO_FOLLOWING_ARG	TokenNameIdentifier
,	TokenNameCOMMA
"Virgule trouvée sans argument qui la suit !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PREDICATE_ILLEGAL_SYNTAX	TokenNameIdentifier
,	TokenNameCOMMA
"La syntaxe '[prédicat]' ou '.[prédicat]' est incorrecte. Préférez 'self::node()[prédicat]'."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ILLEGAL_AXIS_NAME	TokenNameIdentifier
,	TokenNameCOMMA
"nom d''axe incorrect : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNKNOWN_NODETYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Type de noeud inconnu : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PATTERN_LITERAL_NEEDS_BE_QUOTED	TokenNameIdentifier
,	TokenNameCOMMA
"Le littéral de motif ({0}) doit figurer entre guillemets !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULDNOT_BE_FORMATTED_TO_NUMBER	TokenNameIdentifier
,	TokenNameCOMMA
"{0} ne peut être formatée sous forme numérique !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULDNOT_CREATE_XMLPROCESSORLIAISON	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible de créer XML TransformerFactory Liaison : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_DIDNOT_FIND_XPATH_SELECT_EXP	TokenNameIdentifier
,	TokenNameCOMMA
"Erreur ! Impossible de trouver l'expression de sélection xpath (-select)."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULDNOT_FIND_ENDOP_AFTER_OPLOCATIONPATH	TokenNameIdentifier
,	TokenNameCOMMA
"ERREUR ! Impossible de trouver ENDOP après OP_LOCATIONPATH"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ERROR_OCCURED	TokenNameIdentifier
,	TokenNameCOMMA
"Une erreur s'est produite !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ILLEGAL_VARIABLE_REFERENCE	TokenNameIdentifier
,	TokenNameCOMMA
"Référence de la variable hors contexte ou sans définition !  Nom = {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_AXES_NOT_ALLOWED	TokenNameIdentifier
,	TokenNameCOMMA
"Seuls les axes child:: et attribute:: sont autorisés dans des motifs de correspondance !  Axes incorrects= {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_KEY_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"key() possède un nombre non valide d'arguments."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COUNT_TAKES_1_ARG	TokenNameIdentifier
,	TokenNameCOMMA
"Un seul argument doit être fourni à la fonction count !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULDNOT_FIND_FUNCTION	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible de trouver la fonction : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNSUPPORTED_ENCODING	TokenNameIdentifier
,	TokenNameCOMMA
"Codage non pris en charge : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PROBLEM_IN_DTM_NEXTSIBLING	TokenNameIdentifier
,	TokenNameCOMMA
"Une erreur s'est produite dans la DTM de getNextSibling... Tentative de reprise en cours"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_WRITE_TO_EMPTYNODELISTIMPL	TokenNameIdentifier
,	TokenNameCOMMA
"Erreur de programme : Ecriture impossible dans EmptyNodeList."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SETDOMFACTORY_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"SetDOMFactory n'est pas pris en charge par XPathContext !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PREFIX_MUST_RESOLVE	TokenNameIdentifier
,	TokenNameCOMMA
"Le préfixe doit se convertir en espace de noms : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PARSE_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"parse (InputSource source) non pris en charge dans XPathContext ! Ouverture de {0} impossible"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SAX_API_NOT_HANDLED	TokenNameIdentifier
,	TokenNameCOMMA
"Caractères (char ch[]...) de l'API SAX non pris en charge par le DTM !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_IGNORABLE_WHITESPACE_NOT_HANDLED	TokenNameIdentifier
,	TokenNameCOMMA
"ignorableWhitespace(char ch[]... non pris en charge par le DTM !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_DTM_CANNOT_HANDLE_NODES	TokenNameIdentifier
,	TokenNameCOMMA
"DTMLiaison ne prend pas en charge des noeuds de type {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XERCES_CANNOT_HANDLE_NODES	TokenNameIdentifier
,	TokenNameCOMMA
"DOM2Helper ne prend pas en charge des noeuds de type {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XERCES_PARSE_ERROR_DETAILS	TokenNameIdentifier
,	TokenNameCOMMA
"Erreur de DOM2Helper.parse : ID système - {0} ligne - {1}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XERCES_PARSE_ERROR	TokenNameIdentifier
,	TokenNameCOMMA
"Erreur de DOM2Helper.parse"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INVALID_UTF16_SURROGATE	TokenNameIdentifier
,	TokenNameCOMMA
"Substitut UTF-16 non valide détecté : {0} ?"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_OIERROR	TokenNameIdentifier
,	TokenNameCOMMA
"Erreur d'E-S"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_CREATE_URL	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible de créer une URL pour : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XPATH_READOBJECT	TokenNameIdentifier
,	TokenNameCOMMA
"Dans XPath.readObject : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FUNCTION_TOKEN_NOT_FOUND	TokenNameIdentifier
,	TokenNameCOMMA
"jeton de fonction introuvable."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_DEAL_XPATH_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible de traiter le type XPath : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODESET_NOT_MUTABLE	TokenNameIdentifier
,	TokenNameCOMMA
"NodeSet indivisible"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODESETDTM_NOT_MUTABLE	TokenNameIdentifier
,	TokenNameCOMMA
"NodeSetDTM indivisible"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_VAR_NOT_RESOLVABLE	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible de résoudre la variable : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NULL_ERROR_HANDLER	TokenNameIdentifier
,	TokenNameCOMMA
"Gestionnaire d'erreurs vide"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PROG_ASSERT_UNKNOWN_OPCODE	TokenNameIdentifier
,	TokenNameCOMMA
"Assertion de programme : code opération inconnu : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ZERO_OR_ONE	TokenNameIdentifier
,	TokenNameCOMMA
"0 ou 1"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
,	TokenNameCOMMA
"rtf() non pris en charge par XRTreeFragSelectWrapper"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
,	TokenNameCOMMA
"asNodeIterator() non pris en charge par XRTreeFragSelectWrapper"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_DETACH_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
,	TokenNameCOMMA
"detach() non pris en charge par XRTreeFragSelectWrapper"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NUM_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
,	TokenNameCOMMA
"num() non pris en charge par XRTreeFragSelectWrapper"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XSTR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
,	TokenNameCOMMA
"xstr() non pris en charge par XRTreeFragSelectWrapper"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_STR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
,	TokenNameCOMMA
"str() non pris en charge par XRTreeFragSelectWrapper"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FSB_NOT_SUPPORTED_XSTRINGFORCHARS	TokenNameIdentifier
,	TokenNameCOMMA
"fsb() non pris en charge par XStringForChars"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULD_NOT_FIND_VAR	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible de trouver la variable portant le nom {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XSTRINGFORCHARS_CANNOT_TAKE_STRING	TokenNameIdentifier
,	TokenNameCOMMA
"XStringForChars n'accepte pas de chaîne comme argument"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FASTSTRINGBUFFER_CANNOT_BE_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"L'argument FastStringBuffer ne doit pas être vide"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_TWO_OR_THREE	TokenNameIdentifier
,	TokenNameCOMMA
"2 ou 3"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_VARIABLE_ACCESSED_BEFORE_BIND	TokenNameIdentifier
,	TokenNameCOMMA
"L'accès à la variable a précédé la liaison de celle-ci !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FSB_CANNOT_TAKE_STRING	TokenNameIdentifier
,	TokenNameCOMMA
"XStringForFSB n'accepte pas de chaîne comme argument !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SETTING_WALKER_ROOT_TO_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"  !!!! Erreur ! Définition d'une valeur nulle pour la racine d'un élément walker !!!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODESETDTM_CANNOT_ITERATE	TokenNameIdentifier
,	TokenNameCOMMA
"Ce NodeSetDTM ne permet pas d'itération vers un noeud précédent !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODESET_CANNOT_ITERATE	TokenNameIdentifier
,	TokenNameCOMMA
"Ce NodeSet ne permet pas d'itération vers un noeud précédent !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODESETDTM_CANNOT_INDEX	TokenNameIdentifier
,	TokenNameCOMMA
"Ce NodeSetDTM ne peut pas effectuer de fonctions d'indexage ou de dénombrement !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODESET_CANNOT_INDEX	TokenNameIdentifier
,	TokenNameCOMMA
"Ce NodeSet ne peut pas effectuer de fonctions d'indexage ou de dénombrement !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_CALL_SETSHOULDCACHENODE	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible d'appeler setShouldCacheNodes après nextNode !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ONLY_ALLOWS	TokenNameIdentifier
,	TokenNameCOMMA
"{0} accepte uniquement {1} arguments"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNKNOWN_STEP	TokenNameIdentifier
,	TokenNameCOMMA
"Assertion du programmeur dans getNextStepPos : stepType inconnu : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_REL_LOC_PATH	TokenNameIdentifier
,	TokenNameCOMMA
"Un chemin d'emplacement relatif était attendu après le jeton '/' ou '//'."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_LOC_PATH	TokenNameIdentifier
,	TokenNameCOMMA
"Un chemin d''emplacement était attendu, mais le jeton suivant a été détecté :  {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_LOC_PATH_AT_END_EXPR	TokenNameIdentifier
,	TokenNameCOMMA
"Un chemin d'emplacement était attendu mais la fin de l'expression XPath a été détectée."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_LOC_STEP	TokenNameIdentifier
,	TokenNameCOMMA
"Une étape d'emplacement était attendue après le jeton '/' ou '//'."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_NODE_TEST	TokenNameIdentifier
,	TokenNameCOMMA
"Un test de noeud correspondant à NCName:* ou QName était attendu."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_STEP_PATTERN	TokenNameIdentifier
,	TokenNameCOMMA
"Un modèle d'étape était attendu, mais '/' a été détecté."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_REL_PATH_PATTERN	TokenNameIdentifier
,	TokenNameCOMMA
"Un modèle de chemin relatif était attendu."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_BOOLEAN	TokenNameIdentifier
,	TokenNameCOMMA
"Le résultat XPathResult de l''expression XPath ''{0}'' a un type XPathResultType de {1} qui ne peut pas être converti en valeur booléenne."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_SINGLENODE	TokenNameIdentifier
,	TokenNameCOMMA
"Le résultat XPathResult de l''expression XPath ''{0}'' a un type XPathResultType de {1} qui ne peut pas être converti en noeud unique. La méthode getSingleNodeValue s''applique uniquement aux types ANY_UNORDERED_NODE_TYPE et FIRST_ORDERED_NODE_TYPE."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_GET_SNAPSHOT_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
"La méthode getSnapshotLength ne peut pas être appelée sur le résultat XPathResult de l''expression XPath ''{0}'' car son type XPathResultType est {1}. Cette méthode s''applique uniquement aux types UNORDERED_NODE_SNAPSHOT_TYPE et ORDERED_NODE_SNAPSHOT_TYPE."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NON_ITERATOR_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"La méthode iterateNext ne peut pas être appelée sur le résultat XPathResult de l''expression XPath ''{0}'' car son type XPathResultType est {1}. Cette méthode s''applique uniquement aux types UNORDERED_NODE_ITERATOR_TYPE et ORDERED_NODE_ITERATOR_TYPE."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_DOC_MUTATED	TokenNameIdentifier
,	TokenNameCOMMA
"Mutation du document depuis le renvoi du résultat. L'itérateur est incorrect."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INVALID_XPATH_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Argument de type XPath incorrect : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EMPTY_XPATH_RESULT	TokenNameIdentifier
,	TokenNameCOMMA
"Objet résultat XPath vide"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INCOMPATIBLE_TYPES	TokenNameIdentifier
,	TokenNameCOMMA
"Le résultat XPathResult de l''expression XPath ''{0}'' a un type XPathResultType de {1} qui ne peut pas être forcé dans le type XPathResultType indiqué de {2}."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NULL_RESOLVER	TokenNameIdentifier
,	TokenNameCOMMA
"Conversion impossible du préfixe avec un programme de résolution de préfixe de valeur nulle."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_STRING	TokenNameIdentifier
,	TokenNameCOMMA
"Le résultat XPathResult de l''expression XPath ''{0}'' a un type XPathResultType de {1} qui ne peut pas être converti en chaîne."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NON_SNAPSHOT_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"La méthode snapshotItem ne peut pas être appelée sur le résultat XPathResult de l''expression XPath ''{0}'' car son type XPathResultType est {1}. Cette méthode s''applique uniquement aux types UNORDERED_NODE_SNAPSHOT_TYPE et ORDERED_NODE_SNAPSHOT_TYPE."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_WRONG_DOCUMENT	TokenNameIdentifier
,	TokenNameCOMMA
"Le noeud de contexte n'appartient pas au document lié à ce XPathEvaluator."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_WRONG_NODETYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Le type de noeud contextuel n'est pas pris en charge."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XPATH_ERROR	TokenNameIdentifier
,	TokenNameCOMMA
"Erreur inconnue détectée dans XPath."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_XPATHRESULTTYPE_TO_NUMBER	TokenNameIdentifier
,	TokenNameCOMMA
"Le résultat XPathResult de l''expression XPath ''{0}'' a un type XPathResultType de {1} qui ne peut pas être converti en un nombre."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED	TokenNameIdentifier
,	TokenNameCOMMA
"La fonction d''extension : ''{0}'' ne peut pas être appelée lorsque la fonction XMLConstants.FEATURE_SECURE_PROCESSING a la valeur true."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_RESOLVE_VARIABLE_RETURNS_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"resolveVariable pour la variable {0} renvoyant la valeur null"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNSUPPORTED_RETURN_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Type de retour non pris en charge : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SOURCE_RETURN_TYPE_CANNOT_BE_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"Le type de retour et/ou source ne peut pas avoir une valeur null"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ARG_CANNOT_BE_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"L''argument {0} ne peut pas avoir une valeur null"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_OBJECT_MODEL_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"{0}#isObjectModelSupported( Chaîne objectModel ) ne peut pas être appelé avec objectModel == null"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_OBJECT_MODEL_EMPTY	TokenNameIdentifier
,	TokenNameCOMMA
"{0}#isObjectModelSupported( Chaîne objectModel ) ne peut pas être appelé avec objectModel == """	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FEATURE_NAME_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"Tentative de définition d''une fonction ayant un nom null : {0}#setFeature( null, {1})"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FEATURE_UNKNOWN	TokenNameIdentifier
,	TokenNameCOMMA
"Tentative de définition d''une fonction inconnue "{0}":{1}#setFeature({0},{2})"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_GETTING_NULL_FEATURE	TokenNameIdentifier
,	TokenNameCOMMA
"Tentative de définition d''une fonction ayant un nom null : {0}#getFeature(null)"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_GETTING_UNKNOWN_FEATURE	TokenNameIdentifier
,	TokenNameCOMMA
"Tentative d''extraction d''une fonction inconnue "{0}":{1}#getFeature({0})"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NULL_XPATH_FUNCTION_RESOLVER	TokenNameIdentifier
,	TokenNameCOMMA
"Tentative de définition d''un élément XPathFunctionResolver null : {0}#setXPathFunctionResolver(null)"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NULL_XPATH_VARIABLE_RESOLVER	TokenNameIdentifier
,	TokenNameCOMMA
"Tentative de définition d''un élément XPathVariableResolver null : {0}#setXPathVariableResolver(null)"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_LOCALE_NAME_NOT_HANDLED	TokenNameIdentifier
,	TokenNameCOMMA
"Le nom d'environnement local de la fonction format-number n'est pas encore pris en charge."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_PROPERTY_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"Propriété XSL non prise en charge : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_DONT_DO_ANYTHING_WITH_NS	TokenNameIdentifier
,	TokenNameCOMMA
"Espace de noms {0} inexploitable dans la propriété : {1}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_SECURITY_EXCEPTION	TokenNameIdentifier
,	TokenNameCOMMA
"Une exception de sécurité s''est produite lors de l''accès à la propriété : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_QUO_NO_LONGER_DEFINED	TokenNameIdentifier
,	TokenNameCOMMA
"L'ancienne syntaxe : quo(...) n'est plus définie dans XPath."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_NEED_DERIVED_OBJECT_TO_IMPLEMENT_NODETEST	TokenNameIdentifier
,	TokenNameCOMMA
"XPath requiert un objet dérivé pour implémenter nodeTest !"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_FUNCTION_TOKEN_NOT_FOUND	TokenNameIdentifier
,	TokenNameCOMMA
"jeton de fonction introuvable."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_COULDNOT_FIND_FUNCTION	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible de trouver la fonction : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_CANNOT_MAKE_URL_FROM	TokenNameIdentifier
,	TokenNameCOMMA
"Impossible de créer l''URL à partir de : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_EXPAND_ENTITIES_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"L'option -E n'est pas prise en charge pour l'analyseur DTM"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_ILLEGAL_VARIABLE_REFERENCE	TokenNameIdentifier
,	TokenNameCOMMA
"Référence de la variable hors contexte ou sans définition !  Nom = {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_UNSUPPORTED_ENCODING	TokenNameIdentifier
,	TokenNameCOMMA
"Codage non pris en charge : {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"ui_language"	TokenNameStringLiteral
,	TokenNameCOMMA
"en"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"help_language"	TokenNameStringLiteral
,	TokenNameCOMMA
"en"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"language"	TokenNameStringLiteral
,	TokenNameCOMMA
"en"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"BAD_CODE"	TokenNameStringLiteral
,	TokenNameCOMMA
"Le paramètre de createMessage se trouve hors limites"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"FORMAT_FAILED"	TokenNameStringLiteral
,	TokenNameCOMMA
"Exception soulevée lors de l'appel de messageFormat"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"version"	TokenNameStringLiteral
,	TokenNameCOMMA
">>>>>>> Version de Xalan "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"version2"	TokenNameStringLiteral
,	TokenNameCOMMA
"<<<<<<<"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"yes"	TokenNameStringLiteral
,	TokenNameCOMMA
"oui"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"line"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ligne #"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"column"	TokenNameStringLiteral
,	TokenNameCOMMA
"Colonne #"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"xsldone"	TokenNameStringLiteral
,	TokenNameCOMMA
"XSLProcessor : terminé"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"xpath_option"	TokenNameStringLiteral
,	TokenNameCOMMA
"options xpath : "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"optionIN"	TokenNameStringLiteral
,	TokenNameCOMMA
"   [-in URLXMLentrée]"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"optionSelect"	TokenNameStringLiteral
,	TokenNameCOMMA
"   [-select expression xpath]"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"optionMatch"	TokenNameStringLiteral
,	TokenNameCOMMA
"   [-match motif de correspondance (diagnostics)]"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"optionAnyExpr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Une expression xpath effectuera un vidage de diagnostics"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"noParsermsg1"	TokenNameStringLiteral
,	TokenNameCOMMA
"Echec du processus XSL."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"noParsermsg2"	TokenNameStringLiteral
,	TokenNameCOMMA
"** Analyseur introuvable **"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"noParsermsg3"	TokenNameStringLiteral
,	TokenNameCOMMA
"Vérifiez le chemin d'accès des classes."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"noParsermsg4"	TokenNameStringLiteral
,	TokenNameCOMMA
"XML Parser for Java disponible en téléchargement sur le site"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"noParsermsg5"	TokenNameStringLiteral
,	TokenNameCOMMA
"AlphaWorks de IBM : http://www.alphaworks.ibm.com/formula/xml"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"gtone"	TokenNameStringLiteral
,	TokenNameCOMMA
">1"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"zero"	TokenNameStringLiteral
,	TokenNameCOMMA
"0"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"one"	TokenNameStringLiteral
,	TokenNameCOMMA
"1"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"two"	TokenNameStringLiteral
,	TokenNameCOMMA
"2"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"three"	TokenNameStringLiteral
,	TokenNameCOMMA
"3"	TokenNameStringLiteral
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
BAD_CODE	TokenNameIdentifier
=	TokenNameEQUAL
"BAD_CODE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
FORMAT_FAILED	TokenNameIdentifier
=	TokenNameEQUAL
"FORMAT_FAILED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ERROR_RESOURCES	TokenNameIdentifier
=	TokenNameEQUAL
"org.apache.xpath.res.XPATHErrorResources"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ERROR_STRING	TokenNameIdentifier
=	TokenNameEQUAL
"#error"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ERROR_HEADER	TokenNameIdentifier
=	TokenNameEQUAL
"Erreur : "	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WARNING_HEADER	TokenNameIdentifier
=	TokenNameEQUAL
"Avertissement : "	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
XSL_HEADER	TokenNameIdentifier
=	TokenNameEQUAL
"XSL "	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
XML_HEADER	TokenNameIdentifier
=	TokenNameEQUAL
"XML "	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
QUERY_HEADER	TokenNameIdentifier
=	TokenNameEQUAL
"PATTERN "	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
XPATHErrorResources	TokenNameIdentifier
loadResourceBundle	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
className	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MissingResourceException	TokenNameIdentifier
{	TokenNameLBRACE
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
=	TokenNameEQUAL
Locale	TokenNameIdentifier
.	TokenNameDOT
getDefault	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
suffix	TokenNameIdentifier
=	TokenNameEQUAL
getResourceSuffix	TokenNameIdentifier
(	TokenNameLPAREN
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
)	TokenNameRPAREN
ResourceBundle	TokenNameIdentifier
.	TokenNameDOT
getBundle	TokenNameIdentifier
(	TokenNameLPAREN
className	TokenNameIdentifier
+	TokenNamePLUS
suffix	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MissingResourceException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
)	TokenNameRPAREN
ResourceBundle	TokenNameIdentifier
.	TokenNameDOT
getBundle	TokenNameIdentifier
(	TokenNameLPAREN
className	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
"en"	TokenNameStringLiteral
,	TokenNameCOMMA
"US"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MissingResourceException	TokenNameIdentifier
e2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
MissingResourceException	TokenNameIdentifier
(	TokenNameLPAREN
"Could not load any resource bundles."	TokenNameStringLiteral
,	TokenNameCOMMA
className	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
getResourceSuffix	TokenNameIdentifier
(	TokenNameLPAREN
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
suffix	TokenNameIdentifier
=	TokenNameEQUAL
"_"	TokenNameStringLiteral
+	TokenNamePLUS
locale	TokenNameIdentifier
.	TokenNameDOT
getLanguage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
country	TokenNameIdentifier
=	TokenNameEQUAL
locale	TokenNameIdentifier
.	TokenNameDOT
getCountry	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
country	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"TW"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
suffix	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
"_"	TokenNameStringLiteral
+	TokenNamePLUS
country	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
suffix	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
