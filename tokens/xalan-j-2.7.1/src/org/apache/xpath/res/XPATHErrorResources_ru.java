package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
xpath	TokenNameIdentifier
.	TokenNameDOT
res	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ListResourceBundle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
MissingResourceException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ResourceBundle	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
XPATHErrorResources_ru	TokenNameIdentifier
extends	TokenNameextends
ListResourceBundle	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ERROR0000	TokenNameIdentifier
=	TokenNameEQUAL
"ERROR0000"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CURRENT_NOT_ALLOWED_IN_MATCH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CURRENT_NOT_ALLOWED_IN_MATCH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CURRENT_TAKES_NO_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CURRENT_TAKES_NO_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_DOCUMENT_REPLACED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_DOCUMENT_REPLACED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CONTEXT_HAS_NO_OWNERDOC	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CONTEXT_HAS_NO_OWNERDOC"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_LOCALNAME_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_LOCALNAME_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NAMESPACEURI_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NAMESPACEURI_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NORMALIZESPACE_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NORMALIZESPACE_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NUMBER_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NUMBER_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NAME_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NAME_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_STRING_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_STRING_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_STRINGLENGTH_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_STRINGLENGTH_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_TRANSLATE_TAKES_3_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_TRANSLATE_TAKES_3_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNPARSEDENTITYURI_TAKES_1_ARG	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNPARSEDENTITYURI_TAKES_1_ARG"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NAMESPACEAXIS_NOT_IMPLEMENTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NAMESPACEAXIS_NOT_IMPLEMENTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNKNOWN_AXIS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNKNOWN_AXIS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNKNOWN_MATCH_OPERATION	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNKNOWN_MATCH_OPERATION"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INCORRECT_ARG_LENGTH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INCORRECT_ARG_LENGTH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_NUMBER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_NUMBER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_XPATHRESULTTYPE_TO_NUMBER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_XPATHRESULTTYPE_TO_NUMBER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_NODELIST	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_NODELIST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_MUTABLENODELIST	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_MUTABLENODELIST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_MATCH_PATTERN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_MATCH_PATTERN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULDNOT_GET_VAR_NAMED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULDNOT_GET_VAR_NAMED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNKNOWN_OPCODE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNKNOWN_OPCODE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXTRA_ILLEGAL_TOKENS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXTRA_ILLEGAL_TOKENS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_DOUBLE_QUOTE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_DOUBLE_QUOTE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_SINGLE_QUOTE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_SINGLE_QUOTE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EMPTY_EXPRESSION	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EMPTY_EXPRESSION"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_BUT_FOUND	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_BUT_FOUND"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INCORRECT_PROGRAMMER_ASSERTION	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INCORRECT_PROGRAMMER_ASSERTION"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_BOOLEAN_ARG_NO_LONGER_OPTIONAL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_BOOLEAN_ARG_NO_LONGER_OPTIONAL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FOUND_COMMA_BUT_NO_PRECEDING_ARG	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FOUND_COMMA_BUT_NO_PRECEDING_ARG"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FOUND_COMMA_BUT_NO_FOLLOWING_ARG	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FOUND_COMMA_BUT_NO_FOLLOWING_ARG"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PREDICATE_ILLEGAL_SYNTAX	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PREDICATE_ILLEGAL_SYNTAX"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ILLEGAL_AXIS_NAME	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ILLEGAL_AXIS_NAME"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNKNOWN_NODETYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNKNOWN_NODETYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PATTERN_LITERAL_NEEDS_BE_QUOTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PATTERN_LITERAL_NEEDS_BE_QUOTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULDNOT_BE_FORMATTED_TO_NUMBER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULDNOT_BE_FORMATTED_TO_NUMBER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULDNOT_CREATE_XMLPROCESSORLIAISON	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULDNOT_CREATE_XMLPROCESSORLIAISON"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_DIDNOT_FIND_XPATH_SELECT_EXP	TokenNameIdentifier
=	TokenNameEQUAL
"ER_DIDNOT_FIND_XPATH_SELECT_EXP"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULDNOT_FIND_ENDOP_AFTER_OPLOCATIONPATH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULDNOT_FIND_ENDOP_AFTER_OPLOCATIONPATH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ERROR_OCCURED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ERROR_OCCURED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ILLEGAL_VARIABLE_REFERENCE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ILLEGAL_VARIABLE_REFERENCE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_AXES_NOT_ALLOWED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_AXES_NOT_ALLOWED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_KEY_HAS_TOO_MANY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_KEY_HAS_TOO_MANY_ARGS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COUNT_TAKES_1_ARG	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COUNT_TAKES_1_ARG"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULDNOT_FIND_FUNCTION	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULDNOT_FIND_FUNCTION"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNSUPPORTED_ENCODING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNSUPPORTED_ENCODING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PROBLEM_IN_DTM_NEXTSIBLING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PROBLEM_IN_DTM_NEXTSIBLING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_WRITE_TO_EMPTYNODELISTIMPL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_WRITE_TO_EMPTYNODELISTIMPL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SETDOMFACTORY_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SETDOMFACTORY_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PREFIX_MUST_RESOLVE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PREFIX_MUST_RESOLVE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PARSE_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PARSE_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SAX_API_NOT_HANDLED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SAX_API_NOT_HANDLED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_IGNORABLE_WHITESPACE_NOT_HANDLED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_IGNORABLE_WHITESPACE_NOT_HANDLED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_DTM_CANNOT_HANDLE_NODES	TokenNameIdentifier
=	TokenNameEQUAL
"ER_DTM_CANNOT_HANDLE_NODES"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XERCES_CANNOT_HANDLE_NODES	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XERCES_CANNOT_HANDLE_NODES"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XERCES_PARSE_ERROR_DETAILS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XERCES_PARSE_ERROR_DETAILS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XERCES_PARSE_ERROR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XERCES_PARSE_ERROR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INVALID_UTF16_SURROGATE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INVALID_UTF16_SURROGATE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_OIERROR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_OIERROR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_CREATE_URL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_CREATE_URL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XPATH_READOBJECT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XPATH_READOBJECT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FUNCTION_TOKEN_NOT_FOUND	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FUNCTION_TOKEN_NOT_FOUND"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_DEAL_XPATH_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_DEAL_XPATH_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODESET_NOT_MUTABLE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODESET_NOT_MUTABLE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODESETDTM_NOT_MUTABLE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODESETDTM_NOT_MUTABLE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_VAR_NOT_RESOLVABLE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_VAR_NOT_RESOLVABLE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NULL_ERROR_HANDLER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NULL_ERROR_HANDLER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_PROG_ASSERT_UNKNOWN_OPCODE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_PROG_ASSERT_UNKNOWN_OPCODE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ZERO_OR_ONE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ZERO_OR_ONE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ASNODEITERATOR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ASNODEITERATOR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FSB_NOT_SUPPORTED_XSTRINGFORCHARS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FSB_NOT_SUPPORTED_XSTRINGFORCHARS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_COULD_NOT_FIND_VAR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_COULD_NOT_FIND_VAR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XSTRINGFORCHARS_CANNOT_TAKE_STRING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XSTRINGFORCHARS_CANNOT_TAKE_STRING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FASTSTRINGBUFFER_CANNOT_BE_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FASTSTRINGBUFFER_CANNOT_BE_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_TWO_OR_THREE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_TWO_OR_THREE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_VARIABLE_ACCESSED_BEFORE_BIND	TokenNameIdentifier
=	TokenNameEQUAL
"ER_VARIABLE_ACCESSED_BEFORE_BIND"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FSB_CANNOT_TAKE_STRING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FSB_CANNOT_TAKE_STRING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SETTING_WALKER_ROOT_TO_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SETTING_WALKER_ROOT_TO_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODESETDTM_CANNOT_ITERATE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODESETDTM_CANNOT_ITERATE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODESET_CANNOT_ITERATE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODESET_CANNOT_ITERATE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODESETDTM_CANNOT_INDEX	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODESETDTM_CANNOT_INDEX"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NODESET_CANNOT_INDEX	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NODESET_CANNOT_INDEX"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANNOT_CALL_SETSHOULDCACHENODE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANNOT_CALL_SETSHOULDCACHENODE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ONLY_ALLOWS	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ONLY_ALLOWS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNKNOWN_STEP	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNKNOWN_STEP"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_REL_LOC_PATH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_REL_LOC_PATH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_LOC_PATH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_LOC_PATH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_LOC_PATH_AT_END_EXPR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_LOC_PATH_AT_END_EXPR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_LOC_STEP	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_LOC_STEP"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_NODE_TEST	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_NODE_TEST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_STEP_PATTERN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_STEP_PATTERN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXPECTED_REL_PATH_PATTERN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXPECTED_REL_PATH_PATTERN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_BOOLEAN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_BOOLEAN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_SINGLENODE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_SINGLENODE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_GET_SNAPSHOT_LENGTH	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_GET_SNAPSHOT_LENGTH"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NON_ITERATOR_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NON_ITERATOR_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_DOC_MUTATED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_DOC_MUTATED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INVALID_XPATH_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INVALID_XPATH_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EMPTY_XPATH_RESULT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EMPTY_XPATH_RESULT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_INCOMPATIBLE_TYPES	TokenNameIdentifier
=	TokenNameEQUAL
"ER_INCOMPATIBLE_TYPES"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NULL_RESOLVER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NULL_RESOLVER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_CANT_CONVERT_TO_STRING	TokenNameIdentifier
=	TokenNameEQUAL
"ER_CANT_CONVERT_TO_STRING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NON_SNAPSHOT_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NON_SNAPSHOT_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_WRONG_DOCUMENT	TokenNameIdentifier
=	TokenNameEQUAL
"ER_WRONG_DOCUMENT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_WRONG_NODETYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_WRONG_NODETYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XPATH_ERROR	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XPATH_ERROR"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED	TokenNameIdentifier
=	TokenNameEQUAL
"ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_RESOLVE_VARIABLE_RETURNS_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_RESOLVE_VARIABLE_RETURNS_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_UNSUPPORTED_RETURN_TYPE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_UNSUPPORTED_RETURN_TYPE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_SOURCE_RETURN_TYPE_CANNOT_BE_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_SOURCE_RETURN_TYPE_CANNOT_BE_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_ARG_CANNOT_BE_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_ARG_CANNOT_BE_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_OBJECT_MODEL_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_OBJECT_MODEL_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_OBJECT_MODEL_EMPTY	TokenNameIdentifier
=	TokenNameEQUAL
"ER_OBJECT_MODEL_EMPTY"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FEATURE_NAME_NULL	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FEATURE_NAME_NULL"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_FEATURE_UNKNOWN	TokenNameIdentifier
=	TokenNameEQUAL
"ER_FEATURE_UNKNOWN"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_GETTING_NULL_FEATURE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_GETTING_NULL_FEATURE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_GETTING_UNKNOWN_FEATURE	TokenNameIdentifier
=	TokenNameEQUAL
"ER_GETTING_UNKNOWN_FEATURE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NULL_XPATH_FUNCTION_RESOLVER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NULL_XPATH_FUNCTION_RESOLVER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NULL_XPATH_VARIABLE_RESOLVER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NULL_XPATH_VARIABLE_RESOLVER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_LOCALE_NAME_NOT_HANDLED	TokenNameIdentifier
=	TokenNameEQUAL
"WG_LOCALE_NAME_NOT_HANDLED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_PROPERTY_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"WG_PROPERTY_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_DONT_DO_ANYTHING_WITH_NS	TokenNameIdentifier
=	TokenNameEQUAL
"WG_DONT_DO_ANYTHING_WITH_NS"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_SECURITY_EXCEPTION	TokenNameIdentifier
=	TokenNameEQUAL
"WG_SECURITY_EXCEPTION"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_QUO_NO_LONGER_DEFINED	TokenNameIdentifier
=	TokenNameEQUAL
"WG_QUO_NO_LONGER_DEFINED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_NEED_DERIVED_OBJECT_TO_IMPLEMENT_NODETEST	TokenNameIdentifier
=	TokenNameEQUAL
"WG_NEED_DERIVED_OBJECT_TO_IMPLEMENT_NODETEST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_FUNCTION_TOKEN_NOT_FOUND	TokenNameIdentifier
=	TokenNameEQUAL
"WG_FUNCTION_TOKEN_NOT_FOUND"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_COULDNOT_FIND_FUNCTION	TokenNameIdentifier
=	TokenNameEQUAL
"WG_COULDNOT_FIND_FUNCTION"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_CANNOT_MAKE_URL_FROM	TokenNameIdentifier
=	TokenNameEQUAL
"WG_CANNOT_MAKE_URL_FROM"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_EXPAND_ENTITIES_NOT_SUPPORTED	TokenNameIdentifier
=	TokenNameEQUAL
"WG_EXPAND_ENTITIES_NOT_SUPPORTED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_ILLEGAL_VARIABLE_REFERENCE	TokenNameIdentifier
=	TokenNameEQUAL
"WG_ILLEGAL_VARIABLE_REFERENCE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WG_UNSUPPORTED_ENCODING	TokenNameIdentifier
=	TokenNameEQUAL
"WG_UNSUPPORTED_ENCODING"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_DETACH_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_DETACH_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_NUM_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_NUM_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_XSTR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_XSTR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ER_STR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
=	TokenNameEQUAL
"ER_STR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getContents	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
{	TokenNameLBRACE
"ERROR0000"	TokenNameStringLiteral
,	TokenNameCOMMA
"{0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CURRENT_NOT_ALLOWED_IN_MATCH	TokenNameIdentifier
,	TokenNameCOMMA
"Функция current() недопустима в шаблоне для сравнения!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CURRENT_TAKES_NO_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"У функции current() нет аргументов!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_DOCUMENT_REPLACED	TokenNameIdentifier
,	TokenNameCOMMA
"Реализация функции document() заменена на org.apache.xalan.xslt.FuncDocument!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CONTEXT_HAS_NO_OWNERDOC	TokenNameIdentifier
,	TokenNameCOMMA
"В контексте отсутствует документ-владелец!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_LOCALNAME_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"У функции local-name() слишком много аргументов."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NAMESPACEURI_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"У функции namespace-uri() слишком много аргументов."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NORMALIZESPACE_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"У функции normalize-space() слишком много аргументов."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NUMBER_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"У функции number() слишком много аргументов."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NAME_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"У функции name() слишком много аргументов."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_STRING_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"У функции string() слишком много аргументов."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_STRINGLENGTH_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"У функции string-length() слишком много аргументов."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_TRANSLATE_TAKES_3_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"У функции translate() должно быть три аргумента!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNPARSEDENTITYURI_TAKES_1_ARG	TokenNameIdentifier
,	TokenNameCOMMA
"У функции unparsed-entity-uri должен быть один аргумент!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NAMESPACEAXIS_NOT_IMPLEMENTED	TokenNameIdentifier
,	TokenNameCOMMA
"Ось пространства имен еще не реализована!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNKNOWN_AXIS	TokenNameIdentifier
,	TokenNameCOMMA
"Неизвестная ось: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNKNOWN_MATCH_OPERATION	TokenNameIdentifier
,	TokenNameCOMMA
"Неизвестная операция сравнения!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INCORRECT_ARG_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
"Недопустимая длина аргументов при сравнении узла processing-instruction()!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_NUMBER	TokenNameIdentifier
,	TokenNameCOMMA
"Невозможно преобразовать {0} в число"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_NODELIST	TokenNameIdentifier
,	TokenNameCOMMA
"Невозможно преобразовать {0} в NodeList!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_MUTABLENODELIST	TokenNameIdentifier
,	TokenNameCOMMA
"Невозможно преобразовать {0} в NodeSetDTM!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Невозможно преобразовать {0} в тип#{1}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_MATCH_PATTERN	TokenNameIdentifier
,	TokenNameCOMMA
"В getMatchScore ожидался шаблон для сравнения!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULDNOT_GET_VAR_NAMED	TokenNameIdentifier
,	TokenNameCOMMA
"Не удалось получить переменную {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNKNOWN_OPCODE	TokenNameIdentifier
,	TokenNameCOMMA
"Ошибка! Неизвестный код операции: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXTRA_ILLEGAL_TOKENS	TokenNameIdentifier
,	TokenNameCOMMA
"Дополнительные недопустимые маркеры: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_DOUBLE_QUOTE	TokenNameIdentifier
,	TokenNameCOMMA
"Литерал не заключен в кавычки... Ожидались двойные кавычки!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_SINGLE_QUOTE	TokenNameIdentifier
,	TokenNameCOMMA
"Литерал не заключен в кавычки... Ожидались одиночные кавычки!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EMPTY_EXPRESSION	TokenNameIdentifier
,	TokenNameCOMMA
"Пустое выражение!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_BUT_FOUND	TokenNameIdentifier
,	TokenNameCOMMA
"Ожидалось {0}, обнаружено: {1}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INCORRECT_PROGRAMMER_ASSERTION	TokenNameIdentifier
,	TokenNameCOMMA
"Недопустимое программное предположение! - {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_BOOLEAN_ARG_NO_LONGER_OPTIONAL	TokenNameIdentifier
,	TokenNameCOMMA
"В 19990709 XPath аргумент boolean(...) больше не является необязательным."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FOUND_COMMA_BUT_NO_PRECEDING_ARG	TokenNameIdentifier
,	TokenNameCOMMA
"Обнаружена запятая ',' но перед ней отсутствует аргумент!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FOUND_COMMA_BUT_NO_FOLLOWING_ARG	TokenNameIdentifier
,	TokenNameCOMMA
"Обнаружена запятая ',' но после нее отсутствует аргумент!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PREDICATE_ILLEGAL_SYNTAX	TokenNameIdentifier
,	TokenNameCOMMA
"Синтаксис '..[предикат]' или '.[предикат]' недопустим.  Используйте 'self::node()[предикат]'."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ILLEGAL_AXIS_NAME	TokenNameIdentifier
,	TokenNameCOMMA
"Недопустимое имя оси: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNKNOWN_NODETYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Неизвестный тип узла: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PATTERN_LITERAL_NEEDS_BE_QUOTED	TokenNameIdentifier
,	TokenNameCOMMA
"В шаблоне литерал ({0}) должен быть заключен в кавычки!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULDNOT_BE_FORMATTED_TO_NUMBER	TokenNameIdentifier
,	TokenNameCOMMA
"{0} невозможно отформатировать как число!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULDNOT_CREATE_XMLPROCESSORLIAISON	TokenNameIdentifier
,	TokenNameCOMMA
"Невозможно создать XML TransformerFactory Liaison: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_DIDNOT_FIND_XPATH_SELECT_EXP	TokenNameIdentifier
,	TokenNameCOMMA
"Ошибка! Не найдено выражение выбора xpath (-select)."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULDNOT_FIND_ENDOP_AFTER_OPLOCATIONPATH	TokenNameIdentifier
,	TokenNameCOMMA
"Ошибка! После OP_LOCATIONPATH отсутствует ENDOP"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ERROR_OCCURED	TokenNameIdentifier
,	TokenNameCOMMA
"Ошибка!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ILLEGAL_VARIABLE_REFERENCE	TokenNameIdentifier
,	TokenNameCOMMA
"VariableReference для переменной задан вне контекста или без определения!  Имя = {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_AXES_NOT_ALLOWED	TokenNameIdentifier
,	TokenNameCOMMA
"В шаблонах соответствия допустимы только оси child:: и attribute::!  Недопустимые оси = {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_KEY_HAS_TOO_MANY_ARGS	TokenNameIdentifier
,	TokenNameCOMMA
"В key() указано неверное число аргументов."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COUNT_TAKES_1_ARG	TokenNameIdentifier
,	TokenNameCOMMA
"У функции count должен быть один аргумент!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULDNOT_FIND_FUNCTION	TokenNameIdentifier
,	TokenNameCOMMA
"Функция не найдена: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNSUPPORTED_ENCODING	TokenNameIdentifier
,	TokenNameCOMMA
"Неподдерживаемая кодировка: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PROBLEM_IN_DTM_NEXTSIBLING	TokenNameIdentifier
,	TokenNameCOMMA
"Ошибка в DTM в getNextSibling... Попытка восстановления"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_WRITE_TO_EMPTYNODELISTIMPL	TokenNameIdentifier
,	TokenNameCOMMA
"Программная ошибка: запись в EmptyNodeList невозможна."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SETDOMFACTORY_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"setDOMFactory не поддерживается XPathContext!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PREFIX_MUST_RESOLVE	TokenNameIdentifier
,	TokenNameCOMMA
"Префикс должен обеспечивать преобразование в пространство имен: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PARSE_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"Анализ с (InputSource источник) не поддерживается в XPathContext! Не удалось открыть {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SAX_API_NOT_HANDLED	TokenNameIdentifier
,	TokenNameCOMMA
"SAX API characters(char ch[]... не обработан DTM!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_IGNORABLE_WHITESPACE_NOT_HANDLED	TokenNameIdentifier
,	TokenNameCOMMA
"ignorableWhitespace(char ch[]... не обработан DTM!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_DTM_CANNOT_HANDLE_NODES	TokenNameIdentifier
,	TokenNameCOMMA
"DTMLiaison не может обрабатывать узлы типа {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XERCES_CANNOT_HANDLE_NODES	TokenNameIdentifier
,	TokenNameCOMMA
"DOM2Helper не может обрабатывать узлы типа {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XERCES_PARSE_ERROR_DETAILS	TokenNameIdentifier
,	TokenNameCOMMA
"Ошибка DOM2Helper.parse: SystemID - {0} строка - {1}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XERCES_PARSE_ERROR	TokenNameIdentifier
,	TokenNameCOMMA
"Ошибка DOM2Helper.parse"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INVALID_UTF16_SURROGATE	TokenNameIdentifier
,	TokenNameCOMMA
"Обнаружено недопустимое значение UTF-16: {0} ?"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_OIERROR	TokenNameIdentifier
,	TokenNameCOMMA
"Ошибка ввода-вывода"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_CREATE_URL	TokenNameIdentifier
,	TokenNameCOMMA
"Не удалось создать URL для {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XPATH_READOBJECT	TokenNameIdentifier
,	TokenNameCOMMA
"В XPath.readObject: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FUNCTION_TOKEN_NOT_FOUND	TokenNameIdentifier
,	TokenNameCOMMA
"Маркер функции не найден."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_DEAL_XPATH_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Работа с типом XPath невозможна: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODESET_NOT_MUTABLE	TokenNameIdentifier
,	TokenNameCOMMA
"Данный набор NodeSet не является двусторонним"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODESETDTM_NOT_MUTABLE	TokenNameIdentifier
,	TokenNameCOMMA
"Данный набор NodeSetDTM не является двусторонним"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_VAR_NOT_RESOLVABLE	TokenNameIdentifier
,	TokenNameCOMMA
"Невозможно преобразовать переменную: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NULL_ERROR_HANDLER	TokenNameIdentifier
,	TokenNameCOMMA
"Пустой обработчик ошибки"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_PROG_ASSERT_UNKNOWN_OPCODE	TokenNameIdentifier
,	TokenNameCOMMA
"Запись программиста: неизвестный код опции: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ZERO_OR_ONE	TokenNameIdentifier
,	TokenNameCOMMA
"0 или 1"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
,	TokenNameCOMMA
"rtf() не поддерживается XRTreeFragSelectWrapper"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
,	TokenNameCOMMA
"asNodeIterator() не поддерживается XRTreeFragSelectWrapper"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_DETACH_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
,	TokenNameCOMMA
"detach() не поддерживается в XRTreeFragSelectWrapper"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NUM_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
,	TokenNameCOMMA
"num() не поддерживается в XRTreeFragSelectWrapper"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XSTR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
,	TokenNameCOMMA
"xstr() не поддерживается в XRTreeFragSelectWrapper"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_STR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER	TokenNameIdentifier
,	TokenNameCOMMA
"str() не поддерживается в XRTreeFragSelectWrapper"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FSB_NOT_SUPPORTED_XSTRINGFORCHARS	TokenNameIdentifier
,	TokenNameCOMMA
"fsb() не поддерживается XStringForChars"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_COULD_NOT_FIND_VAR	TokenNameIdentifier
,	TokenNameCOMMA
"Переменная {0} не найдена"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XSTRINGFORCHARS_CANNOT_TAKE_STRING	TokenNameIdentifier
,	TokenNameCOMMA
"Аргумент XStringForChars не может быть строкой"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FASTSTRINGBUFFER_CANNOT_BE_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"Аргумент FastStringBuffer не может быть пустым"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_TWO_OR_THREE	TokenNameIdentifier
,	TokenNameCOMMA
"2 или 3"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_VARIABLE_ACCESSED_BEFORE_BIND	TokenNameIdentifier
,	TokenNameCOMMA
"Обращение к переменной до ее связывания!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FSB_CANNOT_TAKE_STRING	TokenNameIdentifier
,	TokenNameCOMMA
"Аргумент XStringForFSB не может быть строкой!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SETTING_WALKER_ROOT_TO_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"  !!!! Ошибка! Корневому каталогу walker присвоено пустое значение!!!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODESETDTM_CANNOT_ITERATE	TokenNameIdentifier
,	TokenNameCOMMA
"Данный NodeSetDTM не может работать с предыдущим узлом!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODESET_CANNOT_ITERATE	TokenNameIdentifier
,	TokenNameCOMMA
"Данный NodeSet не может работать с предыдущим узлом!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODESETDTM_CANNOT_INDEX	TokenNameIdentifier
,	TokenNameCOMMA
"Данный NodeSetDTM не может выполнять функции индексирования и подсчета!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NODESET_CANNOT_INDEX	TokenNameIdentifier
,	TokenNameCOMMA
"Данный NodeSet не может выполнять функции индексирования и подсчета!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANNOT_CALL_SETSHOULDCACHENODE	TokenNameIdentifier
,	TokenNameCOMMA
"Нельзя вызывать setShouldCacheNodes после вызова nextNode!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ONLY_ALLOWS	TokenNameIdentifier
,	TokenNameCOMMA
"Максимальное число аргументов {0} равно {1}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNKNOWN_STEP	TokenNameIdentifier
,	TokenNameCOMMA
"Запись программиста в getNextStepPos: неизвестный stepType: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_REL_LOC_PATH	TokenNameIdentifier
,	TokenNameCOMMA
"Ожидался относительный путь, после которого должен был следовать маркер '/' или '//'."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_LOC_PATH	TokenNameIdentifier
,	TokenNameCOMMA
"Ожидался путь, однако был обнаружен следующий маркер:  {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_LOC_PATH_AT_END_EXPR	TokenNameIdentifier
,	TokenNameCOMMA
"Ожидался путь к расположению, но вместо этого был обнаружен конец выражения XPath. "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_LOC_STEP	TokenNameIdentifier
,	TokenNameCOMMA
"Ожидался шаг расположения, после которого должен был следовать маркер '/' или '//'."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_NODE_TEST	TokenNameIdentifier
,	TokenNameCOMMA
"Ожидался тест узла, совпадающего с NCName:* или QName. "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_STEP_PATTERN	TokenNameIdentifier
,	TokenNameCOMMA
"Ожидался шаблон шага, однако был обнаружен '/'."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXPECTED_REL_PATH_PATTERN	TokenNameIdentifier
,	TokenNameCOMMA
"Ожидался шаблон относительного пути."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_BOOLEAN	TokenNameIdentifier
,	TokenNameCOMMA
"В XPathResult выражения XPath ''{0}'' значение XPathResultType равно {1}, что невозможно преобразовать в булевское  значение. "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_SINGLENODE	TokenNameIdentifier
,	TokenNameCOMMA
"В XPathResult выражения XPath ''{0}'' значение XPathResultType равно {1}, что невозможно преобразовать в узел. Метод getSingleNodeValue применим только к типам ANY_UNORDERED_NODE_TYPE и FIRST_ORDERED_NODE_TYPE. "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_GET_SNAPSHOT_LENGTH	TokenNameIdentifier
,	TokenNameCOMMA
"Метод getSnapshotLength невозможно вызвать для XPathResult выражения XPath ''{0}'', так как его XPathResultType является {1}. Этот метод применим только к типам UNORDERED_NODE_SNAPSHOT_TYPE и ORDERED_NODE_SNAPSHOT_TYPE. "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NON_ITERATOR_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Метод iterateNext невозможно вызвать для XPathResult выражения XPath ''{0}'', так как его XPathResultType является {1}. Этот метод применим только к типам UNORDERED_NODE_ITERATOR_TYPE и ORDERED_NODE_ITERATOR_TYPE. "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_DOC_MUTATED	TokenNameIdentifier
,	TokenNameCOMMA
"С момента получения результата документ был изменен. Итератор недопустим."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INVALID_XPATH_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Недопустимый тип аргумента XPath: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EMPTY_XPATH_RESULT	TokenNameIdentifier
,	TokenNameCOMMA
"Пустой объект результата XPath"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_INCOMPATIBLE_TYPES	TokenNameIdentifier
,	TokenNameCOMMA
"XPathResult выражения XPath ''{0}'' имеет XPathResultType {1}, которое невозможно преобразовать в указанный XPathResultType {2}. "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NULL_RESOLVER	TokenNameIdentifier
,	TokenNameCOMMA
"Невозможно преобразовать префикс с помощью пустого преобразователя."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_TO_STRING	TokenNameIdentifier
,	TokenNameCOMMA
"В XPathResult выражения XPath ''{0}'' значение XPathResultType равно {1}, что невозможно преобразовать в строковое значение. "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NON_SNAPSHOT_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Метод snapshotItem невозможно вызвать для XPathResult выражения XPath ''{0}'', так как его XPathResultType является {1}. Этот метод применим только к типам UNORDERED_NODE_SNAPSHOT_TYPE и ORDERED_NODE_SNAPSHOT_TYPE. "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_WRONG_DOCUMENT	TokenNameIdentifier
,	TokenNameCOMMA
"Узел контекста не относится к документу, связанному с данным XPathEvaluator."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_WRONG_NODETYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Тип узла контекста не поддерживается."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_XPATH_ERROR	TokenNameIdentifier
,	TokenNameCOMMA
"Неизвестная ошибка в XPath."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_CANT_CONVERT_XPATHRESULTTYPE_TO_NUMBER	TokenNameIdentifier
,	TokenNameCOMMA
"В XPathResult выражения XPath ''{0}'' значение XPathResultType равно {1}, что невозможно преобразовать в числовое значение. "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED	TokenNameIdentifier
,	TokenNameCOMMA
"Функция расширения: невозможно вызвать ''{0}'', когда для функции XMLConstants.FEATURE_SECURE_PROCESSING задано значение true. "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_RESOLVE_VARIABLE_RETURNS_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"resolveVariable для переменной {0} вернула пустое значение. "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_UNSUPPORTED_RETURN_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"Неподдерживаемый тип возврата: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_SOURCE_RETURN_TYPE_CANNOT_BE_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"Источник и/или тип возврата не может быть пустым"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_ARG_CANNOT_BE_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"Аргумент {0} не может быть пустым"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_OBJECT_MODEL_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"Невозможно вызвать {0}#isObjectModelSupported( строка objectModel ) при objectModel == null"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_OBJECT_MODEL_EMPTY	TokenNameIdentifier
,	TokenNameCOMMA
"Невозможно вызвать {0}#isObjectModelSupported( строка objectModel ) при objectModel == """	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FEATURE_NAME_NULL	TokenNameIdentifier
,	TokenNameCOMMA
"Попытка задать функцию с пустым именем: {0}#setFeature( null, {1})"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_FEATURE_UNKNOWN	TokenNameIdentifier
,	TokenNameCOMMA
"Попытка задать неизвестную функцию "{0}":{1}#setFeature({0},{2})"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_GETTING_NULL_FEATURE	TokenNameIdentifier
,	TokenNameCOMMA
"Попытка задать функцию с пустым именем: {0}#getFeature(null)"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_GETTING_UNKNOWN_FEATURE	TokenNameIdentifier
,	TokenNameCOMMA
"Попытка получить неизвестную функцию "{0}":{1}#getFeature({0})"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NULL_XPATH_FUNCTION_RESOLVER	TokenNameIdentifier
,	TokenNameCOMMA
"Попытка задать пустой XPathFunctionResolver:{0}#setXPathFunctionResolver(null)"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
ER_NULL_XPATH_VARIABLE_RESOLVER	TokenNameIdentifier
,	TokenNameCOMMA
"Попытка задать пустой XPathVariableResolver:{0}#setXPathVariableResolver(null)"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_LOCALE_NAME_NOT_HANDLED	TokenNameIdentifier
,	TokenNameCOMMA
"Локальное имя в функции format-number еще не обработано!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_PROPERTY_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"Свойство XSL не поддерживается: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_DONT_DO_ANYTHING_WITH_NS	TokenNameIdentifier
,	TokenNameCOMMA
"Не выполняйте никаких операций с пространством имен {0} в свойстве: {1}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_SECURITY_EXCEPTION	TokenNameIdentifier
,	TokenNameCOMMA
"SecurityException при попытке обращения к системному свойству XSL: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_QUO_NO_LONGER_DEFINED	TokenNameIdentifier
,	TokenNameCOMMA
"Старый синтаксис: quo(...) больше не определен в XPath."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_NEED_DERIVED_OBJECT_TO_IMPLEMENT_NODETEST	TokenNameIdentifier
,	TokenNameCOMMA
"Для реализации nodeTest в XPath необходим производный объект!"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_FUNCTION_TOKEN_NOT_FOUND	TokenNameIdentifier
,	TokenNameCOMMA
"Маркер функции не найден."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_COULDNOT_FIND_FUNCTION	TokenNameIdentifier
,	TokenNameCOMMA
"Функция не найдена: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_CANNOT_MAKE_URL_FROM	TokenNameIdentifier
,	TokenNameCOMMA
"Невозможно создать URL из: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_EXPAND_ENTITIES_NOT_SUPPORTED	TokenNameIdentifier
,	TokenNameCOMMA
"Опция -E не поддерживается анализатором DTM"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_ILLEGAL_VARIABLE_REFERENCE	TokenNameIdentifier
,	TokenNameCOMMA
"VariableReference для переменной задан вне контекста или без определения!  Имя = {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
WG_UNSUPPORTED_ENCODING	TokenNameIdentifier
,	TokenNameCOMMA
"Неподдерживаемая кодировка: {0}"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"ui_language"	TokenNameStringLiteral
,	TokenNameCOMMA
"en"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"help_language"	TokenNameStringLiteral
,	TokenNameCOMMA
"en"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"language"	TokenNameStringLiteral
,	TokenNameCOMMA
"en"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"BAD_CODE"	TokenNameStringLiteral
,	TokenNameCOMMA
"Параметр createMessage лежит вне допустимого диапазона"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"FORMAT_FAILED"	TokenNameStringLiteral
,	TokenNameCOMMA
"Исключительная ситуация при вызове messageFormat"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"version"	TokenNameStringLiteral
,	TokenNameCOMMA
">>>>>>> Версия Xalan "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"version2"	TokenNameStringLiteral
,	TokenNameCOMMA
"<<<<<<<"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"yes"	TokenNameStringLiteral
,	TokenNameCOMMA
"да"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"line"	TokenNameStringLiteral
,	TokenNameCOMMA
"Номер строки "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"column"	TokenNameStringLiteral
,	TokenNameCOMMA
"Номер столбца "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"xsldone"	TokenNameStringLiteral
,	TokenNameCOMMA
"XSLProcessor: выполнено"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"xpath_option"	TokenNameStringLiteral
,	TokenNameCOMMA
"Опции xpath: "	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"optionIN"	TokenNameStringLiteral
,	TokenNameCOMMA
"   [-in inputXMLURL]"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"optionSelect"	TokenNameStringLiteral
,	TokenNameCOMMA
"   [-select выражение xpath]"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"optionMatch"	TokenNameStringLiteral
,	TokenNameCOMMA
"   [-match шаблон сравнения (для диагностики)]"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"optionAnyExpr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Или просто укажите выражение xpath для создания диагностического дампа"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"noParsermsg1"	TokenNameStringLiteral
,	TokenNameCOMMA
"В процессе XSL обнаружены ошибки."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"noParsermsg2"	TokenNameStringLiteral
,	TokenNameCOMMA
"** Анализатор не найден **"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"noParsermsg3"	TokenNameStringLiteral
,	TokenNameCOMMA
"Проверьте значение classpath."	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"noParsermsg4"	TokenNameStringLiteral
,	TokenNameCOMMA
"Если у вас нет анализатора XML Parser for Java фирмы IBM, вы можете загрузить его с сайта"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"noParsermsg5"	TokenNameStringLiteral
,	TokenNameCOMMA
"IBM AlphaWorks: http://www.alphaworks.ibm.com/formula/xml"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"gtone"	TokenNameStringLiteral
,	TokenNameCOMMA
">1"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"zero"	TokenNameStringLiteral
,	TokenNameCOMMA
"0"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"one"	TokenNameStringLiteral
,	TokenNameCOMMA
"1"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"two"	TokenNameStringLiteral
,	TokenNameCOMMA
"2"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
"three"	TokenNameStringLiteral
,	TokenNameCOMMA
"3"	TokenNameStringLiteral
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
BAD_CODE	TokenNameIdentifier
=	TokenNameEQUAL
"BAD_CODE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
FORMAT_FAILED	TokenNameIdentifier
=	TokenNameEQUAL
"FORMAT_FAILED"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ERROR_RESOURCES	TokenNameIdentifier
=	TokenNameEQUAL
"org.apache.xpath.res.XPATHErrorResources"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ERROR_STRING	TokenNameIdentifier
=	TokenNameEQUAL
"Ошибка"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ERROR_HEADER	TokenNameIdentifier
=	TokenNameEQUAL
"Ошибка: "	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WARNING_HEADER	TokenNameIdentifier
=	TokenNameEQUAL
"Предупреждение: "	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
XSL_HEADER	TokenNameIdentifier
=	TokenNameEQUAL
"XSL "	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
XML_HEADER	TokenNameIdentifier
=	TokenNameEQUAL
"XML "	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
QUERY_HEADER	TokenNameIdentifier
=	TokenNameEQUAL
"PATTERN "	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
XPATHErrorResources	TokenNameIdentifier
loadResourceBundle	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
className	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MissingResourceException	TokenNameIdentifier
{	TokenNameLBRACE
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
=	TokenNameEQUAL
Locale	TokenNameIdentifier
.	TokenNameDOT
getDefault	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
suffix	TokenNameIdentifier
=	TokenNameEQUAL
getResourceSuffix	TokenNameIdentifier
(	TokenNameLPAREN
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
)	TokenNameRPAREN
ResourceBundle	TokenNameIdentifier
.	TokenNameDOT
getBundle	TokenNameIdentifier
(	TokenNameLPAREN
className	TokenNameIdentifier
+	TokenNamePLUS
suffix	TokenNameIdentifier
,	TokenNameCOMMA
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MissingResourceException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
XPATHErrorResources	TokenNameIdentifier
)	TokenNameRPAREN
ResourceBundle	TokenNameIdentifier
.	TokenNameDOT
getBundle	TokenNameIdentifier
(	TokenNameLPAREN
className	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
"en"	TokenNameStringLiteral
,	TokenNameCOMMA
"US"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
MissingResourceException	TokenNameIdentifier
e2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
MissingResourceException	TokenNameIdentifier
(	TokenNameLPAREN
"Could not load any resource bundles."	TokenNameStringLiteral
,	TokenNameCOMMA
className	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
getResourceSuffix	TokenNameIdentifier
(	TokenNameLPAREN
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
suffix	TokenNameIdentifier
=	TokenNameEQUAL
"_"	TokenNameStringLiteral
+	TokenNamePLUS
locale	TokenNameIdentifier
.	TokenNameDOT
getLanguage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
country	TokenNameIdentifier
=	TokenNameEQUAL
locale	TokenNameIdentifier
.	TokenNameDOT
getCountry	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
country	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"TW"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
suffix	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
"_"	TokenNameStringLiteral
+	TokenNamePLUS
country	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
suffix	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
