package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
taskdefs	TokenNameIdentifier
.	TokenNameDOT
optional	TokenNameIdentifier
.	TokenNameDOT
jsp	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
StringUtils	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
JspNameMangler	TokenNameIdentifier
implements	TokenNameimplements
JspMangler	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
keywords	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"assert"	TokenNameStringLiteral
,	TokenNameCOMMA
"abstract"	TokenNameStringLiteral
,	TokenNameCOMMA
"boolean"	TokenNameStringLiteral
,	TokenNameCOMMA
"break"	TokenNameStringLiteral
,	TokenNameCOMMA
"byte"	TokenNameStringLiteral
,	TokenNameCOMMA
"case"	TokenNameStringLiteral
,	TokenNameCOMMA
"catch"	TokenNameStringLiteral
,	TokenNameCOMMA
"char"	TokenNameStringLiteral
,	TokenNameCOMMA
"class"	TokenNameStringLiteral
,	TokenNameCOMMA
"const"	TokenNameStringLiteral
,	TokenNameCOMMA
"continue"	TokenNameStringLiteral
,	TokenNameCOMMA
"default"	TokenNameStringLiteral
,	TokenNameCOMMA
"do"	TokenNameStringLiteral
,	TokenNameCOMMA
"double"	TokenNameStringLiteral
,	TokenNameCOMMA
"else"	TokenNameStringLiteral
,	TokenNameCOMMA
"extends"	TokenNameStringLiteral
,	TokenNameCOMMA
"final"	TokenNameStringLiteral
,	TokenNameCOMMA
"finally"	TokenNameStringLiteral
,	TokenNameCOMMA
"float"	TokenNameStringLiteral
,	TokenNameCOMMA
"for"	TokenNameStringLiteral
,	TokenNameCOMMA
"goto"	TokenNameStringLiteral
,	TokenNameCOMMA
"if"	TokenNameStringLiteral
,	TokenNameCOMMA
"implements"	TokenNameStringLiteral
,	TokenNameCOMMA
"import"	TokenNameStringLiteral
,	TokenNameCOMMA
"instanceof"	TokenNameStringLiteral
,	TokenNameCOMMA
"int"	TokenNameStringLiteral
,	TokenNameCOMMA
"interface"	TokenNameStringLiteral
,	TokenNameCOMMA
"long"	TokenNameStringLiteral
,	TokenNameCOMMA
"native"	TokenNameStringLiteral
,	TokenNameCOMMA
"new"	TokenNameStringLiteral
,	TokenNameCOMMA
"package"	TokenNameStringLiteral
,	TokenNameCOMMA
"private"	TokenNameStringLiteral
,	TokenNameCOMMA
"protected"	TokenNameStringLiteral
,	TokenNameCOMMA
"public"	TokenNameStringLiteral
,	TokenNameCOMMA
"return"	TokenNameStringLiteral
,	TokenNameCOMMA
"short"	TokenNameStringLiteral
,	TokenNameCOMMA
"static"	TokenNameStringLiteral
,	TokenNameCOMMA
"super"	TokenNameStringLiteral
,	TokenNameCOMMA
"switch"	TokenNameStringLiteral
,	TokenNameCOMMA
"synchronized"	TokenNameStringLiteral
,	TokenNameCOMMA
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
"throw"	TokenNameStringLiteral
,	TokenNameCOMMA
"throws"	TokenNameStringLiteral
,	TokenNameCOMMA
"transient"	TokenNameStringLiteral
,	TokenNameCOMMA
"try"	TokenNameStringLiteral
,	TokenNameCOMMA
"void"	TokenNameStringLiteral
,	TokenNameCOMMA
"volatile"	TokenNameStringLiteral
,	TokenNameCOMMA
"while"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
String	TokenNameIdentifier
mapJspToJavaName	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
jspFile	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
mapJspToBaseName	TokenNameIdentifier
(	TokenNameLPAREN
jspFile	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
".java"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
mapJspToBaseName	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
jspFile	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
className	TokenNameIdentifier
;	TokenNameSEMICOLON
className	TokenNameIdentifier
=	TokenNameEQUAL
stripExtension	TokenNameIdentifier
(	TokenNameLPAREN
jspFile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
keywords	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
className	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
keywords	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
className	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
"%"	TokenNameStringLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
StringBuffer	TokenNameIdentifier
modifiedClassName	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
className	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
firstChar	TokenNameIdentifier
=	TokenNameEQUAL
className	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
Character	TokenNameIdentifier
.	TokenNameDOT
isJavaIdentifierStart	TokenNameIdentifier
(	TokenNameLPAREN
firstChar	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
modifiedClassName	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
firstChar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
modifiedClassName	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
mangleChar	TokenNameIdentifier
(	TokenNameLPAREN
firstChar	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
className	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
subChar	TokenNameIdentifier
=	TokenNameEQUAL
className	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
Character	TokenNameIdentifier
.	TokenNameDOT
isJavaIdentifierPart	TokenNameIdentifier
(	TokenNameLPAREN
subChar	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
modifiedClassName	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
subChar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
modifiedClassName	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
mangleChar	TokenNameIdentifier
(	TokenNameLPAREN
subChar	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
modifiedClassName	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
stripExtension	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
jspFile	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
StringUtils	TokenNameIdentifier
.	TokenNameDOT
removeSuffix	TokenNameIdentifier
(	TokenNameLPAREN
jspFile	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
".jsp"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
String	TokenNameIdentifier
mangleChar	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
File	TokenNameIdentifier
.	TokenNameDOT
separatorChar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
'/'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
toHexString	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
nzeros	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
-	TokenNameMINUS
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
result	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
'_'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
nzeros	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'0'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
resultIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
nzeros	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
s	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
resultIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
mapPath	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
path	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
