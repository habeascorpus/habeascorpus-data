package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
taskdefs	TokenNameIdentifier
.	TokenNameDOT
optional	TokenNameIdentifier
.	TokenNameDOT
depend	TokenNameIdentifier
.	TokenNameDOT
constantpool	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
DataInputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
abstract	TokenNameabstract
class	TokenNameclass
ConstantPoolEntry	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONSTANT_UTF8	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONSTANT_INTEGER	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONSTANT_FLOAT	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONSTANT_LONG	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONSTANT_DOUBLE	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONSTANT_CLASS	TokenNameIdentifier
=	TokenNameEQUAL
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONSTANT_STRING	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONSTANT_FIELDREF	TokenNameIdentifier
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONSTANT_METHODREF	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONSTANT_INTERFACEMETHODREF	TokenNameIdentifier
=	TokenNameEQUAL
11	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONSTANT_NAMEANDTYPE	TokenNameIdentifier
=	TokenNameEQUAL
12	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
tag	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
numEntries	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
resolved	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ConstantPoolEntry	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
tagValue	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
entries	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tag	TokenNameIdentifier
=	TokenNameEQUAL
tagValue	TokenNameIdentifier
;	TokenNameSEMICOLON
numEntries	TokenNameIdentifier
=	TokenNameEQUAL
entries	TokenNameIdentifier
;	TokenNameSEMICOLON
resolved	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
ConstantPoolEntry	TokenNameIdentifier
readEntry	TokenNameIdentifier
(	TokenNameLPAREN
DataInputStream	TokenNameIdentifier
cpStream	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
ConstantPoolEntry	TokenNameIdentifier
cpInfo	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
cpTag	TokenNameIdentifier
=	TokenNameEQUAL
cpStream	TokenNameIdentifier
.	TokenNameDOT
readUnsignedByte	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
cpTag	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
CONSTANT_UTF8	TokenNameIdentifier
:	TokenNameCOLON
cpInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Utf8CPInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CONSTANT_INTEGER	TokenNameIdentifier
:	TokenNameCOLON
cpInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IntegerCPInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CONSTANT_FLOAT	TokenNameIdentifier
:	TokenNameCOLON
cpInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FloatCPInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CONSTANT_LONG	TokenNameIdentifier
:	TokenNameCOLON
cpInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LongCPInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CONSTANT_DOUBLE	TokenNameIdentifier
:	TokenNameCOLON
cpInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DoubleCPInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CONSTANT_CLASS	TokenNameIdentifier
:	TokenNameCOLON
cpInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ClassCPInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CONSTANT_STRING	TokenNameIdentifier
:	TokenNameCOLON
cpInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringCPInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CONSTANT_FIELDREF	TokenNameIdentifier
:	TokenNameCOLON
cpInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FieldRefCPInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CONSTANT_METHODREF	TokenNameIdentifier
:	TokenNameCOLON
cpInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MethodRefCPInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CONSTANT_INTERFACEMETHODREF	TokenNameIdentifier
:	TokenNameCOLON
cpInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
InterfaceMethodRefCPInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CONSTANT_NAMEANDTYPE	TokenNameIdentifier
:	TokenNameCOLON
cpInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NameAndTypeCPInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
ClassFormatError	TokenNameIdentifier
(	TokenNameLPAREN
"Invalid Constant Pool entry Type "	TokenNameStringLiteral
+	TokenNamePLUS
cpTag	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cpInfo	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
cpStream	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
cpInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isResolved	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
resolved	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
resolve	TokenNameIdentifier
(	TokenNameLPAREN
ConstantPool	TokenNameIdentifier
constantPool	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
resolved	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
abstract	TokenNameabstract
void	TokenNamevoid
read	TokenNameIdentifier
(	TokenNameLPAREN
DataInputStream	TokenNameIdentifier
cpStream	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
int	TokenNameint
getTag	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
tag	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
int	TokenNameint
getNumEntries	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
numEntries	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
