package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Base64Converter	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
BYTE	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
WORD	TokenNameIdentifier
=	TokenNameEQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
BYTE_MASK	TokenNameIdentifier
=	TokenNameEQUAL
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
POS_0_MASK	TokenNameIdentifier
=	TokenNameEQUAL
0x0000003F	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
POS_1_MASK	TokenNameIdentifier
=	TokenNameEQUAL
0x00000FC0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
POS_1_SHIFT	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
POS_2_MASK	TokenNameIdentifier
=	TokenNameEQUAL
0x0003F000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
POS_2_SHIFT	TokenNameIdentifier
=	TokenNameEQUAL
12	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
POS_3_MASK	TokenNameIdentifier
=	TokenNameEQUAL
0x00FC0000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
POS_3_SHIFT	TokenNameIdentifier
=	TokenNameEQUAL
18	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ALPHABET	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
'A'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'B'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'C'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'D'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'E'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'F'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'G'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'H'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'I'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'J'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'K'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'L'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'M'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'N'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'O'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'P'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Q'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'R'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'S'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'T'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'U'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'V'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'W'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'X'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Y'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'Z'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'a'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'b'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'c'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'd'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'e'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'f'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'g'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'h'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'i'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'j'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'k'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'l'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'm'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'n'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'o'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'p'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'q'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'r'	TokenNameCharacterLiteral
,	TokenNameCOMMA
's'	TokenNameCharacterLiteral
,	TokenNameCOMMA
't'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'u'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'v'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'w'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'x'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'y'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'z'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'0'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'1'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'2'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'3'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'4'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'5'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'6'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'7'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'8'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'9'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'+'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'/'	TokenNameCharacterLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
alphabet	TokenNameIdentifier
=	TokenNameEQUAL
ALPHABET	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
String	TokenNameIdentifier
encode	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
encode	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
getBytes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
encode	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
octetString	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
bits24	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bits6	TokenNameIdentifier
;	TokenNameSEMICOLON
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
out	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
octetString	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
/	TokenNameDIVIDE
3	TokenNameIntegerLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
*	TokenNameMULTIPLY
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
outIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
octetString	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bits24	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
octetString	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
BYTE_MASK	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
WORD	TokenNameIdentifier
;	TokenNameSEMICOLON
bits24	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
octetString	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
&	TokenNameAND
BYTE_MASK	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
BYTE	TokenNameIdentifier
;	TokenNameSEMICOLON
bits24	TokenNameIdentifier
|=	TokenNameOR_EQUAL
octetString	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bits6	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bits24	TokenNameIdentifier
&	TokenNameAND
POS_3_MASK	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
POS_3_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
out	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
ALPHABET	TokenNameIdentifier
[	TokenNameLBRACKET
bits6	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bits6	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bits24	TokenNameIdentifier
&	TokenNameAND
POS_2_MASK	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
POS_2_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
out	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
ALPHABET	TokenNameIdentifier
[	TokenNameLBRACKET
bits6	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bits6	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bits24	TokenNameIdentifier
&	TokenNameAND
POS_1_MASK	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
POS_1_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
out	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
ALPHABET	TokenNameIdentifier
[	TokenNameLBRACKET
bits6	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bits6	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bits24	TokenNameIdentifier
&	TokenNameAND
POS_0_MASK	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
ALPHABET	TokenNameIdentifier
[	TokenNameLBRACKET
bits6	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
octetString	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bits24	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
octetString	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
BYTE_MASK	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
WORD	TokenNameIdentifier
;	TokenNameSEMICOLON
bits24	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
octetString	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
BYTE_MASK	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
BYTE	TokenNameIdentifier
;	TokenNameSEMICOLON
bits6	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bits24	TokenNameIdentifier
&	TokenNameAND
POS_3_MASK	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
POS_3_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
out	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
ALPHABET	TokenNameIdentifier
[	TokenNameLBRACKET
bits6	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bits6	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bits24	TokenNameIdentifier
&	TokenNameAND
POS_2_MASK	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
POS_2_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
out	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
ALPHABET	TokenNameIdentifier
[	TokenNameLBRACKET
bits6	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bits6	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bits24	TokenNameIdentifier
&	TokenNameAND
POS_1_MASK	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
POS_1_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
out	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
ALPHABET	TokenNameIdentifier
[	TokenNameLBRACKET
bits6	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
out	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'='	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
octetString	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
bits24	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
octetString	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
BYTE_MASK	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
WORD	TokenNameIdentifier
;	TokenNameSEMICOLON
bits6	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bits24	TokenNameIdentifier
&	TokenNameAND
POS_3_MASK	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
POS_3_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
out	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
ALPHABET	TokenNameIdentifier
[	TokenNameLBRACKET
bits6	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bits6	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bits24	TokenNameIdentifier
&	TokenNameAND
POS_2_MASK	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
POS_2_SHIFT	TokenNameIdentifier
;	TokenNameSEMICOLON
out	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
ALPHABET	TokenNameIdentifier
[	TokenNameLBRACKET
bits6	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
out	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'='	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
out	TokenNameIdentifier
[	TokenNameLBRACKET
outIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'='	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
out	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
