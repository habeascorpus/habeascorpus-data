package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
types	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
BuildException	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Quantifier	TokenNameIdentifier
extends	TokenNameextends
EnumeratedAttribute	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
VALUES	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"all"	TokenNameStringLiteral
,	TokenNameCOMMA
"each"	TokenNameStringLiteral
,	TokenNameCOMMA
"every"	TokenNameStringLiteral
,	TokenNameCOMMA
"any"	TokenNameStringLiteral
,	TokenNameCOMMA
"some"	TokenNameStringLiteral
,	TokenNameCOMMA
"one"	TokenNameStringLiteral
,	TokenNameCOMMA
"majority"	TokenNameStringLiteral
,	TokenNameCOMMA
"most"	TokenNameStringLiteral
,	TokenNameCOMMA
"none"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Quantifier	TokenNameIdentifier
ALL	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Quantifier	TokenNameIdentifier
(	TokenNameLPAREN
"all"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Quantifier	TokenNameIdentifier
ANY	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Quantifier	TokenNameIdentifier
(	TokenNameLPAREN
"any"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Quantifier	TokenNameIdentifier
ONE	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Quantifier	TokenNameIdentifier
(	TokenNameLPAREN
"one"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Quantifier	TokenNameIdentifier
MAJORITY	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Quantifier	TokenNameIdentifier
(	TokenNameLPAREN
"majority"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Quantifier	TokenNameIdentifier
NONE	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Quantifier	TokenNameIdentifier
(	TokenNameLPAREN
"none"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
abstract	TokenNameabstract
static	TokenNamestatic
class	TokenNameclass
Predicate	TokenNameIdentifier
{	TokenNameLBRACE
abstract	TokenNameabstract
boolean	TokenNameboolean
eval	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
f	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Predicate	TokenNameIdentifier
ALL_PRED	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Predicate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
eval	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
f	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
f	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Predicate	TokenNameIdentifier
ANY_PRED	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Predicate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
eval	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
f	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
t	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Predicate	TokenNameIdentifier
ONE_PRED	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Predicate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
eval	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
f	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
t	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Predicate	TokenNameIdentifier
MAJORITY_PRED	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Predicate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
eval	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
f	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
t	TokenNameIdentifier
>	TokenNameGREATER
f	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Predicate	TokenNameIdentifier
NONE_PRED	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Predicate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
eval	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
f	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
t	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Predicate	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
PREDS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Predicate	TokenNameIdentifier
[	TokenNameLBRACKET
VALUES	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
PREDS	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ALL_PRED	TokenNameIdentifier
;	TokenNameSEMICOLON
PREDS	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ALL_PRED	TokenNameIdentifier
;	TokenNameSEMICOLON
PREDS	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ALL_PRED	TokenNameIdentifier
;	TokenNameSEMICOLON
PREDS	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ANY_PRED	TokenNameIdentifier
;	TokenNameSEMICOLON
PREDS	TokenNameIdentifier
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ANY_PRED	TokenNameIdentifier
;	TokenNameSEMICOLON
PREDS	TokenNameIdentifier
[	TokenNameLBRACKET
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ONE_PRED	TokenNameIdentifier
;	TokenNameSEMICOLON
PREDS	TokenNameIdentifier
[	TokenNameLBRACKET
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
MAJORITY_PRED	TokenNameIdentifier
;	TokenNameSEMICOLON
PREDS	TokenNameIdentifier
[	TokenNameLBRACKET
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
MAJORITY_PRED	TokenNameIdentifier
;	TokenNameSEMICOLON
PREDS	TokenNameIdentifier
[	TokenNameLBRACKET
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
NONE_PRED	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Quantifier	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
Quantifier	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setValue	TokenNameIdentifier
(	TokenNameLPAREN
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getValues	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
VALUES	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
evaluate	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
b	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
t	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
b	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
b	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
t	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
evaluate	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
t	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
evaluate	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
f	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
getIndex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
BuildException	TokenNameIdentifier
(	TokenNameLPAREN
"Quantifier value not set."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
PREDS	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
eval	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
,	TokenNameCOMMA
f	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
