package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
AntClassLoader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
BuildException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
ScriptFixBSFPath	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
UTIL_OPTIONAL_PACKAGE	TokenNameIdentifier
=	TokenNameEQUAL
"org.apache.tools.ant.util.optional"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
BSF_PACKAGE	TokenNameIdentifier
=	TokenNameEQUAL
"org.apache.bsf"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
BSF_MANAGER	TokenNameIdentifier
=	TokenNameEQUAL
BSF_PACKAGE	TokenNameIdentifier
+	TokenNamePLUS
".BSFManager"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
BSF_SCRIPT_RUNNER	TokenNameIdentifier
=	TokenNameEQUAL
UTIL_OPTIONAL_PACKAGE	TokenNameIdentifier
+	TokenNamePLUS
".ScriptRunner"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BSF_LANGUAGES	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"js"	TokenNameStringLiteral
,	TokenNameCOMMA
"org.mozilla.javascript.Scriptable"	TokenNameStringLiteral
,	TokenNameCOMMA
"javascript"	TokenNameStringLiteral
,	TokenNameCOMMA
"org.mozilla.javascript.Scriptable"	TokenNameStringLiteral
,	TokenNameCOMMA
"jacl"	TokenNameStringLiteral
,	TokenNameCOMMA
"tcl.lang.Interp"	TokenNameStringLiteral
,	TokenNameCOMMA
"netrexx"	TokenNameStringLiteral
,	TokenNameCOMMA
"netrexx.lang.Rexx"	TokenNameStringLiteral
,	TokenNameCOMMA
"nrx"	TokenNameStringLiteral
,	TokenNameCOMMA
"netrexx.lang.Rexx"	TokenNameStringLiteral
,	TokenNameCOMMA
"jython"	TokenNameStringLiteral
,	TokenNameCOMMA
"org.python.core.Py"	TokenNameStringLiteral
,	TokenNameCOMMA
"py"	TokenNameStringLiteral
,	TokenNameCOMMA
"org.python.core.Py"	TokenNameStringLiteral
,	TokenNameCOMMA
"xslt"	TokenNameStringLiteral
,	TokenNameCOMMA
"org.apache.xpath.objects.XObject"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Map	TokenNameIdentifier
BSF_LANGUAGE_MAP	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
BSF_LANGUAGES	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
BSF_LANGUAGE_MAP	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
BSF_LANGUAGES	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
BSF_LANGUAGES	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
File	TokenNameIdentifier
getClassSource	TokenNameIdentifier
(	TokenNameLPAREN
ClassLoader	TokenNameIdentifier
loader	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
className	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
LoaderUtils	TokenNameIdentifier
.	TokenNameDOT
getResourceSource	TokenNameIdentifier
(	TokenNameLPAREN
loader	TokenNameIdentifier
,	TokenNameCOMMA
LoaderUtils	TokenNameIdentifier
.	TokenNameDOT
classNameToResource	TokenNameIdentifier
(	TokenNameLPAREN
className	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
File	TokenNameIdentifier
getClassSource	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
className	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getClassSource	TokenNameIdentifier
(	TokenNameLPAREN
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getClassLoader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
className	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
fixClassLoader	TokenNameIdentifier
(	TokenNameLPAREN
ClassLoader	TokenNameIdentifier
loader	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
language	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
loader	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getClassLoader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
(	TokenNameLPAREN
loader	TokenNameIdentifier
instanceof	TokenNameinstanceof
AntClassLoader	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ClassLoader	TokenNameIdentifier
myLoader	TokenNameIdentifier
=	TokenNameEQUAL
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getClassLoader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
AntClassLoader	TokenNameIdentifier
fixLoader	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
AntClassLoader	TokenNameIdentifier
)	TokenNameRPAREN
loader	TokenNameIdentifier
;	TokenNameSEMICOLON
File	TokenNameIdentifier
bsfSource	TokenNameIdentifier
=	TokenNameEQUAL
getClassSource	TokenNameIdentifier
(	TokenNameLPAREN
BSF_MANAGER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
needMoveRunner	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
bsfSource	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
languageClassName	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
BSF_LANGUAGE_MAP	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
language	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
needMoveBsf	TokenNameIdentifier
=	TokenNameEQUAL
bsfSource	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
languageClassName	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
!	TokenNameNOT
LoaderUtils	TokenNameIdentifier
.	TokenNameDOT
classExists	TokenNameIdentifier
(	TokenNameLPAREN
myLoader	TokenNameIdentifier
,	TokenNameCOMMA
languageClassName	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
LoaderUtils	TokenNameIdentifier
.	TokenNameDOT
classExists	TokenNameIdentifier
(	TokenNameLPAREN
loader	TokenNameIdentifier
,	TokenNameCOMMA
languageClassName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
needMoveRunner	TokenNameIdentifier
=	TokenNameEQUAL
needMoveRunner	TokenNameIdentifier
||	TokenNameOR_OR
needMoveBsf	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
bsfSource	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
bsfSource	TokenNameIdentifier
=	TokenNameEQUAL
getClassSource	TokenNameIdentifier
(	TokenNameLPAREN
loader	TokenNameIdentifier
,	TokenNameCOMMA
BSF_MANAGER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
bsfSource	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
BuildException	TokenNameIdentifier
(	TokenNameLPAREN
"Unable to find BSF classes for scripting"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
needMoveBsf	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fixLoader	TokenNameIdentifier
.	TokenNameDOT
addPathComponent	TokenNameIdentifier
(	TokenNameLPAREN
bsfSource	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fixLoader	TokenNameIdentifier
.	TokenNameDOT
addLoaderPackageRoot	TokenNameIdentifier
(	TokenNameLPAREN
BSF_PACKAGE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
needMoveRunner	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fixLoader	TokenNameIdentifier
.	TokenNameDOT
addPathComponent	TokenNameIdentifier
(	TokenNameLPAREN
LoaderUtils	TokenNameIdentifier
.	TokenNameDOT
getResourceSource	TokenNameIdentifier
(	TokenNameLPAREN
fixLoader	TokenNameIdentifier
,	TokenNameCOMMA
LoaderUtils	TokenNameIdentifier
.	TokenNameDOT
classNameToResource	TokenNameIdentifier
(	TokenNameLPAREN
BSF_SCRIPT_RUNNER	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fixLoader	TokenNameIdentifier
.	TokenNameDOT
addLoaderPackageRoot	TokenNameIdentifier
(	TokenNameLPAREN
UTIL_OPTIONAL_PACKAGE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
