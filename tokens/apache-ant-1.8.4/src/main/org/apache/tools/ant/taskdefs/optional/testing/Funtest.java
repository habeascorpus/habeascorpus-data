package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
taskdefs	TokenNameIdentifier
.	TokenNameDOT
optional	TokenNameIdentifier
.	TokenNameDOT
testing	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
Task	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
Project	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
BuildException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
TaskAdapter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
WorkerAnt	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
taskdefs	TokenNameIdentifier
.	TokenNameDOT
condition	TokenNameIdentifier
.	TokenNameDOT
Condition	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
taskdefs	TokenNameIdentifier
.	TokenNameDOT
condition	TokenNameIdentifier
.	TokenNameDOT
ConditionBase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
taskdefs	TokenNameIdentifier
.	TokenNameDOT
Parallel	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
taskdefs	TokenNameIdentifier
.	TokenNameDOT
Sequential	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
taskdefs	TokenNameIdentifier
.	TokenNameDOT
WaitFor	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Funtest	TokenNameIdentifier
extends	TokenNameextends
Task	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
NestedCondition	TokenNameIdentifier
condition	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Parallel	TokenNameIdentifier
timedTests	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Sequential	TokenNameIdentifier
setup	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Sequential	TokenNameIdentifier
application	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
BlockFor	TokenNameIdentifier
block	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Sequential	TokenNameIdentifier
tests	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Sequential	TokenNameIdentifier
reporting	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Sequential	TokenNameIdentifier
teardown	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
long	TokenNamelong
timeout	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
long	TokenNamelong
timeoutUnitMultiplier	TokenNameIdentifier
=	TokenNameEQUAL
WaitFor	TokenNameIdentifier
.	TokenNameDOT
ONE_MILLISECOND	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
long	TokenNamelong
shutdownTime	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
WaitFor	TokenNameIdentifier
.	TokenNameDOT
ONE_SECOND	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
long	TokenNamelong
shutdownUnitMultiplier	TokenNameIdentifier
=	TokenNameEQUAL
WaitFor	TokenNameIdentifier
.	TokenNameDOT
ONE_MILLISECOND	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
failureProperty	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
failureMessage	TokenNameIdentifier
=	TokenNameEQUAL
"Tests failed"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
failOnTeardownErrors	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
private	TokenNameprivate
BuildException	TokenNameIdentifier
testException	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
BuildException	TokenNameIdentifier
teardownException	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
BuildException	TokenNameIdentifier
applicationException	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
BuildException	TokenNameIdentifier
taskException	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
WARN_OVERRIDING	TokenNameIdentifier
=	TokenNameEQUAL
"Overriding previous definition of "	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
APPLICATION_FORCIBLY_SHUT_DOWN	TokenNameIdentifier
=	TokenNameEQUAL
"Application forcibly shut down"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
SHUTDOWN_INTERRUPTED	TokenNameIdentifier
=	TokenNameEQUAL
"Shutdown interrupted"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
SKIPPING_TESTS	TokenNameIdentifier
=	TokenNameEQUAL
"Condition failed -skipping tests"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
APPLICATION_EXCEPTION	TokenNameIdentifier
=	TokenNameEQUAL
"Application Exception"	TokenNameStringLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
TEARDOWN_EXCEPTION	TokenNameIdentifier
=	TokenNameEQUAL
"Teardown Exception"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
void	TokenNamevoid
logOverride	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
definition	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
definition	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
log	TokenNameIdentifier
(	TokenNameLPAREN
WARN_OVERRIDING	TokenNameIdentifier
+	TokenNamePLUS
'<'	TokenNameCharacterLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
+	TokenNamePLUS
'>'	TokenNameCharacterLiteral
,	TokenNameCOMMA
Project	TokenNameIdentifier
.	TokenNameDOT
MSG_INFO	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
ConditionBase	TokenNameIdentifier
createCondition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
logOverride	TokenNameIdentifier
(	TokenNameLPAREN
"condition"	TokenNameStringLiteral
,	TokenNameCOMMA
condition	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
condition	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NestedCondition	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
condition	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addApplication	TokenNameIdentifier
(	TokenNameLPAREN
Sequential	TokenNameIdentifier
sequence	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logOverride	TokenNameIdentifier
(	TokenNameLPAREN
"application"	TokenNameStringLiteral
,	TokenNameCOMMA
application	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
application	TokenNameIdentifier
=	TokenNameEQUAL
sequence	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addSetup	TokenNameIdentifier
(	TokenNameLPAREN
Sequential	TokenNameIdentifier
sequence	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logOverride	TokenNameIdentifier
(	TokenNameLPAREN
"setup"	TokenNameStringLiteral
,	TokenNameCOMMA
setup	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setup	TokenNameIdentifier
=	TokenNameEQUAL
sequence	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addBlock	TokenNameIdentifier
(	TokenNameLPAREN
BlockFor	TokenNameIdentifier
sequence	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logOverride	TokenNameIdentifier
(	TokenNameLPAREN
"block"	TokenNameStringLiteral
,	TokenNameCOMMA
block	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
block	TokenNameIdentifier
=	TokenNameEQUAL
sequence	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addTests	TokenNameIdentifier
(	TokenNameLPAREN
Sequential	TokenNameIdentifier
sequence	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logOverride	TokenNameIdentifier
(	TokenNameLPAREN
"tests"	TokenNameStringLiteral
,	TokenNameCOMMA
tests	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tests	TokenNameIdentifier
=	TokenNameEQUAL
sequence	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addReporting	TokenNameIdentifier
(	TokenNameLPAREN
Sequential	TokenNameIdentifier
sequence	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logOverride	TokenNameIdentifier
(	TokenNameLPAREN
"reporting"	TokenNameStringLiteral
,	TokenNameCOMMA
reporting	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
reporting	TokenNameIdentifier
=	TokenNameEQUAL
sequence	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
addTeardown	TokenNameIdentifier
(	TokenNameLPAREN
Sequential	TokenNameIdentifier
sequence	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logOverride	TokenNameIdentifier
(	TokenNameLPAREN
"teardown"	TokenNameStringLiteral
,	TokenNameCOMMA
teardown	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
teardown	TokenNameIdentifier
=	TokenNameEQUAL
sequence	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setFailOnTeardownErrors	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
failOnTeardownErrors	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
failOnTeardownErrors	TokenNameIdentifier
=	TokenNameEQUAL
failOnTeardownErrors	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setFailureMessage	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
failureMessage	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
failureMessage	TokenNameIdentifier
=	TokenNameEQUAL
failureMessage	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setFailureProperty	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
failureProperty	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
failureProperty	TokenNameIdentifier
=	TokenNameEQUAL
failureProperty	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setShutdownTime	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
shutdownTime	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shutdownTime	TokenNameIdentifier
=	TokenNameEQUAL
shutdownTime	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setTimeout	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
timeout	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
timeout	TokenNameIdentifier
=	TokenNameEQUAL
timeout	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setTimeoutUnit	TokenNameIdentifier
(	TokenNameLPAREN
WaitFor	TokenNameIdentifier
.	TokenNameDOT
Unit	TokenNameIdentifier
unit	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
timeoutUnitMultiplier	TokenNameIdentifier
=	TokenNameEQUAL
unit	TokenNameIdentifier
.	TokenNameDOT
getMultiplier	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setShutdownUnit	TokenNameIdentifier
(	TokenNameLPAREN
WaitFor	TokenNameIdentifier
.	TokenNameDOT
Unit	TokenNameIdentifier
unit	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
shutdownUnitMultiplier	TokenNameIdentifier
=	TokenNameEQUAL
unit	TokenNameIdentifier
.	TokenNameDOT
getMultiplier	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
BuildException	TokenNameIdentifier
getApplicationException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
applicationException	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
BuildException	TokenNameIdentifier
getTeardownException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
teardownException	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
BuildException	TokenNameIdentifier
getTestException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
testException	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
BuildException	TokenNameIdentifier
getTaskException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
taskException	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
bind	TokenNameIdentifier
(	TokenNameLPAREN
Task	TokenNameIdentifier
task	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
task	TokenNameIdentifier
.	TokenNameDOT
bindToOwner	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
task	TokenNameIdentifier
.	TokenNameDOT
init	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Parallel	TokenNameIdentifier
newParallel	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
parallelTimeout	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Parallel	TokenNameIdentifier
par	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Parallel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bind	TokenNameIdentifier
(	TokenNameLPAREN
par	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
par	TokenNameIdentifier
.	TokenNameDOT
setFailOnAny	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
par	TokenNameIdentifier
.	TokenNameDOT
setTimeout	TokenNameIdentifier
(	TokenNameLPAREN
parallelTimeout	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
par	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Parallel	TokenNameIdentifier
newParallel	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
parallelTimeout	TokenNameIdentifier
,	TokenNameCOMMA
Task	TokenNameIdentifier
child	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Parallel	TokenNameIdentifier
par	TokenNameIdentifier
=	TokenNameEQUAL
newParallel	TokenNameIdentifier
(	TokenNameLPAREN
parallelTimeout	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
par	TokenNameIdentifier
.	TokenNameDOT
addTask	TokenNameIdentifier
(	TokenNameLPAREN
child	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
par	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
validateTask	TokenNameIdentifier
(	TokenNameLPAREN
Task	TokenNameIdentifier
task	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
role	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
task	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
task	TokenNameIdentifier
.	TokenNameDOT
getProject	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
BuildException	TokenNameIdentifier
(	TokenNameLPAREN
role	TokenNameIdentifier
+	TokenNamePLUS
" task is not bound to the project"	TokenNameStringLiteral
+	TokenNamePLUS
task	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
BuildException	TokenNameIdentifier
{	TokenNameLBRACE
validateTask	TokenNameIdentifier
(	TokenNameLPAREN
setup	TokenNameIdentifier
,	TokenNameCOMMA
"setup"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateTask	TokenNameIdentifier
(	TokenNameLPAREN
application	TokenNameIdentifier
,	TokenNameCOMMA
"application"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateTask	TokenNameIdentifier
(	TokenNameLPAREN
tests	TokenNameIdentifier
,	TokenNameCOMMA
"tests"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateTask	TokenNameIdentifier
(	TokenNameLPAREN
reporting	TokenNameIdentifier
,	TokenNameCOMMA
"reporting"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateTask	TokenNameIdentifier
(	TokenNameLPAREN
teardown	TokenNameIdentifier
,	TokenNameCOMMA
"teardown"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
condition	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
!	TokenNameNOT
condition	TokenNameIdentifier
.	TokenNameDOT
eval	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
log	TokenNameIdentifier
(	TokenNameLPAREN
SKIPPING_TESTS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
long	TokenNamelong
timeoutMillis	TokenNameIdentifier
=	TokenNameEQUAL
timeout	TokenNameIdentifier
*	TokenNameMULTIPLY
timeoutUnitMultiplier	TokenNameIdentifier
;	TokenNameSEMICOLON
Parallel	TokenNameIdentifier
applicationRun	TokenNameIdentifier
=	TokenNameEQUAL
newParallel	TokenNameIdentifier
(	TokenNameLPAREN
timeoutMillis	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
WorkerAnt	TokenNameIdentifier
worker	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
WorkerAnt	TokenNameIdentifier
(	TokenNameLPAREN
applicationRun	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
application	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
applicationRun	TokenNameIdentifier
.	TokenNameDOT
addTask	TokenNameIdentifier
(	TokenNameLPAREN
application	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
long	TokenNamelong
testRunTimeout	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
Sequential	TokenNameIdentifier
testRun	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Sequential	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bind	TokenNameIdentifier
(	TokenNameLPAREN
testRun	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
block	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
TaskAdapter	TokenNameIdentifier
ta	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TaskAdapter	TokenNameIdentifier
(	TokenNameLPAREN
block	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ta	TokenNameIdentifier
.	TokenNameDOT
bindToOwner	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateTask	TokenNameIdentifier
(	TokenNameLPAREN
ta	TokenNameIdentifier
,	TokenNameCOMMA
"block"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testRun	TokenNameIdentifier
.	TokenNameDOT
addTask	TokenNameIdentifier
(	TokenNameLPAREN
ta	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testRunTimeout	TokenNameIdentifier
=	TokenNameEQUAL
block	TokenNameIdentifier
.	TokenNameDOT
calculateMaxWaitMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
tests	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
testRun	TokenNameIdentifier
.	TokenNameDOT
addTask	TokenNameIdentifier
(	TokenNameLPAREN
tests	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testRunTimeout	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
timeoutMillis	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
reporting	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
testRun	TokenNameIdentifier
.	TokenNameDOT
addTask	TokenNameIdentifier
(	TokenNameLPAREN
reporting	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testRunTimeout	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
timeoutMillis	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
timedTests	TokenNameIdentifier
=	TokenNameEQUAL
newParallel	TokenNameIdentifier
(	TokenNameLPAREN
testRunTimeout	TokenNameIdentifier
,	TokenNameCOMMA
testRun	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
setup	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
Parallel	TokenNameIdentifier
setupRun	TokenNameIdentifier
=	TokenNameEQUAL
newParallel	TokenNameIdentifier
(	TokenNameLPAREN
timeoutMillis	TokenNameIdentifier
,	TokenNameCOMMA
setup	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setupRun	TokenNameIdentifier
.	TokenNameDOT
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
worker	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
timedTests	TokenNameIdentifier
.	TokenNameDOT
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
BuildException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
testException	TokenNameIdentifier
=	TokenNameEQUAL
e	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
teardown	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
Parallel	TokenNameIdentifier
teardownRun	TokenNameIdentifier
=	TokenNameEQUAL
newParallel	TokenNameIdentifier
(	TokenNameLPAREN
timeoutMillis	TokenNameIdentifier
,	TokenNameCOMMA
teardown	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
teardownRun	TokenNameIdentifier
.	TokenNameDOT
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
BuildException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
teardownException	TokenNameIdentifier
=	TokenNameEQUAL
e	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
long	TokenNamelong
shutdownTimeMillis	TokenNameIdentifier
=	TokenNameEQUAL
shutdownTime	TokenNameIdentifier
*	TokenNameMULTIPLY
shutdownUnitMultiplier	TokenNameIdentifier
;	TokenNameSEMICOLON
worker	TokenNameIdentifier
.	TokenNameDOT
waitUntilFinished	TokenNameIdentifier
(	TokenNameLPAREN
shutdownTimeMillis	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
worker	TokenNameIdentifier
.	TokenNameDOT
isAlive	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
log	TokenNameIdentifier
(	TokenNameLPAREN
APPLICATION_FORCIBLY_SHUT_DOWN	TokenNameIdentifier
,	TokenNameCOMMA
Project	TokenNameIdentifier
.	TokenNameDOT
MSG_WARN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
worker	TokenNameIdentifier
.	TokenNameDOT
interrupt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
worker	TokenNameIdentifier
.	TokenNameDOT
waitUntilFinished	TokenNameIdentifier
(	TokenNameLPAREN
shutdownTimeMillis	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
log	TokenNameIdentifier
(	TokenNameLPAREN
SHUTDOWN_INTERRUPTED	TokenNameIdentifier
,	TokenNameCOMMA
e	TokenNameIdentifier
,	TokenNameCOMMA
Project	TokenNameIdentifier
.	TokenNameDOT
MSG_VERBOSE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
applicationException	TokenNameIdentifier
=	TokenNameEQUAL
worker	TokenNameIdentifier
.	TokenNameDOT
getBuildException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processExceptions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
processExceptions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
taskException	TokenNameIdentifier
=	TokenNameEQUAL
testException	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
applicationException	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
taskException	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
taskException	TokenNameIdentifier
instanceof	TokenNameinstanceof
BuildTimeoutException	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
taskException	TokenNameIdentifier
=	TokenNameEQUAL
applicationException	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ignoringThrowable	TokenNameIdentifier
(	TokenNameLPAREN
APPLICATION_EXCEPTION	TokenNameIdentifier
,	TokenNameCOMMA
applicationException	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
teardownException	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
taskException	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
failOnTeardownErrors	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
taskException	TokenNameIdentifier
=	TokenNameEQUAL
teardownException	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ignoringThrowable	TokenNameIdentifier
(	TokenNameLPAREN
TEARDOWN_EXCEPTION	TokenNameIdentifier
,	TokenNameCOMMA
teardownException	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
failureProperty	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
getProject	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
failureProperty	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
log	TokenNameIdentifier
(	TokenNameLPAREN
failureMessage	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
taskException	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
taskException	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BuildException	TokenNameIdentifier
(	TokenNameLPAREN
failureMessage	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
taskException	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
taskException	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
ignoringThrowable	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
type	TokenNameIdentifier
,	TokenNameCOMMA
Throwable	TokenNameIdentifier
thrown	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
log	TokenNameIdentifier
(	TokenNameLPAREN
type	TokenNameIdentifier
+	TokenNamePLUS
": "	TokenNameStringLiteral
+	TokenNamePLUS
thrown	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
thrown	TokenNameIdentifier
,	TokenNameCOMMA
Project	TokenNameIdentifier
.	TokenNameDOT
MSG_WARN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
NestedCondition	TokenNameIdentifier
extends	TokenNameextends
ConditionBase	TokenNameIdentifier
implements	TokenNameimplements
Condition	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
boolean	TokenNameboolean
eval	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
countConditions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
BuildException	TokenNameIdentifier
(	TokenNameLPAREN
"A single nested condition is required."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
Condition	TokenNameIdentifier
)	TokenNameRPAREN
(	TokenNameLPAREN
getConditions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
nextElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
eval	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
