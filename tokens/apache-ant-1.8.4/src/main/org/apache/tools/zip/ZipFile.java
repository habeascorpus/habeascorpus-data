package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
zip	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
InputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
RandomAccessFile	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Calendar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Collections	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Date	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Enumeration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashSet	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
zip	TokenNameIdentifier
.	TokenNameDOT
CRC32	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
zip	TokenNameIdentifier
.	TokenNameDOT
Inflater	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
zip	TokenNameIdentifier
.	TokenNameDOT
InflaterInputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
zip	TokenNameIdentifier
.	TokenNameDOT
ZipException	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
ZipFile	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
HASH_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
509	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
SHORT	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
WORD	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
NIBLET_MASK	TokenNameIdentifier
=	TokenNameEQUAL
0x0f	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
BYTE_SHIFT	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
POS_0	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
POS_1	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
POS_2	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
POS_3	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Map	TokenNameIdentifier
entries	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
(	TokenNameLPAREN
HASH_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Map	TokenNameIdentifier
nameMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
(	TokenNameLPAREN
HASH_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
OffsetEntry	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
long	TokenNamelong
headerOffset	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
long	TokenNamelong
dataOffset	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
encoding	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
ZipEncoding	TokenNameIdentifier
zipEncoding	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
RandomAccessFile	TokenNameIdentifier
archive	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
useUnicodeExtraFields	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ZipFile	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
f	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
f	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ZipFile	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ZipFile	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
encoding	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
encoding	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ZipFile	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
f	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
encoding	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
f	TokenNameIdentifier
,	TokenNameCOMMA
encoding	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ZipFile	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
f	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
encoding	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
useUnicodeExtraFields	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
encoding	TokenNameIdentifier
=	TokenNameEQUAL
encoding	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
zipEncoding	TokenNameIdentifier
=	TokenNameEQUAL
ZipEncodingHelper	TokenNameIdentifier
.	TokenNameDOT
getZipEncoding	TokenNameIdentifier
(	TokenNameLPAREN
encoding	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
useUnicodeExtraFields	TokenNameIdentifier
=	TokenNameEQUAL
useUnicodeExtraFields	TokenNameIdentifier
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
RandomAccessFile	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
,	TokenNameCOMMA
"r"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
success	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
Map	TokenNameIdentifier
entriesWithoutUTF8Flag	TokenNameIdentifier
=	TokenNameEQUAL
populateFromCentralDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
resolveLocalFileHeaderData	TokenNameIdentifier
(	TokenNameLPAREN
entriesWithoutUTF8Flag	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
success	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
success	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
archive	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getEncoding	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
encoding	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
archive	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
closeQuietly	TokenNameIdentifier
(	TokenNameLPAREN
ZipFile	TokenNameIdentifier
zipfile	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
zipfile	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
zipfile	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
Enumeration	TokenNameIdentifier
getEntries	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
Collections	TokenNameIdentifier
.	TokenNameDOT
enumeration	TokenNameIdentifier
(	TokenNameLPAREN
entries	TokenNameIdentifier
.	TokenNameDOT
keySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ZipEntry	TokenNameIdentifier
getEntry	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
ZipEntry	TokenNameIdentifier
)	TokenNameRPAREN
nameMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
InputStream	TokenNameIdentifier
getInputStream	TokenNameIdentifier
(	TokenNameLPAREN
ZipEntry	TokenNameIdentifier
ze	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
,	TokenNameCOMMA
ZipException	TokenNameIdentifier
{	TokenNameLBRACE
OffsetEntry	TokenNameIdentifier
offsetEntry	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
OffsetEntry	TokenNameIdentifier
)	TokenNameRPAREN
entries	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
ze	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
offsetEntry	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
long	TokenNamelong
start	TokenNameIdentifier
=	TokenNameEQUAL
offsetEntry	TokenNameIdentifier
.	TokenNameDOT
dataOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
BoundedInputStream	TokenNameIdentifier
bis	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BoundedInputStream	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
ze	TokenNameIdentifier
.	TokenNameDOT
getCompressedSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
ze	TokenNameIdentifier
.	TokenNameDOT
getMethod	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ZipEntry	TokenNameIdentifier
.	TokenNameDOT
STORED	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
bis	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
ZipEntry	TokenNameIdentifier
.	TokenNameDOT
DEFLATED	TokenNameIdentifier
:	TokenNameCOLON
bis	TokenNameIdentifier
.	TokenNameDOT
addDummy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
Inflater	TokenNameIdentifier
inflater	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Inflater	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
InflaterInputStream	TokenNameIdentifier
(	TokenNameLPAREN
bis	TokenNameIdentifier
,	TokenNameCOMMA
inflater	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflater	TokenNameIdentifier
.	TokenNameDOT
end	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
ZipException	TokenNameIdentifier
(	TokenNameLPAREN
"Found unsupported compression method "	TokenNameStringLiteral
+	TokenNamePLUS
ze	TokenNameIdentifier
.	TokenNameDOT
getMethod	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CFH_LEN	TokenNameIdentifier
=	TokenNameEQUAL
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
WORD	TokenNameIdentifier
+	TokenNamePLUS
WORD	TokenNameIdentifier
+	TokenNamePLUS
WORD	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
WORD	TokenNameIdentifier
+	TokenNamePLUS
WORD	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Map	TokenNameIdentifier
populateFromCentralDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
HashMap	TokenNameIdentifier
noUTF8Flag	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
positionAtCentralDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
cfh	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
CFH_LEN	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
signatureBytes	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
WORD	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
signatureBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
sig	TokenNameIdentifier
=	TokenNameEQUAL
ZipLong	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
signatureBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
long	TokenNamelong
cfhSig	TokenNameIdentifier
=	TokenNameEQUAL
ZipLong	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
ZipOutputStream	TokenNameIdentifier
.	TokenNameDOT
CFH_SIG	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sig	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
cfhSig	TokenNameIdentifier
&&	TokenNameAND_AND
startsWithLocalFileHeader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"central directory is empty, can't expand"	TokenNameStringLiteral
+	TokenNamePLUS
" corrupt archive."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
sig	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
cfhSig	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
archive	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
off	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ZipEntry	TokenNameIdentifier
ze	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ZipEntry	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
versionMadeBy	TokenNameIdentifier
=	TokenNameEQUAL
ZipShort	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
ze	TokenNameIdentifier
.	TokenNameDOT
setPlatform	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
versionMadeBy	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
BYTE_SHIFT	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
NIBLET_MASK	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
generalPurposeFlag	TokenNameIdentifier
=	TokenNameEQUAL
ZipShort	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
boolean	TokenNameboolean
hasUTF8Flag	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
generalPurposeFlag	TokenNameIdentifier
&	TokenNameAND
ZipOutputStream	TokenNameIdentifier
.	TokenNameDOT
UFT8_NAMES_FLAG	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
ZipEncoding	TokenNameIdentifier
entryEncoding	TokenNameIdentifier
=	TokenNameEQUAL
hasUTF8Flag	TokenNameIdentifier
?	TokenNameQUESTION
ZipEncodingHelper	TokenNameIdentifier
.	TokenNameDOT
UTF8_ZIP_ENCODING	TokenNameIdentifier
:	TokenNameCOLON
zipEncoding	TokenNameIdentifier
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
ze	TokenNameIdentifier
.	TokenNameDOT
setMethod	TokenNameIdentifier
(	TokenNameLPAREN
ZipShort	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
time	TokenNameIdentifier
=	TokenNameEQUAL
dosToJavaTime	TokenNameIdentifier
(	TokenNameLPAREN
ZipLong	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ze	TokenNameIdentifier
.	TokenNameDOT
setTime	TokenNameIdentifier
(	TokenNameLPAREN
time	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
WORD	TokenNameIdentifier
;	TokenNameSEMICOLON
ze	TokenNameIdentifier
.	TokenNameDOT
setCrc	TokenNameIdentifier
(	TokenNameLPAREN
ZipLong	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
WORD	TokenNameIdentifier
;	TokenNameSEMICOLON
ze	TokenNameIdentifier
.	TokenNameDOT
setCompressedSize	TokenNameIdentifier
(	TokenNameLPAREN
ZipLong	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
WORD	TokenNameIdentifier
;	TokenNameSEMICOLON
ze	TokenNameIdentifier
.	TokenNameDOT
setSize	TokenNameIdentifier
(	TokenNameLPAREN
ZipLong	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
WORD	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
fileNameLen	TokenNameIdentifier
=	TokenNameEQUAL
ZipShort	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
extraLen	TokenNameIdentifier
=	TokenNameEQUAL
ZipShort	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
commentLen	TokenNameIdentifier
=	TokenNameEQUAL
ZipShort	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
ze	TokenNameIdentifier
.	TokenNameDOT
setInternalAttributes	TokenNameIdentifier
(	TokenNameLPAREN
ZipShort	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
SHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
ze	TokenNameIdentifier
.	TokenNameDOT
setExternalAttributes	TokenNameIdentifier
(	TokenNameLPAREN
ZipLong	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
WORD	TokenNameIdentifier
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fileName	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
fileNameLen	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
fileName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ze	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
entryEncoding	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
fileName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
OffsetEntry	TokenNameIdentifier
offset	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
OffsetEntry	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
offset	TokenNameIdentifier
.	TokenNameDOT
headerOffset	TokenNameIdentifier
=	TokenNameEQUAL
ZipLong	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfh	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
entries	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
ze	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nameMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
ze	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
ze	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
cdExtraData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
extraLen	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
cdExtraData	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ze	TokenNameIdentifier
.	TokenNameDOT
setCentralDirectoryExtra	TokenNameIdentifier
(	TokenNameLPAREN
cdExtraData	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
comment	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
commentLen	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
comment	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ze	TokenNameIdentifier
.	TokenNameDOT
setComment	TokenNameIdentifier
(	TokenNameLPAREN
entryEncoding	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
comment	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
signatureBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sig	TokenNameIdentifier
=	TokenNameEQUAL
ZipLong	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
signatureBytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hasUTF8Flag	TokenNameIdentifier
&&	TokenNameAND_AND
useUnicodeExtraFields	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
noUTF8Flag	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
ze	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
NameAndComment	TokenNameIdentifier
(	TokenNameLPAREN
fileName	TokenNameIdentifier
,	TokenNameCOMMA
comment	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
noUTF8Flag	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MIN_EOCD_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
WORD	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
WORD	TokenNameIdentifier
+	TokenNamePLUS
WORD	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MAX_EOCD_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
MIN_EOCD_SIZE	TokenNameIdentifier
+	TokenNamePLUS
0xFFFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CFD_LOCATOR_OFFSET	TokenNameIdentifier
=	TokenNameEQUAL
WORD	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
WORD	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
void	TokenNamevoid
positionAtCentralDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
boolean	TokenNameboolean
found	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
long	TokenNamelong
off	TokenNameIdentifier
=	TokenNameEQUAL
archive	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
MIN_EOCD_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
long	TokenNamelong
stopSearching	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
(	TokenNameLPAREN
0L	TokenNameLongLiteral
,	TokenNameCOMMA
archive	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
MAX_EOCD_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
off	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sig	TokenNameIdentifier
=	TokenNameEQUAL
ZipOutputStream	TokenNameIdentifier
.	TokenNameDOT
EOCD_SIG	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
off	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
stopSearching	TokenNameIdentifier
;	TokenNameSEMICOLON
off	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
archive	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
off	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
curr	TokenNameIdentifier
=	TokenNameEQUAL
archive	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
curr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
curr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
sig	TokenNameIdentifier
[	TokenNameLBRACKET
POS_0	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
curr	TokenNameIdentifier
=	TokenNameEQUAL
archive	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
curr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
sig	TokenNameIdentifier
[	TokenNameLBRACKET
POS_1	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
curr	TokenNameIdentifier
=	TokenNameEQUAL
archive	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
curr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
sig	TokenNameIdentifier
[	TokenNameLBRACKET
POS_2	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
curr	TokenNameIdentifier
=	TokenNameEQUAL
archive	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
curr	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
sig	TokenNameIdentifier
[	TokenNameLBRACKET
POS_3	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
found	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
found	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
ZipException	TokenNameIdentifier
(	TokenNameLPAREN
"archive is not a ZIP archive"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
archive	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
off	TokenNameIdentifier
+	TokenNamePLUS
CFD_LOCATOR_OFFSET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
cfdOffset	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
WORD	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
cfdOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
ZipLong	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
cfdOffset	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
LFH_OFFSET_FOR_FILENAME_LENGTH	TokenNameIdentifier
=	TokenNameEQUAL
WORD	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
WORD	TokenNameIdentifier
+	TokenNamePLUS
WORD	TokenNameIdentifier
+	TokenNamePLUS
WORD	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
void	TokenNamevoid
resolveLocalFileHeaderData	TokenNameIdentifier
(	TokenNameLPAREN
Map	TokenNameIdentifier
entriesWithoutUTF8Flag	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
Enumeration	TokenNameIdentifier
e	TokenNameIdentifier
=	TokenNameEQUAL
Collections	TokenNameIdentifier
.	TokenNameDOT
enumeration	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
HashSet	TokenNameIdentifier
(	TokenNameLPAREN
entries	TokenNameIdentifier
.	TokenNameDOT
keySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
hasMoreElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ZipEntry	TokenNameIdentifier
ze	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ZipEntry	TokenNameIdentifier
)	TokenNameRPAREN
e	TokenNameIdentifier
.	TokenNameDOT
nextElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
OffsetEntry	TokenNameIdentifier
offsetEntry	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
OffsetEntry	TokenNameIdentifier
)	TokenNameRPAREN
entries	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
ze	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
offset	TokenNameIdentifier
=	TokenNameEQUAL
offsetEntry	TokenNameIdentifier
.	TokenNameDOT
headerOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
offset	TokenNameIdentifier
+	TokenNamePLUS
LFH_OFFSET_FOR_FILENAME_LENGTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
b	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
SHORT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
fileNameLen	TokenNameIdentifier
=	TokenNameEQUAL
ZipShort	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
extraFieldLen	TokenNameIdentifier
=	TokenNameEQUAL
ZipShort	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
lenToSkip	TokenNameIdentifier
=	TokenNameEQUAL
fileNameLen	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
lenToSkip	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
skipped	TokenNameIdentifier
=	TokenNameEQUAL
archive	TokenNameIdentifier
.	TokenNameDOT
skipBytes	TokenNameIdentifier
(	TokenNameLPAREN
lenToSkip	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
skipped	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"failed to skip file name in"	TokenNameStringLiteral
+	TokenNamePLUS
" local file header"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lenToSkip	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
skipped	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
localExtraData	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
extraFieldLen	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
localExtraData	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ze	TokenNameIdentifier
.	TokenNameDOT
setExtra	TokenNameIdentifier
(	TokenNameLPAREN
localExtraData	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
offsetEntry	TokenNameIdentifier
.	TokenNameDOT
dataOffset	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
+	TokenNamePLUS
LFH_OFFSET_FOR_FILENAME_LENGTH	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
SHORT	TokenNameIdentifier
+	TokenNamePLUS
fileNameLen	TokenNameIdentifier
+	TokenNamePLUS
extraFieldLen	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
entriesWithoutUTF8Flag	TokenNameIdentifier
.	TokenNameDOT
containsKey	TokenNameIdentifier
(	TokenNameLPAREN
ze	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
entries	TokenNameIdentifier
.	TokenNameDOT
remove	TokenNameIdentifier
(	TokenNameLPAREN
ze	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setNameAndCommentFromExtraFields	TokenNameIdentifier
(	TokenNameLPAREN
ze	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
NameAndComment	TokenNameIdentifier
)	TokenNameRPAREN
entriesWithoutUTF8Flag	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
ze	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
entries	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
ze	TokenNameIdentifier
,	TokenNameCOMMA
offsetEntry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
static	TokenNamestatic
Date	TokenNameIdentifier
fromDosTime	TokenNameIdentifier
(	TokenNameLPAREN
ZipLong	TokenNameIdentifier
zipDosTime	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
dosTime	TokenNameIdentifier
=	TokenNameEQUAL
zipDosTime	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
Date	TokenNameIdentifier
(	TokenNameLPAREN
dosToJavaTime	TokenNameIdentifier
(	TokenNameLPAREN
dosTime	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
long	TokenNamelong
dosToJavaTime	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
dosTime	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Calendar	TokenNameIdentifier
cal	TokenNameIdentifier
=	TokenNameEQUAL
Calendar	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
YEAR	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
dosTime	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
25	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x7f	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
1980	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MONTH	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
dosTime	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
21	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x0f	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
DATE	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
dosTime	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x1f	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
HOUR_OF_DAY	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
dosTime	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
11	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x1f	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MINUTE	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
dosTime	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x3f	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
SECOND	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
dosTime	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x3e	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
cal	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
String	TokenNameIdentifier
getString	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bytes	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ZipException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
ZipEncodingHelper	TokenNameIdentifier
.	TokenNameDOT
getZipEncoding	TokenNameIdentifier
(	TokenNameLPAREN
encoding	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
bytes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
ZipException	TokenNameIdentifier
(	TokenNameLPAREN
"Failed to decode name: "	TokenNameStringLiteral
+	TokenNamePLUS
ex	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
startsWithLocalFileHeader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
archive	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
start	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
WORD	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
archive	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
start	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
start	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
ZipOutputStream	TokenNameIdentifier
.	TokenNameDOT
LFH_SIG	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
setNameAndCommentFromExtraFields	TokenNameIdentifier
(	TokenNameLPAREN
ZipEntry	TokenNameIdentifier
ze	TokenNameIdentifier
,	TokenNameCOMMA
NameAndComment	TokenNameIdentifier
nc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
UnicodePathExtraField	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
UnicodePathExtraField	TokenNameIdentifier
)	TokenNameRPAREN
ze	TokenNameIdentifier
.	TokenNameDOT
getExtraField	TokenNameIdentifier
(	TokenNameLPAREN
UnicodePathExtraField	TokenNameIdentifier
.	TokenNameDOT
UPATH_ID	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
originalName	TokenNameIdentifier
=	TokenNameEQUAL
ze	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
newName	TokenNameIdentifier
=	TokenNameEQUAL
getUnicodeStringIfOriginalMatches	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
nc	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
newName	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
!	TokenNameNOT
originalName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
newName	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ze	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
newName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nameMap	TokenNameIdentifier
.	TokenNameDOT
remove	TokenNameIdentifier
(	TokenNameLPAREN
originalName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nameMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
newName	TokenNameIdentifier
,	TokenNameCOMMA
ze	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
nc	TokenNameIdentifier
.	TokenNameDOT
comment	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
nc	TokenNameIdentifier
.	TokenNameDOT
comment	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
UnicodeCommentExtraField	TokenNameIdentifier
cmt	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
UnicodeCommentExtraField	TokenNameIdentifier
)	TokenNameRPAREN
ze	TokenNameIdentifier
.	TokenNameDOT
getExtraField	TokenNameIdentifier
(	TokenNameLPAREN
UnicodeCommentExtraField	TokenNameIdentifier
.	TokenNameDOT
UCOM_ID	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
newComment	TokenNameIdentifier
=	TokenNameEQUAL
getUnicodeStringIfOriginalMatches	TokenNameIdentifier
(	TokenNameLPAREN
cmt	TokenNameIdentifier
,	TokenNameCOMMA
nc	TokenNameIdentifier
.	TokenNameDOT
comment	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
newComment	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
ze	TokenNameIdentifier
.	TokenNameDOT
setComment	TokenNameIdentifier
(	TokenNameLPAREN
newComment	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getUnicodeStringIfOriginalMatches	TokenNameIdentifier
(	TokenNameLPAREN
AbstractUnicodeExtraField	TokenNameIdentifier
f	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
orig	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
f	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
CRC32	TokenNameIdentifier
crc32	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CRC32	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
crc32	TokenNameIdentifier
.	TokenNameDOT
update	TokenNameIdentifier
(	TokenNameLPAREN
orig	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
origCRC32	TokenNameIdentifier
=	TokenNameEQUAL
crc32	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
origCRC32	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
f	TokenNameIdentifier
.	TokenNameDOT
getNameCRC32	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
ZipEncodingHelper	TokenNameIdentifier
.	TokenNameDOT
UTF8_ZIP_ENCODING	TokenNameIdentifier
.	TokenNameDOT
decode	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
.	TokenNameDOT
getUnicodeName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
class	TokenNameclass
BoundedInputStream	TokenNameIdentifier
extends	TokenNameextends
InputStream	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
long	TokenNamelong
remaining	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
long	TokenNamelong
loc	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
addDummyByte	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
BoundedInputStream	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
start	TokenNameIdentifier
,	TokenNameCOMMA
long	TokenNamelong
remaining	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
remaining	TokenNameIdentifier
=	TokenNameEQUAL
remaining	TokenNameIdentifier
;	TokenNameSEMICOLON
loc	TokenNameIdentifier
=	TokenNameEQUAL
start	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
remaining	TokenNameIdentifier
--	TokenNameMINUS_MINUS
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
addDummyByte	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addDummyByte	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
synchronized	TokenNamesynchronized
(	TokenNameLPAREN
archive	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
archive	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
loc	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
archive	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
read	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
b	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
off	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
len	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
remaining	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
addDummyByte	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addDummyByte	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
b	TokenNameIdentifier
[	TokenNameLBRACKET
off	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
len	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
len	TokenNameIdentifier
>	TokenNameGREATER
remaining	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
len	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
remaining	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
ret	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
synchronized	TokenNamesynchronized
(	TokenNameLPAREN
archive	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
archive	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
loc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ret	TokenNameIdentifier
=	TokenNameEQUAL
archive	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
,	TokenNameCOMMA
off	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
ret	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
loc	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
remaining	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
addDummy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addDummyByte	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
NameAndComment	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
name	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
comment	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
NameAndComment	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
name	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
comment	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
name	TokenNameIdentifier
=	TokenNameEQUAL
name	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
comment	TokenNameIdentifier
=	TokenNameEQUAL
comment	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
