package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
bzip2	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
OutputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
CBZip2OutputStream	TokenNameIdentifier
extends	TokenNameextends
OutputStream	TokenNameIdentifier
implements	TokenNameimplements
BZip2Constants	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MIN_BLOCKSIZE	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MAX_BLOCKSIZE	TokenNameIdentifier
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
SETMASK	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
21	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CLEARMASK	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
~	TokenNameTWIDDLE
SETMASK	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
GREATER_ICOST	TokenNameIdentifier
=	TokenNameEQUAL
15	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
LESSER_ICOST	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
SMALL_THRESH	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DEPTH_THRESH	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
WORK_FACTOR	TokenNameIdentifier
=	TokenNameEQUAL
30	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
QSORT_STACK_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
1000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
INCS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
,	TokenNameCOMMA
40	TokenNameIntegerLiteral
,	TokenNameCOMMA
121	TokenNameIntegerLiteral
,	TokenNameCOMMA
364	TokenNameIntegerLiteral
,	TokenNameCOMMA
1093	TokenNameIntegerLiteral
,	TokenNameCOMMA
3280	TokenNameIntegerLiteral
,	TokenNameCOMMA
9841	TokenNameIntegerLiteral
,	TokenNameCOMMA
29524	TokenNameIntegerLiteral
,	TokenNameCOMMA
88573	TokenNameIntegerLiteral
,	TokenNameCOMMA
265720	TokenNameIntegerLiteral
,	TokenNameCOMMA
797161	TokenNameIntegerLiteral
,	TokenNameCOMMA
2391484	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
protected	TokenNameprotected
static	TokenNamestatic
void	TokenNamevoid
hbMakeCodeLengths	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
freq	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
alphaSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
heap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
MAX_ALPHA_SIZE	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
weight	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
MAX_ALPHA_SIZE	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
parent	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
MAX_ALPHA_SIZE	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
weight	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
freq	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
freq	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
boolean	TokenNameboolean
tooLong	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
tooLong	TokenNameIdentifier
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
tooLong	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
nNodes	TokenNameIdentifier
=	TokenNameEQUAL
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nHeap	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
heap	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
weight	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
parent	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
parent	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nHeap	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
heap	TokenNameIdentifier
[	TokenNameLBRACKET
nHeap	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
zz	TokenNameIdentifier
=	TokenNameEQUAL
nHeap	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
tmp	TokenNameIdentifier
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
weight	TokenNameIdentifier
[	TokenNameLBRACKET
tmp	TokenNameIdentifier
]	TokenNameRBRACKET
<	TokenNameLESS
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
zz	TokenNameIdentifier
>>=	TokenNameRIGHT_SHIFT_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
nHeap	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
n1	TokenNameIdentifier
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
heap	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
nHeap	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
nHeap	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
int	TokenNameint
yy	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
zz	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
tmp	TokenNameIdentifier
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
yy	TokenNameIdentifier
=	TokenNameEQUAL
zz	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
yy	TokenNameIdentifier
>	TokenNameGREATER
nHeap	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
yy	TokenNameIdentifier
<	TokenNameLESS
nHeap	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
]	TokenNameRBRACKET
<	TokenNameLESS
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
yy	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
weight	TokenNameIdentifier
[	TokenNameLBRACKET
tmp	TokenNameIdentifier
]	TokenNameRBRACKET
<	TokenNameLESS
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
zz	TokenNameIdentifier
=	TokenNameEQUAL
yy	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
n2	TokenNameIdentifier
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
heap	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
nHeap	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
nHeap	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
yy	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
zz	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
yy	TokenNameIdentifier
=	TokenNameEQUAL
zz	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
yy	TokenNameIdentifier
>	TokenNameGREATER
nHeap	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
yy	TokenNameIdentifier
<	TokenNameLESS
nHeap	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
]	TokenNameRBRACKET
<	TokenNameLESS
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
yy	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
weight	TokenNameIdentifier
[	TokenNameLBRACKET
tmp	TokenNameIdentifier
]	TokenNameRBRACKET
<	TokenNameLESS
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
zz	TokenNameIdentifier
=	TokenNameEQUAL
yy	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
nNodes	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
parent	TokenNameIdentifier
[	TokenNameLBRACKET
n1	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
parent	TokenNameIdentifier
[	TokenNameLBRACKET
n2	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
nNodes	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
weight_n1	TokenNameIdentifier
=	TokenNameEQUAL
weight	TokenNameIdentifier
[	TokenNameLBRACKET
n1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
weight_n2	TokenNameIdentifier
=	TokenNameEQUAL
weight	TokenNameIdentifier
[	TokenNameLBRACKET
n2	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
weight	TokenNameIdentifier
[	TokenNameLBRACKET
nNodes	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
weight_n1	TokenNameIdentifier
&	TokenNameAND
0xffffff00	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
weight_n2	TokenNameIdentifier
&	TokenNameAND
0xffffff00	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
weight_n1	TokenNameIdentifier
&	TokenNameAND
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
(	TokenNameLPAREN
weight_n2	TokenNameIdentifier
&	TokenNameAND
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
weight_n1	TokenNameIdentifier
&	TokenNameAND
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
:	TokenNameCOLON
(	TokenNameLPAREN
weight_n2	TokenNameIdentifier
&	TokenNameAND
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parent	TokenNameIdentifier
[	TokenNameLBRACKET
nNodes	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nHeap	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
heap	TokenNameIdentifier
[	TokenNameLBRACKET
nHeap	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
nNodes	TokenNameIdentifier
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
zz	TokenNameIdentifier
=	TokenNameEQUAL
nHeap	TokenNameIdentifier
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
weight_tmp	TokenNameIdentifier
=	TokenNameEQUAL
weight	TokenNameIdentifier
[	TokenNameLBRACKET
tmp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
weight_tmp	TokenNameIdentifier
<	TokenNameLESS
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
zz	TokenNameIdentifier
>>=	TokenNameRIGHT_SHIFT_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
parent_k	TokenNameIdentifier
;	TokenNameSEMICOLON
(	TokenNameLPAREN
parent_k	TokenNameIdentifier
=	TokenNameEQUAL
parent	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
k	TokenNameIdentifier
=	TokenNameEQUAL
parent_k	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
len	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
j	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
j	TokenNameIdentifier
>	TokenNameGREATER
maxLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tooLong	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
tooLong	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
weight	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
j	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
weight	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
j	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
hbMakeCodeLengths	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
freq	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
Data	TokenNameIdentifier
dat	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
alphaSize	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
maxLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
heap	TokenNameIdentifier
=	TokenNameEQUAL
dat	TokenNameIdentifier
.	TokenNameDOT
heap	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
weight	TokenNameIdentifier
=	TokenNameEQUAL
dat	TokenNameIdentifier
.	TokenNameDOT
weight	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
parent	TokenNameIdentifier
=	TokenNameEQUAL
dat	TokenNameIdentifier
.	TokenNameDOT
parent	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
weight	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
freq	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
freq	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
boolean	TokenNameboolean
tooLong	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
tooLong	TokenNameIdentifier
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
tooLong	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
nNodes	TokenNameIdentifier
=	TokenNameEQUAL
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nHeap	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
heap	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
weight	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
parent	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
parent	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nHeap	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
heap	TokenNameIdentifier
[	TokenNameLBRACKET
nHeap	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
zz	TokenNameIdentifier
=	TokenNameEQUAL
nHeap	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
tmp	TokenNameIdentifier
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
weight	TokenNameIdentifier
[	TokenNameLBRACKET
tmp	TokenNameIdentifier
]	TokenNameRBRACKET
<	TokenNameLESS
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
zz	TokenNameIdentifier
>>=	TokenNameRIGHT_SHIFT_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
nHeap	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
n1	TokenNameIdentifier
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
heap	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
nHeap	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
nHeap	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
int	TokenNameint
yy	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
zz	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
tmp	TokenNameIdentifier
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
yy	TokenNameIdentifier
=	TokenNameEQUAL
zz	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
yy	TokenNameIdentifier
>	TokenNameGREATER
nHeap	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
yy	TokenNameIdentifier
<	TokenNameLESS
nHeap	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
]	TokenNameRBRACKET
<	TokenNameLESS
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
yy	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
weight	TokenNameIdentifier
[	TokenNameLBRACKET
tmp	TokenNameIdentifier
]	TokenNameRBRACKET
<	TokenNameLESS
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
zz	TokenNameIdentifier
=	TokenNameEQUAL
yy	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
n2	TokenNameIdentifier
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
heap	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
nHeap	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
nHeap	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
yy	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
zz	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
yy	TokenNameIdentifier
=	TokenNameEQUAL
zz	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
yy	TokenNameIdentifier
>	TokenNameGREATER
nHeap	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
yy	TokenNameIdentifier
<	TokenNameLESS
nHeap	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
]	TokenNameRBRACKET
<	TokenNameLESS
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
yy	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
weight	TokenNameIdentifier
[	TokenNameLBRACKET
tmp	TokenNameIdentifier
]	TokenNameRBRACKET
<	TokenNameLESS
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
yy	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
zz	TokenNameIdentifier
=	TokenNameEQUAL
yy	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
nNodes	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
parent	TokenNameIdentifier
[	TokenNameLBRACKET
n1	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
parent	TokenNameIdentifier
[	TokenNameLBRACKET
n2	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
nNodes	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
weight_n1	TokenNameIdentifier
=	TokenNameEQUAL
weight	TokenNameIdentifier
[	TokenNameLBRACKET
n1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
weight_n2	TokenNameIdentifier
=	TokenNameEQUAL
weight	TokenNameIdentifier
[	TokenNameLBRACKET
n2	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
weight	TokenNameIdentifier
[	TokenNameLBRACKET
nNodes	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
weight_n1	TokenNameIdentifier
&	TokenNameAND
0xffffff00	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
weight_n2	TokenNameIdentifier
&	TokenNameAND
0xffffff00	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
weight_n1	TokenNameIdentifier
&	TokenNameAND
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
(	TokenNameLPAREN
weight_n2	TokenNameIdentifier
&	TokenNameAND
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
weight_n1	TokenNameIdentifier
&	TokenNameAND
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
:	TokenNameCOLON
(	TokenNameLPAREN
weight_n2	TokenNameIdentifier
&	TokenNameAND
0x000000ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parent	TokenNameIdentifier
[	TokenNameLBRACKET
nNodes	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nHeap	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
heap	TokenNameIdentifier
[	TokenNameLBRACKET
nHeap	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
nNodes	TokenNameIdentifier
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
zz	TokenNameIdentifier
=	TokenNameEQUAL
nHeap	TokenNameIdentifier
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
weight_tmp	TokenNameIdentifier
=	TokenNameEQUAL
weight	TokenNameIdentifier
[	TokenNameLBRACKET
tmp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
weight_tmp	TokenNameIdentifier
<	TokenNameLESS
weight	TokenNameIdentifier
[	TokenNameLBRACKET
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
zz	TokenNameIdentifier
>>=	TokenNameRIGHT_SHIFT_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
heap	TokenNameIdentifier
[	TokenNameLBRACKET
zz	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
parent_k	TokenNameIdentifier
;	TokenNameSEMICOLON
(	TokenNameLPAREN
parent_k	TokenNameIdentifier
=	TokenNameEQUAL
parent	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
k	TokenNameIdentifier
=	TokenNameEQUAL
parent_k	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
len	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
j	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
j	TokenNameIdentifier
>	TokenNameGREATER
maxLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tooLong	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
tooLong	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
weight	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
j	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
weight	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
j	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
last	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
blockSize100k	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
bsBuff	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
bsLive	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
CRC	TokenNameIdentifier
crc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CRC	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
nInUse	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
nMTF	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
currentChar	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
runLength	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
blockCRC	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
combinedCRC	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
allowableBlockSize	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Data	TokenNameIdentifier
data	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
BlockSort	TokenNameIdentifier
blockSorter	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
OutputStream	TokenNameIdentifier
out	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
chooseBlockSize	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
inputLength	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
inputLength	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
inputLength	TokenNameIdentifier
/	TokenNameDIVIDE
132000	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
9	TokenNameIntegerLiteral
)	TokenNameRPAREN
:	TokenNameCOLON
MAX_BLOCKSIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
CBZip2OutputStream	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
OutputStream	TokenNameIdentifier
out	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
out	TokenNameIdentifier
,	TokenNameCOMMA
MAX_BLOCKSIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
CBZip2OutputStream	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
OutputStream	TokenNameIdentifier
out	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
blockSize	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
blockSize	TokenNameIdentifier
<	TokenNameLESS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"blockSize("	TokenNameStringLiteral
+	TokenNamePLUS
blockSize	TokenNameIdentifier
+	TokenNamePLUS
") < 1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
blockSize	TokenNameIdentifier
>	TokenNameGREATER
9	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"blockSize("	TokenNameStringLiteral
+	TokenNamePLUS
blockSize	TokenNameIdentifier
+	TokenNamePLUS
") > 9"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
blockSize100k	TokenNameIdentifier
=	TokenNameEQUAL
blockSize	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
=	TokenNameEQUAL
out	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
allowableBlockSize	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
blockSize100k	TokenNameIdentifier
*	TokenNameMULTIPLY
BZip2Constants	TokenNameIdentifier
.	TokenNameDOT
baseBlockSize	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
init	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
write	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
b	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
write0	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"closed"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
writeRun	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
lastShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
last	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lastShadow	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
allowableBlockSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
currentCharShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
currentChar	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Data	TokenNameIdentifier
dataShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
;	TokenNameSEMICOLON
dataShadow	TokenNameIdentifier
.	TokenNameDOT
inUse	TokenNameIdentifier
[	TokenNameLBRACKET
currentCharShadow	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
ch	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
currentCharShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
runLengthShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
runLength	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
crc	TokenNameIdentifier
.	TokenNameDOT
updateCRC	TokenNameIdentifier
(	TokenNameLPAREN
currentCharShadow	TokenNameIdentifier
,	TokenNameCOMMA
runLengthShadow	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
runLengthShadow	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
dataShadow	TokenNameIdentifier
.	TokenNameDOT
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
last	TokenNameIdentifier
=	TokenNameEQUAL
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
dataShadow	TokenNameIdentifier
.	TokenNameDOT
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
dataShadow	TokenNameIdentifier
.	TokenNameDOT
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
last	TokenNameIdentifier
=	TokenNameEQUAL
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
{	TokenNameLBRACE
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
block	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
block	TokenNameIdentifier
;	TokenNameSEMICOLON
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
last	TokenNameIdentifier
=	TokenNameEQUAL
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
{	TokenNameLBRACE
runLengthShadow	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
dataShadow	TokenNameIdentifier
.	TokenNameDOT
inUse	TokenNameIdentifier
[	TokenNameLBRACKET
runLengthShadow	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
block	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
block	TokenNameIdentifier
;	TokenNameSEMICOLON
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
runLengthShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
last	TokenNameIdentifier
=	TokenNameEQUAL
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
endBlock	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
initBlock	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writeRun	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
finalize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Throwable	TokenNameIdentifier
{	TokenNameLBRACE
finish	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
super	TokenNamesuper
.	TokenNameDOT
finalize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
finish	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
out	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
runLength	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
writeRun	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
currentChar	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
endBlock	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endCompression	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
blockSorter	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
out	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
OutputStream	TokenNameIdentifier
outShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
;	TokenNameSEMICOLON
finish	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outShadow	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
flush	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
OutputStream	TokenNameIdentifier
outShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
outShadow	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
outShadow	TokenNameIdentifier
.	TokenNameDOT
flush	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
init	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Data	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
blockSize100k	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
blockSorter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BlockSort	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
'h'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
'0'	TokenNameCharacterLiteral
+	TokenNamePLUS
this	TokenNamethis
.	TokenNameDOT
blockSize100k	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
combinedCRC	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
initBlock	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
initBlock	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
crc	TokenNameIdentifier
.	TokenNameDOT
initialiseCRC	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
last	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
inUse	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
.	TokenNameDOT
inUse	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
256	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
inUse	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
endBlock	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
blockCRC	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
crc	TokenNameIdentifier
.	TokenNameDOT
getFinalCRC	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
combinedCRC	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
combinedCRC	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
combinedCRC	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
31	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
combinedCRC	TokenNameIdentifier
^=	TokenNameXOR_EQUAL
this	TokenNamethis
.	TokenNameDOT
blockCRC	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
last	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
blockSort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
0x31	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
0x41	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
0x59	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
0x26	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
0x53	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
0x59	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutInt	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
blockCRC	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsW	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
moveToFrontCodeAndSend	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
endCompression	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
0x17	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
0x72	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
0x45	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
0x38	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
0x50	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
0x90	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsPutInt	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
combinedCRC	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsFinishedWithStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
int	TokenNameint
getBlockSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
blockSize100k	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
write	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buf	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
offs	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
len	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
offs	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IndexOutOfBoundsException	TokenNameIdentifier
(	TokenNameLPAREN
"offs("	TokenNameStringLiteral
+	TokenNamePLUS
offs	TokenNameIdentifier
+	TokenNamePLUS
") < 0."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
len	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IndexOutOfBoundsException	TokenNameIdentifier
(	TokenNameLPAREN
"len("	TokenNameStringLiteral
+	TokenNamePLUS
len	TokenNameIdentifier
+	TokenNamePLUS
") < 0."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
offs	TokenNameIdentifier
+	TokenNamePLUS
len	TokenNameIdentifier
>	TokenNameGREATER
buf	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IndexOutOfBoundsException	TokenNameIdentifier
(	TokenNameLPAREN
"offs("	TokenNameStringLiteral
+	TokenNamePLUS
offs	TokenNameIdentifier
+	TokenNamePLUS
") + len("	TokenNameStringLiteral
+	TokenNamePLUS
len	TokenNameIdentifier
+	TokenNamePLUS
") > buf.length("	TokenNameStringLiteral
+	TokenNamePLUS
buf	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
+	TokenNamePLUS
")."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"stream closed"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
hi	TokenNameIdentifier
=	TokenNameEQUAL
offs	TokenNameIdentifier
+	TokenNamePLUS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
offs	TokenNameIdentifier
<	TokenNameLESS
hi	TokenNameIdentifier
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
write0	TokenNameIdentifier
(	TokenNameLPAREN
buf	TokenNameIdentifier
[	TokenNameLBRACKET
offs	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
write0	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
b	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
currentChar	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
&=	TokenNameAND_EQUAL
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
currentChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
b	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
this	TokenNamethis
.	TokenNameDOT
runLength	TokenNameIdentifier
>	TokenNameGREATER
254	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
writeRun	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
currentChar	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
runLength	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
writeRun	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
runLength	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
currentChar	TokenNameIdentifier
=	TokenNameEQUAL
b	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
currentChar	TokenNameIdentifier
=	TokenNameEQUAL
b	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
runLength	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
hbAssignCodes	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
code	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
length	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
minLen	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
maxLen	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
alphaSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
vec	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
minLen	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
maxLen	TokenNameIdentifier
;	TokenNameSEMICOLON
n	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
length	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
code	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
vec	TokenNameIdentifier
;	TokenNameSEMICOLON
vec	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
vec	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
bsFinishedWithStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
bsLive	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
ch	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
bsBuff	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
bsBuff	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
bsLive	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
bsW	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
n	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
v	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
OutputStream	TokenNameIdentifier
outShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bsLiveShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
bsLive	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bsBuffShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
bsBuff	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
bsLiveShadow	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
outShadow	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bsBuffShadow	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsBuffShadow	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
bsBuff	TokenNameIdentifier
=	TokenNameEQUAL
bsBuffShadow	TokenNameIdentifier
|	TokenNameOR
(	TokenNameLPAREN
v	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
32	TokenNameIntegerLiteral
-	TokenNameMINUS
bsLiveShadow	TokenNameIdentifier
-	TokenNameMINUS
n	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
bsLive	TokenNameIdentifier
=	TokenNameEQUAL
bsLiveShadow	TokenNameIdentifier
+	TokenNamePLUS
n	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
bsPutUByte	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
c	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
bsW	TokenNameIdentifier
(	TokenNameLPAREN
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
bsPutInt	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
u	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
bsW	TokenNameIdentifier
(	TokenNameLPAREN
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
u	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsW	TokenNameIdentifier
(	TokenNameLPAREN
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
u	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsW	TokenNameIdentifier
(	TokenNameLPAREN
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
u	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsW	TokenNameIdentifier
(	TokenNameLPAREN
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
u	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendMTFValues	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
.	TokenNameDOT
sendMTFValues_len	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
alphaSize	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
nInUse	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
=	TokenNameEQUAL
N_GROUPS	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
t	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len_t	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
v	TokenNameIdentifier
=	TokenNameEQUAL
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
v	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
len_t	TokenNameIdentifier
[	TokenNameLBRACKET
v	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
GREATER_ICOST	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
nGroups	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
nMTF	TokenNameIdentifier
<	TokenNameLESS
200	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
2	TokenNameIntegerLiteral
:	TokenNameCOLON
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
nMTF	TokenNameIdentifier
<	TokenNameLESS
600	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
3	TokenNameIntegerLiteral
:	TokenNameCOLON
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
nMTF	TokenNameIdentifier
<	TokenNameLESS
1200	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
4	TokenNameIntegerLiteral
:	TokenNameCOLON
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
nMTF	TokenNameIdentifier
<	TokenNameLESS
2400	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
5	TokenNameIntegerLiteral
:	TokenNameCOLON
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sendMTFValues0	TokenNameIdentifier
(	TokenNameLPAREN
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
alphaSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
nSelectors	TokenNameIdentifier
=	TokenNameEQUAL
sendMTFValues1	TokenNameIdentifier
(	TokenNameLPAREN
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
alphaSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendMTFValues2	TokenNameIdentifier
(	TokenNameLPAREN
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
nSelectors	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendMTFValues3	TokenNameIdentifier
(	TokenNameLPAREN
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
alphaSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendMTFValues4	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendMTFValues5	TokenNameIdentifier
(	TokenNameLPAREN
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
nSelectors	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendMTFValues6	TokenNameIdentifier
(	TokenNameLPAREN
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
alphaSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendMTFValues7	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendMTFValues0	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
alphaSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
.	TokenNameDOT
sendMTFValues_len	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
mtfFreq	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
.	TokenNameDOT
mtfFreq	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
remF	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
nMTF	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
gs	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
nPart	TokenNameIdentifier
=	TokenNameEQUAL
nGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
nPart	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
nPart	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
tFreq	TokenNameIdentifier
=	TokenNameEQUAL
remF	TokenNameIdentifier
/	TokenNameDIVIDE
nPart	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
ge	TokenNameIdentifier
=	TokenNameEQUAL
gs	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
aFreq	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
a	TokenNameIdentifier
=	TokenNameEQUAL
alphaSize	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
(	TokenNameLPAREN
aFreq	TokenNameIdentifier
<	TokenNameLESS
tFreq	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
ge	TokenNameIdentifier
<	TokenNameLESS
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
aFreq	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
mtfFreq	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
ge	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
ge	TokenNameIdentifier
>	TokenNameGREATER
gs	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
nPart	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
nGroups	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
nPart	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
nGroups	TokenNameIdentifier
-	TokenNameMINUS
nPart	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
aFreq	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
mtfFreq	TokenNameIdentifier
[	TokenNameLBRACKET
ge	TokenNameIdentifier
--	TokenNameMINUS_MINUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len_np	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
[	TokenNameLBRACKET
nPart	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
v	TokenNameIdentifier
=	TokenNameEQUAL
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
v	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
v	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
gs	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
v	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
ge	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
len_np	TokenNameIdentifier
[	TokenNameLBRACKET
v	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
LESSER_ICOST	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
len_np	TokenNameIdentifier
[	TokenNameLBRACKET
v	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
GREATER_ICOST	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
gs	TokenNameIdentifier
=	TokenNameEQUAL
ge	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
remF	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
aFreq	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
sendMTFValues1	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
alphaSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Data	TokenNameIdentifier
dataShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rfreq	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
sendMTFValues_rfreq	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fave	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
sendMTFValues_fave	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
cost	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
sendMTFValues_cost	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sfmap	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
sfmap	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
selector	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
selector	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
sendMTFValues_len	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len_0	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len_1	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len_2	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len_3	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len_4	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len_5	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
[	TokenNameLBRACKET
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
nMTFShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
nMTF	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nSelectors	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
iter	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
iter	TokenNameIdentifier
<	TokenNameLESS
N_ITERS	TokenNameIdentifier
;	TokenNameSEMICOLON
iter	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
=	TokenNameEQUAL
nGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
t	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
fave	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rfreqt	TokenNameIdentifier
=	TokenNameEQUAL
rfreq	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
rfreqt	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
nSelectors	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
gs	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gs	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
nMTF	TokenNameIdentifier
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
ge	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
(	TokenNameLPAREN
gs	TokenNameIdentifier
+	TokenNamePLUS
G_SIZE	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
nMTFShadow	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nGroups	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
N_GROUPS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
short	TokenNameshort
cost0	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
short	TokenNameshort
cost1	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
short	TokenNameshort
cost2	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
short	TokenNameshort
cost3	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
short	TokenNameshort
cost4	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
short	TokenNameshort
cost5	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
gs	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
ge	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
icv	TokenNameIdentifier
=	TokenNameEQUAL
sfmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
cost0	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
len_0	TokenNameIdentifier
[	TokenNameLBRACKET
icv	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
cost1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
len_1	TokenNameIdentifier
[	TokenNameLBRACKET
icv	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
cost2	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
len_2	TokenNameIdentifier
[	TokenNameLBRACKET
icv	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
cost3	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
len_3	TokenNameIdentifier
[	TokenNameLBRACKET
icv	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
cost4	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
len_4	TokenNameIdentifier
[	TokenNameLBRACKET
icv	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
cost5	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
len_5	TokenNameIdentifier
[	TokenNameLBRACKET
icv	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cost	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
cost0	TokenNameIdentifier
;	TokenNameSEMICOLON
cost	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
cost1	TokenNameIdentifier
;	TokenNameSEMICOLON
cost	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
cost2	TokenNameIdentifier
;	TokenNameSEMICOLON
cost	TokenNameIdentifier
[	TokenNameLBRACKET
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
cost3	TokenNameIdentifier
;	TokenNameSEMICOLON
cost	TokenNameIdentifier
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
cost4	TokenNameIdentifier
;	TokenNameSEMICOLON
cost	TokenNameIdentifier
[	TokenNameLBRACKET
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
cost5	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
=	TokenNameEQUAL
nGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
t	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
cost	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
gs	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
ge	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
icv	TokenNameIdentifier
=	TokenNameEQUAL
sfmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
=	TokenNameEQUAL
nGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
t	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
cost	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
len	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
icv	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
bt	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
=	TokenNameEQUAL
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
bc	TokenNameIdentifier
=	TokenNameEQUAL
999999999	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
t	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
cost_t	TokenNameIdentifier
=	TokenNameEQUAL
cost	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cost_t	TokenNameIdentifier
<	TokenNameLESS
bc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bc	TokenNameIdentifier
=	TokenNameEQUAL
cost_t	TokenNameIdentifier
;	TokenNameSEMICOLON
bt	TokenNameIdentifier
=	TokenNameEQUAL
t	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
fave	TokenNameIdentifier
[	TokenNameLBRACKET
bt	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
selector	TokenNameIdentifier
[	TokenNameLBRACKET
nSelectors	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
bt	TokenNameIdentifier
;	TokenNameSEMICOLON
nSelectors	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
rfreq_bt	TokenNameIdentifier
=	TokenNameEQUAL
rfreq	TokenNameIdentifier
[	TokenNameLBRACKET
bt	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
gs	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
ge	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
rfreq_bt	TokenNameIdentifier
[	TokenNameLBRACKET
sfmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
gs	TokenNameIdentifier
=	TokenNameEQUAL
ge	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
t	TokenNameIdentifier
<	TokenNameLESS
nGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
t	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
hbMakeCodeLengths	TokenNameIdentifier
(	TokenNameLPAREN
len	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
rfreq	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
,	TokenNameCOMMA
alphaSize	TokenNameIdentifier
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
nSelectors	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendMTFValues2	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
nSelectors	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Data	TokenNameIdentifier
dataShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
pos	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
sendMTFValues2_pos	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
nGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
pos	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nSelectors	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
byte	TokenNamebyte
ll_i	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
selector	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
byte	TokenNamebyte
tmp	TokenNameIdentifier
=	TokenNameEQUAL
pos	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
ll_i	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
tmp	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
byte	TokenNamebyte
tmp2	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
pos	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
pos	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pos	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
dataShadow	TokenNameIdentifier
.	TokenNameDOT
selectorMtf	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
j	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendMTFValues3	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
alphaSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
code	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
.	TokenNameDOT
sendMTFValues_code	TokenNameIdentifier
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
.	TokenNameDOT
sendMTFValues_len	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
t	TokenNameIdentifier
<	TokenNameLESS
nGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
t	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
minLen	TokenNameIdentifier
=	TokenNameEQUAL
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
maxLen	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len_t	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
l	TokenNameIdentifier
=	TokenNameEQUAL
len_t	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
l	TokenNameIdentifier
>	TokenNameGREATER
maxLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
maxLen	TokenNameIdentifier
=	TokenNameEQUAL
l	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
l	TokenNameIdentifier
<	TokenNameLESS
minLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
minLen	TokenNameIdentifier
=	TokenNameEQUAL
l	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
hbAssignCodes	TokenNameIdentifier
(	TokenNameLPAREN
code	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
len	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
minLen	TokenNameIdentifier
,	TokenNameCOMMA
maxLen	TokenNameIdentifier
,	TokenNameCOMMA
alphaSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendMTFValues4	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
inUse	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
.	TokenNameDOT
inUse	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
inUse16	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
.	TokenNameDOT
sentMTFValues4_inUse16	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
inUse16	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
i16	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
*	TokenNameMULTIPLY
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
j	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
inUse	TokenNameIdentifier
[	TokenNameLBRACKET
i16	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
inUse16	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
bsW	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
inUse16	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
?	TokenNameQUESTION
1	TokenNameIntegerLiteral
:	TokenNameCOLON
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
OutputStream	TokenNameIdentifier
outShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bsLiveShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
bsLive	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bsBuffShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
bsBuff	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
inUse16	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
i16	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
*	TokenNameMULTIPLY
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
bsLiveShadow	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
outShadow	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bsBuffShadow	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsBuffShadow	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
inUse	TokenNameIdentifier
[	TokenNameLBRACKET
i16	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
bsBuffShadow	TokenNameIdentifier
|=	TokenNameOR_EQUAL
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
32	TokenNameIntegerLiteral
-	TokenNameMINUS
bsLiveShadow	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bsLiveShadow	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
bsBuff	TokenNameIdentifier
=	TokenNameEQUAL
bsBuffShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
bsLive	TokenNameIdentifier
=	TokenNameEQUAL
bsLiveShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendMTFValues5	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
nSelectors	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
bsW	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
nGroups	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsW	TokenNameIdentifier
(	TokenNameLPAREN
15	TokenNameIntegerLiteral
,	TokenNameCOMMA
nSelectors	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
OutputStream	TokenNameIdentifier
outShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
selectorMtf	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
.	TokenNameDOT
selectorMtf	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bsLiveShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
bsLive	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bsBuffShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
bsBuff	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nSelectors	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
hj	TokenNameIdentifier
=	TokenNameEQUAL
selectorMtf	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
hj	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
bsLiveShadow	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
outShadow	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bsBuffShadow	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsBuffShadow	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bsBuffShadow	TokenNameIdentifier
|=	TokenNameOR_EQUAL
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
32	TokenNameIntegerLiteral
-	TokenNameMINUS
bsLiveShadow	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
bsLiveShadow	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
outShadow	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bsBuffShadow	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsBuffShadow	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bsLiveShadow	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
bsBuff	TokenNameIdentifier
=	TokenNameEQUAL
bsBuffShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
bsLive	TokenNameIdentifier
=	TokenNameEQUAL
bsLiveShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendMTFValues6	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
nGroups	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
alphaSize	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
.	TokenNameDOT
sendMTFValues_len	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
OutputStream	TokenNameIdentifier
outShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bsLiveShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
bsLive	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bsBuffShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
bsBuff	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
t	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
t	TokenNameIdentifier
<	TokenNameLESS
nGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
t	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len_t	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
[	TokenNameLBRACKET
t	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
curr	TokenNameIdentifier
=	TokenNameEQUAL
len_t	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
bsLiveShadow	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
outShadow	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bsBuffShadow	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsBuffShadow	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bsBuffShadow	TokenNameIdentifier
|=	TokenNameOR_EQUAL
curr	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
32	TokenNameIntegerLiteral
-	TokenNameMINUS
bsLiveShadow	TokenNameIdentifier
-	TokenNameMINUS
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
alphaSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
lti	TokenNameIdentifier
=	TokenNameEQUAL
len_t	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
curr	TokenNameIdentifier
<	TokenNameLESS
lti	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
bsLiveShadow	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
outShadow	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bsBuffShadow	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsBuffShadow	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bsBuffShadow	TokenNameIdentifier
|=	TokenNameOR_EQUAL
2	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
32	TokenNameIntegerLiteral
-	TokenNameMINUS
bsLiveShadow	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
curr	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
curr	TokenNameIdentifier
>	TokenNameGREATER
lti	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
bsLiveShadow	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
outShadow	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bsBuffShadow	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsBuffShadow	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bsBuffShadow	TokenNameIdentifier
|=	TokenNameOR_EQUAL
3	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
32	TokenNameIntegerLiteral
-	TokenNameMINUS
bsLiveShadow	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
curr	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
bsLiveShadow	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
outShadow	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bsBuffShadow	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsBuffShadow	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bsLiveShadow	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
bsBuff	TokenNameIdentifier
=	TokenNameEQUAL
bsBuffShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
bsLive	TokenNameIdentifier
=	TokenNameEQUAL
bsLiveShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
sendMTFValues7	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
Data	TokenNameIdentifier
dataShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
sendMTFValues_len	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
code	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
sendMTFValues_code	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
OutputStream	TokenNameIdentifier
outShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
out	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
selector	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
selector	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sfmap	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
sfmap	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
nMTFShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
nMTF	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
selCtr	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
bsLiveShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
bsLive	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
bsBuffShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
bsBuff	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
gs	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
gs	TokenNameIdentifier
<	TokenNameLESS
nMTFShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
ge	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
(	TokenNameLPAREN
gs	TokenNameIdentifier
+	TokenNamePLUS
G_SIZE	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
nMTFShadow	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
selector_selCtr	TokenNameIdentifier
=	TokenNameEQUAL
selector	TokenNameIdentifier
[	TokenNameLBRACKET
selCtr	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
code_selCtr	TokenNameIdentifier
=	TokenNameEQUAL
code	TokenNameIdentifier
[	TokenNameLBRACKET
selector_selCtr	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
len_selCtr	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
[	TokenNameLBRACKET
selector_selCtr	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
gs	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
ge	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
sfmap_i	TokenNameIdentifier
=	TokenNameEQUAL
sfmap	TokenNameIdentifier
[	TokenNameLBRACKET
gs	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
bsLiveShadow	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
outShadow	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
bsBuffShadow	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsBuffShadow	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
len_selCtr	TokenNameIdentifier
[	TokenNameLBRACKET
sfmap_i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xFF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bsBuffShadow	TokenNameIdentifier
|=	TokenNameOR_EQUAL
code_selCtr	TokenNameIdentifier
[	TokenNameLBRACKET
sfmap_i	TokenNameIdentifier
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
32	TokenNameIntegerLiteral
-	TokenNameMINUS
bsLiveShadow	TokenNameIdentifier
-	TokenNameMINUS
n	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bsLiveShadow	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
n	TokenNameIdentifier
;	TokenNameSEMICOLON
gs	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
gs	TokenNameIdentifier
=	TokenNameEQUAL
ge	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
selCtr	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
bsBuff	TokenNameIdentifier
=	TokenNameEQUAL
bsBuffShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
bsLive	TokenNameIdentifier
=	TokenNameEQUAL
bsLiveShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
moveToFrontCodeAndSend	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
bsW	TokenNameIdentifier
(	TokenNameLPAREN
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
.	TokenNameDOT
origPtr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
generateMTFValues	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sendMTFValues	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
blockSort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
blockSorter	TokenNameIdentifier
.	TokenNameDOT
blockSort	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
last	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
generateMTFValues	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
lastShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
last	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Data	TokenNameIdentifier
dataShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
data	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
inUse	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
inUse	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
block	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
block	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fmap	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
fmap	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sfmap	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
sfmap	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
mtfFreq	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
mtfFreq	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
unseqToSeq	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
unseqToSeq	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
yy	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
generateMTFValues_yy	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nInUseShadow	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
256	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
inUse	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
unseqToSeq	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
nInUseShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
nInUseShadow	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
nInUse	TokenNameIdentifier
=	TokenNameEQUAL
nInUseShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
eob	TokenNameIdentifier
=	TokenNameEQUAL
nInUseShadow	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
eob	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
mtfFreq	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
nInUseShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
yy	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
wr	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
zPend	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
lastShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
byte	TokenNamebyte
ll_i	TokenNameIdentifier
=	TokenNameEQUAL
unseqToSeq	TokenNameIdentifier
[	TokenNameLBRACKET
block	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
byte	TokenNamebyte
tmp	TokenNameIdentifier
=	TokenNameEQUAL
yy	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
ll_i	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
tmp	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
byte	TokenNamebyte
tmp2	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
=	TokenNameEQUAL
yy	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
yy	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
yy	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
j	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
zPend	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
zPend	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
zPend	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
zPend	TokenNameIdentifier
&	TokenNameAND
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sfmap	TokenNameIdentifier
[	TokenNameLBRACKET
wr	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
RUNA	TokenNameIdentifier
;	TokenNameSEMICOLON
wr	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
mtfFreq	TokenNameIdentifier
[	TokenNameLBRACKET
RUNA	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sfmap	TokenNameIdentifier
[	TokenNameLBRACKET
wr	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
RUNB	TokenNameIdentifier
;	TokenNameSEMICOLON
wr	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
mtfFreq	TokenNameIdentifier
[	TokenNameLBRACKET
RUNB	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
zPend	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
zPend	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
zPend	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
zPend	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sfmap	TokenNameIdentifier
[	TokenNameLBRACKET
wr	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
(	TokenNameLPAREN
j	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
wr	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
mtfFreq	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
zPend	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
zPend	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
zPend	TokenNameIdentifier
&	TokenNameAND
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
sfmap	TokenNameIdentifier
[	TokenNameLBRACKET
wr	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
RUNA	TokenNameIdentifier
;	TokenNameSEMICOLON
wr	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
mtfFreq	TokenNameIdentifier
[	TokenNameLBRACKET
RUNA	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
sfmap	TokenNameIdentifier
[	TokenNameLBRACKET
wr	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
RUNB	TokenNameIdentifier
;	TokenNameSEMICOLON
wr	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
mtfFreq	TokenNameIdentifier
[	TokenNameLBRACKET
RUNB	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
zPend	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
zPend	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
zPend	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
sfmap	TokenNameIdentifier
[	TokenNameLBRACKET
wr	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
eob	TokenNameIdentifier
;	TokenNameSEMICOLON
mtfFreq	TokenNameIdentifier
[	TokenNameLBRACKET
eob	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
nMTF	TokenNameIdentifier
=	TokenNameEQUAL
wr	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
Data	TokenNameIdentifier
extends	TokenNameextends
Object	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
inUse	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
boolean	TokenNameboolean
[	TokenNameLBRACKET
256	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
unseqToSeq	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
256	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
mtfFreq	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
MAX_ALPHA_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
selector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
MAX_SELECTORS	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
selectorMtf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
MAX_SELECTORS	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
generateMTFValues_yy	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
256	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sendMTFValues_len	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
N_GROUPS	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
MAX_ALPHA_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sendMTFValues_rfreq	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
N_GROUPS	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
MAX_ALPHA_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sendMTFValues_fave	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
N_GROUPS	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sendMTFValues_cost	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
short	TokenNameshort
[	TokenNameLBRACKET
N_GROUPS	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sendMTFValues_code	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
N_GROUPS	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
MAX_ALPHA_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sendMTFValues2_pos	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
N_GROUPS	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sentMTFValues4_inUse16	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
boolean	TokenNameboolean
[	TokenNameLBRACKET
16	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
heap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
MAX_ALPHA_SIZE	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
weight	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
MAX_ALPHA_SIZE	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
parent	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
MAX_ALPHA_SIZE	TokenNameIdentifier
*	TokenNameMULTIPLY
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
block	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fmap	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sfmap	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
origPtr	TokenNameIdentifier
;	TokenNameSEMICOLON
Data	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
blockSize100k	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
blockSize100k	TokenNameIdentifier
*	TokenNameMULTIPLY
BZip2Constants	TokenNameIdentifier
.	TokenNameDOT
baseBlockSize	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
block	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
(	TokenNameLPAREN
n	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
+	TokenNamePLUS
NUM_OVERSHOOT_BYTES	TokenNameIdentifier
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
fmap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
n	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
sfmap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
n	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
