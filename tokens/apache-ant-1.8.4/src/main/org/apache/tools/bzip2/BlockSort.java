package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
bzip2	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
BitSet	TokenNameIdentifier
;	TokenNameSEMICOLON
class	TokenNameclass
BlockSort	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
QSORT_STACK_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
1000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
FALLBACK_QSORT_STACK_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
100	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
STACK_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
QSORT_STACK_SIZE	TokenNameIdentifier
<	TokenNameLESS
FALLBACK_QSORT_STACK_SIZE	TokenNameIdentifier
?	TokenNameQUESTION
FALLBACK_QSORT_STACK_SIZE	TokenNameIdentifier
:	TokenNameCOLON
QSORT_STACK_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
workDone	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
workLimit	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
firstAttempt	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
stack_ll	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
stack_hh	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
stack_dd	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
QSORT_STACK_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
mainSort_runningOrder	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
256	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
mainSort_copy	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
256	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
mainSort_bigDone	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
boolean	TokenNameboolean
[	TokenNameLBRACKET
256	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ftab	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
65537	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
quadrant	TokenNameIdentifier
;	TokenNameSEMICOLON
BlockSort	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
CBZip2OutputStream	TokenNameIdentifier
.	TokenNameDOT
Data	TokenNameIdentifier
data	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
quadrant	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
sfmap	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
blockSort	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
CBZip2OutputStream	TokenNameIdentifier
.	TokenNameDOT
Data	TokenNameIdentifier
data	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
last	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
workLimit	TokenNameIdentifier
=	TokenNameEQUAL
WORK_FACTOR	TokenNameIdentifier
*	TokenNameMULTIPLY
last	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
workDone	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
firstAttempt	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
last	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
10000	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fallbackSort	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
last	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
mainSort	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
last	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
firstAttempt	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
workDone	TokenNameIdentifier
>	TokenNameGREATER
this	TokenNamethis
.	TokenNameDOT
workLimit	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fallbackSort	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
,	TokenNameCOMMA
last	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fmap	TokenNameIdentifier
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
fmap	TokenNameIdentifier
;	TokenNameSEMICOLON
data	TokenNameIdentifier
.	TokenNameDOT
origPtr	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
last	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
.	TokenNameDOT
origPtr	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
final	TokenNamefinal
void	TokenNamevoid
fallbackSort	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
CBZip2OutputStream	TokenNameIdentifier
.	TokenNameDOT
Data	TokenNameIdentifier
data	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
last	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
.	TokenNameDOT
block	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
data	TokenNameIdentifier
.	TokenNameDOT
block	TokenNameIdentifier
[	TokenNameLBRACKET
last	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fallbackSort	TokenNameIdentifier
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
fmap	TokenNameIdentifier
,	TokenNameCOMMA
data	TokenNameIdentifier
.	TokenNameDOT
block	TokenNameIdentifier
,	TokenNameCOMMA
last	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
last	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
--	TokenNameMINUS_MINUS
data	TokenNameIdentifier
.	TokenNameDOT
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
last	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
.	TokenNameDOT
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
data	TokenNameIdentifier
.	TokenNameDOT
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
last	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
fallbackSimpleSort	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fmap	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
eclass	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
lo	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
hi	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
lo	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
hi	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
j	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
hi	TokenNameIdentifier
-	TokenNameMINUS
lo	TokenNameIdentifier
>	TokenNameGREATER
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
hi	TokenNameIdentifier
-	TokenNameMINUS
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
lo	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
tmp	TokenNameIdentifier
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
ec_tmp	TokenNameIdentifier
=	TokenNameEQUAL
eclass	TokenNameIdentifier
[	TokenNameLBRACKET
tmp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
j	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
hi	TokenNameIdentifier
&&	TokenNameAND_AND
ec_tmp	TokenNameIdentifier
>	TokenNameGREATER
eclass	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
-	TokenNameMINUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
-	TokenNameMINUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
hi	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
lo	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
tmp	TokenNameIdentifier
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
ec_tmp	TokenNameIdentifier
=	TokenNameEQUAL
eclass	TokenNameIdentifier
[	TokenNameLBRACKET
tmp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
j	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
hi	TokenNameIdentifier
&&	TokenNameAND_AND
ec_tmp	TokenNameIdentifier
>	TokenNameGREATER
eclass	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
FALLBACK_QSORT_SMALL_THRESH	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
void	TokenNamevoid
fswap	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fmap	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
zz1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
zz2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
zztmp	TokenNameIdentifier
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
zz1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
zz1	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
zz2	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
zz2	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
zztmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
fvswap	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fmap	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
yyp1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
yyp2	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
yyn	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
yyn	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fswap	TokenNameIdentifier
(	TokenNameLPAREN
fmap	TokenNameIdentifier
,	TokenNameCOMMA
yyp1	TokenNameIdentifier
,	TokenNameCOMMA
yyp2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
yyp1	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
yyp2	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
yyn	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
fmin	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
a	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
b	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
a	TokenNameIdentifier
<	TokenNameLESS
b	TokenNameIdentifier
?	TokenNameQUESTION
a	TokenNameIdentifier
:	TokenNameCOLON
b	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
fpush	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
sp	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
lz	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
hz	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stack_ll	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
lz	TokenNameIdentifier
;	TokenNameSEMICOLON
stack_hh	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
hz	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fpop	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
sp	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
stack_ll	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
stack_hh	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
fallbackQSort3	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fmap	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
eclass	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
loSt	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
hiSt	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
lo	TokenNameIdentifier
,	TokenNameCOMMA
unLo	TokenNameIdentifier
,	TokenNameCOMMA
ltLo	TokenNameIdentifier
,	TokenNameCOMMA
hi	TokenNameIdentifier
,	TokenNameCOMMA
unHi	TokenNameIdentifier
,	TokenNameCOMMA
gtHi	TokenNameIdentifier
,	TokenNameCOMMA
n	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
r	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
sp	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fpush	TokenNameIdentifier
(	TokenNameLPAREN
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
loSt	TokenNameIdentifier
,	TokenNameCOMMA
hiSt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
sp	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
s	TokenNameIdentifier
=	TokenNameEQUAL
fpop	TokenNameIdentifier
(	TokenNameLPAREN
--	TokenNameMINUS_MINUS
sp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lo	TokenNameIdentifier
=	TokenNameEQUAL
s	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
hi	TokenNameIdentifier
=	TokenNameEQUAL
s	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
hi	TokenNameIdentifier
-	TokenNameMINUS
lo	TokenNameIdentifier
<	TokenNameLESS
FALLBACK_QSORT_SMALL_THRESH	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fallbackSimpleSort	TokenNameIdentifier
(	TokenNameLPAREN
fmap	TokenNameIdentifier
,	TokenNameCOMMA
eclass	TokenNameIdentifier
,	TokenNameCOMMA
lo	TokenNameIdentifier
,	TokenNameCOMMA
hi	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
r	TokenNameIdentifier
*	TokenNameMULTIPLY
7621	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
%	TokenNameREMAINDER
32768	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
r3	TokenNameIdentifier
=	TokenNameEQUAL
r	TokenNameIdentifier
%	TokenNameREMAINDER
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
med	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
r3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
med	TokenNameIdentifier
=	TokenNameEQUAL
eclass	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
lo	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
r3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
med	TokenNameIdentifier
=	TokenNameEQUAL
eclass	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
lo	TokenNameIdentifier
+	TokenNamePLUS
hi	TokenNameIdentifier
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
med	TokenNameIdentifier
=	TokenNameEQUAL
eclass	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
hi	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
unLo	TokenNameIdentifier
=	TokenNameEQUAL
ltLo	TokenNameIdentifier
=	TokenNameEQUAL
lo	TokenNameIdentifier
;	TokenNameSEMICOLON
unHi	TokenNameIdentifier
=	TokenNameEQUAL
gtHi	TokenNameIdentifier
=	TokenNameEQUAL
hi	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
unLo	TokenNameIdentifier
>	TokenNameGREATER
unHi	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
n	TokenNameIdentifier
=	TokenNameEQUAL
eclass	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
unLo	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
med	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fswap	TokenNameIdentifier
(	TokenNameLPAREN
fmap	TokenNameIdentifier
,	TokenNameCOMMA
unLo	TokenNameIdentifier
,	TokenNameCOMMA
ltLo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ltLo	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
unLo	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
unLo	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
unLo	TokenNameIdentifier
>	TokenNameGREATER
unHi	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
n	TokenNameIdentifier
=	TokenNameEQUAL
eclass	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
unHi	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
-	TokenNameMINUS
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
med	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fswap	TokenNameIdentifier
(	TokenNameLPAREN
fmap	TokenNameIdentifier
,	TokenNameCOMMA
unHi	TokenNameIdentifier
,	TokenNameCOMMA
gtHi	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
gtHi	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
unHi	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
unHi	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
unLo	TokenNameIdentifier
>	TokenNameGREATER
unHi	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fswap	TokenNameIdentifier
(	TokenNameLPAREN
fmap	TokenNameIdentifier
,	TokenNameCOMMA
unLo	TokenNameIdentifier
,	TokenNameCOMMA
unHi	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
unLo	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
unHi	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
gtHi	TokenNameIdentifier
<	TokenNameLESS
ltLo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
n	TokenNameIdentifier
=	TokenNameEQUAL
fmin	TokenNameIdentifier
(	TokenNameLPAREN
ltLo	TokenNameIdentifier
-	TokenNameMINUS
lo	TokenNameIdentifier
,	TokenNameCOMMA
unLo	TokenNameIdentifier
-	TokenNameMINUS
ltLo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fvswap	TokenNameIdentifier
(	TokenNameLPAREN
fmap	TokenNameIdentifier
,	TokenNameCOMMA
lo	TokenNameIdentifier
,	TokenNameCOMMA
unLo	TokenNameIdentifier
-	TokenNameMINUS
n	TokenNameIdentifier
,	TokenNameCOMMA
n	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
fmin	TokenNameIdentifier
(	TokenNameLPAREN
hi	TokenNameIdentifier
-	TokenNameMINUS
gtHi	TokenNameIdentifier
,	TokenNameCOMMA
gtHi	TokenNameIdentifier
-	TokenNameMINUS
unHi	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fvswap	TokenNameIdentifier
(	TokenNameLPAREN
fmap	TokenNameIdentifier
,	TokenNameCOMMA
unHi	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
hi	TokenNameIdentifier
-	TokenNameMINUS
m	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
m	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
=	TokenNameEQUAL
lo	TokenNameIdentifier
+	TokenNamePLUS
unLo	TokenNameIdentifier
-	TokenNameMINUS
ltLo	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
=	TokenNameEQUAL
hi	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
gtHi	TokenNameIdentifier
-	TokenNameMINUS
unHi	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
-	TokenNameMINUS
lo	TokenNameIdentifier
>	TokenNameGREATER
hi	TokenNameIdentifier
-	TokenNameMINUS
m	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fpush	TokenNameIdentifier
(	TokenNameLPAREN
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
lo	TokenNameIdentifier
,	TokenNameCOMMA
n	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fpush	TokenNameIdentifier
(	TokenNameLPAREN
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
m	TokenNameIdentifier
,	TokenNameCOMMA
hi	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
fpush	TokenNameIdentifier
(	TokenNameLPAREN
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
m	TokenNameIdentifier
,	TokenNameCOMMA
hi	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fpush	TokenNameIdentifier
(	TokenNameLPAREN
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
lo	TokenNameIdentifier
,	TokenNameCOMMA
n	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
eclass	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getEclass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
eclass	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
(	TokenNameLPAREN
eclass	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
quadrant	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
:	TokenNameCOLON
eclass	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
void	TokenNamevoid
fallbackSort	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fmap	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
block	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
nblock	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ftab	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
257	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
H	TokenNameIdentifier
,	TokenNameCOMMA
i	TokenNameIdentifier
,	TokenNameCOMMA
j	TokenNameIdentifier
,	TokenNameCOMMA
k	TokenNameIdentifier
,	TokenNameCOMMA
l	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
,	TokenNameCOMMA
cc	TokenNameIdentifier
,	TokenNameCOMMA
cc1	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nNotDone	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
nBhtab	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
eclass	TokenNameIdentifier
=	TokenNameEQUAL
getEclass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nblock	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
eclass	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nblock	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
block	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
257	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nblock	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
j	TokenNameIdentifier
=	TokenNameEQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
=	TokenNameEQUAL
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nBhtab	TokenNameIdentifier
=	TokenNameEQUAL
64	TokenNameIntegerLiteral
+	TokenNamePLUS
nblock	TokenNameIdentifier
;	TokenNameSEMICOLON
BitSet	TokenNameIdentifier
bhtab	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BitSet	TokenNameIdentifier
(	TokenNameLPAREN
nBhtab	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
256	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
bhtab	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
bhtab	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
nblock	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bhtab	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
nblock	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
H	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
nblock	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
bhtab	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
j	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
k	TokenNameIdentifier
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
-	TokenNameMINUS
H	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
k	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
k	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
nblock	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
eclass	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
j	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nNotDone	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
r	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
k	TokenNameIdentifier
=	TokenNameEQUAL
r	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
k	TokenNameIdentifier
=	TokenNameEQUAL
bhtab	TokenNameIdentifier
.	TokenNameDOT
nextClearBit	TokenNameIdentifier
(	TokenNameLPAREN
k	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
l	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
l	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
nblock	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
k	TokenNameIdentifier
=	TokenNameEQUAL
bhtab	TokenNameIdentifier
.	TokenNameDOT
nextSetBit	TokenNameIdentifier
(	TokenNameLPAREN
k	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
r	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
r	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
nblock	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
r	TokenNameIdentifier
>	TokenNameGREATER
l	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nNotDone	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
r	TokenNameIdentifier
-	TokenNameMINUS
l	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fallbackQSort3	TokenNameIdentifier
(	TokenNameLPAREN
fmap	TokenNameIdentifier
,	TokenNameCOMMA
eclass	TokenNameIdentifier
,	TokenNameCOMMA
l	TokenNameIdentifier
,	TokenNameCOMMA
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cc	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
l	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
r	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
cc1	TokenNameIdentifier
=	TokenNameEQUAL
eclass	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cc	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
cc1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bhtab	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cc	TokenNameIdentifier
=	TokenNameEQUAL
cc1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
H	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
H	TokenNameIdentifier
>	TokenNameGREATER
nblock	TokenNameIdentifier
||	TokenNameOR_OR
nNotDone	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
INCS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
,	TokenNameCOMMA
40	TokenNameIntegerLiteral
,	TokenNameCOMMA
121	TokenNameIntegerLiteral
,	TokenNameCOMMA
364	TokenNameIntegerLiteral
,	TokenNameCOMMA
1093	TokenNameIntegerLiteral
,	TokenNameCOMMA
3280	TokenNameIntegerLiteral
,	TokenNameCOMMA
9841	TokenNameIntegerLiteral
,	TokenNameCOMMA
29524	TokenNameIntegerLiteral
,	TokenNameCOMMA
88573	TokenNameIntegerLiteral
,	TokenNameCOMMA
265720	TokenNameIntegerLiteral
,	TokenNameCOMMA
797161	TokenNameIntegerLiteral
,	TokenNameCOMMA
2391484	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
mainSimpleSort	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
CBZip2OutputStream	TokenNameIdentifier
.	TokenNameDOT
Data	TokenNameIdentifier
dataShadow	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
lo	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
hi	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
d	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
lastShadow	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
bigN	TokenNameIdentifier
=	TokenNameEQUAL
hi	TokenNameIdentifier
-	TokenNameMINUS
lo	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
bigN	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
firstAttempt	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
workDone	TokenNameIdentifier
>	TokenNameGREATER
this	TokenNamethis
.	TokenNameDOT
workLimit	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
hp	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
INCS	TokenNameIdentifier
[	TokenNameLBRACKET
hp	TokenNameIdentifier
]	TokenNameRBRACKET
<	TokenNameLESS
bigN	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
hp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fmap	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
fmap	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
quadrant	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
quadrant	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
block	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
block	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
lastPlus1	TokenNameIdentifier
=	TokenNameEQUAL
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
boolean	TokenNameboolean
firstAttemptShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
firstAttempt	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
workLimitShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
workLimit	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
workDoneShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
workDone	TokenNameIdentifier
;	TokenNameSEMICOLON
HP	TokenNameIdentifier
:	TokenNameCOLON
while	TokenNamewhile
(	TokenNameLPAREN
--	TokenNameMINUS_MINUS
hp	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
INCS	TokenNameIdentifier
[	TokenNameLBRACKET
hp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
mj	TokenNameIdentifier
=	TokenNameEQUAL
lo	TokenNameIdentifier
+	TokenNamePLUS
h	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
lo	TokenNameIdentifier
+	TokenNamePLUS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
hi	TokenNameIdentifier
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
hi	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
--	TokenNameMINUS_MINUS
k	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
v	TokenNameIdentifier
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
vd	TokenNameIdentifier
=	TokenNameEQUAL
v	TokenNameIdentifier
+	TokenNamePLUS
d	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
onceRunned	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
a	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
HAMMER	TokenNameIdentifier
:	TokenNameCOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
onceRunned	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
a	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
j	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
h	TokenNameIdentifier
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
mj	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
onceRunned	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
-	TokenNameMINUS
h	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
i1	TokenNameIdentifier
=	TokenNameEQUAL
a	TokenNameIdentifier
+	TokenNamePLUS
d	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
i2	TokenNameIdentifier
=	TokenNameEQUAL
vd	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
i1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
i2	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
x	TokenNameIdentifier
=	TokenNameEQUAL
lastShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
X	TokenNameIdentifier
:	TokenNameCOLON
while	TokenNamewhile
(	TokenNameLPAREN
x	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
x	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
lastPlus1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
i1	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
lastPlus1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i2	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
lastPlus1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
i2	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
lastPlus1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
workDoneShadow	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
continue	TokenNamecontinue
X	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>	TokenNameGREATER
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>	TokenNameGREATER
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>	TokenNameGREATER
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
]	TokenNameRBRACKET
>	TokenNameGREATER
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>	TokenNameGREATER
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
HAMMER	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
v	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
firstAttemptShadow	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
hi	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
workDoneShadow	TokenNameIdentifier
>	TokenNameGREATER
workLimitShadow	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
HP	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
workDone	TokenNameIdentifier
=	TokenNameEQUAL
workDoneShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
firstAttemptShadow	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
workDoneShadow	TokenNameIdentifier
>	TokenNameGREATER
workLimitShadow	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
vswap	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fmap	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
p1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
p2	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
n	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
p1	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
p1	TokenNameIdentifier
<	TokenNameLESS
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
t	TokenNameIdentifier
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
p1	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
p1	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
p2	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
p2	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
t	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
byte	TokenNamebyte
med3	TokenNameIdentifier
(	TokenNameLPAREN
byte	TokenNamebyte
a	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
b	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
a	TokenNameIdentifier
<	TokenNameLESS
b	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
b	TokenNameIdentifier
<	TokenNameLESS
c	TokenNameIdentifier
?	TokenNameQUESTION
b	TokenNameIdentifier
:	TokenNameCOLON
a	TokenNameIdentifier
<	TokenNameLESS
c	TokenNameIdentifier
?	TokenNameQUESTION
c	TokenNameIdentifier
:	TokenNameCOLON
a	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
(	TokenNameLPAREN
b	TokenNameIdentifier
>	TokenNameGREATER
c	TokenNameIdentifier
?	TokenNameQUESTION
b	TokenNameIdentifier
:	TokenNameCOLON
a	TokenNameIdentifier
>	TokenNameGREATER
c	TokenNameIdentifier
?	TokenNameQUESTION
c	TokenNameIdentifier
:	TokenNameCOLON
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
SMALL_THRESH	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DEPTH_THRESH	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
WORK_FACTOR	TokenNameIdentifier
=	TokenNameEQUAL
30	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
void	TokenNamevoid
mainQSort3	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
CBZip2OutputStream	TokenNameIdentifier
.	TokenNameDOT
Data	TokenNameIdentifier
dataShadow	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
loSt	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
hiSt	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
dSt	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
last	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
stack_ll	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
stack_ll	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
stack_hh	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
stack_hh	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
stack_dd	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
stack_dd	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fmap	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
fmap	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
block	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
block	TokenNameIdentifier
;	TokenNameSEMICOLON
stack_ll	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
loSt	TokenNameIdentifier
;	TokenNameSEMICOLON
stack_hh	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
hiSt	TokenNameIdentifier
;	TokenNameSEMICOLON
stack_dd	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
dSt	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
sp	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
sp	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
lo	TokenNameIdentifier
=	TokenNameEQUAL
stack_ll	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
hi	TokenNameIdentifier
=	TokenNameEQUAL
stack_hh	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
d	TokenNameIdentifier
=	TokenNameEQUAL
stack_dd	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
hi	TokenNameIdentifier
-	TokenNameMINUS
lo	TokenNameIdentifier
<	TokenNameLESS
SMALL_THRESH	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
d	TokenNameIdentifier
>	TokenNameGREATER
DEPTH_THRESH	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
mainSimpleSort	TokenNameIdentifier
(	TokenNameLPAREN
dataShadow	TokenNameIdentifier
,	TokenNameCOMMA
lo	TokenNameIdentifier
,	TokenNameCOMMA
hi	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
,	TokenNameCOMMA
last	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
d1	TokenNameIdentifier
=	TokenNameEQUAL
d	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
med	TokenNameIdentifier
=	TokenNameEQUAL
med3	TokenNameIdentifier
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
lo	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
d1	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
block	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
hi	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
d1	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
block	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
lo	TokenNameIdentifier
+	TokenNamePLUS
hi	TokenNameIdentifier
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
d1	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
unLo	TokenNameIdentifier
=	TokenNameEQUAL
lo	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
unHi	TokenNameIdentifier
=	TokenNameEQUAL
hi	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
ltLo	TokenNameIdentifier
=	TokenNameEQUAL
lo	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
gtHi	TokenNameIdentifier
=	TokenNameEQUAL
hi	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
unLo	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
unHi	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
unLo	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
d1	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
med	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
temp	TokenNameIdentifier
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
unLo	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
unLo	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
ltLo	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
ltLo	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
temp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
unLo	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
unLo	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
unHi	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
unHi	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
d1	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
med	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
temp	TokenNameIdentifier
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
unHi	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
unHi	TokenNameIdentifier
--	TokenNameMINUS_MINUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
gtHi	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
gtHi	TokenNameIdentifier
--	TokenNameMINUS_MINUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
temp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
unHi	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
unLo	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
unHi	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
temp	TokenNameIdentifier
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
unLo	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
unLo	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
unHi	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
unHi	TokenNameIdentifier
--	TokenNameMINUS_MINUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
temp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
gtHi	TokenNameIdentifier
<	TokenNameLESS
ltLo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stack_ll	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
lo	TokenNameIdentifier
;	TokenNameSEMICOLON
stack_hh	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
hi	TokenNameIdentifier
;	TokenNameSEMICOLON
stack_dd	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
d1	TokenNameIdentifier
;	TokenNameSEMICOLON
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
ltLo	TokenNameIdentifier
-	TokenNameMINUS
lo	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
(	TokenNameLPAREN
unLo	TokenNameIdentifier
-	TokenNameMINUS
ltLo	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
ltLo	TokenNameIdentifier
-	TokenNameMINUS
lo	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
(	TokenNameLPAREN
unLo	TokenNameIdentifier
-	TokenNameMINUS
ltLo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
vswap	TokenNameIdentifier
(	TokenNameLPAREN
fmap	TokenNameIdentifier
,	TokenNameCOMMA
lo	TokenNameIdentifier
,	TokenNameCOMMA
unLo	TokenNameIdentifier
-	TokenNameMINUS
n	TokenNameIdentifier
,	TokenNameCOMMA
n	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
m	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
hi	TokenNameIdentifier
-	TokenNameMINUS
gtHi	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
(	TokenNameLPAREN
gtHi	TokenNameIdentifier
-	TokenNameMINUS
unHi	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
hi	TokenNameIdentifier
-	TokenNameMINUS
gtHi	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
(	TokenNameLPAREN
gtHi	TokenNameIdentifier
-	TokenNameMINUS
unHi	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
vswap	TokenNameIdentifier
(	TokenNameLPAREN
fmap	TokenNameIdentifier
,	TokenNameCOMMA
unLo	TokenNameIdentifier
,	TokenNameCOMMA
hi	TokenNameIdentifier
-	TokenNameMINUS
m	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
m	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
=	TokenNameEQUAL
lo	TokenNameIdentifier
+	TokenNamePLUS
unLo	TokenNameIdentifier
-	TokenNameMINUS
ltLo	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
m	TokenNameIdentifier
=	TokenNameEQUAL
hi	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
gtHi	TokenNameIdentifier
-	TokenNameMINUS
unHi	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
stack_ll	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
lo	TokenNameIdentifier
;	TokenNameSEMICOLON
stack_hh	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
n	TokenNameIdentifier
;	TokenNameSEMICOLON
stack_dd	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
d	TokenNameIdentifier
;	TokenNameSEMICOLON
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
stack_ll	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
n	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
stack_hh	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
m	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
stack_dd	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
d1	TokenNameIdentifier
;	TokenNameSEMICOLON
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
stack_ll	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
m	TokenNameIdentifier
;	TokenNameSEMICOLON
stack_hh	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
hi	TokenNameIdentifier
;	TokenNameSEMICOLON
stack_dd	TokenNameIdentifier
[	TokenNameLBRACKET
sp	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
d	TokenNameIdentifier
;	TokenNameSEMICOLON
sp	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
SETMASK	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
21	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CLEARMASK	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
~	TokenNameTWIDDLE
SETMASK	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
void	TokenNamevoid
mainSort	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
CBZip2OutputStream	TokenNameIdentifier
.	TokenNameDOT
Data	TokenNameIdentifier
dataShadow	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
lastShadow	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
runningOrder	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
mainSort_runningOrder	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
copy	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
mainSort_copy	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
boolean	TokenNameboolean
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bigDone	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
mainSort_bigDone	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ftab	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
ftab	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
block	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
block	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fmap	TokenNameIdentifier
=	TokenNameEQUAL
dataShadow	TokenNameIdentifier
.	TokenNameDOT
fmap	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
quadrant	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
quadrant	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
workLimitShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
workLimit	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
boolean	TokenNameboolean
firstAttemptShadow	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
firstAttempt	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
65537	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
BZip2Constants	TokenNameIdentifier
.	TokenNameDOT
NUM_OVERSHOOT_BYTES	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
i	TokenNameIdentifier
%	TokenNameREMAINDER
(	TokenNameLPAREN
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
BZip2Constants	TokenNameIdentifier
.	TokenNameDOT
NUM_OVERSHOOT_BYTES	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
block	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
c1	TokenNameIdentifier
=	TokenNameEQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
lastShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
c2	TokenNameIdentifier
=	TokenNameEQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
c1	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
c2	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
c1	TokenNameIdentifier
=	TokenNameEQUAL
c2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
65536	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
+=	TokenNamePLUS_EQUAL
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
c1	TokenNameIdentifier
=	TokenNameEQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
lastShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
c2	TokenNameIdentifier
=	TokenNameEQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
--	TokenNameMINUS_MINUS
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
c1	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
c2	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
c1	TokenNameIdentifier
=	TokenNameEQUAL
c2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
--	TokenNameMINUS_MINUS
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
block	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
]	TokenNameRBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
lastShadow	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
256	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
bigDone	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
runningOrder	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
364	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
h	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
h	TokenNameIdentifier
/=	TokenNameDIVIDE_EQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
h	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
vv	TokenNameIdentifier
=	TokenNameEQUAL
runningOrder	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
a	TokenNameIdentifier
=	TokenNameEQUAL
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
vv	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-	TokenNameMINUS
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
vv	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
b	TokenNameIdentifier
=	TokenNameEQUAL
h	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
ro	TokenNameIdentifier
=	TokenNameEQUAL
runningOrder	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
-	TokenNameMINUS
h	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
(	TokenNameLPAREN
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
ro	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
-	TokenNameMINUS
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
ro	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
>	TokenNameGREATER
a	TokenNameIdentifier
;	TokenNameSEMICOLON
ro	TokenNameIdentifier
=	TokenNameEQUAL
runningOrder	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
-	TokenNameMINUS
h	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
runningOrder	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
ro	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
h	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
b	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
runningOrder	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
vv	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
ss	TokenNameIdentifier
=	TokenNameEQUAL
runningOrder	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
sb	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ss	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
j	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
ftab_sb	TokenNameIdentifier
=	TokenNameEQUAL
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
sb	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
ftab_sb	TokenNameIdentifier
&	TokenNameAND
SETMASK	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
SETMASK	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
lo	TokenNameIdentifier
=	TokenNameEQUAL
ftab_sb	TokenNameIdentifier
&	TokenNameAND
CLEARMASK	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
hi	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
sb	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
CLEARMASK	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
hi	TokenNameIdentifier
>	TokenNameGREATER
lo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
mainQSort3	TokenNameIdentifier
(	TokenNameLPAREN
dataShadow	TokenNameIdentifier
,	TokenNameCOMMA
lo	TokenNameIdentifier
,	TokenNameCOMMA
hi	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
lastShadow	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
firstAttemptShadow	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
workDone	TokenNameIdentifier
>	TokenNameGREATER
workLimitShadow	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
sb	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
ftab_sb	TokenNameIdentifier
|	TokenNameOR
SETMASK	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
255	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
copy	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
j	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
ss	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
CLEARMASK	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
ss	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
CLEARMASK	TokenNameIdentifier
,	TokenNameCOMMA
hj	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
ss	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
CLEARMASK	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
hj	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
fmap_j	TokenNameIdentifier
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
c1	TokenNameIdentifier
=	TokenNameEQUAL
block	TokenNameIdentifier
[	TokenNameLBRACKET
fmap_j	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
bigDone	TokenNameIdentifier
[	TokenNameLBRACKET
c1	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
copy	TokenNameIdentifier
[	TokenNameLBRACKET
c1	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
fmap_j	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
lastShadow	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
fmap_j	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
copy	TokenNameIdentifier
[	TokenNameLBRACKET
c1	TokenNameIdentifier
]	TokenNameRBRACKET
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
256	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
j	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
j	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
ss	TokenNameIdentifier
]	TokenNameRBRACKET
|=	TokenNameOR_EQUAL
SETMASK	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bigDone	TokenNameIdentifier
[	TokenNameLBRACKET
ss	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
255	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
bbStart	TokenNameIdentifier
=	TokenNameEQUAL
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
ss	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
CLEARMASK	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
bbSize	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ftab	TokenNameIdentifier
[	TokenNameLBRACKET
(	TokenNameLPAREN
ss	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
CLEARMASK	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
bbStart	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
shifts	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
bbSize	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
shifts	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
65534	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
shifts	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
bbSize	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
a2update	TokenNameIdentifier
=	TokenNameEQUAL
fmap	TokenNameIdentifier
[	TokenNameLBRACKET
bbStart	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
qVal	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
(	TokenNameLPAREN
j	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
shifts	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
a2update	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
qVal	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
a2update	TokenNameIdentifier
<	TokenNameLESS
BZip2Constants	TokenNameIdentifier
.	TokenNameDOT
NUM_OVERSHOOT_BYTES	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
quadrant	TokenNameIdentifier
[	TokenNameLBRACKET
a2update	TokenNameIdentifier
+	TokenNamePLUS
lastShadow	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
qVal	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
