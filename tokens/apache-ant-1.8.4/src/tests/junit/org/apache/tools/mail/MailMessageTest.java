package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
mail	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
BufferedReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
BufferedWriter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
ByteArrayOutputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
InputStreamReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
OutputStreamWriter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
PrintStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
net	TokenNameIdentifier
.	TokenNameDOT
InetAddress	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
net	TokenNameIdentifier
.	TokenNameDOT
Socket	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
net	TokenNameIdentifier
.	TokenNameDOT
ServerSocket	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Enumeration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Vector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
mail	TokenNameIdentifier
.	TokenNameDOT
MailMessage	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
junit	TokenNameIdentifier
.	TokenNameDOT
framework	TokenNameIdentifier
.	TokenNameDOT
TestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
MailMessageTest	TokenNameIdentifier
extends	TokenNameextends
TestCase	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
TEST_PORT	TokenNameIdentifier
=	TokenNameEQUAL
27224	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
local	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
public	TokenNamepublic
MailMessageTest	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
local	TokenNameIdentifier
=	TokenNameEQUAL
InetAddress	TokenNameIdentifier
.	TokenNameDOT
getLocalHost	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getHostName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
net	TokenNameIdentifier
.	TokenNameDOT
UnknownHostException	TokenNameIdentifier
uhe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testAPIExample	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ServerThread	TokenNameIdentifier
testMailServer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ServerThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
server	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailServer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
server	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ClientThread	TokenNameIdentifier
testMailClient	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ClientThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
from	TokenNameIdentifier
(	TokenNameLPAREN
"Mail Message <EmailTaskTest@ant.apache.org>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
to	TokenNameIdentifier
(	TokenNameLPAREN
"to@you.com"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
cc	TokenNameIdentifier
(	TokenNameLPAREN
"cc1@you.com"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
cc	TokenNameIdentifier
(	TokenNameLPAREN
"cc2@you.com"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
bcc	TokenNameIdentifier
(	TokenNameLPAREN
"bcc@you.com"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setSubject	TokenNameIdentifier
(	TokenNameLPAREN
"Test subject"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setMessage	TokenNameIdentifier
(	TokenNameLPAREN
"test line 1 "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
client	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
server	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
60	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
30	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
ie	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"InterruptedException: "	TokenNameStringLiteral
+	TokenNamePLUS
ie	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
testMailServer	TokenNameIdentifier
.	TokenNameDOT
getResult	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
expectedResult	TokenNameIdentifier
=	TokenNameEQUAL
"220 test SMTP EmailTaskTest "	TokenNameStringLiteral
+	TokenNamePLUS
"HELO "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" Hello "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" [127.0.0.1], pleased to meet you "	TokenNameStringLiteral
+	TokenNamePLUS
"MAIL FROM: <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"RCPT TO: <to@you.com> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"RCPT TO: <cc1@you.com> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"RCPT TO: <cc2@you.com> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"RCPT TO: <bcc@you.com> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"DATA "	TokenNameStringLiteral
+	TokenNamePLUS
"354 "	TokenNameStringLiteral
+	TokenNamePLUS
"Subject: Test subject "	TokenNameStringLiteral
+	TokenNamePLUS
"From: Mail Message <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"To: to@you.com "	TokenNameStringLiteral
+	TokenNamePLUS
"Cc: cc1@you.com, cc2@you.com "	TokenNameStringLiteral
+	TokenNamePLUS
"X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org) "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 1 "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 2 "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
". "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"QUIT "	TokenNameStringLiteral
+	TokenNamePLUS
"221 "	TokenNameStringLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
icounter	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
icounter	TokenNameIdentifier
<	TokenNameLESS
expectedResult	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
icounter	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
icounter	TokenNameIdentifier
<	TokenNameLESS
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
icounter	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
result	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
icounter	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"posit "	TokenNameStringLiteral
+	TokenNamePLUS
icounter	TokenNameIdentifier
+	TokenNamePLUS
" expected "	TokenNameStringLiteral
+	TokenNamePLUS
expectedResult	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
icounter	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" result "	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
icounter	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"excedent of expected result "	TokenNameStringLiteral
+	TokenNamePLUS
expectedResult	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"excedent of result "	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
isFailed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
getFailMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testToOnly	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ServerThread	TokenNameIdentifier
testMailServer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ServerThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
server	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailServer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
server	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ClientThread	TokenNameIdentifier
testMailClient	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ClientThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
from	TokenNameIdentifier
(	TokenNameLPAREN
"Mail Message <EmailTaskTest@ant.apache.org>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
to	TokenNameIdentifier
(	TokenNameLPAREN
"to@you.com"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setSubject	TokenNameIdentifier
(	TokenNameLPAREN
"Test subject"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setMessage	TokenNameIdentifier
(	TokenNameLPAREN
"test line 1 "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
client	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
server	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
60	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
30	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
ie	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"InterruptedException: "	TokenNameStringLiteral
+	TokenNamePLUS
ie	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
testMailServer	TokenNameIdentifier
.	TokenNameDOT
getResult	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
expectedResult	TokenNameIdentifier
=	TokenNameEQUAL
"220 test SMTP EmailTaskTest "	TokenNameStringLiteral
+	TokenNamePLUS
"HELO "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" Hello "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" [127.0.0.1], pleased to meet you "	TokenNameStringLiteral
+	TokenNamePLUS
"MAIL FROM: <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"RCPT TO: <to@you.com> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"DATA "	TokenNameStringLiteral
+	TokenNamePLUS
"354 "	TokenNameStringLiteral
+	TokenNamePLUS
"Subject: Test subject "	TokenNameStringLiteral
+	TokenNamePLUS
"From: Mail Message <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"To: to@you.com "	TokenNameStringLiteral
+	TokenNamePLUS
"X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org) "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 1 "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 2 "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
". "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"QUIT "	TokenNameStringLiteral
+	TokenNamePLUS
"221 "	TokenNameStringLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
isFailed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
getFailMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCcOnly	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ServerThread	TokenNameIdentifier
testMailServer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ServerThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
server	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailServer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
server	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ClientThread	TokenNameIdentifier
testMailClient	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ClientThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
from	TokenNameIdentifier
(	TokenNameLPAREN
"Mail Message <EmailTaskTest@ant.apache.org>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
cc	TokenNameIdentifier
(	TokenNameLPAREN
"cc@you.com"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setSubject	TokenNameIdentifier
(	TokenNameLPAREN
"Test subject"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setMessage	TokenNameIdentifier
(	TokenNameLPAREN
"test line 1 "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
client	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
server	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
60	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
30	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
ie	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"InterruptedException: "	TokenNameStringLiteral
+	TokenNamePLUS
ie	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
testMailServer	TokenNameIdentifier
.	TokenNameDOT
getResult	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
expectedResult	TokenNameIdentifier
=	TokenNameEQUAL
"220 test SMTP EmailTaskTest "	TokenNameStringLiteral
+	TokenNamePLUS
"HELO "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" Hello "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" [127.0.0.1], pleased to meet you "	TokenNameStringLiteral
+	TokenNamePLUS
"MAIL FROM: <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"RCPT TO: <cc@you.com> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"DATA "	TokenNameStringLiteral
+	TokenNamePLUS
"354 "	TokenNameStringLiteral
+	TokenNamePLUS
"Subject: Test subject "	TokenNameStringLiteral
+	TokenNamePLUS
"From: Mail Message <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"Cc: cc@you.com "	TokenNameStringLiteral
+	TokenNamePLUS
"X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org) "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 1 "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 2 "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
". "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"QUIT "	TokenNameStringLiteral
+	TokenNamePLUS
"221 "	TokenNameStringLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
isFailed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
getFailMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBccOnly	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ServerThread	TokenNameIdentifier
testMailServer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ServerThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
server	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailServer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
server	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ClientThread	TokenNameIdentifier
testMailClient	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ClientThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
from	TokenNameIdentifier
(	TokenNameLPAREN
"Mail Message <EmailTaskTest@ant.apache.org>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
bcc	TokenNameIdentifier
(	TokenNameLPAREN
"bcc@you.com"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setSubject	TokenNameIdentifier
(	TokenNameLPAREN
"Test subject"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setMessage	TokenNameIdentifier
(	TokenNameLPAREN
"test line 1 "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
client	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
server	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
60	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
30	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
ie	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"InterruptedException: "	TokenNameStringLiteral
+	TokenNamePLUS
ie	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
testMailServer	TokenNameIdentifier
.	TokenNameDOT
getResult	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
expectedResult	TokenNameIdentifier
=	TokenNameEQUAL
"220 test SMTP EmailTaskTest "	TokenNameStringLiteral
+	TokenNamePLUS
"HELO "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" Hello "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" [127.0.0.1], pleased to meet you "	TokenNameStringLiteral
+	TokenNamePLUS
"MAIL FROM: <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"RCPT TO: <bcc@you.com> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"DATA "	TokenNameStringLiteral
+	TokenNamePLUS
"354 "	TokenNameStringLiteral
+	TokenNamePLUS
"Subject: Test subject "	TokenNameStringLiteral
+	TokenNamePLUS
"From: Mail Message <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org) "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 1 "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 2 "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
". "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"QUIT "	TokenNameStringLiteral
+	TokenNamePLUS
"221 "	TokenNameStringLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
isFailed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
getFailMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testNoSubject	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ServerThread	TokenNameIdentifier
testMailServer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ServerThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
server	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailServer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
server	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ClientThread	TokenNameIdentifier
testMailClient	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ClientThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
from	TokenNameIdentifier
(	TokenNameLPAREN
"Mail Message <EmailTaskTest@ant.apache.org>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
to	TokenNameIdentifier
(	TokenNameLPAREN
"to@you.com"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setMessage	TokenNameIdentifier
(	TokenNameLPAREN
"test line 1 "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
client	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
server	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
60	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
30	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
ie	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"InterruptedException: "	TokenNameStringLiteral
+	TokenNamePLUS
ie	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
testMailServer	TokenNameIdentifier
.	TokenNameDOT
getResult	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
expectedResult	TokenNameIdentifier
=	TokenNameEQUAL
"220 test SMTP EmailTaskTest "	TokenNameStringLiteral
+	TokenNamePLUS
"HELO "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" Hello "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" [127.0.0.1], pleased to meet you "	TokenNameStringLiteral
+	TokenNamePLUS
"MAIL FROM: <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"RCPT TO: <to@you.com> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"DATA "	TokenNameStringLiteral
+	TokenNamePLUS
"354 "	TokenNameStringLiteral
+	TokenNamePLUS
"From: Mail Message <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"To: to@you.com "	TokenNameStringLiteral
+	TokenNamePLUS
"X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org) "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 1 "	TokenNameStringLiteral
+	TokenNamePLUS
"test line 2 "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
". "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"QUIT "	TokenNameStringLiteral
+	TokenNamePLUS
"221 "	TokenNameStringLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
isFailed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
getFailMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testEmptyBody	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ServerThread	TokenNameIdentifier
testMailServer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ServerThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
server	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailServer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
server	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ClientThread	TokenNameIdentifier
testMailClient	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ClientThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
from	TokenNameIdentifier
(	TokenNameLPAREN
"Mail Message <EmailTaskTest@ant.apache.org>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
to	TokenNameIdentifier
(	TokenNameLPAREN
"to@you.com"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setSubject	TokenNameIdentifier
(	TokenNameLPAREN
"Test subject"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setMessage	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
client	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
server	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
60	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
30	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
ie	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"InterruptedException: "	TokenNameStringLiteral
+	TokenNamePLUS
ie	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
testMailServer	TokenNameIdentifier
.	TokenNameDOT
getResult	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
expectedResult	TokenNameIdentifier
=	TokenNameEQUAL
"220 test SMTP EmailTaskTest "	TokenNameStringLiteral
+	TokenNamePLUS
"HELO "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" Hello "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" [127.0.0.1], pleased to meet you "	TokenNameStringLiteral
+	TokenNamePLUS
"MAIL FROM: <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"RCPT TO: <to@you.com> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"DATA "	TokenNameStringLiteral
+	TokenNamePLUS
"354 "	TokenNameStringLiteral
+	TokenNamePLUS
"Subject: Test subject "	TokenNameStringLiteral
+	TokenNamePLUS
"From: Mail Message <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"To: to@you.com "	TokenNameStringLiteral
+	TokenNamePLUS
"X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org) "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
". "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"QUIT "	TokenNameStringLiteral
+	TokenNamePLUS
"221 "	TokenNameStringLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
isFailed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
getFailMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testAsciiCharset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ServerThread	TokenNameIdentifier
testMailServer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ServerThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
server	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailServer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
server	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ClientThread	TokenNameIdentifier
testMailClient	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ClientThread	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
from	TokenNameIdentifier
(	TokenNameLPAREN
"Mail Message <EmailTaskTest@ant.apache.org>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
to	TokenNameIdentifier
(	TokenNameLPAREN
"Ceki Gülcü <abuse@mail-abuse.org>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setSubject	TokenNameIdentifier
(	TokenNameLPAREN
"Test subject"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testMailClient	TokenNameIdentifier
.	TokenNameDOT
setMessage	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Thread	TokenNameIdentifier
client	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Thread	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
server	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
60	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
client	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
(	TokenNameLPAREN
30	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
ie	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"InterruptedException: "	TokenNameStringLiteral
+	TokenNamePLUS
ie	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
testMailServer	TokenNameIdentifier
.	TokenNameDOT
getResult	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
expectedResult	TokenNameIdentifier
=	TokenNameEQUAL
"220 test SMTP EmailTaskTest "	TokenNameStringLiteral
+	TokenNamePLUS
"HELO "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" Hello "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" [127.0.0.1], pleased to meet you "	TokenNameStringLiteral
+	TokenNamePLUS
"MAIL FROM: <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"RCPT TO: <abuse@mail-abuse.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"DATA "	TokenNameStringLiteral
+	TokenNamePLUS
"354 "	TokenNameStringLiteral
+	TokenNamePLUS
"Subject: Test subject "	TokenNameStringLiteral
+	TokenNamePLUS
"From: Mail Message <EmailTaskTest@ant.apache.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"To: Ceki Gülcü <abuse@mail-abuse.org> "	TokenNameStringLiteral
+	TokenNamePLUS
"X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org) "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
". "	TokenNameStringLiteral
+	TokenNamePLUS
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
"QUIT "	TokenNameStringLiteral
+	TokenNamePLUS
"221 "	TokenNameStringLiteral
;	TokenNameSEMICOLON
ByteArrayOutputStream	TokenNameIdentifier
baos1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ByteArrayOutputStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ByteArrayOutputStream	TokenNameIdentifier
baos2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ByteArrayOutputStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PrintStream	TokenNameIdentifier
bos1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PrintStream	TokenNameIdentifier
(	TokenNameLPAREN
baos1	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PrintStream	TokenNameIdentifier
bos2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PrintStream	TokenNameIdentifier
(	TokenNameLPAREN
baos2	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bos1	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
expectedResult	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bos2	TokenNameIdentifier
.	TokenNameDOT
print	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"expected message length != actual message length "	TokenNameStringLiteral
+	TokenNamePLUS
"in testAsciiCharset()"	TokenNameStringLiteral
,	TokenNameCOMMA
expectedResult	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"baos1 and baos2 should be the same in testAsciiCharset()"	TokenNameStringLiteral
,	TokenNameCOMMA
baos1	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
baos2	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
isFailed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
testMailClient	TokenNameIdentifier
.	TokenNameDOT
getFailMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
class	TokenNameclass
ServerThread	TokenNameIdentifier
implements	TokenNameimplements
Runnable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
StringBuffer	TokenNameIdentifier
sb	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
loop	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
ServerSocket	TokenNameIdentifier
ssock	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
Socket	TokenNameIdentifier
sock	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
BufferedWriter	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
BufferedReader	TokenNameIdentifier
in	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
data	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
run	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
ssock	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ServerSocket	TokenNameIdentifier
(	TokenNameLPAREN
TEST_PORT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sock	TokenNameIdentifier
=	TokenNameEQUAL
ssock	TokenNameIdentifier
.	TokenNameDOT
accept	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
in	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BufferedReader	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
InputStreamReader	TokenNameIdentifier
(	TokenNameLPAREN
sock	TokenNameIdentifier
.	TokenNameDOT
getInputStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BufferedWriter	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
OutputStreamWriter	TokenNameIdentifier
(	TokenNameLPAREN
sock	TokenNameIdentifier
.	TokenNameDOT
getOutputStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sb	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
send	TokenNameIdentifier
(	TokenNameLPAREN
"220 test SMTP EmailTaskTest "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
loop	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
response	TokenNameIdentifier
=	TokenNameEQUAL
in	TokenNameIdentifier
.	TokenNameDOT
readLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
response	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
loop	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sb	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
response	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
data	TokenNameIdentifier
&&	TokenNameAND_AND
response	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"HELO"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
send	TokenNameIdentifier
(	TokenNameLPAREN
"250 "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" Hello "	TokenNameStringLiteral
+	TokenNamePLUS
local	TokenNameIdentifier
+	TokenNamePLUS
" "	TokenNameStringLiteral
+	TokenNamePLUS
"[127.0.0.1], pleased to meet you "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
data	TokenNameIdentifier
&&	TokenNameAND_AND
response	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"MAIL"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
send	TokenNameIdentifier
(	TokenNameLPAREN
"250 "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
data	TokenNameIdentifier
&&	TokenNameAND_AND
response	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"RCPT"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
send	TokenNameIdentifier
(	TokenNameLPAREN
"250 "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
data	TokenNameIdentifier
&&	TokenNameAND_AND
response	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"DATA"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
send	TokenNameIdentifier
(	TokenNameLPAREN
"354 "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
data	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
data	TokenNameIdentifier
&&	TokenNameAND_AND
response	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"."	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
send	TokenNameIdentifier
(	TokenNameLPAREN
"250 "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
data	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
data	TokenNameIdentifier
&&	TokenNameAND_AND
response	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"QUIT"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
send	TokenNameIdentifier
(	TokenNameLPAREN
"221 "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
data	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
send	TokenNameIdentifier
(	TokenNameLPAREN
"500 5.5.1 Command unrecognized: ""	TokenNameStringLiteral
+	TokenNamePLUS
response	TokenNameIdentifier
+	TokenNamePLUS
"" "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
loop	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
disconnect	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
send	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
retmsg	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
retmsg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
.	TokenNameDOT
flush	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sb	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
retmsg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
disconnect	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
out	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
flush	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
in	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
in	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
in	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sock	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
sock	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sock	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
ssock	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
ssock	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ssock	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
String	TokenNameIdentifier
getResult	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
loop	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
sb	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
class	TokenNameclass
ClientThread	TokenNameIdentifier
implements	TokenNameimplements
Runnable	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
MailMessage	TokenNameIdentifier
msg	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
fail	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
failMessage	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
from	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
subject	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
message	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
protected	TokenNameprotected
Vector	TokenNameIdentifier
replyToList	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
Vector	TokenNameIdentifier
toList	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
Vector	TokenNameIdentifier
ccList	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
Vector	TokenNameIdentifier
bccList	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
run	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
msg	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MailMessage	TokenNameIdentifier
(	TokenNameLPAREN
"localhost"	TokenNameStringLiteral
,	TokenNameCOMMA
TEST_PORT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
net	TokenNameIdentifier
.	TokenNameDOT
ConnectException	TokenNameIdentifier
ce	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
Thread	TokenNameIdentifier
.	TokenNameDOT
sleep	TokenNameIdentifier
(	TokenNameLPAREN
10	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InterruptedException	TokenNameIdentifier
ie	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
failMessage	TokenNameIdentifier
=	TokenNameEQUAL
"IOException: "	TokenNameStringLiteral
+	TokenNamePLUS
ioe	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
msg	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
msg	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
failMessage	TokenNameIdentifier
=	TokenNameEQUAL
"java.net.ConnectException: Connection refused"	TokenNameStringLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
msg	TokenNameIdentifier
.	TokenNameDOT
from	TokenNameIdentifier
(	TokenNameLPAREN
from	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Enumeration	TokenNameIdentifier
e	TokenNameIdentifier
;	TokenNameSEMICOLON
e	TokenNameIdentifier
=	TokenNameEQUAL
replyToList	TokenNameIdentifier
.	TokenNameDOT
elements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
hasMoreElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
msg	TokenNameIdentifier
.	TokenNameDOT
replyto	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
nextElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
e	TokenNameIdentifier
=	TokenNameEQUAL
toList	TokenNameIdentifier
.	TokenNameDOT
elements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
hasMoreElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
msg	TokenNameIdentifier
.	TokenNameDOT
to	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
nextElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
e	TokenNameIdentifier
=	TokenNameEQUAL
ccList	TokenNameIdentifier
.	TokenNameDOT
elements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
hasMoreElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
msg	TokenNameIdentifier
.	TokenNameDOT
cc	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
nextElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
e	TokenNameIdentifier
=	TokenNameEQUAL
bccList	TokenNameIdentifier
.	TokenNameDOT
elements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
hasMoreElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
msg	TokenNameIdentifier
.	TokenNameDOT
bcc	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
nextElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
subject	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
msg	TokenNameIdentifier
.	TokenNameDOT
setSubject	TokenNameIdentifier
(	TokenNameLPAREN
subject	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
message	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
PrintStream	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
msg	TokenNameIdentifier
.	TokenNameDOT
getPrintStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
msg	TokenNameIdentifier
.	TokenNameDOT
sendAndClose	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ioe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
failMessage	TokenNameIdentifier
=	TokenNameEQUAL
"IOException: "	TokenNameStringLiteral
+	TokenNamePLUS
ioe	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isFailed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fail	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getFailMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
failMessage	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
replyTo	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
replyTo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
replyToList	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
replyTo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
to	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
to	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
toList	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
to	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
cc	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
cc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ccList	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
cc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
bcc	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
bcc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bccList	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
bcc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setSubject	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
subject	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
subject	TokenNameIdentifier
=	TokenNameEQUAL
subject	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
from	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
from	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
from	TokenNameIdentifier
=	TokenNameEQUAL
from	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setMessage	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
message	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
message	TokenNameIdentifier
=	TokenNameEQUAL
message	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
