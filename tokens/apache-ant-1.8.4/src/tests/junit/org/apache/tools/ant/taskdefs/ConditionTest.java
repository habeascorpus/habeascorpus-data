package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
taskdefs	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
BuildFileTest	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
ConditionTest	TokenNameIdentifier
extends	TokenNameextends
BuildFileTest	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
ConditionTest	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
configureProject	TokenNameIdentifier
(	TokenNameLPAREN
"src/etc/testcases/taskdefs/condition.xml"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
tearDown	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"cleanup"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBasic	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"basic"	TokenNameStringLiteral
,	TokenNameCOMMA
"basic"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testConditionIncomplete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectSpecificBuildException	TokenNameIdentifier
(	TokenNameLPAREN
"condition-incomplete"	TokenNameStringLiteral
,	TokenNameCOMMA
"property attribute has been omitted"	TokenNameStringLiteral
,	TokenNameCOMMA
"The property attribute is required."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testConditionEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectSpecificBuildException	TokenNameIdentifier
(	TokenNameLPAREN
"condition-empty"	TokenNameStringLiteral
,	TokenNameCOMMA
"no conditions"	TokenNameStringLiteral
,	TokenNameCOMMA
"You must nest a condition into <condition>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testShortcut	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"shortcut"	TokenNameStringLiteral
,	TokenNameCOMMA
"shortcut"	TokenNameStringLiteral
,	TokenNameCOMMA
"set"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testUnset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"dontset"	TokenNameStringLiteral
,	TokenNameCOMMA
"dontset"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testSetValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"setvalue"	TokenNameStringLiteral
,	TokenNameCOMMA
"setvalue"	TokenNameStringLiteral
,	TokenNameCOMMA
"woowoo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testNegation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"negation"	TokenNameStringLiteral
,	TokenNameCOMMA
"negation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testNegationFalse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"negationfalse"	TokenNameStringLiteral
,	TokenNameCOMMA
"negationfalse"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testNegationIncomplete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectSpecificBuildException	TokenNameIdentifier
(	TokenNameLPAREN
"negationincomplete"	TokenNameStringLiteral
,	TokenNameCOMMA
"no conditions in <not>"	TokenNameStringLiteral
,	TokenNameCOMMA
"You must nest a condition into <not>"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testAnd	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"and"	TokenNameStringLiteral
,	TokenNameCOMMA
"and"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testAndFails	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"andfails"	TokenNameStringLiteral
,	TokenNameCOMMA
"andfails"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testAndIncomplete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"andincomplete"	TokenNameStringLiteral
,	TokenNameCOMMA
"andincomplete"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testAndempty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"andempty"	TokenNameStringLiteral
,	TokenNameCOMMA
"andempty"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testOr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"or"	TokenNameStringLiteral
,	TokenNameCOMMA
"or"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testOrincomplete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"or"	TokenNameStringLiteral
,	TokenNameCOMMA
"or"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testOrFails	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"orfails"	TokenNameStringLiteral
,	TokenNameCOMMA
"orfails"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testOrboth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"orboth"	TokenNameStringLiteral
,	TokenNameCOMMA
"orboth"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilesmatchIdentical	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"filesmatch-identical"	TokenNameStringLiteral
,	TokenNameCOMMA
"filesmatch-identical"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilesmatchIncomplete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectSpecificBuildException	TokenNameIdentifier
(	TokenNameLPAREN
"filesmatch-incomplete"	TokenNameStringLiteral
,	TokenNameCOMMA
"Missing file2 attribute"	TokenNameStringLiteral
,	TokenNameCOMMA
"both file1 and file2 are required in filesmatch"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilesmatchOddsizes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"filesmatch-oddsizes"	TokenNameStringLiteral
,	TokenNameCOMMA
"filesmatch-oddsizes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilesmatchExistence	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"filesmatch-existence"	TokenNameStringLiteral
,	TokenNameCOMMA
"filesmatch-existence"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilesmatchDifferent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"filesmatch-different"	TokenNameStringLiteral
,	TokenNameCOMMA
"filesmatch-different"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilesmatchMatch	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"filesmatch-match"	TokenNameStringLiteral
,	TokenNameCOMMA
"filesmatch-match"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilesmatchDifferentSizes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"filesmatch-different-sizes"	TokenNameStringLiteral
,	TokenNameCOMMA
"filesmatch-different-sizes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilesmatchDifferentOnemissing	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"filesmatch-different-onemissing"	TokenNameStringLiteral
,	TokenNameCOMMA
"filesmatch-different-onemissing"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilesmatchDifferentEol	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"filesmatch-different-eol"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilesmatchSameEol	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"filesmatch-same-eol"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilesmatchNeitherExist	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"filesmatch-neitherexist"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testContains	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"contains"	TokenNameStringLiteral
,	TokenNameCOMMA
"contains"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testContainsDoesnt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"contains-doesnt"	TokenNameStringLiteral
,	TokenNameCOMMA
"contains-doesnt"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testContainsAnycase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"contains-anycase"	TokenNameStringLiteral
,	TokenNameCOMMA
"contains-anycase"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testContainsIncomplete1	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectSpecificBuildException	TokenNameIdentifier
(	TokenNameLPAREN
"contains-incomplete1"	TokenNameStringLiteral
,	TokenNameCOMMA
"Missing contains attribute"	TokenNameStringLiteral
,	TokenNameCOMMA
"both string and substring are required in contains"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testContainsIncomplete2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectSpecificBuildException	TokenNameIdentifier
(	TokenNameLPAREN
"contains-incomplete2"	TokenNameStringLiteral
,	TokenNameCOMMA
"Missing contains attribute"	TokenNameStringLiteral
,	TokenNameCOMMA
"both string and substring are required in contains"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIstrue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"istrue"	TokenNameStringLiteral
,	TokenNameCOMMA
"istrue"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIstrueNot	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"istrue-not"	TokenNameStringLiteral
,	TokenNameCOMMA
"istrue-not"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIstrueFalse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"istrue-false"	TokenNameStringLiteral
,	TokenNameCOMMA
"istrue-false"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIstrueIncomplete1	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectSpecificBuildException	TokenNameIdentifier
(	TokenNameLPAREN
"istrue-incomplete"	TokenNameStringLiteral
,	TokenNameCOMMA
"Missing attribute"	TokenNameStringLiteral
,	TokenNameCOMMA
"Nothing to test for truth"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIsfalseTrue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"isfalse-true"	TokenNameStringLiteral
,	TokenNameCOMMA
"isfalse-true"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIsfalseNot	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"isfalse-not"	TokenNameStringLiteral
,	TokenNameCOMMA
"isfalse-not"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIsfalseFalse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectPropertySet	TokenNameIdentifier
(	TokenNameLPAREN
"isfalse-false"	TokenNameStringLiteral
,	TokenNameCOMMA
"isfalse-false"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIsfalseIncomplete1	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectSpecificBuildException	TokenNameIdentifier
(	TokenNameLPAREN
"isfalse-incomplete"	TokenNameStringLiteral
,	TokenNameCOMMA
"Missing attribute"	TokenNameStringLiteral
,	TokenNameCOMMA
"Nothing to test for falsehood"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testElse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"testElse"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testResourcesmatchError	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectBuildException	TokenNameIdentifier
(	TokenNameLPAREN
"resourcesmatch-error"	TokenNameStringLiteral
,	TokenNameCOMMA
"should fail because no resources specified"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testResourcesmatchEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"resourcesmatch-match-empty"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testResourcesmatchOne	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"resourcesmatch-match-one"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testResourcesmatchBinary	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"resourcesmatch-match-binary"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testResourcesmatchMultipleBinary	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"resourcesmatch-match-multiple-binary"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testResourcesmatchDiffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"resourcesmatch-differ"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testResourcesmatchText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"resourcesmatch-match-text"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testResourcesmatchNoneExist	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"resourcesmatch-noneexist"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
