package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
taskdefs	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
BuildFileTest	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
taskdefs	TokenNameIdentifier
.	TokenNameDOT
condition	TokenNameIdentifier
.	TokenNameDOT
Os	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
regexp	TokenNameIdentifier
.	TokenNameDOT
RegexpMatcherFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
ManifestClassPathTest	TokenNameIdentifier
extends	TokenNameextends
BuildFileTest	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
configureProject	TokenNameIdentifier
(	TokenNameLPAREN
"src/etc/testcases/taskdefs/manifestclasspath.xml"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBadDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectBuildExceptionContaining	TokenNameIdentifier
(	TokenNameLPAREN
"test-bad-directory"	TokenNameStringLiteral
,	TokenNameCOMMA
"bad-jar-dir"	TokenNameStringLiteral
,	TokenNameCOMMA
"Jar's directory not found:"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"jar.classpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBadNoProperty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectBuildExceptionContaining	TokenNameIdentifier
(	TokenNameLPAREN
"test-bad-no-property"	TokenNameStringLiteral
,	TokenNameCOMMA
"no-property"	TokenNameStringLiteral
,	TokenNameCOMMA
"Missing 'property' attribute!"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"jar.classpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBadPropertyExists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectBuildExceptionContaining	TokenNameIdentifier
(	TokenNameLPAREN
"test-bad-property-exists"	TokenNameStringLiteral
,	TokenNameCOMMA
"property-exits"	TokenNameStringLiteral
,	TokenNameCOMMA
"Property 'jar.classpath' already set!"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyEquals	TokenNameIdentifier
(	TokenNameLPAREN
"jar.classpath"	TokenNameStringLiteral
,	TokenNameCOMMA
"exists"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBadNoJarfile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectBuildExceptionContaining	TokenNameIdentifier
(	TokenNameLPAREN
"test-bad-no-jarfile"	TokenNameStringLiteral
,	TokenNameCOMMA
"no-jarfile"	TokenNameStringLiteral
,	TokenNameCOMMA
"Missing 'jarfile' attribute!"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"jar.classpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBadNoClassPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectBuildExceptionContaining	TokenNameIdentifier
(	TokenNameLPAREN
"test-bad-no-classpath"	TokenNameStringLiteral
,	TokenNameCOMMA
"no-classpath"	TokenNameStringLiteral
,	TokenNameCOMMA
"Missing nested <classpath>!"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"jar.classpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testParentLevel1	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"test-parent-level1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyEquals	TokenNameIdentifier
(	TokenNameLPAREN
"jar.classpath"	TokenNameStringLiteral
,	TokenNameCOMMA
"dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"dsp-pres/ "	TokenNameStringLiteral
+	TokenNamePLUS
"dsp-void/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../generated/dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../generated/dsp-pres/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../generated/dsp-void/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../resources/dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../resources/dsp-pres/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../resources/dsp-void/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testParentLevel2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"test-parent-level2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyEquals	TokenNameIdentifier
(	TokenNameLPAREN
"jar.classpath"	TokenNameStringLiteral
,	TokenNameCOMMA
"../dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../dsp-pres/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../dsp-void/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../../generated/dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../../generated/dsp-pres/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../../generated/dsp-void/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../../resources/dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../../resources/dsp-pres/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../../resources/dsp-void/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testParentLevel2TooDeep	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
expectBuildExceptionContaining	TokenNameIdentifier
(	TokenNameLPAREN
"test-parent-level2-too-deep"	TokenNameStringLiteral
,	TokenNameCOMMA
"nopath"	TokenNameStringLiteral
,	TokenNameCOMMA
"No suitable relative path from "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"jar.classpath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testPseudoTahoeRefid	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
RegexpMatcherFactory	TokenNameIdentifier
.	TokenNameDOT
regexpMatcherPresent	TokenNameIdentifier
(	TokenNameLPAREN
project	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Test 'testPseudoTahoeRefid' skipped because no regexp matcher is present."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"test-pseudo-tahoe-refid"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyEquals	TokenNameIdentifier
(	TokenNameLPAREN
"jar.classpath"	TokenNameStringLiteral
,	TokenNameCOMMA
"classes/dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"classes/dsp-pres/ "	TokenNameStringLiteral
+	TokenNamePLUS
"classes/dsp-void/ "	TokenNameStringLiteral
+	TokenNamePLUS
"generated/dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"resources/dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"resources/dsp-pres/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testPseudoTahoeNested	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
RegexpMatcherFactory	TokenNameIdentifier
.	TokenNameDOT
regexpMatcherPresent	TokenNameIdentifier
(	TokenNameLPAREN
project	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Test 'testPseudoTahoeNested' skipped because no regexp matcher is present."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"test-pseudo-tahoe-nested"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyEquals	TokenNameIdentifier
(	TokenNameLPAREN
"jar.classpath"	TokenNameStringLiteral
,	TokenNameCOMMA
"classes/dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"classes/dsp-pres/ "	TokenNameStringLiteral
+	TokenNamePLUS
"classes/dsp-void/ "	TokenNameStringLiteral
+	TokenNamePLUS
"generated/dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"resources/dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"resources/dsp-pres/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testParentLevel2WithJars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"test-parent-level2-with-jars"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyEquals	TokenNameIdentifier
(	TokenNameLPAREN
"jar.classpath"	TokenNameStringLiteral
,	TokenNameCOMMA
"../../lib/acme-core.jar "	TokenNameStringLiteral
+	TokenNamePLUS
"../../lib/acme-pres.jar "	TokenNameStringLiteral
+	TokenNamePLUS
"../dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../dsp-pres/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../dsp-void/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../../generated/dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../../generated/dsp-pres/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../../generated/dsp-void/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../../resources/dsp-core/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../../resources/dsp-pres/ "	TokenNameStringLiteral
+	TokenNamePLUS
"../../resources/dsp-void/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testInternationalGerman	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"international-german"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectLogContaining	TokenNameIdentifier
(	TokenNameLPAREN
"run-two-jars"	TokenNameStringLiteral
,	TokenNameCOMMA
"beta alpha"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testInternationalHebrew	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
Os	TokenNameIdentifier
.	TokenNameDOT
isFamily	TokenNameIdentifier
(	TokenNameLPAREN
"windows"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"international-hebrew"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectLogContaining	TokenNameIdentifier
(	TokenNameLPAREN
"run-two-jars"	TokenNameStringLiteral
,	TokenNameCOMMA
"beta alpha"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Test with hebrew path not attempted under Windows"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testSameWindowsDrive	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
Os	TokenNameIdentifier
.	TokenNameDOT
isFamily	TokenNameIdentifier
(	TokenNameLPAREN
"windows"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Test with drive letters only run on windows"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"testSameDrive"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyEquals	TokenNameIdentifier
(	TokenNameLPAREN
"cp"	TokenNameStringLiteral
,	TokenNameCOMMA
"../a/b/x.jar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDifferentWindowsDrive	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
Os	TokenNameIdentifier
.	TokenNameDOT
isFamily	TokenNameIdentifier
(	TokenNameLPAREN
"windows"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Test with drive letters only run on windows"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
new	TokenNamenew
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
(	TokenNameLPAREN
"D:/foo.txt"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
getCanonicalPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"drive d: doesn't exist or is not ready,"	TokenNameStringLiteral
+	TokenNamePLUS
" skipping test"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
expectBuildExceptionContaining	TokenNameIdentifier
(	TokenNameLPAREN
"testDifferentDrive"	TokenNameStringLiteral
,	TokenNameCOMMA
"different drive"	TokenNameStringLiteral
,	TokenNameCOMMA
"No suitable relative path from "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertPropertyUnset	TokenNameIdentifier
(	TokenNameLPAREN
"cp"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
