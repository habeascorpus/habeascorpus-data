package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
taskdefs	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
FileReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Reader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
BuildFileTest	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
FileUtils	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
StyleTest	TokenNameIdentifier
extends	TokenNameextends
BuildFileTest	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
FileUtils	TokenNameIdentifier
FILE_UTILS	TokenNameIdentifier
=	TokenNameEQUAL
FileUtils	TokenNameIdentifier
.	TokenNameDOT
getFileUtils	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
StyleTest	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
configureProject	TokenNameIdentifier
(	TokenNameLPAREN
"src/etc/testcases/taskdefs/style/build.xml"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
tearDown	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"teardown"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testStyleIsSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
expectSpecificBuildException	TokenNameIdentifier
(	TokenNameLPAREN
"testStyleIsSet"	TokenNameStringLiteral
,	TokenNameCOMMA
"no stylesheet specified"	TokenNameStringLiteral
,	TokenNameCOMMA
"specify the "	TokenNameStringLiteral
+	TokenNamePLUS
"stylesheet either as a filename in style "	TokenNameStringLiteral
+	TokenNamePLUS
"attribute or as a nested resource"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTransferParameterSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"testTransferParameterSet"	TokenNameStringLiteral
,	TokenNameCOMMA
"out/out.xml"	TokenNameStringLiteral
,	TokenNameCOMMA
"set='myvalue'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTransferParameterEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"testTransferParameterEmpty"	TokenNameStringLiteral
,	TokenNameCOMMA
"out/out.xml"	TokenNameStringLiteral
,	TokenNameCOMMA
"empty=''"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTransferParameterUnset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"testTransferParameterUnset"	TokenNameStringLiteral
,	TokenNameCOMMA
"out/out.xml"	TokenNameStringLiteral
,	TokenNameCOMMA
"undefined='${value}'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTransferParameterUnsetWithIf	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"testTransferParameterUnsetWithIf"	TokenNameStringLiteral
,	TokenNameCOMMA
"out/out.xml"	TokenNameStringLiteral
,	TokenNameCOMMA
"undefined='undefined default value'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testNewerStylesheet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"testNewerStylesheet"	TokenNameStringLiteral
,	TokenNameCOMMA
"out/out.xml"	TokenNameStringLiteral
,	TokenNameCOMMA
"new-value"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDefaultMapper	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
testDefaultMapper	TokenNameIdentifier
(	TokenNameLPAREN
"testDefaultMapper"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testExplicitFileset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
testDefaultMapper	TokenNameIdentifier
(	TokenNameLPAREN
"testExplicitFileset"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDefaultMapper	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
target	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
FileUtils	TokenNameIdentifier
.	TokenNameDOT
getFileUtils	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
resolveFile	TokenNameIdentifier
(	TokenNameLPAREN
getProject	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBaseDir	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"out/data.html"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
target	TokenNameIdentifier
,	TokenNameCOMMA
"out/data.html"	TokenNameStringLiteral
,	TokenNameCOMMA
"set='myvalue'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCustomMapper	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
!	TokenNameNOT
FILE_UTILS	TokenNameIdentifier
.	TokenNameDOT
resolveFile	TokenNameIdentifier
(	TokenNameLPAREN
getProject	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBaseDir	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"out/out.xml"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"testCustomMapper"	TokenNameStringLiteral
,	TokenNameCOMMA
"out/out.xml"	TokenNameStringLiteral
,	TokenNameCOMMA
"set='myvalue'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTypedMapper	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
!	TokenNameNOT
FILE_UTILS	TokenNameIdentifier
.	TokenNameDOT
resolveFile	TokenNameIdentifier
(	TokenNameLPAREN
getProject	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBaseDir	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"out/out.xml"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"testTypedMapper"	TokenNameStringLiteral
,	TokenNameCOMMA
"out/out.xml"	TokenNameStringLiteral
,	TokenNameCOMMA
"set='myvalue'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDirectoryHierarchyWithDirMatching	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"testDirectoryHierarchyWithDirMatching"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
FILE_UTILS	TokenNameIdentifier
.	TokenNameDOT
resolveFile	TokenNameIdentifier
(	TokenNameLPAREN
getProject	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBaseDir	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"out/dest/level1/data.html"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDirsWithSpaces	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"testDirsWithSpaces"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
FILE_UTILS	TokenNameIdentifier
.	TokenNameDOT
resolveFile	TokenNameIdentifier
(	TokenNameLPAREN
getProject	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBaseDir	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"out/d est/data.html"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testWithStyleAttrAndResource	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
expectSpecificBuildException	TokenNameIdentifier
(	TokenNameLPAREN
"testWithStyleAttrAndResource"	TokenNameStringLiteral
,	TokenNameCOMMA
"Must throws a BuildException"	TokenNameStringLiteral
,	TokenNameCOMMA
"specify the "	TokenNameStringLiteral
+	TokenNamePLUS
"stylesheet either as a filename in style "	TokenNameStringLiteral
+	TokenNamePLUS
"attribute or as a nested resource but not "	TokenNameStringLiteral
+	TokenNamePLUS
"as both"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testWithFileResource	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"testWithFileResource"	TokenNameStringLiteral
,	TokenNameCOMMA
"out/out.xml"	TokenNameStringLiteral
,	TokenNameCOMMA
"set='value'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testWithUrlResource	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"testWithUrlResource"	TokenNameStringLiteral
,	TokenNameCOMMA
"out/out.xml"	TokenNameStringLiteral
,	TokenNameCOMMA
"set='value'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilenameAsParam	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"testFilenameAsParam"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/one.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filename='one.xml'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/two.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filename='two.xml'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/three.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filename='three.xml'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/dir/four.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filename='four.xml'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/dir/four.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filedir ='-not-set-'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilenameAsParamNoSetting	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"testFilenameAsParamNoSetting"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/one.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filename='-not-set-'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/two.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filename='-not-set-'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/three.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filename='-not-set-'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/dir/four.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filename='-not-set-'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilenameAndFiledirAsParam	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"testFilenameAndFiledirAsParam"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/one.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filename='one.xml'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/one.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filedir ='.'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/dir/four.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filename='four.xml'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"out/out/dir/four.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
"filedir ='dir'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
filename	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
Reader	TokenNameIdentifier
r	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FileReader	TokenNameIdentifier
(	TokenNameLPAREN
getProject	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
resolveFile	TokenNameIdentifier
(	TokenNameLPAREN
filename	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
FileUtils	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
FileUtils	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
target	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
filename	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
contains	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
target	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
filename	TokenNameIdentifier
,	TokenNameCOMMA
contains	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
assertFileContains	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
filename	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
contains	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
content	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
filename	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"expecting file "	TokenNameStringLiteral
+	TokenNamePLUS
filename	TokenNameIdentifier
+	TokenNamePLUS
" to contain "	TokenNameStringLiteral
+	TokenNamePLUS
contains	TokenNameIdentifier
+	TokenNamePLUS
" but got "	TokenNameStringLiteral
+	TokenNamePLUS
content	TokenNameIdentifier
,	TokenNameCOMMA
content	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
contains	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
