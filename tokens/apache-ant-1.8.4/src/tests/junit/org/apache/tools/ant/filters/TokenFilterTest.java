package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
filters	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Reader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
FileReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
BuildFileTest	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
tools	TokenNameIdentifier
.	TokenNameDOT
ant	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
FileUtils	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TokenFilterTest	TokenNameIdentifier
extends	TokenNameextends
BuildFileTest	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
FileUtils	TokenNameIdentifier
FILE_UTILS	TokenNameIdentifier
=	TokenNameEQUAL
FileUtils	TokenNameIdentifier
.	TokenNameDOT
getFileUtils	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
TokenFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
configureProject	TokenNameIdentifier
(	TokenNameLPAREN
"src/etc/testcases/filters/tokenfilter.xml"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"init"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
tearDown	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"cleanup"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTokenfilter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"tokenfilter"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTrimignore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
expectLogContaining	TokenNameIdentifier
(	TokenNameLPAREN
"trimignore"	TokenNameStringLiteral
,	TokenNameCOMMA
"Hello-World"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testStringTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
expectLogContaining	TokenNameIdentifier
(	TokenNameLPAREN
"stringtokenizer"	TokenNameStringLiteral
,	TokenNameCOMMA
"#This#is#a#number#of#words#"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testUnixLineOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"unixlineoutput"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/unixlineoutput"	TokenNameStringLiteral
,	TokenNameCOMMA
" This is a number of words "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDosLineOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"doslineoutput"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/doslineoutput"	TokenNameStringLiteral
,	TokenNameCOMMA
" This is a number of words "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFileTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
contents	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
"filetokenizer"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/filetokenizer"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"   of words"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringNotContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
" This is"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testReplaceString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"replacestring"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/replacestring"	TokenNameStringLiteral
,	TokenNameCOMMA
"this is the moon"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testReplaceStrings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
expectLogContaining	TokenNameIdentifier
(	TokenNameLPAREN
"replacestrings"	TokenNameStringLiteral
,	TokenNameCOMMA
"bar bar bar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testContainsString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
contents	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
"containsstring"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/containsstring"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"this is a line contains foo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringNotContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"this line does not"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testReplaceRegex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hasRegex	TokenNameIdentifier
(	TokenNameLPAREN
"testReplaceRegex"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
String	TokenNameIdentifier
contents	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
"replaceregex"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/replaceregex"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"world world world world"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"dog Cat dog"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"moon Sun Sun"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"found WhiteSpace"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"Found digits [1234]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringNotContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"This is a line with digits"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilterReplaceRegex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hasRegex	TokenNameIdentifier
(	TokenNameLPAREN
"testFilterReplaceRegex"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
String	TokenNameIdentifier
contents	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
"filterreplaceregex"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/filterreplaceregex"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"world world world world"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testHandleDollerMatch	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hasRegex	TokenNameIdentifier
(	TokenNameLPAREN
"testFilterReplaceRegex"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"dollermatch"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTrimFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
contents	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
"trimfile"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/trimfile"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"no ws at start"	TokenNameStringLiteral
,	TokenNameCOMMA
contents	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"This is th"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"no ws at end"	TokenNameStringLiteral
,	TokenNameCOMMA
contents	TokenNameIdentifier
.	TokenNameDOT
endsWith	TokenNameIdentifier
(	TokenNameLPAREN
"second line."	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"  This is the second"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTrimFileByLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
contents	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
"trimfilebyline"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/trimfilebyline"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFalse	TokenNameIdentifier
(	TokenNameLPAREN
"no ws at start"	TokenNameStringLiteral
,	TokenNameCOMMA
contents	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
"This is th"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFalse	TokenNameIdentifier
(	TokenNameLPAREN
"no ws at end"	TokenNameStringLiteral
,	TokenNameCOMMA
contents	TokenNameIdentifier
.	TokenNameDOT
endsWith	TokenNameIdentifier
(	TokenNameLPAREN
"second line."	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringNotContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"  This is the second"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"file. This is the second"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilterReplaceString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
contents	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
"filterreplacestring"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/filterreplacestring"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"This is the moon"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilterReplaceStrings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
expectLogContaining	TokenNameIdentifier
(	TokenNameLPAREN
"filterreplacestrings"	TokenNameStringLiteral
,	TokenNameCOMMA
"bar bar bar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testContainsRegex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hasRegex	TokenNameIdentifier
(	TokenNameLPAREN
"testContainsRegex"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
String	TokenNameIdentifier
contents	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
"containsregex"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/containsregex"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"hello world"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringNotContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"this is the moon"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"World here"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFilterContainsRegex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hasRegex	TokenNameIdentifier
(	TokenNameLPAREN
"testFilterContainsRegex"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
String	TokenNameIdentifier
contents	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
"filtercontainsregex"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/filtercontainsregex"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"hello world"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringNotContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"this is the moon"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"World here"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testContainsRegex2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hasRegex	TokenNameIdentifier
(	TokenNameLPAREN
"testContainsRegex2"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
String	TokenNameIdentifier
contents	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
"containsregex2"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/containsregex2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"void register_bits();"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDeleteCharacters	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
contents	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
"deletecharacters"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/deletechars"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringNotContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"#"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringNotContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
contents	TokenNameIdentifier
,	TokenNameCOMMA
"This is some "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testScriptFilter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hasScript	TokenNameIdentifier
(	TokenNameLPAREN
"testScriptFilter"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"scriptfilter"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/scriptfilter"	TokenNameStringLiteral
,	TokenNameCOMMA
"HELLO WORLD"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testScriptFilter2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hasScript	TokenNameIdentifier
(	TokenNameLPAREN
"testScriptFilter"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"scriptfilter2"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/scriptfilter2"	TokenNameStringLiteral
,	TokenNameCOMMA
"HELLO MOON"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCustomTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"customtokenfilter"	TokenNameStringLiteral
,	TokenNameCOMMA
"result/custom"	TokenNameStringLiteral
,	TokenNameCOMMA
"Hello World"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
hasScript	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
test	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"hasscript"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Throwable	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
test	TokenNameIdentifier
+	TokenNamePLUS
": skipped - script not present "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
hasRegex	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
test	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
"hasregex"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
"result/replaceregexp"	TokenNameStringLiteral
,	TokenNameCOMMA
"bye world"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Throwable	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
test	TokenNameIdentifier
+	TokenNamePLUS
": skipped - regex not present "	TokenNameStringLiteral
+	TokenNamePLUS
ex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
assertStringContains	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
string	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
contains	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"["	TokenNameStringLiteral
+	TokenNamePLUS
string	TokenNameIdentifier
+	TokenNamePLUS
"] does not contain ["	TokenNameStringLiteral
+	TokenNamePLUS
contains	TokenNameIdentifier
+	TokenNamePLUS
"]"	TokenNameStringLiteral
,	TokenNameCOMMA
string	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
contains	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
assertStringNotContains	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
string	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
contains	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"["	TokenNameStringLiteral
+	TokenNamePLUS
string	TokenNameIdentifier
+	TokenNamePLUS
"] does contain ["	TokenNameStringLiteral
+	TokenNamePLUS
contains	TokenNameIdentifier
+	TokenNamePLUS
"]"	TokenNameStringLiteral
,	TokenNameCOMMA
string	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
contains	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
filename	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
Reader	TokenNameIdentifier
r	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FileReader	TokenNameIdentifier
(	TokenNameLPAREN
FILE_UTILS	TokenNameIdentifier
.	TokenNameDOT
resolveFile	TokenNameIdentifier
(	TokenNameLPAREN
getProject	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBaseDir	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
filename	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
FileUtils	TokenNameIdentifier
.	TokenNameDOT
readFully	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
FileUtils	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
target	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
filename	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
target	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
filename	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
contains	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
content	TokenNameIdentifier
=	TokenNameEQUAL
getFileString	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"expecting file "	TokenNameStringLiteral
+	TokenNamePLUS
name	TokenNameIdentifier
+	TokenNamePLUS
" to contain "	TokenNameStringLiteral
+	TokenNamePLUS
contains	TokenNameIdentifier
+	TokenNamePLUS
" but got "	TokenNameStringLiteral
+	TokenNamePLUS
content	TokenNameIdentifier
,	TokenNameCOMMA
content	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
contains	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
target	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
name	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
contains	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
executeTarget	TokenNameIdentifier
(	TokenNameLPAREN
target	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectFileContains	TokenNameIdentifier
(	TokenNameLPAREN
name	TokenNameIdentifier
,	TokenNameCOMMA
contains	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
Capitalize	TokenNameIdentifier
implements	TokenNameimplements
TokenFilter	TokenNameIdentifier
.	TokenNameDOT
Filter	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
String	TokenNameIdentifier
filter	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
token	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
token	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
token	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
token	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
toUpperCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
token	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
