package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
execution	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashSet	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Set	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
InvalidRepositoryException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
ArtifactRepository	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
RepositorySystem	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
settings	TokenNameIdentifier
.	TokenNameDOT
Mirror	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
settings	TokenNameIdentifier
.	TokenNameDOT
Proxy	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
settings	TokenNameIdentifier
.	TokenNameDOT
Server	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
settings	TokenNameIdentifier
.	TokenNameDOT
Settings	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
settings	TokenNameIdentifier
.	TokenNameDOT
SettingsUtils	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
component	TokenNameIdentifier
.	TokenNameDOT
annotations	TokenNameIdentifier
.	TokenNameDOT
Component	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
component	TokenNameIdentifier
.	TokenNameDOT
annotations	TokenNameIdentifier
.	TokenNameDOT
Requirement	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
StringUtils	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Component	TokenNameIdentifier
(	TokenNameLPAREN
role	TokenNameIdentifier
=	TokenNameEQUAL
MavenExecutionRequestPopulator	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
public	TokenNamepublic
class	TokenNameclass
DefaultMavenExecutionRequestPopulator	TokenNameIdentifier
implements	TokenNameimplements
MavenExecutionRequestPopulator	TokenNameIdentifier
{	TokenNameLBRACE
@	TokenNameAT
Requirement	TokenNameIdentifier
private	TokenNameprivate
RepositorySystem	TokenNameIdentifier
repositorySystem	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
MavenExecutionRequest	TokenNameIdentifier
populateFromSettings	TokenNameIdentifier
(	TokenNameLPAREN
MavenExecutionRequest	TokenNameIdentifier
request	TokenNameIdentifier
,	TokenNameCOMMA
Settings	TokenNameIdentifier
settings	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MavenExecutionRequestPopulationException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
settings	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
request	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
request	TokenNameIdentifier
.	TokenNameDOT
setOffline	TokenNameIdentifier
(	TokenNameLPAREN
settings	TokenNameIdentifier
.	TokenNameDOT
isOffline	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
request	TokenNameIdentifier
.	TokenNameDOT
setInteractiveMode	TokenNameIdentifier
(	TokenNameLPAREN
settings	TokenNameIdentifier
.	TokenNameDOT
isInteractiveMode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
request	TokenNameIdentifier
.	TokenNameDOT
setPluginGroups	TokenNameIdentifier
(	TokenNameLPAREN
settings	TokenNameIdentifier
.	TokenNameDOT
getPluginGroups	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
request	TokenNameIdentifier
.	TokenNameDOT
setLocalRepositoryPath	TokenNameIdentifier
(	TokenNameLPAREN
settings	TokenNameIdentifier
.	TokenNameDOT
getLocalRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Server	TokenNameIdentifier
server	TokenNameIdentifier
:	TokenNameCOLON
settings	TokenNameIdentifier
.	TokenNameDOT
getServers	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
server	TokenNameIdentifier
=	TokenNameEQUAL
server	TokenNameIdentifier
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
request	TokenNameIdentifier
.	TokenNameDOT
addServer	TokenNameIdentifier
(	TokenNameLPAREN
server	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
Proxy	TokenNameIdentifier
proxy	TokenNameIdentifier
:	TokenNameCOLON
settings	TokenNameIdentifier
.	TokenNameDOT
getProxies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
proxy	TokenNameIdentifier
.	TokenNameDOT
isActive	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
proxy	TokenNameIdentifier
=	TokenNameEQUAL
proxy	TokenNameIdentifier
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
request	TokenNameIdentifier
.	TokenNameDOT
addProxy	TokenNameIdentifier
(	TokenNameLPAREN
proxy	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
Mirror	TokenNameIdentifier
mirror	TokenNameIdentifier
:	TokenNameCOLON
settings	TokenNameIdentifier
.	TokenNameDOT
getMirrors	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
mirror	TokenNameIdentifier
=	TokenNameEQUAL
mirror	TokenNameIdentifier
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
request	TokenNameIdentifier
.	TokenNameDOT
addMirror	TokenNameIdentifier
(	TokenNameLPAREN
mirror	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
request	TokenNameIdentifier
.	TokenNameDOT
setActiveProfiles	TokenNameIdentifier
(	TokenNameLPAREN
settings	TokenNameIdentifier
.	TokenNameDOT
getActiveProfiles	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
settings	TokenNameIdentifier
.	TokenNameDOT
Profile	TokenNameIdentifier
rawProfile	TokenNameIdentifier
:	TokenNameCOLON
settings	TokenNameIdentifier
.	TokenNameDOT
getProfiles	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
request	TokenNameIdentifier
.	TokenNameDOT
addProfile	TokenNameIdentifier
(	TokenNameLPAREN
SettingsUtils	TokenNameIdentifier
.	TokenNameDOT
convertFromSettingsProfile	TokenNameIdentifier
(	TokenNameLPAREN
rawProfile	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
request	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
populateDefaultPluginGroups	TokenNameIdentifier
(	TokenNameLPAREN
MavenExecutionRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
request	TokenNameIdentifier
.	TokenNameDOT
addPluginGroup	TokenNameIdentifier
(	TokenNameLPAREN
"org.apache.maven.plugins"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
request	TokenNameIdentifier
.	TokenNameDOT
addPluginGroup	TokenNameIdentifier
(	TokenNameLPAREN
"org.codehaus.mojo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
injectDefaultRepositories	TokenNameIdentifier
(	TokenNameLPAREN
MavenExecutionRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MavenExecutionRequestPopulationException	TokenNameIdentifier
{	TokenNameLBRACE
Set	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
definedRepositories	TokenNameIdentifier
=	TokenNameEQUAL
getRepoIds	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getRemoteRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
definedRepositories	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
RepositorySystem	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_REMOTE_REPO_ID	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
request	TokenNameIdentifier
.	TokenNameDOT
addRemoteRepository	TokenNameIdentifier
(	TokenNameLPAREN
repositorySystem	TokenNameIdentifier
.	TokenNameDOT
createDefaultRemoteRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InvalidRepositoryException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
MavenExecutionRequestPopulationException	TokenNameIdentifier
(	TokenNameLPAREN
"Cannot create default remote repository."	TokenNameStringLiteral
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
injectDefaultPluginRepositories	TokenNameIdentifier
(	TokenNameLPAREN
MavenExecutionRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MavenExecutionRequestPopulationException	TokenNameIdentifier
{	TokenNameLBRACE
Set	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
definedRepositories	TokenNameIdentifier
=	TokenNameEQUAL
getRepoIds	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getPluginArtifactRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
definedRepositories	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
RepositorySystem	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_REMOTE_REPO_ID	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
request	TokenNameIdentifier
.	TokenNameDOT
addPluginArtifactRepository	TokenNameIdentifier
(	TokenNameLPAREN
repositorySystem	TokenNameIdentifier
.	TokenNameDOT
createDefaultRemoteRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InvalidRepositoryException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
MavenExecutionRequestPopulationException	TokenNameIdentifier
(	TokenNameLPAREN
"Cannot create default remote repository."	TokenNameStringLiteral
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
Set	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
getRepoIds	TokenNameIdentifier
(	TokenNameLPAREN
List	TokenNameIdentifier
<	TokenNameLESS
ArtifactRepository	TokenNameIdentifier
>	TokenNameGREATER
repositories	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Set	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
repoIds	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashSet	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
repositories	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
:	TokenNameCOLON
repositories	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
repoIds	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
repoIds	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
processRepositoriesInSettings	TokenNameIdentifier
(	TokenNameLPAREN
MavenExecutionRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MavenExecutionRequestPopulationException	TokenNameIdentifier
{	TokenNameLBRACE
repositorySystem	TokenNameIdentifier
.	TokenNameDOT
injectMirror	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getRemoteRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
request	TokenNameIdentifier
.	TokenNameDOT
getMirrors	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repositorySystem	TokenNameIdentifier
.	TokenNameDOT
injectProxy	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getRemoteRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
request	TokenNameIdentifier
.	TokenNameDOT
getProxies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repositorySystem	TokenNameIdentifier
.	TokenNameDOT
injectAuthentication	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getRemoteRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
request	TokenNameIdentifier
.	TokenNameDOT
getServers	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
request	TokenNameIdentifier
.	TokenNameDOT
setRemoteRepositories	TokenNameIdentifier
(	TokenNameLPAREN
repositorySystem	TokenNameIdentifier
.	TokenNameDOT
getEffectiveRepositories	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getRemoteRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repositorySystem	TokenNameIdentifier
.	TokenNameDOT
injectMirror	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getPluginArtifactRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
request	TokenNameIdentifier
.	TokenNameDOT
getMirrors	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repositorySystem	TokenNameIdentifier
.	TokenNameDOT
injectProxy	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getPluginArtifactRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
request	TokenNameIdentifier
.	TokenNameDOT
getProxies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repositorySystem	TokenNameIdentifier
.	TokenNameDOT
injectAuthentication	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getPluginArtifactRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
request	TokenNameIdentifier
.	TokenNameDOT
getServers	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
request	TokenNameIdentifier
.	TokenNameDOT
setPluginArtifactRepositories	TokenNameIdentifier
(	TokenNameLPAREN
repositorySystem	TokenNameIdentifier
.	TokenNameDOT
getEffectiveRepositories	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getPluginArtifactRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
localRepository	TokenNameIdentifier
(	TokenNameLPAREN
MavenExecutionRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MavenExecutionRequestPopulationException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getLocalRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
request	TokenNameIdentifier
.	TokenNameDOT
setLocalRepository	TokenNameIdentifier
(	TokenNameLPAREN
createLocalRepository	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getLocalRepositoryPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
request	TokenNameIdentifier
.	TokenNameDOT
setLocalRepositoryPath	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getLocalRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBasedir	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAbsoluteFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
ArtifactRepository	TokenNameIdentifier
createLocalRepository	TokenNameIdentifier
(	TokenNameLPAREN
MavenExecutionRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MavenExecutionRequestPopulationException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
localRepositoryPath	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getLocalRepositoryPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
localRepositoryPath	TokenNameIdentifier
=	TokenNameEQUAL
request	TokenNameIdentifier
.	TokenNameDOT
getLocalRepositoryPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAbsolutePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
StringUtils	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
localRepositoryPath	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
localRepositoryPath	TokenNameIdentifier
=	TokenNameEQUAL
RepositorySystem	TokenNameIdentifier
.	TokenNameDOT
defaultUserLocalRepository	TokenNameIdentifier
.	TokenNameDOT
getAbsolutePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
repositorySystem	TokenNameIdentifier
.	TokenNameDOT
createLocalRepository	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
localRepositoryPath	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InvalidRepositoryException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
MavenExecutionRequestPopulationException	TokenNameIdentifier
(	TokenNameLPAREN
"Cannot create local repository."	TokenNameStringLiteral
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
baseDirectory	TokenNameIdentifier
(	TokenNameLPAREN
MavenExecutionRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getBaseDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getPom	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
request	TokenNameIdentifier
.	TokenNameDOT
setBaseDirectory	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getPom	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAbsoluteFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getParentFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
MavenExecutionRequest	TokenNameIdentifier
populateDefaults	TokenNameIdentifier
(	TokenNameLPAREN
MavenExecutionRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
MavenExecutionRequestPopulationException	TokenNameIdentifier
{	TokenNameLBRACE
baseDirectory	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
localRepository	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
populateDefaultPluginGroups	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
injectDefaultRepositories	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
injectDefaultPluginRepositories	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
processRepositoriesInSettings	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
request	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
