package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
legacy	TokenNameIdentifier
.	TokenNameDOT
resolver	TokenNameIdentifier
.	TokenNameDOT
conflict	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
Artifact	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
factory	TokenNameIdentifier
.	TokenNameDOT
ArtifactFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
resolver	TokenNameIdentifier
.	TokenNameDOT
ResolutionNode	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
versioning	TokenNameIdentifier
.	TokenNameDOT
InvalidVersionSpecificationException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
versioning	TokenNameIdentifier
.	TokenNameDOT
VersionRange	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
legacy	TokenNameIdentifier
.	TokenNameDOT
resolver	TokenNameIdentifier
.	TokenNameDOT
conflict	TokenNameIdentifier
.	TokenNameDOT
ConflictResolver	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
PlexusTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
abstract	TokenNameabstract
class	TokenNameclass
AbstractConflictResolverTest	TokenNameIdentifier
extends	TokenNameextends
PlexusTestCase	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
GROUP_ID	TokenNameIdentifier
=	TokenNameEQUAL
"test"	TokenNameStringLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
Artifact	TokenNameIdentifier
a1	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Artifact	TokenNameIdentifier
a2	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
Artifact	TokenNameIdentifier
b1	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
roleHint	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
ArtifactFactory	TokenNameIdentifier
artifactFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
ConflictResolver	TokenNameIdentifier
conflictResolver	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
AbstractConflictResolverTest	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
roleHint	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
roleHint	TokenNameIdentifier
=	TokenNameEQUAL
roleHint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
artifactFactory	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ArtifactFactory	TokenNameIdentifier
)	TokenNameRPAREN
lookup	TokenNameIdentifier
(	TokenNameLPAREN
ArtifactFactory	TokenNameIdentifier
.	TokenNameDOT
ROLE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
conflictResolver	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ConflictResolver	TokenNameIdentifier
)	TokenNameRPAREN
lookup	TokenNameIdentifier
(	TokenNameLPAREN
ConflictResolver	TokenNameIdentifier
.	TokenNameDOT
ROLE	TokenNameIdentifier
,	TokenNameCOMMA
roleHint	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
a1	TokenNameIdentifier
=	TokenNameEQUAL
createArtifact	TokenNameIdentifier
(	TokenNameLPAREN
"a"	TokenNameStringLiteral
,	TokenNameCOMMA
"1.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
a2	TokenNameIdentifier
=	TokenNameEQUAL
createArtifact	TokenNameIdentifier
(	TokenNameLPAREN
"a"	TokenNameStringLiteral
,	TokenNameCOMMA
"2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
createArtifact	TokenNameIdentifier
(	TokenNameLPAREN
"b"	TokenNameStringLiteral
,	TokenNameCOMMA
"1.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
tearDown	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
a1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
a2	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
b1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
artifactFactory	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
conflictResolver	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
super	TokenNamesuper
.	TokenNameDOT
tearDown	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
ConflictResolver	TokenNameIdentifier
getConflictResolver	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
conflictResolver	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
assertResolveConflict	TokenNameIdentifier
(	TokenNameLPAREN
ResolutionNode	TokenNameIdentifier
expectedNode	TokenNameIdentifier
,	TokenNameCOMMA
ResolutionNode	TokenNameIdentifier
actualNode1	TokenNameIdentifier
,	TokenNameCOMMA
ResolutionNode	TokenNameIdentifier
actualNode2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ResolutionNode	TokenNameIdentifier
resolvedNode	TokenNameIdentifier
=	TokenNameEQUAL
getConflictResolver	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
resolveConflict	TokenNameIdentifier
(	TokenNameLPAREN
actualNode1	TokenNameIdentifier
,	TokenNameCOMMA
actualNode2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
"Expected resolvable"	TokenNameStringLiteral
,	TokenNameCOMMA
resolvedNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Resolution node"	TokenNameStringLiteral
,	TokenNameCOMMA
expectedNode	TokenNameIdentifier
,	TokenNameCOMMA
resolvedNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
assertUnresolvableConflict	TokenNameIdentifier
(	TokenNameLPAREN
ResolutionNode	TokenNameIdentifier
actualNode1	TokenNameIdentifier
,	TokenNameCOMMA
ResolutionNode	TokenNameIdentifier
actualNode2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ResolutionNode	TokenNameIdentifier
resolvedNode	TokenNameIdentifier
=	TokenNameEQUAL
getConflictResolver	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
resolveConflict	TokenNameIdentifier
(	TokenNameLPAREN
actualNode1	TokenNameIdentifier
,	TokenNameCOMMA
actualNode2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNull	TokenNameIdentifier
(	TokenNameLPAREN
"Expected unresolvable"	TokenNameStringLiteral
,	TokenNameCOMMA
resolvedNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Artifact	TokenNameIdentifier
createArtifact	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
id	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
version	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
InvalidVersionSpecificationException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
createArtifact	TokenNameIdentifier
(	TokenNameLPAREN
id	TokenNameIdentifier
,	TokenNameCOMMA
version	TokenNameIdentifier
,	TokenNameCOMMA
Artifact	TokenNameIdentifier
.	TokenNameDOT
SCOPE_COMPILE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Artifact	TokenNameIdentifier
createArtifact	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
id	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
version	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
optional	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
InvalidVersionSpecificationException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
createArtifact	TokenNameIdentifier
(	TokenNameLPAREN
id	TokenNameIdentifier
,	TokenNameCOMMA
version	TokenNameIdentifier
,	TokenNameCOMMA
Artifact	TokenNameIdentifier
.	TokenNameDOT
SCOPE_COMPILE	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
optional	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Artifact	TokenNameIdentifier
createArtifact	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
id	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
version	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
scope	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
InvalidVersionSpecificationException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
createArtifact	TokenNameIdentifier
(	TokenNameLPAREN
id	TokenNameIdentifier
,	TokenNameCOMMA
version	TokenNameIdentifier
,	TokenNameCOMMA
scope	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Artifact	TokenNameIdentifier
createArtifact	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
id	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
version	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
scope	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
inheritedScope	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
optional	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
InvalidVersionSpecificationException	TokenNameIdentifier
{	TokenNameLBRACE
VersionRange	TokenNameIdentifier
versionRange	TokenNameIdentifier
=	TokenNameEQUAL
VersionRange	TokenNameIdentifier
.	TokenNameDOT
createFromVersionSpec	TokenNameIdentifier
(	TokenNameLPAREN
version	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
artifactFactory	TokenNameIdentifier
.	TokenNameDOT
createDependencyArtifact	TokenNameIdentifier
(	TokenNameLPAREN
GROUP_ID	TokenNameIdentifier
,	TokenNameCOMMA
id	TokenNameIdentifier
,	TokenNameCOMMA
versionRange	TokenNameIdentifier
,	TokenNameCOMMA
"jar"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
scope	TokenNameIdentifier
,	TokenNameCOMMA
inheritedScope	TokenNameIdentifier
,	TokenNameCOMMA
optional	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
