package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
legacy	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
security	TokenNameIdentifier
.	TokenNameDOT
NoSuchAlgorithmException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
Artifact	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
metadata	TokenNameIdentifier
.	TokenNameDOT
ArtifactMetadata	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
ArtifactRepository	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
ArtifactRepositoryPolicy	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
wagon	TokenNameIdentifier
.	TokenNameDOT
ConnectionException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
wagon	TokenNameIdentifier
.	TokenNameDOT
ResourceDoesNotExistException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
wagon	TokenNameIdentifier
.	TokenNameDOT
TransferFailedException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
wagon	TokenNameIdentifier
.	TokenNameDOT
UnsupportedProtocolException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
wagon	TokenNameIdentifier
.	TokenNameDOT
Wagon	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
wagon	TokenNameIdentifier
.	TokenNameDOT
authentication	TokenNameIdentifier
.	TokenNameDOT
AuthenticationException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
wagon	TokenNameIdentifier
.	TokenNameDOT
authentication	TokenNameIdentifier
.	TokenNameDOT
AuthenticationInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
wagon	TokenNameIdentifier
.	TokenNameDOT
authorization	TokenNameIdentifier
.	TokenNameDOT
AuthorizationException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
wagon	TokenNameIdentifier
.	TokenNameDOT
events	TokenNameIdentifier
.	TokenNameDOT
TransferListener	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
wagon	TokenNameIdentifier
.	TokenNameDOT
observers	TokenNameIdentifier
.	TokenNameDOT
ChecksumObserver	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
wagon	TokenNameIdentifier
.	TokenNameDOT
proxy	TokenNameIdentifier
.	TokenNameDOT
ProxyInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
wagon	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
Repository	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
PlexusContainer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
component	TokenNameIdentifier
.	TokenNameDOT
annotations	TokenNameIdentifier
.	TokenNameDOT
Component	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
component	TokenNameIdentifier
.	TokenNameDOT
annotations	TokenNameIdentifier
.	TokenNameDOT
Requirement	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
component	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
exception	TokenNameIdentifier
.	TokenNameDOT
ComponentLifecycleException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
component	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
exception	TokenNameIdentifier
.	TokenNameDOT
ComponentLookupException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
logging	TokenNameIdentifier
.	TokenNameDOT
Logger	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
FileUtils	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Component	TokenNameIdentifier
(	TokenNameLPAREN
role	TokenNameIdentifier
=	TokenNameEQUAL
WagonManager	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
public	TokenNamepublic
class	TokenNameclass
DefaultWagonManager	TokenNameIdentifier
implements	TokenNameimplements
WagonManager	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
CHECKSUM_IDS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"md5"	TokenNameStringLiteral
,	TokenNameCOMMA
"sha1"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
CHECKSUM_ALGORITHMS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"MD5"	TokenNameStringLiteral
,	TokenNameCOMMA
"SHA-1"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
@	TokenNameAT
Requirement	TokenNameIdentifier
private	TokenNameprivate
Logger	TokenNameIdentifier
logger	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Requirement	TokenNameIdentifier
private	TokenNameprivate
PlexusContainer	TokenNameIdentifier
container	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Requirement	TokenNameIdentifier
private	TokenNameprivate
UpdateCheckManager	TokenNameIdentifier
updateCheckManager	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
getArtifact	TokenNameIdentifier
(	TokenNameLPAREN
Artifact	TokenNameIdentifier
artifact	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
,	TokenNameCOMMA
TransferListener	TokenNameIdentifier
downloadMonitor	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
force	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
TransferFailedException	TokenNameIdentifier
,	TokenNameCOMMA
ResourceDoesNotExistException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
remotePath	TokenNameIdentifier
=	TokenNameEQUAL
repository	TokenNameIdentifier
.	TokenNameDOT
pathOf	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ArtifactRepositoryPolicy	TokenNameIdentifier
policy	TokenNameIdentifier
=	TokenNameEQUAL
artifact	TokenNameIdentifier
.	TokenNameDOT
isSnapshot	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
repository	TokenNameIdentifier
.	TokenNameDOT
getSnapshots	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
repository	TokenNameIdentifier
.	TokenNameDOT
getReleases	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
policy	TokenNameIdentifier
.	TokenNameDOT
isEnabled	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
debug	TokenNameIdentifier
(	TokenNameLPAREN
"Skipping disabled repository "	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" for resolution of "	TokenNameStringLiteral
+	TokenNamePLUS
artifact	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
artifact	TokenNameIdentifier
.	TokenNameDOT
isSnapshot	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
||	TokenNameOR_OR
!	TokenNameNOT
artifact	TokenNameIdentifier
.	TokenNameDOT
getFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
force	TokenNameIdentifier
||	TokenNameOR_OR
updateCheckManager	TokenNameIdentifier
.	TokenNameDOT
isUpdateRequired	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
debug	TokenNameIdentifier
(	TokenNameLPAREN
"Trying repository "	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" for resolution of "	TokenNameStringLiteral
+	TokenNamePLUS
artifact	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" from "	TokenNameStringLiteral
+	TokenNamePLUS
remotePath	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
getRemoteFile	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
,	TokenNameCOMMA
artifact	TokenNameIdentifier
.	TokenNameDOT
getFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
remotePath	TokenNameIdentifier
,	TokenNameCOMMA
downloadMonitor	TokenNameIdentifier
,	TokenNameCOMMA
policy	TokenNameIdentifier
.	TokenNameDOT
getChecksumPolicy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateCheckManager	TokenNameIdentifier
.	TokenNameDOT
touch	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ResourceDoesNotExistException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
updateCheckManager	TokenNameIdentifier
.	TokenNameDOT
touch	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
e	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
TransferFailedException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
error	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
e	TokenNameIdentifier
.	TokenNameDOT
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getSimpleName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
updateCheckManager	TokenNameIdentifier
.	TokenNameDOT
touch	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
,	TokenNameCOMMA
error	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
e	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
debug	TokenNameIdentifier
(	TokenNameLPAREN
"  Artifact "	TokenNameStringLiteral
+	TokenNamePLUS
artifact	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" resolved to "	TokenNameStringLiteral
+	TokenNamePLUS
artifact	TokenNameIdentifier
.	TokenNameDOT
getFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
artifact	TokenNameIdentifier
.	TokenNameDOT
setResolved	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
artifact	TokenNameIdentifier
.	TokenNameDOT
getFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
error	TokenNameIdentifier
=	TokenNameEQUAL
updateCheckManager	TokenNameIdentifier
.	TokenNameDOT
getError	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
error	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Failure to resolve "	TokenNameStringLiteral
+	TokenNamePLUS
remotePath	TokenNameIdentifier
+	TokenNamePLUS
" from "	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" was cached in the local repository. "	TokenNameStringLiteral
+	TokenNamePLUS
"Resolution will not be reattempted until the update interval of "	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" has elapsed or updates are forced. Original error: "	TokenNameStringLiteral
+	TokenNamePLUS
error	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
ResourceDoesNotExistException	TokenNameIdentifier
(	TokenNameLPAREN
"Failure to resolve "	TokenNameStringLiteral
+	TokenNamePLUS
remotePath	TokenNameIdentifier
+	TokenNamePLUS
" from "	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" was cached in the local repository. "	TokenNameStringLiteral
+	TokenNamePLUS
"Resolution will not be reattempted until the update interval of "	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" has elapsed or updates are forced."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
getArtifact	TokenNameIdentifier
(	TokenNameLPAREN
Artifact	TokenNameIdentifier
artifact	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
ArtifactRepository	TokenNameIdentifier
>	TokenNameGREATER
remoteRepositories	TokenNameIdentifier
,	TokenNameCOMMA
TransferListener	TokenNameIdentifier
downloadMonitor	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
force	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
TransferFailedException	TokenNameIdentifier
,	TokenNameCOMMA
ResourceDoesNotExistException	TokenNameIdentifier
{	TokenNameLBRACE
TransferFailedException	TokenNameIdentifier
tfe	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
:	TokenNameCOLON
remoteRepositories	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
getArtifact	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
,	TokenNameCOMMA
downloadMonitor	TokenNameIdentifier
,	TokenNameCOMMA
force	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
artifact	TokenNameIdentifier
.	TokenNameDOT
isResolved	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
artifact	TokenNameIdentifier
.	TokenNameDOT
setRepository	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ResourceDoesNotExistException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
debug	TokenNameIdentifier
(	TokenNameLPAREN
"Unable to find artifact "	TokenNameStringLiteral
+	TokenNamePLUS
artifact	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" in repository "	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" ("	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
")"	TokenNameStringLiteral
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
TransferFailedException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tfe	TokenNameIdentifier
=	TokenNameEQUAL
e	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
msg	TokenNameIdentifier
=	TokenNameEQUAL
"Unable to get artifact "	TokenNameStringLiteral
+	TokenNamePLUS
artifact	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" from repository "	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" ("	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"): "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
logger	TokenNameIdentifier
.	TokenNameDOT
isDebugEnabled	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
warn	TokenNameIdentifier
(	TokenNameLPAREN
msg	TokenNameIdentifier
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
warn	TokenNameIdentifier
(	TokenNameLPAREN
msg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
artifact	TokenNameIdentifier
.	TokenNameDOT
getFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tfe	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
tfe	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
ResourceDoesNotExistException	TokenNameIdentifier
(	TokenNameLPAREN
"Unable to download the artifact from any repository"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
getArtifactMetadata	TokenNameIdentifier
(	TokenNameLPAREN
ArtifactMetadata	TokenNameIdentifier
metadata	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
,	TokenNameCOMMA
File	TokenNameIdentifier
destination	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
checksumPolicy	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
TransferFailedException	TokenNameIdentifier
,	TokenNameCOMMA
ResourceDoesNotExistException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
remotePath	TokenNameIdentifier
=	TokenNameEQUAL
repository	TokenNameIdentifier
.	TokenNameDOT
pathOfRemoteRepositoryMetadata	TokenNameIdentifier
(	TokenNameLPAREN
metadata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
getRemoteFile	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
,	TokenNameCOMMA
destination	TokenNameIdentifier
,	TokenNameCOMMA
remotePath	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
checksumPolicy	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
getArtifactMetadataFromDeploymentRepository	TokenNameIdentifier
(	TokenNameLPAREN
ArtifactMetadata	TokenNameIdentifier
metadata	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
,	TokenNameCOMMA
File	TokenNameIdentifier
destination	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
checksumPolicy	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
TransferFailedException	TokenNameIdentifier
,	TokenNameCOMMA
ResourceDoesNotExistException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
remotePath	TokenNameIdentifier
=	TokenNameEQUAL
repository	TokenNameIdentifier
.	TokenNameDOT
pathOfRemoteRepositoryMetadata	TokenNameIdentifier
(	TokenNameLPAREN
metadata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
getRemoteFile	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
,	TokenNameCOMMA
destination	TokenNameIdentifier
,	TokenNameCOMMA
remotePath	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
checksumPolicy	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
connectWagon	TokenNameIdentifier
(	TokenNameLPAREN
Wagon	TokenNameIdentifier
wagon	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ConnectionException	TokenNameIdentifier
,	TokenNameCOMMA
AuthenticationException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
logger	TokenNameIdentifier
.	TokenNameDOT
isDebugEnabled	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
debug	TokenNameIdentifier
(	TokenNameLPAREN
"Using proxy "	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getHost	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
":"	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getPort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" for "	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getAuthentication	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
repository	TokenNameIdentifier
.	TokenNameDOT
getProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
connect	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Repository	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
repository	TokenNameIdentifier
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
authenticationInfo	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
proxyInfo	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getAuthentication	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
connect	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Repository	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
repository	TokenNameIdentifier
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
authenticationInfo	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
connect	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Repository	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
repository	TokenNameIdentifier
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
proxyInfo	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
connect	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Repository	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
repository	TokenNameIdentifier
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
AuthenticationInfo	TokenNameIdentifier
authenticationInfo	TokenNameIdentifier
(	TokenNameLPAREN
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
AuthenticationInfo	TokenNameIdentifier
ai	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
AuthenticationInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ai	TokenNameIdentifier
.	TokenNameDOT
setUserName	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getAuthentication	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getUsername	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ai	TokenNameIdentifier
.	TokenNameDOT
setPassword	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getAuthentication	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getPassword	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
ai	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
ProxyInfo	TokenNameIdentifier
proxyInfo	TokenNameIdentifier
(	TokenNameLPAREN
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ProxyInfo	TokenNameIdentifier
proxyInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ProxyInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
proxyInfo	TokenNameIdentifier
.	TokenNameDOT
setHost	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getHost	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
proxyInfo	TokenNameIdentifier
.	TokenNameDOT
setType	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getProtocol	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
proxyInfo	TokenNameIdentifier
.	TokenNameDOT
setPort	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getPort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
proxyInfo	TokenNameIdentifier
.	TokenNameDOT
setNonProxyHosts	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getNonProxyHosts	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
proxyInfo	TokenNameIdentifier
.	TokenNameDOT
setUserName	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getUserName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
proxyInfo	TokenNameIdentifier
.	TokenNameDOT
setPassword	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getProxy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getPassword	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
proxyInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
getRemoteFile	TokenNameIdentifier
(	TokenNameLPAREN
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
,	TokenNameCOMMA
File	TokenNameIdentifier
destination	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
remotePath	TokenNameIdentifier
,	TokenNameCOMMA
TransferListener	TokenNameIdentifier
downloadMonitor	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
checksumPolicy	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
force	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
TransferFailedException	TokenNameIdentifier
,	TokenNameCOMMA
ResourceDoesNotExistException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
protocol	TokenNameIdentifier
=	TokenNameEQUAL
repository	TokenNameIdentifier
.	TokenNameDOT
getProtocol	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Wagon	TokenNameIdentifier
wagon	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
wagon	TokenNameIdentifier
=	TokenNameEQUAL
getWagon	TokenNameIdentifier
(	TokenNameLPAREN
protocol	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
UnsupportedProtocolException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Unsupported Protocol: '"	TokenNameStringLiteral
+	TokenNamePLUS
protocol	TokenNameIdentifier
+	TokenNamePLUS
"': "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
downloadMonitor	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
addTransferListener	TokenNameIdentifier
(	TokenNameLPAREN
downloadMonitor	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
File	TokenNameIdentifier
temp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
destination	TokenNameIdentifier
+	TokenNamePLUS
".tmp"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
temp	TokenNameIdentifier
.	TokenNameDOT
deleteOnExit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
downloaded	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
connectWagon	TokenNameIdentifier
(	TokenNameLPAREN
wagon	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
firstRun	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
boolean	TokenNameboolean
retry	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
firstRun	TokenNameIdentifier
||	TokenNameOR_OR
retry	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ChecksumObserver	TokenNameIdentifier
md5ChecksumObserver	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
ChecksumObserver	TokenNameIdentifier
sha1ChecksumObserver	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
md5ChecksumObserver	TokenNameIdentifier
=	TokenNameEQUAL
addChecksumObserver	TokenNameIdentifier
(	TokenNameLPAREN
wagon	TokenNameIdentifier
,	TokenNameCOMMA
CHECKSUM_ALGORITHMS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sha1ChecksumObserver	TokenNameIdentifier
=	TokenNameEQUAL
addChecksumObserver	TokenNameIdentifier
(	TokenNameLPAREN
wagon	TokenNameIdentifier
,	TokenNameCOMMA
CHECKSUM_ALGORITHMS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
retry	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
destination	TokenNameIdentifier
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
!	TokenNameNOT
force	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
downloaded	TokenNameIdentifier
=	TokenNameEQUAL
wagon	TokenNameIdentifier
.	TokenNameDOT
getIfNewer	TokenNameIdentifier
(	TokenNameLPAREN
remotePath	TokenNameIdentifier
,	TokenNameCOMMA
temp	TokenNameIdentifier
,	TokenNameCOMMA
destination	TokenNameIdentifier
.	TokenNameDOT
lastModified	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
downloaded	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
destination	TokenNameIdentifier
.	TokenNameDOT
setLastModified	TokenNameIdentifier
(	TokenNameLPAREN
System	TokenNameIdentifier
.	TokenNameDOT
currentTimeMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
UnsupportedOperationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
remotePath	TokenNameIdentifier
,	TokenNameCOMMA
temp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
downloaded	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
remotePath	TokenNameIdentifier
,	TokenNameCOMMA
temp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
downloaded	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
removeTransferListener	TokenNameIdentifier
(	TokenNameLPAREN
md5ChecksumObserver	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
wagon	TokenNameIdentifier
.	TokenNameDOT
removeTransferListener	TokenNameIdentifier
(	TokenNameLPAREN
sha1ChecksumObserver	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
downloaded	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
downloadMonitor	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
removeTransferListener	TokenNameIdentifier
(	TokenNameLPAREN
downloadMonitor	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
verifyChecksum	TokenNameIdentifier
(	TokenNameLPAREN
sha1ChecksumObserver	TokenNameIdentifier
,	TokenNameCOMMA
destination	TokenNameIdentifier
,	TokenNameCOMMA
temp	TokenNameIdentifier
,	TokenNameCOMMA
remotePath	TokenNameIdentifier
,	TokenNameCOMMA
".sha1"	TokenNameStringLiteral
,	TokenNameCOMMA
wagon	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ChecksumFailedException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
firstRun	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
warn	TokenNameIdentifier
(	TokenNameLPAREN
"*** CHECKSUM FAILED - "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" - RETRYING"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
retry	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
handleChecksumFailure	TokenNameIdentifier
(	TokenNameLPAREN
checksumPolicy	TokenNameIdentifier
,	TokenNameCOMMA
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
.	TokenNameDOT
getCause	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ResourceDoesNotExistException	TokenNameIdentifier
sha1TryException	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
debug	TokenNameIdentifier
(	TokenNameLPAREN
"SHA1 not found, trying MD5: "	TokenNameStringLiteral
+	TokenNamePLUS
sha1TryException	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
verifyChecksum	TokenNameIdentifier
(	TokenNameLPAREN
md5ChecksumObserver	TokenNameIdentifier
,	TokenNameCOMMA
destination	TokenNameIdentifier
,	TokenNameCOMMA
temp	TokenNameIdentifier
,	TokenNameCOMMA
remotePath	TokenNameIdentifier
,	TokenNameCOMMA
".md5"	TokenNameStringLiteral
,	TokenNameCOMMA
wagon	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ChecksumFailedException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
firstRun	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
retry	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
handleChecksumFailure	TokenNameIdentifier
(	TokenNameLPAREN
checksumPolicy	TokenNameIdentifier
,	TokenNameCOMMA
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
.	TokenNameDOT
getCause	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ResourceDoesNotExistException	TokenNameIdentifier
md5TryException	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
handleChecksumFailure	TokenNameIdentifier
(	TokenNameLPAREN
checksumPolicy	TokenNameIdentifier
,	TokenNameCOMMA
"Error retrieving checksum file for "	TokenNameStringLiteral
+	TokenNamePLUS
remotePath	TokenNameIdentifier
,	TokenNameCOMMA
md5TryException	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
downloadMonitor	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
addTransferListener	TokenNameIdentifier
(	TokenNameLPAREN
downloadMonitor	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
firstRun	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ConnectionException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Connection failed: "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
AuthenticationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Authentication failed: "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
AuthorizationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Authorization failed: "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
downloadMonitor	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
removeTransferListener	TokenNameIdentifier
(	TokenNameLPAREN
downloadMonitor	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
disconnectWagon	TokenNameIdentifier
(	TokenNameLPAREN
wagon	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
releaseWagon	TokenNameIdentifier
(	TokenNameLPAREN
protocol	TokenNameIdentifier
,	TokenNameCOMMA
wagon	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
downloaded	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
temp	TokenNameIdentifier
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
ResourceDoesNotExistException	TokenNameIdentifier
(	TokenNameLPAREN
"Downloaded file does not exist: "	TokenNameStringLiteral
+	TokenNamePLUS
temp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
temp	TokenNameIdentifier
.	TokenNameDOT
renameTo	TokenNameIdentifier
(	TokenNameLPAREN
destination	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
FileUtils	TokenNameIdentifier
.	TokenNameDOT
copyFile	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
destination	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
temp	TokenNameIdentifier
.	TokenNameDOT
delete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Error copying temporary file to the final destination: "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
putArtifact	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
source	TokenNameIdentifier
,	TokenNameCOMMA
Artifact	TokenNameIdentifier
artifact	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactRepository	TokenNameIdentifier
deploymentRepository	TokenNameIdentifier
,	TokenNameCOMMA
TransferListener	TokenNameIdentifier
downloadMonitor	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
TransferFailedException	TokenNameIdentifier
{	TokenNameLBRACE
putRemoteFile	TokenNameIdentifier
(	TokenNameLPAREN
deploymentRepository	TokenNameIdentifier
,	TokenNameCOMMA
source	TokenNameIdentifier
,	TokenNameCOMMA
deploymentRepository	TokenNameIdentifier
.	TokenNameDOT
pathOf	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
downloadMonitor	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
putArtifactMetadata	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
source	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactMetadata	TokenNameIdentifier
artifactMetadata	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
TransferFailedException	TokenNameIdentifier
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
info	TokenNameIdentifier
(	TokenNameLPAREN
"Uploading "	TokenNameStringLiteral
+	TokenNamePLUS
artifactMetadata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
putRemoteFile	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
,	TokenNameCOMMA
source	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
.	TokenNameDOT
pathOfRemoteRepositoryMetadata	TokenNameIdentifier
(	TokenNameLPAREN
artifactMetadata	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
putRemoteFile	TokenNameIdentifier
(	TokenNameLPAREN
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
,	TokenNameCOMMA
File	TokenNameIdentifier
source	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
remotePath	TokenNameIdentifier
,	TokenNameCOMMA
TransferListener	TokenNameIdentifier
downloadMonitor	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
TransferFailedException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
protocol	TokenNameIdentifier
=	TokenNameEQUAL
repository	TokenNameIdentifier
.	TokenNameDOT
getProtocol	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Wagon	TokenNameIdentifier
wagon	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
wagon	TokenNameIdentifier
=	TokenNameEQUAL
getWagon	TokenNameIdentifier
(	TokenNameLPAREN
protocol	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
UnsupportedProtocolException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Unsupported Protocol: '"	TokenNameStringLiteral
+	TokenNamePLUS
protocol	TokenNameIdentifier
+	TokenNamePLUS
"': "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
downloadMonitor	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
addTransferListener	TokenNameIdentifier
(	TokenNameLPAREN
downloadMonitor	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
ChecksumObserver	TokenNameIdentifier
>	TokenNameGREATER
checksums	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
ChecksumObserver	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
sums	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
CHECKSUM_IDS	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
checksums	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
CHECKSUM_IDS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
addChecksumObserver	TokenNameIdentifier
(	TokenNameLPAREN
wagon	TokenNameIdentifier
,	TokenNameCOMMA
CHECKSUM_ALGORITHMS	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
List	TokenNameIdentifier
<	TokenNameLESS
File	TokenNameIdentifier
>	TokenNameGREATER
temporaryFiles	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
File	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
connectWagon	TokenNameIdentifier
(	TokenNameLPAREN
wagon	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
wagon	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
,	TokenNameCOMMA
remotePath	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
downloadMonitor	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
removeTransferListener	TokenNameIdentifier
(	TokenNameLPAREN
downloadMonitor	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
extension	TokenNameIdentifier
:	TokenNameCOLON
checksums	TokenNameIdentifier
.	TokenNameDOT
keySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ChecksumObserver	TokenNameIdentifier
observer	TokenNameIdentifier
=	TokenNameEQUAL
checksums	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
extension	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sums	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
extension	TokenNameIdentifier
,	TokenNameCOMMA
observer	TokenNameIdentifier
.	TokenNameDOT
getActualChecksum	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
extension	TokenNameIdentifier
:	TokenNameCOLON
checksums	TokenNameIdentifier
.	TokenNameDOT
keySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
File	TokenNameIdentifier
temp	TokenNameIdentifier
=	TokenNameEQUAL
File	TokenNameIdentifier
.	TokenNameDOT
createTempFile	TokenNameIdentifier
(	TokenNameLPAREN
"maven-artifact"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
temp	TokenNameIdentifier
.	TokenNameDOT
deleteOnExit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
FileUtils	TokenNameIdentifier
.	TokenNameDOT
fileWrite	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
.	TokenNameDOT
getAbsolutePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"UTF-8"	TokenNameStringLiteral
,	TokenNameCOMMA
sums	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
extension	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
temporaryFiles	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
wagon	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
temp	TokenNameIdentifier
,	TokenNameCOMMA
remotePath	TokenNameIdentifier
+	TokenNamePLUS
"."	TokenNameStringLiteral
+	TokenNamePLUS
extension	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ConnectionException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Connection failed: "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
AuthenticationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Authentication failed: "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
AuthorizationException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Authorization failed: "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ResourceDoesNotExistException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Resource to deploy not found: "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Error creating temporary file for deployment: "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
cleanupTemporaryFiles	TokenNameIdentifier
(	TokenNameLPAREN
temporaryFiles	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
aCHECKSUM_IDS	TokenNameIdentifier
:	TokenNameCOLON
CHECKSUM_IDS	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
TransferListener	TokenNameIdentifier
checksumListener	TokenNameIdentifier
=	TokenNameEQUAL
checksums	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
aCHECKSUM_IDS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
checksumListener	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
removeTransferListener	TokenNameIdentifier
(	TokenNameLPAREN
checksumListener	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
disconnectWagon	TokenNameIdentifier
(	TokenNameLPAREN
wagon	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
releaseWagon	TokenNameIdentifier
(	TokenNameLPAREN
protocol	TokenNameIdentifier
,	TokenNameCOMMA
wagon	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
cleanupTemporaryFiles	TokenNameIdentifier
(	TokenNameLPAREN
List	TokenNameIdentifier
<	TokenNameLESS
File	TokenNameIdentifier
>	TokenNameGREATER
files	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
File	TokenNameIdentifier
file	TokenNameIdentifier
:	TokenNameCOLON
files	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
file	TokenNameIdentifier
.	TokenNameDOT
delete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
warn	TokenNameIdentifier
(	TokenNameLPAREN
"skip failed to delete temporary file : "	TokenNameStringLiteral
+	TokenNamePLUS
file	TokenNameIdentifier
.	TokenNameDOT
getAbsolutePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" , message "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
ChecksumObserver	TokenNameIdentifier
addChecksumObserver	TokenNameIdentifier
(	TokenNameLPAREN
Wagon	TokenNameIdentifier
wagon	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
algorithm	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
TransferFailedException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
ChecksumObserver	TokenNameIdentifier
checksumObserver	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ChecksumObserver	TokenNameIdentifier
(	TokenNameLPAREN
algorithm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
wagon	TokenNameIdentifier
.	TokenNameDOT
addTransferListener	TokenNameIdentifier
(	TokenNameLPAREN
checksumObserver	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
checksumObserver	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NoSuchAlgorithmException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
TransferFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Unable to add checksum for unsupported algorithm "	TokenNameStringLiteral
+	TokenNamePLUS
algorithm	TokenNameIdentifier
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
handleChecksumFailure	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
checksumPolicy	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
message	TokenNameIdentifier
,	TokenNameCOMMA
Throwable	TokenNameIdentifier
cause	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ChecksumFailedException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ArtifactRepositoryPolicy	TokenNameIdentifier
.	TokenNameDOT
CHECKSUM_POLICY_FAIL	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
checksumPolicy	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
ChecksumFailedException	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
,	TokenNameCOMMA
cause	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ArtifactRepositoryPolicy	TokenNameIdentifier
.	TokenNameDOT
CHECKSUM_POLICY_IGNORE	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
checksumPolicy	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
warn	TokenNameIdentifier
(	TokenNameLPAREN
"*** CHECKSUM FAILED - "	TokenNameStringLiteral
+	TokenNamePLUS
message	TokenNameIdentifier
+	TokenNamePLUS
" - IGNORING"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
verifyChecksum	TokenNameIdentifier
(	TokenNameLPAREN
ChecksumObserver	TokenNameIdentifier
checksumObserver	TokenNameIdentifier
,	TokenNameCOMMA
File	TokenNameIdentifier
destination	TokenNameIdentifier
,	TokenNameCOMMA
File	TokenNameIdentifier
tempDestination	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
remotePath	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
checksumFileExtension	TokenNameIdentifier
,	TokenNameCOMMA
Wagon	TokenNameIdentifier
wagon	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ResourceDoesNotExistException	TokenNameIdentifier
,	TokenNameCOMMA
TransferFailedException	TokenNameIdentifier
,	TokenNameCOMMA
AuthorizationException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
String	TokenNameIdentifier
actualChecksum	TokenNameIdentifier
=	TokenNameEQUAL
checksumObserver	TokenNameIdentifier
.	TokenNameDOT
getActualChecksum	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
File	TokenNameIdentifier
tempChecksumFile	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
tempDestination	TokenNameIdentifier
+	TokenNamePLUS
checksumFileExtension	TokenNameIdentifier
+	TokenNamePLUS
".tmp"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempChecksumFile	TokenNameIdentifier
.	TokenNameDOT
deleteOnExit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
wagon	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
remotePath	TokenNameIdentifier
+	TokenNamePLUS
checksumFileExtension	TokenNameIdentifier
,	TokenNameCOMMA
tempChecksumFile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
expectedChecksum	TokenNameIdentifier
=	TokenNameEQUAL
FileUtils	TokenNameIdentifier
.	TokenNameDOT
fileRead	TokenNameIdentifier
(	TokenNameLPAREN
tempChecksumFile	TokenNameIdentifier
,	TokenNameCOMMA
"UTF-8"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectedChecksum	TokenNameIdentifier
=	TokenNameEQUAL
expectedChecksum	TokenNameIdentifier
.	TokenNameDOT
trim	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
expectedChecksum	TokenNameIdentifier
.	TokenNameDOT
regionMatches	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
"MD"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
expectedChecksum	TokenNameIdentifier
.	TokenNameDOT
regionMatches	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
"SHA"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
lastSpacePos	TokenNameIdentifier
=	TokenNameEQUAL
expectedChecksum	TokenNameIdentifier
.	TokenNameDOT
lastIndexOf	TokenNameIdentifier
(	TokenNameLPAREN
' '	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expectedChecksum	TokenNameIdentifier
=	TokenNameEQUAL
expectedChecksum	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
lastSpacePos	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
spacePos	TokenNameIdentifier
=	TokenNameEQUAL
expectedChecksum	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
' '	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
spacePos	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
expectedChecksum	TokenNameIdentifier
=	TokenNameEQUAL
expectedChecksum	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
spacePos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
expectedChecksum	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
actualChecksum	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
File	TokenNameIdentifier
checksumFile	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
destination	TokenNameIdentifier
+	TokenNamePLUS
checksumFileExtension	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
checksumFile	TokenNameIdentifier
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
checksumFile	TokenNameIdentifier
.	TokenNameDOT
delete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
FileUtils	TokenNameIdentifier
.	TokenNameDOT
copyFile	TokenNameIdentifier
(	TokenNameLPAREN
tempChecksumFile	TokenNameIdentifier
,	TokenNameCOMMA
checksumFile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tempChecksumFile	TokenNameIdentifier
.	TokenNameDOT
delete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
ChecksumFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Checksum failed on download: local = '"	TokenNameStringLiteral
+	TokenNamePLUS
actualChecksum	TokenNameIdentifier
+	TokenNamePLUS
"'; remote = '"	TokenNameStringLiteral
+	TokenNamePLUS
expectedChecksum	TokenNameIdentifier
+	TokenNamePLUS
"'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
ChecksumFailedException	TokenNameIdentifier
(	TokenNameLPAREN
"Invalid checksum file"	TokenNameStringLiteral
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
disconnectWagon	TokenNameIdentifier
(	TokenNameLPAREN
Wagon	TokenNameIdentifier
wagon	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
wagon	TokenNameIdentifier
.	TokenNameDOT
disconnect	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ConnectionException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
"Problem disconnecting from wagon - ignoring: "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
releaseWagon	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
protocol	TokenNameIdentifier
,	TokenNameCOMMA
Wagon	TokenNameIdentifier
wagon	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
container	TokenNameIdentifier
.	TokenNameDOT
release	TokenNameIdentifier
(	TokenNameLPAREN
wagon	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ComponentLifecycleException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logger	TokenNameIdentifier
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
"Problem releasing wagon - ignoring: "	TokenNameStringLiteral
+	TokenNamePLUS
e	TokenNameIdentifier
.	TokenNameDOT
getMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
logger	TokenNameIdentifier
.	TokenNameDOT
debug	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
Wagon	TokenNameIdentifier
getWagon	TokenNameIdentifier
(	TokenNameLPAREN
Repository	TokenNameIdentifier
repository	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
UnsupportedProtocolException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
getWagon	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getProtocol	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
Wagon	TokenNameIdentifier
getWagon	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
protocol	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
UnsupportedProtocolException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
protocol	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
UnsupportedProtocolException	TokenNameIdentifier
(	TokenNameLPAREN
"Unspecified protocol"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
hint	TokenNameIdentifier
=	TokenNameEQUAL
protocol	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
.	TokenNameDOT
ENGLISH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Wagon	TokenNameIdentifier
wagon	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
wagon	TokenNameIdentifier
=	TokenNameEQUAL
container	TokenNameIdentifier
.	TokenNameDOT
lookup	TokenNameIdentifier
(	TokenNameLPAREN
Wagon	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
,	TokenNameCOMMA
hint	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ComponentLookupException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
UnsupportedProtocolException	TokenNameIdentifier
(	TokenNameLPAREN
"Cannot find wagon which supports the requested protocol: "	TokenNameStringLiteral
+	TokenNamePLUS
protocol	TokenNameIdentifier
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
wagon	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
