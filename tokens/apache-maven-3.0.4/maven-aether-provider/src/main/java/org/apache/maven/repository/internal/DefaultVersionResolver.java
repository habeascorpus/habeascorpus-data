package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
internal	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
FileInputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Collections	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
metadata	TokenNameIdentifier
.	TokenNameDOT
Snapshot	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
metadata	TokenNameIdentifier
.	TokenNameDOT
SnapshotVersion	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
metadata	TokenNameIdentifier
.	TokenNameDOT
Versioning	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
metadata	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
xpp3	TokenNameIdentifier
.	TokenNameDOT
MetadataXpp3Reader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
component	TokenNameIdentifier
.	TokenNameDOT
annotations	TokenNameIdentifier
.	TokenNameDOT
Component	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
component	TokenNameIdentifier
.	TokenNameDOT
annotations	TokenNameIdentifier
.	TokenNameDOT
Requirement	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
IOUtil	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
StringUtils	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
ConfigurationProperties	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
RepositoryCache	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
RequestTrace	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
RepositoryEvent	TokenNameIdentifier
.	TokenNameDOT
EventType	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
RepositorySystemSession	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
SyncContext	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
DefaultRequestTrace	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
listener	TokenNameIdentifier
.	TokenNameDOT
DefaultRepositoryEvent	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
metadata	TokenNameIdentifier
.	TokenNameDOT
DefaultMetadata	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
Artifact	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
MetadataResolver	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
RepositoryEventDispatcher	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
SyncContextFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
VersionResolver	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
impl	TokenNameIdentifier
.	TokenNameDOT
internal	TokenNameIdentifier
.	TokenNameDOT
CacheUtils	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
metadata	TokenNameIdentifier
.	TokenNameDOT
Metadata	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
ArtifactRepository	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
LocalRepository	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
RemoteRepository	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
WorkspaceReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
WorkspaceRepository	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
resolution	TokenNameIdentifier
.	TokenNameDOT
MetadataRequest	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
resolution	TokenNameIdentifier
.	TokenNameDOT
MetadataResult	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
resolution	TokenNameIdentifier
.	TokenNameDOT
VersionRequest	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
resolution	TokenNameIdentifier
.	TokenNameDOT
VersionResolutionException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
resolution	TokenNameIdentifier
.	TokenNameDOT
VersionResult	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
spi	TokenNameIdentifier
.	TokenNameDOT
locator	TokenNameIdentifier
.	TokenNameDOT
Service	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
spi	TokenNameIdentifier
.	TokenNameDOT
locator	TokenNameIdentifier
.	TokenNameDOT
ServiceLocator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
spi	TokenNameIdentifier
.	TokenNameDOT
log	TokenNameIdentifier
.	TokenNameDOT
Logger	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
sonatype	TokenNameIdentifier
.	TokenNameDOT
aether	TokenNameIdentifier
.	TokenNameDOT
spi	TokenNameIdentifier
.	TokenNameDOT
log	TokenNameIdentifier
.	TokenNameDOT
NullLogger	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Component	TokenNameIdentifier
(	TokenNameLPAREN
role	TokenNameIdentifier
=	TokenNameEQUAL
VersionResolver	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
public	TokenNamepublic
class	TokenNameclass
DefaultVersionResolver	TokenNameIdentifier
implements	TokenNameimplements
VersionResolver	TokenNameIdentifier
,	TokenNameCOMMA
Service	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
MAVEN_METADATA_XML	TokenNameIdentifier
=	TokenNameEQUAL
"maven-metadata.xml"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
RELEASE	TokenNameIdentifier
=	TokenNameEQUAL
"RELEASE"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
LATEST	TokenNameIdentifier
=	TokenNameEQUAL
"LATEST"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
SNAPSHOT	TokenNameIdentifier
=	TokenNameEQUAL
"SNAPSHOT"	TokenNameStringLiteral
;	TokenNameSEMICOLON
@	TokenNameAT
SuppressWarnings	TokenNameIdentifier
(	TokenNameLPAREN
"unused"	TokenNameStringLiteral
)	TokenNameRPAREN
@	TokenNameAT
Requirement	TokenNameIdentifier
private	TokenNameprivate
Logger	TokenNameIdentifier
logger	TokenNameIdentifier
=	TokenNameEQUAL
NullLogger	TokenNameIdentifier
.	TokenNameDOT
INSTANCE	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Requirement	TokenNameIdentifier
private	TokenNameprivate
MetadataResolver	TokenNameIdentifier
metadataResolver	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Requirement	TokenNameIdentifier
private	TokenNameprivate
SyncContextFactory	TokenNameIdentifier
syncContextFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Requirement	TokenNameIdentifier
private	TokenNameprivate
RepositoryEventDispatcher	TokenNameIdentifier
repositoryEventDispatcher	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
initService	TokenNameIdentifier
(	TokenNameLPAREN
ServiceLocator	TokenNameIdentifier
locator	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
setLogger	TokenNameIdentifier
(	TokenNameLPAREN
locator	TokenNameIdentifier
.	TokenNameDOT
getService	TokenNameIdentifier
(	TokenNameLPAREN
Logger	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setMetadataResolver	TokenNameIdentifier
(	TokenNameLPAREN
locator	TokenNameIdentifier
.	TokenNameDOT
getService	TokenNameIdentifier
(	TokenNameLPAREN
MetadataResolver	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setSyncContextFactory	TokenNameIdentifier
(	TokenNameLPAREN
locator	TokenNameIdentifier
.	TokenNameDOT
getService	TokenNameIdentifier
(	TokenNameLPAREN
SyncContextFactory	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setRepositoryEventDispatcher	TokenNameIdentifier
(	TokenNameLPAREN
locator	TokenNameIdentifier
.	TokenNameDOT
getService	TokenNameIdentifier
(	TokenNameLPAREN
RepositoryEventDispatcher	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DefaultVersionResolver	TokenNameIdentifier
setLogger	TokenNameIdentifier
(	TokenNameLPAREN
Logger	TokenNameIdentifier
logger	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
logger	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
logger	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
logger	TokenNameIdentifier
:	TokenNameCOLON
NullLogger	TokenNameIdentifier
.	TokenNameDOT
INSTANCE	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
this	TokenNamethis
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DefaultVersionResolver	TokenNameIdentifier
setMetadataResolver	TokenNameIdentifier
(	TokenNameLPAREN
MetadataResolver	TokenNameIdentifier
metadataResolver	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
metadataResolver	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"metadata resolver has not been specified"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
metadataResolver	TokenNameIdentifier
=	TokenNameEQUAL
metadataResolver	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
this	TokenNamethis
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DefaultVersionResolver	TokenNameIdentifier
setSyncContextFactory	TokenNameIdentifier
(	TokenNameLPAREN
SyncContextFactory	TokenNameIdentifier
syncContextFactory	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
syncContextFactory	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"sync context factory has not been specified"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
syncContextFactory	TokenNameIdentifier
=	TokenNameEQUAL
syncContextFactory	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
this	TokenNamethis
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
DefaultVersionResolver	TokenNameIdentifier
setRepositoryEventDispatcher	TokenNameIdentifier
(	TokenNameLPAREN
RepositoryEventDispatcher	TokenNameIdentifier
repositoryEventDispatcher	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
repositoryEventDispatcher	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"repository event dispatcher has not been specified"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
repositoryEventDispatcher	TokenNameIdentifier
=	TokenNameEQUAL
repositoryEventDispatcher	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
this	TokenNamethis
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
VersionResult	TokenNameIdentifier
resolveVersion	TokenNameIdentifier
(	TokenNameLPAREN
RepositorySystemSession	TokenNameIdentifier
session	TokenNameIdentifier
,	TokenNameCOMMA
VersionRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
VersionResolutionException	TokenNameIdentifier
{	TokenNameLBRACE
RequestTrace	TokenNameIdentifier
trace	TokenNameIdentifier
=	TokenNameEQUAL
DefaultRequestTrace	TokenNameIdentifier
.	TokenNameDOT
newChild	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getTrace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Artifact	TokenNameIdentifier
artifact	TokenNameIdentifier
=	TokenNameEQUAL
request	TokenNameIdentifier
.	TokenNameDOT
getArtifact	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
version	TokenNameIdentifier
=	TokenNameEQUAL
artifact	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
VersionResult	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
VersionResult	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Key	TokenNameIdentifier
cacheKey	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
RepositoryCache	TokenNameIdentifier
cache	TokenNameIdentifier
=	TokenNameEQUAL
session	TokenNameIdentifier
.	TokenNameDOT
getCache	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cache	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
!	TokenNameNOT
ConfigurationProperties	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
session	TokenNameIdentifier
,	TokenNameCOMMA
"aether.versionResolver.noCache"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
cacheKey	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Key	TokenNameIdentifier
(	TokenNameLPAREN
session	TokenNameIdentifier
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Object	TokenNameIdentifier
obj	TokenNameIdentifier
=	TokenNameEQUAL
cache	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
session	TokenNameIdentifier
,	TokenNameCOMMA
cacheKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
obj	TokenNameIdentifier
instanceof	TokenNameinstanceof
Record	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Record	TokenNameIdentifier
record	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Record	TokenNameIdentifier
)	TokenNameRPAREN
obj	TokenNameIdentifier
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
record	TokenNameIdentifier
.	TokenNameDOT
version	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
setRepository	TokenNameIdentifier
(	TokenNameLPAREN
CacheUtils	TokenNameIdentifier
.	TokenNameDOT
getRepository	TokenNameIdentifier
(	TokenNameLPAREN
session	TokenNameIdentifier
,	TokenNameCOMMA
request	TokenNameIdentifier
.	TokenNameDOT
getRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
record	TokenNameIdentifier
.	TokenNameDOT
repoClass	TokenNameIdentifier
,	TokenNameCOMMA
record	TokenNameIdentifier
.	TokenNameDOT
repoId	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
Metadata	TokenNameIdentifier
metadata	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
RELEASE	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
version	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
metadata	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DefaultMetadata	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
artifact	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
MAVEN_METADATA_XML	TokenNameIdentifier
,	TokenNameCOMMA
Metadata	TokenNameIdentifier
.	TokenNameDOT
Nature	TokenNameIdentifier
.	TokenNameDOT
RELEASE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
LATEST	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
version	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
metadata	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DefaultMetadata	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
artifact	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
MAVEN_METADATA_XML	TokenNameIdentifier
,	TokenNameCOMMA
Metadata	TokenNameIdentifier
.	TokenNameDOT
Nature	TokenNameIdentifier
.	TokenNameDOT
RELEASE_OR_SNAPSHOT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
version	TokenNameIdentifier
.	TokenNameDOT
endsWith	TokenNameIdentifier
(	TokenNameLPAREN
SNAPSHOT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
WorkspaceReader	TokenNameIdentifier
workspace	TokenNameIdentifier
=	TokenNameEQUAL
session	TokenNameIdentifier
.	TokenNameDOT
getWorkspaceReader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
workspace	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
workspace	TokenNameIdentifier
.	TokenNameDOT
findVersions	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
version	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
metadata	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
setRepository	TokenNameIdentifier
(	TokenNameLPAREN
workspace	TokenNameIdentifier
.	TokenNameDOT
getRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
metadata	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DefaultMetadata	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
artifact	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
version	TokenNameIdentifier
,	TokenNameCOMMA
MAVEN_METADATA_XML	TokenNameIdentifier
,	TokenNameCOMMA
Metadata	TokenNameIdentifier
.	TokenNameDOT
Nature	TokenNameIdentifier
.	TokenNameDOT
SNAPSHOT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
metadata	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
metadata	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
version	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
MetadataRequest	TokenNameIdentifier
>	TokenNameGREATER
metadataRequests	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
MetadataRequest	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
metadataRequests	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
MetadataRequest	TokenNameIdentifier
(	TokenNameLPAREN
metadata	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
request	TokenNameIdentifier
.	TokenNameDOT
getRequestContext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
RemoteRepository	TokenNameIdentifier
repository	TokenNameIdentifier
:	TokenNameCOLON
request	TokenNameIdentifier
.	TokenNameDOT
getRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
MetadataRequest	TokenNameIdentifier
metadataRequest	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MetadataRequest	TokenNameIdentifier
(	TokenNameLPAREN
metadata	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
,	TokenNameCOMMA
request	TokenNameIdentifier
.	TokenNameDOT
getRequestContext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
metadataRequest	TokenNameIdentifier
.	TokenNameDOT
setDeleteLocalCopyIfMissing	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
metadataRequest	TokenNameIdentifier
.	TokenNameDOT
setFavorLocalRepository	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
metadataRequest	TokenNameIdentifier
.	TokenNameDOT
setTrace	TokenNameIdentifier
(	TokenNameLPAREN
trace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
metadataRequests	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
metadataRequest	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
List	TokenNameIdentifier
<	TokenNameLESS
MetadataResult	TokenNameIdentifier
>	TokenNameGREATER
metadataResults	TokenNameIdentifier
=	TokenNameEQUAL
metadataResolver	TokenNameIdentifier
.	TokenNameDOT
resolveMetadata	TokenNameIdentifier
(	TokenNameLPAREN
session	TokenNameIdentifier
,	TokenNameCOMMA
metadataRequests	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
VersionInfo	TokenNameIdentifier
>	TokenNameGREATER
infos	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
VersionInfo	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
MetadataResult	TokenNameIdentifier
metadataResult	TokenNameIdentifier
:	TokenNameCOLON
metadataResults	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
addException	TokenNameIdentifier
(	TokenNameLPAREN
metadataResult	TokenNameIdentifier
.	TokenNameDOT
getException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
=	TokenNameEQUAL
metadataResult	TokenNameIdentifier
.	TokenNameDOT
getRequest	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
repository	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
repository	TokenNameIdentifier
=	TokenNameEQUAL
session	TokenNameIdentifier
.	TokenNameDOT
getLocalRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Versioning	TokenNameIdentifier
versioning	TokenNameIdentifier
=	TokenNameEQUAL
readVersions	TokenNameIdentifier
(	TokenNameLPAREN
session	TokenNameIdentifier
,	TokenNameCOMMA
trace	TokenNameIdentifier
,	TokenNameCOMMA
metadataResult	TokenNameIdentifier
.	TokenNameDOT
getMetadata	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
repository	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
merge	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
,	TokenNameCOMMA
infos	TokenNameIdentifier
,	TokenNameCOMMA
versioning	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
RELEASE	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
version	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
resolve	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
infos	TokenNameIdentifier
,	TokenNameCOMMA
RELEASE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
LATEST	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
version	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
resolve	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
infos	TokenNameIdentifier
,	TokenNameCOMMA
LATEST	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
resolve	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
infos	TokenNameIdentifier
,	TokenNameCOMMA
RELEASE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
result	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
endsWith	TokenNameIdentifier
(	TokenNameLPAREN
SNAPSHOT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
VersionRequest	TokenNameIdentifier
subRequest	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
VersionRequest	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
subRequest	TokenNameIdentifier
.	TokenNameDOT
setArtifact	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
.	TokenNameDOT
getRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
RemoteRepository	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
subRequest	TokenNameIdentifier
.	TokenNameDOT
setRepositories	TokenNameIdentifier
(	TokenNameLPAREN
Collections	TokenNameIdentifier
.	TokenNameDOT
singletonList	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
RemoteRepository	TokenNameIdentifier
)	TokenNameRPAREN
result	TokenNameIdentifier
.	TokenNameDOT
getRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
subRequest	TokenNameIdentifier
.	TokenNameDOT
setRepositories	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
VersionResult	TokenNameIdentifier
subResult	TokenNameIdentifier
=	TokenNameEQUAL
resolveVersion	TokenNameIdentifier
(	TokenNameLPAREN
session	TokenNameIdentifier
,	TokenNameCOMMA
subRequest	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
subResult	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
setRepository	TokenNameIdentifier
(	TokenNameLPAREN
subResult	TokenNameIdentifier
.	TokenNameDOT
getRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Exception	TokenNameIdentifier
exception	TokenNameIdentifier
:	TokenNameCOLON
subResult	TokenNameIdentifier
.	TokenNameDOT
getExceptions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
addException	TokenNameIdentifier
(	TokenNameLPAREN
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
SNAPSHOT	TokenNameIdentifier
+	TokenNamePLUS
getKey	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
.	TokenNameDOT
getClassifier	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
artifact	TokenNameIdentifier
.	TokenNameDOT
getExtension	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
merge	TokenNameIdentifier
(	TokenNameLPAREN
infos	TokenNameIdentifier
,	TokenNameCOMMA
SNAPSHOT	TokenNameIdentifier
,	TokenNameCOMMA
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
resolve	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
infos	TokenNameIdentifier
,	TokenNameCOMMA
key	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
version	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
StringUtils	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
VersionResolutionException	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
cacheKey	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
metadata	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
isSafelyCacheable	TokenNameIdentifier
(	TokenNameLPAREN
session	TokenNameIdentifier
,	TokenNameCOMMA
artifact	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
cache	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
session	TokenNameIdentifier
,	TokenNameCOMMA
cacheKey	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Record	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
getRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
resolve	TokenNameIdentifier
(	TokenNameLPAREN
VersionResult	TokenNameIdentifier
result	TokenNameIdentifier
,	TokenNameCOMMA
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
VersionInfo	TokenNameIdentifier
>	TokenNameGREATER
infos	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
VersionInfo	TokenNameIdentifier
info	TokenNameIdentifier
=	TokenNameEQUAL
infos	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
info	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
info	TokenNameIdentifier
.	TokenNameDOT
version	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
setRepository	TokenNameIdentifier
(	TokenNameLPAREN
info	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
info	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Versioning	TokenNameIdentifier
readVersions	TokenNameIdentifier
(	TokenNameLPAREN
RepositorySystemSession	TokenNameIdentifier
session	TokenNameIdentifier
,	TokenNameCOMMA
RequestTrace	TokenNameIdentifier
trace	TokenNameIdentifier
,	TokenNameCOMMA
Metadata	TokenNameIdentifier
metadata	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
,	TokenNameCOMMA
VersionResult	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Versioning	TokenNameIdentifier
versioning	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
FileInputStream	TokenNameIdentifier
fis	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
metadata	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
SyncContext	TokenNameIdentifier
syncContext	TokenNameIdentifier
=	TokenNameEQUAL
syncContextFactory	TokenNameIdentifier
.	TokenNameDOT
newInstance	TokenNameIdentifier
(	TokenNameLPAREN
session	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
syncContext	TokenNameIdentifier
.	TokenNameDOT
acquire	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
Collections	TokenNameIdentifier
.	TokenNameDOT
singleton	TokenNameIdentifier
(	TokenNameLPAREN
metadata	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
metadata	TokenNameIdentifier
.	TokenNameDOT
getFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
metadata	TokenNameIdentifier
.	TokenNameDOT
getFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fis	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FileInputStream	TokenNameIdentifier
(	TokenNameLPAREN
metadata	TokenNameIdentifier
.	TokenNameDOT
getFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
artifact	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
.	TokenNameDOT
metadata	TokenNameIdentifier
.	TokenNameDOT
Metadata	TokenNameIdentifier
m	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MetadataXpp3Reader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
fis	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
versioning	TokenNameIdentifier
=	TokenNameEQUAL
m	TokenNameIdentifier
.	TokenNameDOT
getVersioning	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
versioning	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
repository	TokenNameIdentifier
instanceof	TokenNameinstanceof
LocalRepository	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
versioning	TokenNameIdentifier
.	TokenNameDOT
getSnapshot	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
versioning	TokenNameIdentifier
.	TokenNameDOT
getSnapshot	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBuildNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
Versioning	TokenNameIdentifier
repaired	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Versioning	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repaired	TokenNameIdentifier
.	TokenNameDOT
setLastUpdated	TokenNameIdentifier
(	TokenNameLPAREN
versioning	TokenNameIdentifier
.	TokenNameDOT
getLastUpdated	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Snapshot	TokenNameIdentifier
snapshot	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Snapshot	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
snapshot	TokenNameIdentifier
.	TokenNameDOT
setLocalCopy	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repaired	TokenNameIdentifier
.	TokenNameDOT
setSnapshot	TokenNameIdentifier
(	TokenNameLPAREN
snapshot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
versioning	TokenNameIdentifier
=	TokenNameEQUAL
repaired	TokenNameIdentifier
;	TokenNameSEMICOLON
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"Snapshot information corrupted with remote repository data"	TokenNameStringLiteral
+	TokenNamePLUS
", please verify that no remote repository uses the id '"	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
syncContext	TokenNameIdentifier
.	TokenNameDOT
release	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
invalidMetadata	TokenNameIdentifier
(	TokenNameLPAREN
session	TokenNameIdentifier
,	TokenNameCOMMA
trace	TokenNameIdentifier
,	TokenNameCOMMA
metadata	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
addException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
IOUtil	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
fis	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
(	TokenNameLPAREN
versioning	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
versioning	TokenNameIdentifier
:	TokenNameCOLON
new	TokenNamenew
Versioning	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
invalidMetadata	TokenNameIdentifier
(	TokenNameLPAREN
RepositorySystemSession	TokenNameIdentifier
session	TokenNameIdentifier
,	TokenNameCOMMA
RequestTrace	TokenNameIdentifier
trace	TokenNameIdentifier
,	TokenNameCOMMA
Metadata	TokenNameIdentifier
metadata	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
,	TokenNameCOMMA
Exception	TokenNameIdentifier
exception	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
DefaultRepositoryEvent	TokenNameIdentifier
event	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DefaultRepositoryEvent	TokenNameIdentifier
(	TokenNameLPAREN
EventType	TokenNameIdentifier
.	TokenNameDOT
METADATA_INVALID	TokenNameIdentifier
,	TokenNameCOMMA
session	TokenNameIdentifier
,	TokenNameCOMMA
trace	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
event	TokenNameIdentifier
.	TokenNameDOT
setMetadata	TokenNameIdentifier
(	TokenNameLPAREN
metadata	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
event	TokenNameIdentifier
.	TokenNameDOT
setException	TokenNameIdentifier
(	TokenNameLPAREN
exception	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
event	TokenNameIdentifier
.	TokenNameDOT
setRepository	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repositoryEventDispatcher	TokenNameIdentifier
.	TokenNameDOT
dispatch	TokenNameIdentifier
(	TokenNameLPAREN
event	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
merge	TokenNameIdentifier
(	TokenNameLPAREN
Artifact	TokenNameIdentifier
artifact	TokenNameIdentifier
,	TokenNameCOMMA
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
VersionInfo	TokenNameIdentifier
>	TokenNameGREATER
infos	TokenNameIdentifier
,	TokenNameCOMMA
Versioning	TokenNameIdentifier
versioning	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
StringUtils	TokenNameIdentifier
.	TokenNameDOT
isNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
versioning	TokenNameIdentifier
.	TokenNameDOT
getRelease	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
merge	TokenNameIdentifier
(	TokenNameLPAREN
RELEASE	TokenNameIdentifier
,	TokenNameCOMMA
infos	TokenNameIdentifier
,	TokenNameCOMMA
versioning	TokenNameIdentifier
.	TokenNameDOT
getLastUpdated	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
versioning	TokenNameIdentifier
.	TokenNameDOT
getRelease	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
StringUtils	TokenNameIdentifier
.	TokenNameDOT
isNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
versioning	TokenNameIdentifier
.	TokenNameDOT
getLatest	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
merge	TokenNameIdentifier
(	TokenNameLPAREN
LATEST	TokenNameIdentifier
,	TokenNameCOMMA
infos	TokenNameIdentifier
,	TokenNameCOMMA
versioning	TokenNameIdentifier
.	TokenNameDOT
getLastUpdated	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
versioning	TokenNameIdentifier
.	TokenNameDOT
getLatest	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
SnapshotVersion	TokenNameIdentifier
sv	TokenNameIdentifier
:	TokenNameCOLON
versioning	TokenNameIdentifier
.	TokenNameDOT
getSnapshotVersions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
StringUtils	TokenNameIdentifier
.	TokenNameDOT
isNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
sv	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
getKey	TokenNameIdentifier
(	TokenNameLPAREN
sv	TokenNameIdentifier
.	TokenNameDOT
getClassifier	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
sv	TokenNameIdentifier
.	TokenNameDOT
getExtension	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
merge	TokenNameIdentifier
(	TokenNameLPAREN
SNAPSHOT	TokenNameIdentifier
+	TokenNamePLUS
key	TokenNameIdentifier
,	TokenNameCOMMA
infos	TokenNameIdentifier
,	TokenNameCOMMA
sv	TokenNameIdentifier
.	TokenNameDOT
getUpdated	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
sv	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
Snapshot	TokenNameIdentifier
snapshot	TokenNameIdentifier
=	TokenNameEQUAL
versioning	TokenNameIdentifier
.	TokenNameDOT
getSnapshot	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
snapshot	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
versioning	TokenNameIdentifier
.	TokenNameDOT
getSnapshotVersions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
version	TokenNameIdentifier
=	TokenNameEQUAL
artifact	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
snapshot	TokenNameIdentifier
.	TokenNameDOT
getTimestamp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
snapshot	TokenNameIdentifier
.	TokenNameDOT
getBuildNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
qualifier	TokenNameIdentifier
=	TokenNameEQUAL
snapshot	TokenNameIdentifier
.	TokenNameDOT
getTimestamp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
'-'	TokenNameCharacterLiteral
+	TokenNamePLUS
snapshot	TokenNameIdentifier
.	TokenNameDOT
getBuildNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
version	TokenNameIdentifier
=	TokenNameEQUAL
version	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
version	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
SNAPSHOT	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
qualifier	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
merge	TokenNameIdentifier
(	TokenNameLPAREN
SNAPSHOT	TokenNameIdentifier
,	TokenNameCOMMA
infos	TokenNameIdentifier
,	TokenNameCOMMA
versioning	TokenNameIdentifier
.	TokenNameDOT
getLastUpdated	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
version	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
merge	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
VersionInfo	TokenNameIdentifier
>	TokenNameGREATER
infos	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
timestamp	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
version	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
VersionInfo	TokenNameIdentifier
info	TokenNameIdentifier
=	TokenNameEQUAL
infos	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
info	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
info	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
VersionInfo	TokenNameIdentifier
(	TokenNameLPAREN
timestamp	TokenNameIdentifier
,	TokenNameCOMMA
version	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
infos	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
info	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
info	TokenNameIdentifier
.	TokenNameDOT
isOutdated	TokenNameIdentifier
(	TokenNameLPAREN
timestamp	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
info	TokenNameIdentifier
.	TokenNameDOT
version	TokenNameIdentifier
=	TokenNameEQUAL
version	TokenNameIdentifier
;	TokenNameSEMICOLON
info	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
=	TokenNameEQUAL
repository	TokenNameIdentifier
;	TokenNameSEMICOLON
info	TokenNameIdentifier
.	TokenNameDOT
timestamp	TokenNameIdentifier
=	TokenNameEQUAL
timestamp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
merge	TokenNameIdentifier
(	TokenNameLPAREN
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
VersionInfo	TokenNameIdentifier
>	TokenNameGREATER
infos	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
srcKey	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
dstKey	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
VersionInfo	TokenNameIdentifier
srcInfo	TokenNameIdentifier
=	TokenNameEQUAL
infos	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
srcKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
VersionInfo	TokenNameIdentifier
dstInfo	TokenNameIdentifier
=	TokenNameEQUAL
infos	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
dstKey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dstInfo	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
(	TokenNameLPAREN
srcInfo	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
dstInfo	TokenNameIdentifier
.	TokenNameDOT
isOutdated	TokenNameIdentifier
(	TokenNameLPAREN
srcInfo	TokenNameIdentifier
.	TokenNameDOT
timestamp	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
srcInfo	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
dstInfo	TokenNameIdentifier
.	TokenNameDOT
repository	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
infos	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
dstKey	TokenNameIdentifier
,	TokenNameCOMMA
srcInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getKey	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
classifier	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
extension	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
StringUtils	TokenNameIdentifier
.	TokenNameDOT
clean	TokenNameIdentifier
(	TokenNameLPAREN
classifier	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
':'	TokenNameCharacterLiteral
+	TokenNamePLUS
StringUtils	TokenNameIdentifier
.	TokenNameDOT
clean	TokenNameIdentifier
(	TokenNameLPAREN
extension	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
isSafelyCacheable	TokenNameIdentifier
(	TokenNameLPAREN
RepositorySystemSession	TokenNameIdentifier
session	TokenNameIdentifier
,	TokenNameCOMMA
Artifact	TokenNameIdentifier
artifact	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
WorkspaceReader	TokenNameIdentifier
workspace	TokenNameIdentifier
=	TokenNameEQUAL
session	TokenNameIdentifier
.	TokenNameDOT
getWorkspaceReader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
workspace	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Artifact	TokenNameIdentifier
pomArtifact	TokenNameIdentifier
=	TokenNameEQUAL
ArtifactDescriptorUtils	TokenNameIdentifier
.	TokenNameDOT
toPomArtifact	TokenNameIdentifier
(	TokenNameLPAREN
artifact	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
workspace	TokenNameIdentifier
.	TokenNameDOT
findArtifact	TokenNameIdentifier
(	TokenNameLPAREN
pomArtifact	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
VersionInfo	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
timestamp	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
version	TokenNameIdentifier
;	TokenNameSEMICOLON
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
VersionInfo	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
timestamp	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
version	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
timestamp	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
timestamp	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
timestamp	TokenNameIdentifier
:	TokenNameCOLON
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
version	TokenNameIdentifier
=	TokenNameEQUAL
version	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
repository	TokenNameIdentifier
=	TokenNameEQUAL
repository	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isOutdated	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
timestamp	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
timestamp	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
timestamp	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
timestamp	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
Key	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
groupId	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
artifactId	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
classifier	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
extension	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
version	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
context	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
File	TokenNameIdentifier
localRepo	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
WorkspaceRepository	TokenNameIdentifier
workspace	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
List	TokenNameIdentifier
<	TokenNameLESS
RemoteRepository	TokenNameIdentifier
>	TokenNameGREATER
repositories	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
hashCode	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Key	TokenNameIdentifier
(	TokenNameLPAREN
RepositorySystemSession	TokenNameIdentifier
session	TokenNameIdentifier
,	TokenNameCOMMA
VersionRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Artifact	TokenNameIdentifier
artifact	TokenNameIdentifier
=	TokenNameEQUAL
request	TokenNameIdentifier
.	TokenNameDOT
getArtifact	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
groupId	TokenNameIdentifier
=	TokenNameEQUAL
artifact	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
artifactId	TokenNameIdentifier
=	TokenNameEQUAL
artifact	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
classifier	TokenNameIdentifier
=	TokenNameEQUAL
artifact	TokenNameIdentifier
.	TokenNameDOT
getClassifier	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
extension	TokenNameIdentifier
=	TokenNameEQUAL
artifact	TokenNameIdentifier
.	TokenNameDOT
getExtension	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
version	TokenNameIdentifier
=	TokenNameEQUAL
artifact	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
localRepo	TokenNameIdentifier
=	TokenNameEQUAL
session	TokenNameIdentifier
.	TokenNameDOT
getLocalRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getBasedir	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
workspace	TokenNameIdentifier
=	TokenNameEQUAL
CacheUtils	TokenNameIdentifier
.	TokenNameDOT
getWorkspace	TokenNameIdentifier
(	TokenNameLPAREN
session	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repositories	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
RemoteRepository	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
repoMan	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
RemoteRepository	TokenNameIdentifier
repository	TokenNameIdentifier
:	TokenNameCOLON
request	TokenNameIdentifier
.	TokenNameDOT
getRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
isRepositoryManager	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
repoMan	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
repositories	TokenNameIdentifier
.	TokenNameDOT
addAll	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getMirroredRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
repositories	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
context	TokenNameIdentifier
=	TokenNameEQUAL
repoMan	TokenNameIdentifier
?	TokenNameQUESTION
request	TokenNameIdentifier
.	TokenNameDOT
getRequestContext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
int	TokenNameint
hash	TokenNameIdentifier
=	TokenNameEQUAL
17	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
hash	TokenNameIdentifier
*	TokenNameMULTIPLY
31	TokenNameIntegerLiteral
+	TokenNamePLUS
groupId	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
hash	TokenNameIdentifier
*	TokenNameMULTIPLY
31	TokenNameIntegerLiteral
+	TokenNamePLUS
artifactId	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
hash	TokenNameIdentifier
*	TokenNameMULTIPLY
31	TokenNameIntegerLiteral
+	TokenNamePLUS
classifier	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
hash	TokenNameIdentifier
*	TokenNameMULTIPLY
31	TokenNameIntegerLiteral
+	TokenNamePLUS
extension	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
hash	TokenNameIdentifier
*	TokenNameMULTIPLY
31	TokenNameIntegerLiteral
+	TokenNamePLUS
version	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
hash	TokenNameIdentifier
*	TokenNameMULTIPLY
31	TokenNameIntegerLiteral
+	TokenNamePLUS
localRepo	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
hash	TokenNameIdentifier
*	TokenNameMULTIPLY
31	TokenNameIntegerLiteral
+	TokenNamePLUS
CacheUtils	TokenNameIdentifier
.	TokenNameDOT
repositoriesHashCode	TokenNameIdentifier
(	TokenNameLPAREN
repositories	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
hashCode	TokenNameIdentifier
=	TokenNameEQUAL
hash	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
boolean	TokenNameboolean
equals	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
obj	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
obj	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
this	TokenNamethis
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
obj	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
!	TokenNameNOT
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
obj	TokenNameIdentifier
.	TokenNameDOT
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Key	TokenNameIdentifier
that	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Key	TokenNameIdentifier
)	TokenNameRPAREN
obj	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
artifactId	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
that	TokenNameIdentifier
.	TokenNameDOT
artifactId	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
groupId	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
that	TokenNameIdentifier
.	TokenNameDOT
groupId	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
classifier	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
that	TokenNameIdentifier
.	TokenNameDOT
classifier	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
extension	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
that	TokenNameIdentifier
.	TokenNameDOT
extension	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
version	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
that	TokenNameIdentifier
.	TokenNameDOT
version	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
context	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
that	TokenNameIdentifier
.	TokenNameDOT
context	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
localRepo	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
that	TokenNameIdentifier
.	TokenNameDOT
localRepo	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
CacheUtils	TokenNameIdentifier
.	TokenNameDOT
eq	TokenNameIdentifier
(	TokenNameLPAREN
workspace	TokenNameIdentifier
,	TokenNameCOMMA
that	TokenNameIdentifier
.	TokenNameDOT
workspace	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
CacheUtils	TokenNameIdentifier
.	TokenNameDOT
repositoriesEquals	TokenNameIdentifier
(	TokenNameLPAREN
repositories	TokenNameIdentifier
,	TokenNameCOMMA
that	TokenNameIdentifier
.	TokenNameDOT
repositories	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
int	TokenNameint
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
hashCode	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
Record	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
version	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
repoId	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Class	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
repoClass	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Record	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
version	TokenNameIdentifier
,	TokenNameCOMMA
ArtifactRepository	TokenNameIdentifier
repository	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
version	TokenNameIdentifier
=	TokenNameEQUAL
version	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
repository	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
repoId	TokenNameIdentifier
=	TokenNameEQUAL
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repoClass	TokenNameIdentifier
=	TokenNameEQUAL
repository	TokenNameIdentifier
.	TokenNameDOT
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
repoId	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
repoClass	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
