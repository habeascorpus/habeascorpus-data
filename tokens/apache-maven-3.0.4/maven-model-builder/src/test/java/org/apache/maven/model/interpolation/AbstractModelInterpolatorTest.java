package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
interpolation	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Build	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Dependency	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Model	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Organization	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Repository	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Resource	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Scm	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
building	TokenNameIdentifier
.	TokenNameDOT
DefaultModelBuildingRequest	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
building	TokenNameIdentifier
.	TokenNameDOT
ModelBuildingRequest	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
building	TokenNameIdentifier
.	TokenNameDOT
SimpleProblemCollector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
path	TokenNameIdentifier
.	TokenNameDOT
PathTranslator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
PlexusTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
text	TokenNameIdentifier
.	TokenNameDOT
SimpleDateFormat	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Calendar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Date	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Iterator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Properties	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
abstract	TokenNameabstract
class	TokenNameclass
AbstractModelInterpolatorTest	TokenNameIdentifier
extends	TokenNameextends
PlexusTestCase	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
Properties	TokenNameIdentifier
context	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
void	TokenNamevoid
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
context	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Properties	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
context	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"basedir"	TokenNameStringLiteral
,	TokenNameCOMMA
"myBasedir"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
context	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"project.baseUri"	TokenNameStringLiteral
,	TokenNameCOMMA
"myBaseUri"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
assertProblemFree	TokenNameIdentifier
(	TokenNameLPAREN
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Expected no errors"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
collector	TokenNameIdentifier
.	TokenNameDOT
getErrors	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Expected no warnings"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
collector	TokenNameIdentifier
.	TokenNameDOT
getWarnings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Expected no fatals"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
collector	TokenNameIdentifier
.	TokenNameDOT
getFatals	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
assertColllectorState	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
numFatals	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numErrors	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numWarnings	TokenNameIdentifier
,	TokenNameCOMMA
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Errors"	TokenNameStringLiteral
,	TokenNameCOMMA
numErrors	TokenNameIdentifier
,	TokenNameCOMMA
collector	TokenNameIdentifier
.	TokenNameDOT
getErrors	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Warnings"	TokenNameStringLiteral
,	TokenNameCOMMA
numWarnings	TokenNameIdentifier
,	TokenNameCOMMA
collector	TokenNameIdentifier
.	TokenNameDOT
getWarnings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Fatals"	TokenNameStringLiteral
,	TokenNameCOMMA
numFatals	TokenNameIdentifier
,	TokenNameCOMMA
collector	TokenNameIdentifier
.	TokenNameDOT
getFatals	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
ModelBuildingRequest	TokenNameIdentifier
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
Properties	TokenNameIdentifier
p	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ModelBuildingRequest	TokenNameIdentifier
config	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DefaultModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
config	TokenNameIdentifier
.	TokenNameDOT
setSystemProperties	TokenNameIdentifier
(	TokenNameLPAREN
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
config	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDefaultBuildTimestampFormatShouldParseTimeIn24HourFormat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Calendar	TokenNameIdentifier
cal	TokenNameIdentifier
=	TokenNameEQUAL
Calendar	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
HOUR	TokenNameIdentifier
,	TokenNameCOMMA
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
AM_PM	TokenNameIdentifier
,	TokenNameCOMMA
Calendar	TokenNameIdentifier
.	TokenNameDOT
AM	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
HOUR_OF_DAY	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MINUTE	TokenNameIdentifier
,	TokenNameCOMMA
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
YEAR	TokenNameIdentifier
,	TokenNameCOMMA
1976	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MONTH	TokenNameIdentifier
,	TokenNameCOMMA
Calendar	TokenNameIdentifier
.	TokenNameDOT
NOVEMBER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
DATE	TokenNameIdentifier
,	TokenNameCOMMA
11	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Date	TokenNameIdentifier
firstTestDate	TokenNameIdentifier
=	TokenNameEQUAL
cal	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
HOUR	TokenNameIdentifier
,	TokenNameCOMMA
11	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
AM_PM	TokenNameIdentifier
,	TokenNameCOMMA
Calendar	TokenNameIdentifier
.	TokenNameDOT
PM	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
HOUR_OF_DAY	TokenNameIdentifier
,	TokenNameCOMMA
23	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Date	TokenNameIdentifier
secondTestDate	TokenNameIdentifier
=	TokenNameEQUAL
cal	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SimpleDateFormat	TokenNameIdentifier
format	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleDateFormat	TokenNameIdentifier
(	TokenNameLPAREN
AbstractStringBasedModelInterpolator	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_BUILD_TIMESTAMP_FORMAT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"19761111-0016"	TokenNameStringLiteral
,	TokenNameCOMMA
format	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
firstTestDate	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"19761111-2316"	TokenNameStringLiteral
,	TokenNameCOMMA
format	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
secondTestDate	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testShouldNotThrowExceptionOnReferenceToNonExistentValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Scm	TokenNameIdentifier
scm	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Scm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
scm	TokenNameIdentifier
.	TokenNameDOT
setConnection	TokenNameIdentifier
(	TokenNameLPAREN
"${test}/somepath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setScm	TokenNameIdentifier
(	TokenNameLPAREN
scm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
"."	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertProblemFree	TokenNameIdentifier
(	TokenNameLPAREN
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"${test}/somepath"	TokenNameStringLiteral
,	TokenNameCOMMA
out	TokenNameIdentifier
.	TokenNameDOT
getScm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getConnection	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testShouldThrowExceptionOnRecursiveScmConnectionReference	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Scm	TokenNameIdentifier
scm	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Scm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
scm	TokenNameIdentifier
.	TokenNameDOT
setConnection	TokenNameIdentifier
(	TokenNameLPAREN
"${project.scm.connection}/somepath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setScm	TokenNameIdentifier
(	TokenNameLPAREN
scm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertColllectorState	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testShouldNotThrowExceptionOnReferenceToValueContainingNakedExpression	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Scm	TokenNameIdentifier
scm	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Scm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
scm	TokenNameIdentifier
.	TokenNameDOT
setConnection	TokenNameIdentifier
(	TokenNameLPAREN
"${test}/somepath"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setScm	TokenNameIdentifier
(	TokenNameLPAREN
scm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
addProperty	TokenNameIdentifier
(	TokenNameLPAREN
"test"	TokenNameStringLiteral
,	TokenNameCOMMA
"test"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
"."	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertProblemFree	TokenNameIdentifier
(	TokenNameLPAREN
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"test/somepath"	TokenNameStringLiteral
,	TokenNameCOMMA
out	TokenNameIdentifier
.	TokenNameDOT
getScm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getConnection	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testShouldInterpolateOrganizationNameCorrectly	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
orgName	TokenNameIdentifier
=	TokenNameEQUAL
"MyCo"	TokenNameStringLiteral
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
"${pom.organization.name} Tools"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Organization	TokenNameIdentifier
org	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Organization	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
org	TokenNameIdentifier
.	TokenNameDOT
setName	TokenNameIdentifier
(	TokenNameLPAREN
orgName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setOrganization	TokenNameIdentifier
(	TokenNameLPAREN
org	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
"."	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
orgName	TokenNameIdentifier
+	TokenNamePLUS
" Tools"	TokenNameStringLiteral
,	TokenNameCOMMA
out	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testShouldInterpolateDependencyVersionToSetSameAsProjectVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
"3.8.1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Dependency	TokenNameIdentifier
dep	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Dependency	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dep	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
"${version}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
addDependency	TokenNameIdentifier
(	TokenNameLPAREN
dep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
"."	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertColllectorState	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"3.8.1"	TokenNameStringLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
out	TokenNameIdentifier
.	TokenNameDOT
getDependencies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testShouldNotInterpolateDependencyVersionWithInvalidReference	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
"3.8.1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Dependency	TokenNameIdentifier
dep	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Dependency	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dep	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
"${something}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
addDependency	TokenNameIdentifier
(	TokenNameLPAREN
dep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
"."	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertProblemFree	TokenNameIdentifier
(	TokenNameLPAREN
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"${something}"	TokenNameStringLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
out	TokenNameIdentifier
.	TokenNameDOT
getDependencies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTwoReferences	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
"3.8.1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
"foo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Dependency	TokenNameIdentifier
dep	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Dependency	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dep	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
"${artifactId}-${version}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
addDependency	TokenNameIdentifier
(	TokenNameLPAREN
dep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
"."	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertColllectorState	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"foo-3.8.1"	TokenNameStringLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
out	TokenNameIdentifier
.	TokenNameDOT
getDependencies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBasedir	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
"3.8.1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
"foo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Repository	TokenNameIdentifier
repository	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Repository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repository	TokenNameIdentifier
.	TokenNameDOT
setUrl	TokenNameIdentifier
(	TokenNameLPAREN
"file://localhost/${basedir}/temp-repo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
addRepository	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertProblemFree	TokenNameIdentifier
(	TokenNameLPAREN
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"file://localhost/myBasedir/temp-repo"	TokenNameStringLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
out	TokenNameIdentifier
.	TokenNameDOT
getRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBaseUri	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setVersion	TokenNameIdentifier
(	TokenNameLPAREN
"3.8.1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
"foo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Repository	TokenNameIdentifier
repository	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Repository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
repository	TokenNameIdentifier
.	TokenNameDOT
setUrl	TokenNameIdentifier
(	TokenNameLPAREN
"${project.baseUri}/temp-repo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
addRepository	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertProblemFree	TokenNameIdentifier
(	TokenNameLPAREN
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"myBaseUri/temp-repo"	TokenNameStringLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
out	TokenNameIdentifier
.	TokenNameDOT
getRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testEnvars	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Properties	TokenNameIdentifier
context	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Properties	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
context	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"env.HOME"	TokenNameStringLiteral
,	TokenNameCOMMA
"/path/to/home"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Properties	TokenNameIdentifier
modelProperties	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Properties	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
modelProperties	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
"outputDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"${env.HOME}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setProperties	TokenNameIdentifier
(	TokenNameLPAREN
modelProperties	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
"."	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertProblemFree	TokenNameIdentifier
(	TokenNameLPAREN
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"/path/to/home"	TokenNameStringLiteral
,	TokenNameCOMMA
out	TokenNameIdentifier
.	TokenNameDOT
getProperties	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
"outputDirectory"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testEnvarExpressionThatEvaluatesToNullReturnsTheLiteralString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Properties	TokenNameIdentifier
modelProperties	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Properties	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
modelProperties	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
"outputDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"${env.DOES_NOT_EXIST}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setProperties	TokenNameIdentifier
(	TokenNameLPAREN
modelProperties	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
"."	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertProblemFree	TokenNameIdentifier
(	TokenNameLPAREN
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
out	TokenNameIdentifier
.	TokenNameDOT
getProperties	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
"outputDirectory"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
"${env.DOES_NOT_EXIST}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testExpressionThatEvaluatesToNullReturnsTheLiteralString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Properties	TokenNameIdentifier
modelProperties	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Properties	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
modelProperties	TokenNameIdentifier
.	TokenNameDOT
setProperty	TokenNameIdentifier
(	TokenNameLPAREN
"outputDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"${DOES_NOT_EXIST}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setProperties	TokenNameIdentifier
(	TokenNameLPAREN
modelProperties	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
"."	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertProblemFree	TokenNameIdentifier
(	TokenNameLPAREN
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
out	TokenNameIdentifier
.	TokenNameDOT
getProperties	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
"outputDirectory"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
"${DOES_NOT_EXIST}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testShouldInterpolateSourceDirectoryReferencedFromResourceDirectoryCorrectly	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Build	TokenNameIdentifier
build	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Build	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
build	TokenNameIdentifier
.	TokenNameDOT
setSourceDirectory	TokenNameIdentifier
(	TokenNameLPAREN
"correct"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Resource	TokenNameIdentifier
res	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Resource	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
res	TokenNameIdentifier
.	TokenNameDOT
setDirectory	TokenNameIdentifier
(	TokenNameLPAREN
"${project.build.sourceDirectory}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
build	TokenNameIdentifier
.	TokenNameDOT
addResource	TokenNameIdentifier
(	TokenNameLPAREN
res	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Resource	TokenNameIdentifier
res2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Resource	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
res2	TokenNameIdentifier
.	TokenNameDOT
setDirectory	TokenNameIdentifier
(	TokenNameLPAREN
"${pom.build.sourceDirectory}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
build	TokenNameIdentifier
.	TokenNameDOT
addResource	TokenNameIdentifier
(	TokenNameLPAREN
res2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Resource	TokenNameIdentifier
res3	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Resource	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
res3	TokenNameIdentifier
.	TokenNameDOT
setDirectory	TokenNameIdentifier
(	TokenNameLPAREN
"${build.sourceDirectory}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
build	TokenNameIdentifier
.	TokenNameDOT
addResource	TokenNameIdentifier
(	TokenNameLPAREN
res3	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
setBuild	TokenNameIdentifier
(	TokenNameLPAREN
build	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertColllectorState	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
Resource	TokenNameIdentifier
>	TokenNameGREATER
outResources	TokenNameIdentifier
=	TokenNameEQUAL
out	TokenNameIdentifier
.	TokenNameDOT
getBuild	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getResources	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Iterator	TokenNameIdentifier
<	TokenNameLESS
Resource	TokenNameIdentifier
>	TokenNameGREATER
resIt	TokenNameIdentifier
=	TokenNameEQUAL
outResources	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
build	TokenNameIdentifier
.	TokenNameDOT
getSourceDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
resIt	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
build	TokenNameIdentifier
.	TokenNameDOT
getSourceDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
resIt	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
build	TokenNameIdentifier
.	TokenNameDOT
getSourceDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
resIt	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testShouldInterpolateUnprefixedBasedirExpression	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
File	TokenNameIdentifier
basedir	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
"/test/path"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
model	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Model	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Dependency	TokenNameIdentifier
dep	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Dependency	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dep	TokenNameIdentifier
.	TokenNameDOT
setSystemPath	TokenNameIdentifier
(	TokenNameLPAREN
"${basedir}/artifact.jar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
model	TokenNameIdentifier
.	TokenNameDOT
addDependency	TokenNameIdentifier
(	TokenNameLPAREN
dep	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ModelInterpolator	TokenNameIdentifier
interpolator	TokenNameIdentifier
=	TokenNameEQUAL
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
SimpleProblemCollector	TokenNameIdentifier
collector	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleProblemCollector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Model	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
interpolator	TokenNameIdentifier
.	TokenNameDOT
interpolateModel	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
,	TokenNameCOMMA
basedir	TokenNameIdentifier
,	TokenNameCOMMA
createModelBuildingRequest	TokenNameIdentifier
(	TokenNameLPAREN
context	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertProblemFree	TokenNameIdentifier
(	TokenNameLPAREN
collector	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
Dependency	TokenNameIdentifier
>	TokenNameGREATER
rDeps	TokenNameIdentifier
=	TokenNameEQUAL
result	TokenNameIdentifier
.	TokenNameDOT
getDependencies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
rDeps	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
rDeps	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
basedir	TokenNameIdentifier
,	TokenNameCOMMA
"artifact.jar"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
getAbsolutePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
rDeps	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
getSystemPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAbsolutePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
abstract	TokenNameabstract
ModelInterpolator	TokenNameIdentifier
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
PathTranslator	TokenNameIdentifier
translator	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
abstract	TokenNameabstract
ModelInterpolator	TokenNameIdentifier
createInterpolator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
