package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
validation	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Arrays	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashSet	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Set	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Build	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
BuildBase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Dependency	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
DependencyManagement	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
DistributionManagement	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Exclusion	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
InputLocation	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
InputLocationTracker	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Model	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Parent	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Plugin	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
PluginExecution	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
PluginManagement	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Profile	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
ReportPlugin	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Reporting	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Repository	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Resource	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
building	TokenNameIdentifier
.	TokenNameDOT
ModelBuildingRequest	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
building	TokenNameIdentifier
.	TokenNameDOT
ModelProblem	TokenNameIdentifier
.	TokenNameDOT
Severity	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
maven	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
building	TokenNameIdentifier
.	TokenNameDOT
ModelProblemCollector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
component	TokenNameIdentifier
.	TokenNameDOT
annotations	TokenNameIdentifier
.	TokenNameDOT
Component	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
codehaus	TokenNameIdentifier
.	TokenNameDOT
plexus	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
StringUtils	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Component	TokenNameIdentifier
(	TokenNameLPAREN
role	TokenNameIdentifier
=	TokenNameEQUAL
ModelValidator	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
public	TokenNamepublic
class	TokenNameclass
DefaultModelValidator	TokenNameIdentifier
implements	TokenNameimplements
ModelValidator	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ID_REGEX	TokenNameIdentifier
=	TokenNameEQUAL
"[A-Za-z0-9_\-.]+"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ILLEGAL_FS_CHARS	TokenNameIdentifier
=	TokenNameEQUAL
"\/:"<>|?*"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ILLEGAL_VERSION_CHARS	TokenNameIdentifier
=	TokenNameEQUAL
ILLEGAL_FS_CHARS	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
ILLEGAL_REPO_ID_CHARS	TokenNameIdentifier
=	TokenNameEQUAL
ILLEGAL_FS_CHARS	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
validateRawModel	TokenNameIdentifier
(	TokenNameLPAREN
Model	TokenNameIdentifier
model	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Parent	TokenNameIdentifier
parent	TokenNameIdentifier
=	TokenNameEQUAL
model	TokenNameIdentifier
.	TokenNameDOT
getParent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
parent	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"parent.groupId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
FATAL	TokenNameIdentifier
,	TokenNameCOMMA
parent	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
parent	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"parent.artifactId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
FATAL	TokenNameIdentifier
,	TokenNameCOMMA
parent	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
parent	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"parent.version"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
FATAL	TokenNameIdentifier
,	TokenNameCOMMA
parent	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
parent	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
equals	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
equals	TokenNameIdentifier
(	TokenNameLPAREN
parent	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
FATAL	TokenNameIdentifier
,	TokenNameCOMMA
"parent.artifactId"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"must be changed"	TokenNameStringLiteral
+	TokenNamePLUS
", the parent element cannot have the same groupId:artifactId as the project."	TokenNameStringLiteral
,	TokenNameCOMMA
parent	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getValidationLevel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_2_0	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Severity	TokenNameIdentifier
errOn30	TokenNameIdentifier
=	TokenNameEQUAL
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_3_0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateEnum	TokenNameIdentifier
(	TokenNameLPAREN
"modelVersion"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getModelVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
model	TokenNameIdentifier
,	TokenNameCOMMA
"4.0.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateStringNoExpression	TokenNameIdentifier
(	TokenNameLPAREN
"groupId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
parent	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"groupId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
FATAL	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
validateStringNoExpression	TokenNameIdentifier
(	TokenNameLPAREN
"artifactId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"artifactId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
FATAL	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateStringNoExpression	TokenNameIdentifier
(	TokenNameLPAREN
"version"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
parent	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"version"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
FATAL	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
validateRawDependencies	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getDependencies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"dependencies.dependency"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
model	TokenNameIdentifier
.	TokenNameDOT
getDependencyManagement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
validateRawDependencies	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getDependencyManagement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDependencies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"dependencyManagement.dependencies.dependency"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
validateRepositories	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"repositories.repository"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateRepositories	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getPluginRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"pluginRepositories.pluginRepository"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Build	TokenNameIdentifier
build	TokenNameIdentifier
=	TokenNameEQUAL
model	TokenNameIdentifier
.	TokenNameDOT
getBuild	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
build	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
validateRawPlugins	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
build	TokenNameIdentifier
.	TokenNameDOT
getPlugins	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"build.plugins.plugin"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PluginManagement	TokenNameIdentifier
mngt	TokenNameIdentifier
=	TokenNameEQUAL
build	TokenNameIdentifier
.	TokenNameDOT
getPluginManagement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
mngt	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
validateRawPlugins	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
mngt	TokenNameIdentifier
.	TokenNameDOT
getPlugins	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"build.pluginManagement.plugins.plugin"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
Set	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
profileIds	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashSet	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Profile	TokenNameIdentifier
profile	TokenNameIdentifier
:	TokenNameCOLON
model	TokenNameIdentifier
.	TokenNameDOT
getProfiles	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
"profiles.profile["	TokenNameStringLiteral
+	TokenNamePLUS
profile	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"]"	TokenNameStringLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
profileIds	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
profile	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn30	TokenNameIdentifier
,	TokenNameCOMMA
"profiles.profile.id"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"must be unique but found duplicate profile with id "	TokenNameStringLiteral
+	TokenNamePLUS
profile	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
profile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
validateRawDependencies	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
profile	TokenNameIdentifier
.	TokenNameDOT
getDependencies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".dependencies.dependency"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
profile	TokenNameIdentifier
.	TokenNameDOT
getDependencyManagement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
validateRawDependencies	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
profile	TokenNameIdentifier
.	TokenNameDOT
getDependencyManagement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDependencies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".dependencyManagement.dependencies.dependency"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
validateRepositories	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
profile	TokenNameIdentifier
.	TokenNameDOT
getRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".repositories.repository"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateRepositories	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
profile	TokenNameIdentifier
.	TokenNameDOT
getPluginRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".pluginRepositories.pluginRepository"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BuildBase	TokenNameIdentifier
buildBase	TokenNameIdentifier
=	TokenNameEQUAL
profile	TokenNameIdentifier
.	TokenNameDOT
getBuild	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
buildBase	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
validateRawPlugins	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
buildBase	TokenNameIdentifier
.	TokenNameDOT
getPlugins	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".plugins.plugin"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PluginManagement	TokenNameIdentifier
mngt	TokenNameIdentifier
=	TokenNameEQUAL
buildBase	TokenNameIdentifier
.	TokenNameDOT
getPluginManagement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
mngt	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
validateRawPlugins	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
mngt	TokenNameIdentifier
.	TokenNameDOT
getPlugins	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".pluginManagement.plugins.plugin"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
validateRawPlugins	TokenNameIdentifier
(	TokenNameLPAREN
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
Plugin	TokenNameIdentifier
>	TokenNameGREATER
plugins	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
prefix	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Severity	TokenNameIdentifier
errOn31	TokenNameIdentifier
=	TokenNameEQUAL
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_3_1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Plugin	TokenNameIdentifier
>	TokenNameGREATER
index	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Plugin	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Plugin	TokenNameIdentifier
plugin	TokenNameIdentifier
:	TokenNameCOLON
plugins	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
plugin	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Plugin	TokenNameIdentifier
existing	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
existing	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn31	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".(groupId:artifactId)"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"must be unique but found duplicate declaration of plugin "	TokenNameStringLiteral
+	TokenNamePLUS
key	TokenNameIdentifier
,	TokenNameCOMMA
plugin	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
index	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
plugin	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Set	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
executionIds	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashSet	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
PluginExecution	TokenNameIdentifier
exec	TokenNameIdentifier
:	TokenNameCOLON
plugin	TokenNameIdentifier
.	TokenNameDOT
getExecutions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
executionIds	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
exec	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
"["	TokenNameStringLiteral
+	TokenNamePLUS
plugin	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"].executions.execution.id"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"must be unique but found duplicate execution with id "	TokenNameStringLiteral
+	TokenNamePLUS
exec	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
exec	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
validateEffectiveModel	TokenNameIdentifier
(	TokenNameLPAREN
Model	TokenNameIdentifier
model	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"modelVersion"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getModelVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateId	TokenNameIdentifier
(	TokenNameLPAREN
"groupId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateId	TokenNameIdentifier
(	TokenNameLPAREN
"artifactId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"packaging"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getPackaging	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
model	TokenNameIdentifier
.	TokenNameDOT
getModules	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
"pom"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
model	TokenNameIdentifier
.	TokenNameDOT
getPackaging	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
"packaging"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"with value '"	TokenNameStringLiteral
+	TokenNamePLUS
model	TokenNameIdentifier
.	TokenNameDOT
getPackaging	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"' is invalid. Aggregator projects "	TokenNameStringLiteral
+	TokenNamePLUS
"require 'pom' as packaging."	TokenNameStringLiteral
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
n	TokenNameIdentifier
=	TokenNameEQUAL
model	TokenNameIdentifier
.	TokenNameDOT
getModules	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
n	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
module	TokenNameIdentifier
=	TokenNameEQUAL
model	TokenNameIdentifier
.	TokenNameDOT
getModules	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
StringUtils	TokenNameIdentifier
.	TokenNameDOT
isBlank	TokenNameIdentifier
(	TokenNameLPAREN
module	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
,	TokenNameCOMMA
"modules.module["	TokenNameStringLiteral
+	TokenNamePLUS
i	TokenNameIdentifier
+	TokenNamePLUS
"]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"has been specified without a path to the project directory."	TokenNameStringLiteral
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getLocation	TokenNameIdentifier
(	TokenNameLPAREN
"modules"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"version"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Severity	TokenNameIdentifier
errOn30	TokenNameIdentifier
=	TokenNameEQUAL
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_3_0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateEffectiveDependencies	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getDependencies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DependencyManagement	TokenNameIdentifier
mgmt	TokenNameIdentifier
=	TokenNameEQUAL
model	TokenNameIdentifier
.	TokenNameDOT
getDependencyManagement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
mgmt	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
validateEffectiveDependencies	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
mgmt	TokenNameIdentifier
.	TokenNameDOT
getDependencies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getValidationLevel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_2_0	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Set	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
modules	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashSet	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
n	TokenNameIdentifier
=	TokenNameEQUAL
model	TokenNameIdentifier
.	TokenNameDOT
getModules	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
n	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
module	TokenNameIdentifier
=	TokenNameEQUAL
model	TokenNameIdentifier
.	TokenNameDOT
getModules	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
modules	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
module	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
"modules.module["	TokenNameStringLiteral
+	TokenNamePLUS
i	TokenNameIdentifier
+	TokenNamePLUS
"]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"specifies duplicate child module "	TokenNameStringLiteral
+	TokenNamePLUS
module	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getLocation	TokenNameIdentifier
(	TokenNameLPAREN
"modules"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
Severity	TokenNameIdentifier
errOn31	TokenNameIdentifier
=	TokenNameEQUAL
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_3_1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateBannedCharacters	TokenNameIdentifier
(	TokenNameLPAREN
"version"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn31	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
model	TokenNameIdentifier
,	TokenNameCOMMA
ILLEGAL_VERSION_CHARS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateProperSnapshotVersion	TokenNameIdentifier
(	TokenNameLPAREN
"version"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn31	TokenNameIdentifier
,	TokenNameCOMMA
model	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
model	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Build	TokenNameIdentifier
build	TokenNameIdentifier
=	TokenNameEQUAL
model	TokenNameIdentifier
.	TokenNameDOT
getBuild	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
build	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
Plugin	TokenNameIdentifier
p	TokenNameIdentifier
:	TokenNameCOLON
build	TokenNameIdentifier
.	TokenNameDOT
getPlugins	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"build.plugins.plugin.artifactId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
p	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"build.plugins.plugin.groupId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
p	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validatePluginVersion	TokenNameIdentifier
(	TokenNameLPAREN
"build.plugins.plugin.version"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
p	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
p	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
p	TokenNameIdentifier
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateBoolean	TokenNameIdentifier
(	TokenNameLPAREN
"build.plugins.plugin.inherited"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn30	TokenNameIdentifier
,	TokenNameCOMMA
p	TokenNameIdentifier
.	TokenNameDOT
getInherited	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
p	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateBoolean	TokenNameIdentifier
(	TokenNameLPAREN
"build.plugins.plugin.extensions"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn30	TokenNameIdentifier
,	TokenNameCOMMA
p	TokenNameIdentifier
.	TokenNameDOT
getExtensions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
p	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateEffectivePluginDependencies	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
p	TokenNameIdentifier
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
validateResources	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
build	TokenNameIdentifier
.	TokenNameDOT
getResources	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"build.resources.resource"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateResources	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
build	TokenNameIdentifier
.	TokenNameDOT
getTestResources	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"build.testResources.testResource"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Reporting	TokenNameIdentifier
reporting	TokenNameIdentifier
=	TokenNameEQUAL
model	TokenNameIdentifier
.	TokenNameDOT
getReporting	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
reporting	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
ReportPlugin	TokenNameIdentifier
p	TokenNameIdentifier
:	TokenNameCOLON
reporting	TokenNameIdentifier
.	TokenNameDOT
getPlugins	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"reporting.plugins.plugin.artifactId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
p	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"reporting.plugins.plugin.groupId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
p	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
"reporting.plugins.plugin.version"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn31	TokenNameIdentifier
,	TokenNameCOMMA
p	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
p	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
Repository	TokenNameIdentifier
repository	TokenNameIdentifier
:	TokenNameCOLON
model	TokenNameIdentifier
.	TokenNameDOT
getRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
validateRepository	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
,	TokenNameCOMMA
"repositories.repository"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
Repository	TokenNameIdentifier
repository	TokenNameIdentifier
:	TokenNameCOLON
model	TokenNameIdentifier
.	TokenNameDOT
getPluginRepositories	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
validateRepository	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
,	TokenNameCOMMA
"pluginRepositories.pluginRepository"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
DistributionManagement	TokenNameIdentifier
distMgmt	TokenNameIdentifier
=	TokenNameEQUAL
model	TokenNameIdentifier
.	TokenNameDOT
getDistributionManagement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
distMgmt	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
distMgmt	TokenNameIdentifier
.	TokenNameDOT
getStatus	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
"distributionManagement.status"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"must not be specified."	TokenNameStringLiteral
,	TokenNameCOMMA
distMgmt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
validateRepository	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
distMgmt	TokenNameIdentifier
.	TokenNameDOT
getRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"distributionManagement.repository"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateRepository	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
distMgmt	TokenNameIdentifier
.	TokenNameDOT
getSnapshotRepository	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"distributionManagement.snapshotRepository"	TokenNameStringLiteral
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
validateRawDependencies	TokenNameIdentifier
(	TokenNameLPAREN
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
Dependency	TokenNameIdentifier
>	TokenNameGREATER
dependencies	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
prefix	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Severity	TokenNameIdentifier
errOn30	TokenNameIdentifier
=	TokenNameEQUAL
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_3_0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Severity	TokenNameIdentifier
errOn31	TokenNameIdentifier
=	TokenNameEQUAL
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_3_1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Dependency	TokenNameIdentifier
>	TokenNameGREATER
index	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Dependency	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Dependency	TokenNameIdentifier
dependency	TokenNameIdentifier
:	TokenNameCOLON
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
dependency	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
"import"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
dependency	TokenNameIdentifier
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
"pom"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
dependency	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".type"	TokenNameStringLiteral
,	TokenNameCOMMA
key	TokenNameIdentifier
,	TokenNameCOMMA
"must be 'pom' to import the managed dependencies."	TokenNameStringLiteral
,	TokenNameCOMMA
dependency	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
StringUtils	TokenNameIdentifier
.	TokenNameDOT
isNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
dependency	TokenNameIdentifier
.	TokenNameDOT
getClassifier	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn30	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".classifier"	TokenNameStringLiteral
,	TokenNameCOMMA
key	TokenNameIdentifier
,	TokenNameCOMMA
"must be empty, imported POM cannot have a classifier."	TokenNameStringLiteral
,	TokenNameCOMMA
dependency	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
"system"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
dependency	TokenNameIdentifier
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
sysPath	TokenNameIdentifier
=	TokenNameEQUAL
dependency	TokenNameIdentifier
.	TokenNameDOT
getSystemPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
StringUtils	TokenNameIdentifier
.	TokenNameDOT
isNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
sysPath	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hasExpression	TokenNameIdentifier
(	TokenNameLPAREN
sysPath	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".systemPath"	TokenNameStringLiteral
,	TokenNameCOMMA
key	TokenNameIdentifier
,	TokenNameCOMMA
"should use a variable instead of a hard-coded path "	TokenNameStringLiteral
+	TokenNamePLUS
sysPath	TokenNameIdentifier
,	TokenNameCOMMA
dependency	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
sysPath	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"${basedir}"	TokenNameStringLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
sysPath	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"${project.basedir}"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".systemPath"	TokenNameStringLiteral
,	TokenNameCOMMA
key	TokenNameIdentifier
,	TokenNameCOMMA
"should not point at files within the project directory, "	TokenNameStringLiteral
+	TokenNamePLUS
sysPath	TokenNameIdentifier
+	TokenNamePLUS
" will be unresolvable by dependent projects"	TokenNameStringLiteral
,	TokenNameCOMMA
dependency	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
Dependency	TokenNameIdentifier
existing	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
existing	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
msg	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
equals	TokenNameIdentifier
(	TokenNameLPAREN
existing	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dependency	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
msg	TokenNameIdentifier
=	TokenNameEQUAL
"duplicate declaration of version "	TokenNameStringLiteral
+	TokenNamePLUS
StringUtils	TokenNameIdentifier
.	TokenNameDOT
defaultString	TokenNameIdentifier
(	TokenNameLPAREN
dependency	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"(?)"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
msg	TokenNameIdentifier
=	TokenNameEQUAL
"version "	TokenNameStringLiteral
+	TokenNamePLUS
StringUtils	TokenNameIdentifier
.	TokenNameDOT
defaultString	TokenNameIdentifier
(	TokenNameLPAREN
existing	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"(?)"	TokenNameStringLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
" vs "	TokenNameStringLiteral
+	TokenNamePLUS
StringUtils	TokenNameIdentifier
.	TokenNameDOT
defaultString	TokenNameIdentifier
(	TokenNameLPAREN
dependency	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"(?)"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn31	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".(groupId:artifactId:type:classifier)"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"must be unique: "	TokenNameStringLiteral
+	TokenNamePLUS
key	TokenNameIdentifier
+	TokenNamePLUS
" -> "	TokenNameStringLiteral
+	TokenNamePLUS
msg	TokenNameIdentifier
,	TokenNameCOMMA
dependency	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
index	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
dependency	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
validateEffectiveDependencies	TokenNameIdentifier
(	TokenNameLPAREN
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
Dependency	TokenNameIdentifier
>	TokenNameGREATER
dependencies	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
management	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Severity	TokenNameIdentifier
errOn30	TokenNameIdentifier
=	TokenNameEQUAL
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_3_0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
management	TokenNameIdentifier
?	TokenNameQUESTION
"dependencyManagement.dependencies.dependency."	TokenNameStringLiteral
:	TokenNameCOLON
"dependencies.dependency."	TokenNameStringLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Dependency	TokenNameIdentifier
d	TokenNameIdentifier
:	TokenNameCOLON
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
validateEffectiveDependency	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
,	TokenNameCOMMA
management	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getValidationLevel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_2_0	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
validateBoolean	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
"optional"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn30	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getOptional	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
management	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
validateVersion	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
"version"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn30	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateEnum	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
"scope"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
,	TokenNameCOMMA
"provided"	TokenNameStringLiteral
,	TokenNameCOMMA
"compile"	TokenNameStringLiteral
,	TokenNameCOMMA
"runtime"	TokenNameStringLiteral
,	TokenNameCOMMA
"test"	TokenNameStringLiteral
,	TokenNameCOMMA
"system"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
validateEffectivePluginDependencies	TokenNameIdentifier
(	TokenNameLPAREN
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Plugin	TokenNameIdentifier
plugin	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
List	TokenNameIdentifier
<	TokenNameLESS
Dependency	TokenNameIdentifier
>	TokenNameGREATER
dependencies	TokenNameIdentifier
=	TokenNameEQUAL
plugin	TokenNameIdentifier
.	TokenNameDOT
getDependencies	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
dependencies	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
"build.plugins.plugin["	TokenNameStringLiteral
+	TokenNamePLUS
plugin	TokenNameIdentifier
.	TokenNameDOT
getKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"].dependencies.dependency."	TokenNameStringLiteral
;	TokenNameSEMICOLON
Severity	TokenNameIdentifier
errOn30	TokenNameIdentifier
=	TokenNameEQUAL
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_3_0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Dependency	TokenNameIdentifier
d	TokenNameIdentifier
:	TokenNameCOLON
dependencies	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
validateEffectiveDependency	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
prefix	TokenNameIdentifier
,	TokenNameCOMMA
request	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateVersion	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
"version"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn30	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateEnum	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
"scope"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn30	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
,	TokenNameCOMMA
"compile"	TokenNameStringLiteral
,	TokenNameCOMMA
"runtime"	TokenNameStringLiteral
,	TokenNameCOMMA
"system"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
validateEffectiveDependency	TokenNameIdentifier
(	TokenNameLPAREN
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Dependency	TokenNameIdentifier
d	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
management	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
prefix	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
validateId	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
"artifactId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateId	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
"groupId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
management	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
"type"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
"version"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getVersion	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
"system"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
.	TokenNameDOT
getScope	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
systemPath	TokenNameIdentifier
=	TokenNameEQUAL
d	TokenNameIdentifier
.	TokenNameDOT
getSystemPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
StringUtils	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
systemPath	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
"systemPath"	TokenNameStringLiteral
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"is missing."	TokenNameStringLiteral
,	TokenNameCOMMA
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
File	TokenNameIdentifier
sysFile	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
systemPath	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
sysFile	TokenNameIdentifier
.	TokenNameDOT
isAbsolute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
"systemPath"	TokenNameStringLiteral
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"must specify an absolute path but is "	TokenNameStringLiteral
+	TokenNamePLUS
systemPath	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
sysFile	TokenNameIdentifier
.	TokenNameDOT
isFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
msg	TokenNameIdentifier
=	TokenNameEQUAL
"refers to a non-existing file "	TokenNameStringLiteral
+	TokenNamePLUS
sysFile	TokenNameIdentifier
.	TokenNameDOT
getAbsolutePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
systemPath	TokenNameIdentifier
=	TokenNameEQUAL
systemPath	TokenNameIdentifier
.	TokenNameDOT
replace	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
,	TokenNameCOMMA
File	TokenNameIdentifier
.	TokenNameDOT
separatorChar	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
replace	TokenNameIdentifier
(	TokenNameLPAREN
'\\'	TokenNameCharacterLiteral
,	TokenNameCOMMA
File	TokenNameIdentifier
.	TokenNameDOT
separatorChar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
jdkHome	TokenNameIdentifier
=	TokenNameEQUAL
request	TokenNameIdentifier
.	TokenNameDOT
getSystemProperties	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
"java.home"	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
File	TokenNameIdentifier
.	TokenNameDOT
separator	TokenNameIdentifier
+	TokenNamePLUS
".."	TokenNameStringLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
systemPath	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
jdkHome	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
msg	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
". Please verify that you run Maven using a JDK and not just a JRE."	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
"systemPath"	TokenNameStringLiteral
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
msg	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
StringUtils	TokenNameIdentifier
.	TokenNameDOT
isNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
.	TokenNameDOT
getSystemPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
"systemPath"	TokenNameStringLiteral
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"must be omitted."	TokenNameStringLiteral
+	TokenNamePLUS
" This field may only be specified for a dependency with system scope."	TokenNameStringLiteral
,	TokenNameCOMMA
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getValidationLevel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_2_0	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
Exclusion	TokenNameIdentifier
exclusion	TokenNameIdentifier
:	TokenNameCOLON
d	TokenNameIdentifier
.	TokenNameDOT
getExclusions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
validateId	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
"exclusions.exclusion.groupId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
,	TokenNameCOMMA
exclusion	TokenNameIdentifier
.	TokenNameDOT
getGroupId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
exclusion	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateId	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
"exclusions.exclusion.artifactId"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
,	TokenNameCOMMA
exclusion	TokenNameIdentifier
.	TokenNameDOT
getArtifactId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
d	TokenNameIdentifier
.	TokenNameDOT
getManagementKey	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
exclusion	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
validateRepositories	TokenNameIdentifier
(	TokenNameLPAREN
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
Repository	TokenNameIdentifier
>	TokenNameGREATER
repositories	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
prefix	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Repository	TokenNameIdentifier
>	TokenNameGREATER
index	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Repository	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Repository	TokenNameIdentifier
repository	TokenNameIdentifier
:	TokenNameCOLON
repositories	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
".id"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
"["	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"].url"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Repository	TokenNameIdentifier
existing	TokenNameIdentifier
=	TokenNameEQUAL
index	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
existing	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
Severity	TokenNameIdentifier
errOn30	TokenNameIdentifier
=	TokenNameEQUAL
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_3_0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn30	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".id"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"must be unique: "	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" -> "	TokenNameStringLiteral
+	TokenNamePLUS
existing	TokenNameIdentifier
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" vs "	TokenNameStringLiteral
+	TokenNamePLUS
repository	TokenNameIdentifier
.	TokenNameDOT
getUrl	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
index	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
validateRepository	TokenNameIdentifier
(	TokenNameLPAREN
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Repository	TokenNameIdentifier
repository	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
prefix	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
repository	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
Severity	TokenNameIdentifier
errOn31	TokenNameIdentifier
=	TokenNameEQUAL
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_3_1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateBannedCharacters	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
".id"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn31	TokenNameIdentifier
,	TokenNameCOMMA
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
repository	TokenNameIdentifier
,	TokenNameCOMMA
ILLEGAL_REPO_ID_CHARS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
"local"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn31	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".id"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"must not be 'local'"	TokenNameStringLiteral
+	TokenNamePLUS
", this identifier is reserved for the local repository"	TokenNameStringLiteral
+	TokenNamePLUS
", using it for other repositories will corrupt your repository metadata."	TokenNameStringLiteral
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
"legacy"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
repository	TokenNameIdentifier
.	TokenNameDOT
getLayout	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
,	TokenNameCOMMA
prefix	TokenNameIdentifier
+	TokenNamePLUS
".layout"	TokenNameStringLiteral
,	TokenNameCOMMA
repository	TokenNameIdentifier
.	TokenNameDOT
getId	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"uses the unsupported value 'legacy', artifact resolution might fail."	TokenNameStringLiteral
,	TokenNameCOMMA
repository	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
validateResources	TokenNameIdentifier
(	TokenNameLPAREN
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
Resource	TokenNameIdentifier
>	TokenNameGREATER
resources	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
prefix	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Severity	TokenNameIdentifier
errOn30	TokenNameIdentifier
=	TokenNameEQUAL
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_3_0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Resource	TokenNameIdentifier
resource	TokenNameIdentifier
:	TokenNameCOLON
resources	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
".directory"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
resource	TokenNameIdentifier
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
resource	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
validateBoolean	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
+	TokenNamePLUS
".filtering"	TokenNameStringLiteral
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn30	TokenNameIdentifier
,	TokenNameCOMMA
resource	TokenNameIdentifier
.	TokenNameDOT
getFiltering	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
resource	TokenNameIdentifier
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
resource	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
validateId	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
id	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
validateId	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
,	TokenNameCOMMA
id	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
validateId	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
severity	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
id	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
id	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
boolean	TokenNameboolean
match	TokenNameIdentifier
=	TokenNameEQUAL
id	TokenNameIdentifier
.	TokenNameDOT
matches	TokenNameIdentifier
(	TokenNameLPAREN
ID_REGEX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
match	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
"with value '"	TokenNameStringLiteral
+	TokenNamePLUS
id	TokenNameIdentifier
+	TokenNamePLUS
"' does not match a valid id pattern."	TokenNameStringLiteral
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
match	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
validateStringNoExpression	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
severity	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
string	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hasExpression	TokenNameIdentifier
(	TokenNameLPAREN
string	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"contains an expression but should be a constant."	TokenNameStringLiteral
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
hasExpression	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
value	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
value	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"${"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
severity	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
string	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
string	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
validateStringNotEmpty	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
severity	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
string	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
validateNotNull	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
string	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
string	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
"is missing."	TokenNameStringLiteral
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
validateNotNull	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
severity	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
object	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
object	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
"is missing."	TokenNameStringLiteral
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
validateBoolean	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
severity	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
string	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
string	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
string	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
"true"	TokenNameStringLiteral
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
string	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
"false"	TokenNameStringLiteral
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
string	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
"must be 'true' or 'false' but is '"	TokenNameStringLiteral
+	TokenNamePLUS
string	TokenNameIdentifier
+	TokenNamePLUS
"'."	TokenNameStringLiteral
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
validateEnum	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
severity	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
string	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
...	TokenNameELLIPSIS
validValues	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
string	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
string	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
values	TokenNameIdentifier
=	TokenNameEQUAL
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
validValues	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
values	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
string	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
"must be one of "	TokenNameStringLiteral
+	TokenNamePLUS
values	TokenNameIdentifier
+	TokenNamePLUS
" but is '"	TokenNameStringLiteral
+	TokenNamePLUS
string	TokenNameIdentifier
+	TokenNamePLUS
"'."	TokenNameStringLiteral
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
validateBannedCharacters	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
severity	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
string	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
banned	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
string	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
string	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
banned	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
string	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
"must not contain any of these characters "	TokenNameStringLiteral
+	TokenNamePLUS
banned	TokenNameIdentifier
+	TokenNamePLUS
" but found "	TokenNameStringLiteral
+	TokenNamePLUS
string	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
validateVersion	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
severity	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
string	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
string	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
string	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
hasExpression	TokenNameIdentifier
(	TokenNameLPAREN
string	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
"must be a valid version but is '"	TokenNameStringLiteral
+	TokenNamePLUS
string	TokenNameIdentifier
+	TokenNamePLUS
"'."	TokenNameStringLiteral
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
validateBannedCharacters	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
string	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
tracker	TokenNameIdentifier
,	TokenNameCOMMA
ILLEGAL_VERSION_CHARS	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
validateProperSnapshotVersion	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
severity	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
string	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
string	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
string	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
string	TokenNameIdentifier
.	TokenNameDOT
endsWith	TokenNameIdentifier
(	TokenNameLPAREN
"SNAPSHOT"	TokenNameStringLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
!	TokenNameNOT
string	TokenNameIdentifier
.	TokenNameDOT
endsWith	TokenNameIdentifier
(	TokenNameLPAREN
"-SNAPSHOT"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
severity	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
"uses an unsupported snapshot version format"	TokenNameStringLiteral
+	TokenNamePLUS
", should be '*-SNAPSHOT' instead."	TokenNameStringLiteral
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
validatePluginVersion	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
string	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
request	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
string	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Severity	TokenNameIdentifier
errOn30	TokenNameIdentifier
=	TokenNameEQUAL
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
,	TokenNameCOMMA
ModelBuildingRequest	TokenNameIdentifier
.	TokenNameDOT
VALIDATION_LEVEL_MAVEN_3_0	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
validateVersion	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn30	TokenNameIdentifier
,	TokenNameCOMMA
string	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
string	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
"RELEASE"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
string	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
"LATEST"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
string	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
problems	TokenNameIdentifier
,	TokenNameCOMMA
errOn30	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
"must be a valid version but is '"	TokenNameStringLiteral
+	TokenNamePLUS
string	TokenNameIdentifier
+	TokenNamePLUS
"'."	TokenNameStringLiteral
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
addViolation	TokenNameIdentifier
(	TokenNameLPAREN
ModelProblemCollector	TokenNameIdentifier
problems	TokenNameIdentifier
,	TokenNameCOMMA
Severity	TokenNameIdentifier
severity	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
sourceHint	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
message	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuilder	TokenNameIdentifier
buffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuilder	TokenNameIdentifier
(	TokenNameLPAREN
256	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'\''	TokenNameCharacterLiteral
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'\''	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sourceHint	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
" for "	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
sourceHint	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
buffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
' '	TokenNameCharacterLiteral
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
message	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
problems	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
severity	TokenNameIdentifier
,	TokenNameCOMMA
buffer	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
getLocation	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
tracker	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
InputLocation	TokenNameIdentifier
getLocation	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
InputLocationTracker	TokenNameIdentifier
tracker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
InputLocation	TokenNameIdentifier
location	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tracker	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
fieldName	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
idx	TokenNameIdentifier
=	TokenNameEQUAL
fieldName	TokenNameIdentifier
.	TokenNameDOT
lastIndexOf	TokenNameIdentifier
(	TokenNameLPAREN
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
idx	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fieldName	TokenNameIdentifier
=	TokenNameEQUAL
fieldName	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
idx	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
key	TokenNameIdentifier
=	TokenNameEQUAL
fieldName	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
.	TokenNameDOT
endsWith	TokenNameIdentifier
(	TokenNameLPAREN
"]"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
key	TokenNameIdentifier
=	TokenNameEQUAL
fieldName	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
.	TokenNameDOT
lastIndexOf	TokenNameIdentifier
(	TokenNameLPAREN
'['	TokenNameCharacterLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
key	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
valueOf	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NumberFormatException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
location	TokenNameIdentifier
=	TokenNameEQUAL
tracker	TokenNameIdentifier
.	TokenNameDOT
getLocation	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
location	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
location	TokenNameIdentifier
=	TokenNameEQUAL
tracker	TokenNameIdentifier
.	TokenNameDOT
getLocation	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
location	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
boolean	TokenNameboolean
equals	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s1	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
s2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
StringUtils	TokenNameIdentifier
.	TokenNameDOT
clean	TokenNameIdentifier
(	TokenNameLPAREN
s1	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
StringUtils	TokenNameIdentifier
.	TokenNameDOT
clean	TokenNameIdentifier
(	TokenNameLPAREN
s2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
Severity	TokenNameIdentifier
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
ModelBuildingRequest	TokenNameIdentifier
request	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
errorThreshold	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
request	TokenNameIdentifier
.	TokenNameDOT
getValidationLevel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
errorThreshold	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
Severity	TokenNameIdentifier
getSeverity	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
validationLevel	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
errorThreshold	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
validationLevel	TokenNameIdentifier
<	TokenNameLESS
errorThreshold	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
Severity	TokenNameIdentifier
.	TokenNameDOT
WARNING	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
Severity	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
