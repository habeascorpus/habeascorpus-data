package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
log4j	TokenNameIdentifier
.	TokenNameDOT
helpers	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
log4j	TokenNameIdentifier
.	TokenNameDOT
Layout	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
log4j	TokenNameIdentifier
.	TokenNameDOT
spi	TokenNameIdentifier
.	TokenNameDOT
LoggingEvent	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
log4j	TokenNameIdentifier
.	TokenNameDOT
spi	TokenNameIdentifier
.	TokenNameDOT
LocationInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
text	TokenNameIdentifier
.	TokenNameDOT
DateFormat	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
text	TokenNameIdentifier
.	TokenNameDOT
SimpleDateFormat	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Date	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Arrays	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
PatternParser	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
ESCAPE_CHAR	TokenNameIdentifier
=	TokenNameEQUAL
'%'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
LITERAL_STATE	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CONVERTER_STATE	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DOT_STATE	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MIN_STATE	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MAX_STATE	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
FULL_LOCATION_CONVERTER	TokenNameIdentifier
=	TokenNameEQUAL
1000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
METHOD_LOCATION_CONVERTER	TokenNameIdentifier
=	TokenNameEQUAL
1001	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CLASS_LOCATION_CONVERTER	TokenNameIdentifier
=	TokenNameEQUAL
1002	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
LINE_LOCATION_CONVERTER	TokenNameIdentifier
=	TokenNameEQUAL
1003	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
FILE_LOCATION_CONVERTER	TokenNameIdentifier
=	TokenNameEQUAL
1004	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
RELATIVE_TIME_CONVERTER	TokenNameIdentifier
=	TokenNameEQUAL
2000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
THREAD_CONVERTER	TokenNameIdentifier
=	TokenNameEQUAL
2001	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
LEVEL_CONVERTER	TokenNameIdentifier
=	TokenNameEQUAL
2002	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
NDC_CONVERTER	TokenNameIdentifier
=	TokenNameEQUAL
2003	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MESSAGE_CONVERTER	TokenNameIdentifier
=	TokenNameEQUAL
2004	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
state	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
StringBuffer	TokenNameIdentifier
currentLiteral	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
patternLength	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
i	TokenNameIdentifier
;	TokenNameSEMICOLON
PatternConverter	TokenNameIdentifier
head	TokenNameIdentifier
;	TokenNameSEMICOLON
PatternConverter	TokenNameIdentifier
tail	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
FormattingInfo	TokenNameIdentifier
formattingInfo	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FormattingInfo	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
String	TokenNameIdentifier
pattern	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
PatternParser	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
pattern	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
pattern	TokenNameIdentifier
=	TokenNameEQUAL
pattern	TokenNameIdentifier
;	TokenNameSEMICOLON
patternLength	TokenNameIdentifier
=	TokenNameEQUAL
pattern	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
=	TokenNameEQUAL
LITERAL_STATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addToList	TokenNameIdentifier
(	TokenNameLPAREN
PatternConverter	TokenNameIdentifier
pc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
head	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
head	TokenNameIdentifier
=	TokenNameEQUAL
tail	TokenNameIdentifier
=	TokenNameEQUAL
pc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tail	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
=	TokenNameEQUAL
pc	TokenNameIdentifier
;	TokenNameSEMICOLON
tail	TokenNameIdentifier
=	TokenNameEQUAL
pc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
String	TokenNameIdentifier
extractOption	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
patternLength	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
pattern	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
'{'	TokenNameCharacterLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
pattern	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
'}'	TokenNameCharacterLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
end	TokenNameIdentifier
>	TokenNameGREATER
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
r	TokenNameIdentifier
=	TokenNameEQUAL
pattern	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
end	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
r	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
extractPrecisionOption	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
opt	TokenNameIdentifier
=	TokenNameEQUAL
extractOption	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
r	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
opt	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
r	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
parseInt	TokenNameIdentifier
(	TokenNameLPAREN
opt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
r	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
LogLog	TokenNameIdentifier
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
"Precision option ("	TokenNameStringLiteral
+	TokenNamePLUS
opt	TokenNameIdentifier
+	TokenNamePLUS
") isn't a positive integer."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
r	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NumberFormatException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
LogLog	TokenNameIdentifier
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
"Category option ""	TokenNameStringLiteral
+	TokenNamePLUS
opt	TokenNameIdentifier
+	TokenNamePLUS
"" not a decimal integer."	TokenNameStringLiteral
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
r	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
PatternConverter	TokenNameIdentifier
parse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
c	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
patternLength	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
c	TokenNameIdentifier
=	TokenNameEQUAL
pattern	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
state	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
LITERAL_STATE	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
patternLength	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ESCAPE_CHAR	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
pattern	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ESCAPE_CHAR	TokenNameIdentifier
:	TokenNameCOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'n'	TokenNameCharacterLiteral
:	TokenNameCOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
Layout	TokenNameIdentifier
.	TokenNameDOT
LINE_SEP	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
addToList	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
LiteralPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
=	TokenNameEQUAL
CONVERTER_STATE	TokenNameIdentifier
;	TokenNameSEMICOLON
formattingInfo	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
CONVERTER_STATE	TokenNameIdentifier
:	TokenNameCOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
formattingInfo	TokenNameIdentifier
.	TokenNameDOT
leftAlign	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'.'	TokenNameCharacterLiteral
:	TokenNameCOLON
state	TokenNameIdentifier
=	TokenNameEQUAL
DOT_STATE	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
formattingInfo	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
=	TokenNameEQUAL
c	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
state	TokenNameIdentifier
=	TokenNameEQUAL
MIN_STATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
finalizeConverter	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
MIN_STATE	TokenNameIdentifier
:	TokenNameCOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
formattingInfo	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
=	TokenNameEQUAL
formattingInfo	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
c	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
state	TokenNameIdentifier
=	TokenNameEQUAL
DOT_STATE	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
{	TokenNameLBRACE
finalizeConverter	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
DOT_STATE	TokenNameIdentifier
:	TokenNameCOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
formattingInfo	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
=	TokenNameEQUAL
c	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
state	TokenNameIdentifier
=	TokenNameEQUAL
MAX_STATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
LogLog	TokenNameIdentifier
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
"Error occured in position "	TokenNameStringLiteral
+	TokenNamePLUS
i	TokenNameIdentifier
+	TokenNamePLUS
".  Was expecting digit, instead got char ""	TokenNameStringLiteral
+	TokenNamePLUS
c	TokenNameIdentifier
+	TokenNamePLUS
""."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
=	TokenNameEQUAL
LITERAL_STATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
MAX_STATE	TokenNameIdentifier
:	TokenNameCOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'0'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'9'	TokenNameCharacterLiteral
)	TokenNameRPAREN
formattingInfo	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
=	TokenNameEQUAL
formattingInfo	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
*	TokenNameMULTIPLY
10	TokenNameIntegerLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
c	TokenNameIdentifier
-	TokenNameMINUS
'0'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
{	TokenNameLBRACE
finalizeConverter	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
=	TokenNameEQUAL
LITERAL_STATE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
addToList	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
LiteralPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
head	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
finalizeConverter	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
PatternConverter	TokenNameIdentifier
pc	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'c'	TokenNameCharacterLiteral
:	TokenNameCOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CategoryPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
extractPrecisionOption	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'C'	TokenNameCharacterLiteral
:	TokenNameCOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ClassNamePatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
extractPrecisionOption	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'd'	TokenNameCharacterLiteral
:	TokenNameCOLON
String	TokenNameIdentifier
dateFormatStr	TokenNameIdentifier
=	TokenNameEQUAL
AbsoluteTimeDateFormat	TokenNameIdentifier
.	TokenNameDOT
ISO8601_DATE_FORMAT	TokenNameIdentifier
;	TokenNameSEMICOLON
DateFormat	TokenNameIdentifier
df	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
dOpt	TokenNameIdentifier
=	TokenNameEQUAL
extractOption	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dOpt	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
dateFormatStr	TokenNameIdentifier
=	TokenNameEQUAL
dOpt	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dateFormatStr	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
AbsoluteTimeDateFormat	TokenNameIdentifier
.	TokenNameDOT
ISO8601_DATE_FORMAT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
df	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ISO8601DateFormat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dateFormatStr	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
AbsoluteTimeDateFormat	TokenNameIdentifier
.	TokenNameDOT
ABS_TIME_DATE_FORMAT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
df	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
AbsoluteTimeDateFormat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dateFormatStr	TokenNameIdentifier
.	TokenNameDOT
equalsIgnoreCase	TokenNameIdentifier
(	TokenNameLPAREN
AbsoluteTimeDateFormat	TokenNameIdentifier
.	TokenNameDOT
DATE_AND_TIME_DATE_FORMAT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
df	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DateTimeDateFormat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
df	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleDateFormat	TokenNameIdentifier
(	TokenNameLPAREN
dateFormatStr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IllegalArgumentException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
LogLog	TokenNameIdentifier
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
"Could not instantiate SimpleDateFormat with "	TokenNameStringLiteral
+	TokenNamePLUS
dateFormatStr	TokenNameIdentifier
,	TokenNameCOMMA
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
df	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
DateFormat	TokenNameIdentifier
)	TokenNameRPAREN
OptionConverter	TokenNameIdentifier
.	TokenNameDOT
instantiateByClassName	TokenNameIdentifier
(	TokenNameLPAREN
"org.apache.log4j.helpers.ISO8601DateFormat"	TokenNameStringLiteral
,	TokenNameCOMMA
DateFormat	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DatePatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
df	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'F'	TokenNameCharacterLiteral
:	TokenNameCOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LocationPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
FILE_LOCATION_CONVERTER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'l'	TokenNameCharacterLiteral
:	TokenNameCOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LocationPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
FULL_LOCATION_CONVERTER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'L'	TokenNameCharacterLiteral
:	TokenNameCOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LocationPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
LINE_LOCATION_CONVERTER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'm'	TokenNameCharacterLiteral
:	TokenNameCOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BasicPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
MESSAGE_CONVERTER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'M'	TokenNameCharacterLiteral
:	TokenNameCOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LocationPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
METHOD_LOCATION_CONVERTER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'p'	TokenNameCharacterLiteral
:	TokenNameCOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BasicPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
LEVEL_CONVERTER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'r'	TokenNameCharacterLiteral
:	TokenNameCOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BasicPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
RELATIVE_TIME_CONVERTER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
't'	TokenNameCharacterLiteral
:	TokenNameCOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BasicPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
THREAD_CONVERTER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'x'	TokenNameCharacterLiteral
:	TokenNameCOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BasicPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
NDC_CONVERTER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'X'	TokenNameCharacterLiteral
:	TokenNameCOLON
String	TokenNameIdentifier
xOpt	TokenNameIdentifier
=	TokenNameEQUAL
extractOption	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MDCPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
xOpt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
LogLog	TokenNameIdentifier
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
"Unexpected char ["	TokenNameStringLiteral
+	TokenNamePLUS
c	TokenNameIdentifier
+	TokenNamePLUS
"] at position "	TokenNameStringLiteral
+	TokenNamePLUS
i	TokenNameIdentifier
+	TokenNamePLUS
" in conversion patterrn."	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LiteralPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
addConverter	TokenNameIdentifier
(	TokenNameLPAREN
pc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
addConverter	TokenNameIdentifier
(	TokenNameLPAREN
PatternConverter	TokenNameIdentifier
pc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
currentLiteral	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addToList	TokenNameIdentifier
(	TokenNameLPAREN
pc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
state	TokenNameIdentifier
=	TokenNameEQUAL
LITERAL_STATE	TokenNameIdentifier
;	TokenNameSEMICOLON
formattingInfo	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
BasicPatternConverter	TokenNameIdentifier
extends	TokenNameextends
PatternConverter	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
type	TokenNameIdentifier
;	TokenNameSEMICOLON
BasicPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
FormattingInfo	TokenNameIdentifier
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
convert	TokenNameIdentifier
(	TokenNameLPAREN
LoggingEvent	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
RELATIVE_TIME_CONVERTER	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
event	TokenNameIdentifier
.	TokenNameDOT
timeStamp	TokenNameIdentifier
-	TokenNameMINUS
LoggingEvent	TokenNameIdentifier
.	TokenNameDOT
getStartTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
THREAD_CONVERTER	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
event	TokenNameIdentifier
.	TokenNameDOT
getThreadName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LEVEL_CONVERTER	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
event	TokenNameIdentifier
.	TokenNameDOT
getLevel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
NDC_CONVERTER	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
event	TokenNameIdentifier
.	TokenNameDOT
getNDC	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
MESSAGE_CONVERTER	TokenNameIdentifier
:	TokenNameCOLON
{	TokenNameLBRACE
return	TokenNamereturn
event	TokenNameIdentifier
.	TokenNameDOT
getRenderedMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
LiteralPatternConverter	TokenNameIdentifier
extends	TokenNameextends
PatternConverter	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
String	TokenNameIdentifier
literal	TokenNameIdentifier
;	TokenNameSEMICOLON
LiteralPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
literal	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
format	TokenNameIdentifier
(	TokenNameLPAREN
StringBuffer	TokenNameIdentifier
sbuf	TokenNameIdentifier
,	TokenNameCOMMA
LoggingEvent	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sbuf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
literal	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
convert	TokenNameIdentifier
(	TokenNameLPAREN
LoggingEvent	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
literal	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
DatePatternConverter	TokenNameIdentifier
extends	TokenNameextends
PatternConverter	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
DateFormat	TokenNameIdentifier
df	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Date	TokenNameIdentifier
date	TokenNameIdentifier
;	TokenNameSEMICOLON
DatePatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
FormattingInfo	TokenNameIdentifier
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
DateFormat	TokenNameIdentifier
df	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
date	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Date	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
df	TokenNameIdentifier
=	TokenNameEQUAL
df	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
convert	TokenNameIdentifier
(	TokenNameLPAREN
LoggingEvent	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
date	TokenNameIdentifier
.	TokenNameDOT
setTime	TokenNameIdentifier
(	TokenNameLPAREN
event	TokenNameIdentifier
.	TokenNameDOT
timeStamp	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
converted	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
converted	TokenNameIdentifier
=	TokenNameEQUAL
df	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
date	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
LogLog	TokenNameIdentifier
.	TokenNameDOT
error	TokenNameIdentifier
(	TokenNameLPAREN
"Error occured while converting date."	TokenNameStringLiteral
,	TokenNameCOMMA
ex	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
converted	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
MDCPatternConverter	TokenNameIdentifier
extends	TokenNameextends
PatternConverter	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
String	TokenNameIdentifier
key	TokenNameIdentifier
;	TokenNameSEMICOLON
MDCPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
FormattingInfo	TokenNameIdentifier
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
key	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
convert	TokenNameIdentifier
(	TokenNameLPAREN
LoggingEvent	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
key	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
buf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
"{"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
properties	TokenNameIdentifier
=	TokenNameEQUAL
event	TokenNameIdentifier
.	TokenNameDOT
getProperties	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
properties	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
keys	TokenNameIdentifier
=	TokenNameEQUAL
properties	TokenNameIdentifier
.	TokenNameDOT
keySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Arrays	TokenNameIdentifier
.	TokenNameDOT
sort	TokenNameIdentifier
(	TokenNameLPAREN
keys	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
keys	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'{'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
keys	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
','	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
properties	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
keys	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'}'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'}'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
buf	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
Object	TokenNameIdentifier
val	TokenNameIdentifier
=	TokenNameEQUAL
event	TokenNameIdentifier
.	TokenNameDOT
getMDC	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
val	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
val	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
class	TokenNameclass
LocationPatternConverter	TokenNameIdentifier
extends	TokenNameextends
PatternConverter	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
type	TokenNameIdentifier
;	TokenNameSEMICOLON
LocationPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
FormattingInfo	TokenNameIdentifier
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
type	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
convert	TokenNameIdentifier
(	TokenNameLPAREN
LoggingEvent	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
LocationInfo	TokenNameIdentifier
locationInfo	TokenNameIdentifier
=	TokenNameEQUAL
event	TokenNameIdentifier
.	TokenNameDOT
getLocationInformation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
FULL_LOCATION_CONVERTER	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
locationInfo	TokenNameIdentifier
.	TokenNameDOT
fullInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
METHOD_LOCATION_CONVERTER	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
locationInfo	TokenNameIdentifier
.	TokenNameDOT
getMethodName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
LINE_LOCATION_CONVERTER	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
locationInfo	TokenNameIdentifier
.	TokenNameDOT
getLineNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
FILE_LOCATION_CONVERTER	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
locationInfo	TokenNameIdentifier
.	TokenNameDOT
getFileName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
abstract	TokenNameabstract
class	TokenNameclass
NamedPatternConverter	TokenNameIdentifier
extends	TokenNameextends
PatternConverter	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
precision	TokenNameIdentifier
;	TokenNameSEMICOLON
NamedPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
FormattingInfo	TokenNameIdentifier
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
precision	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
precision	TokenNameIdentifier
=	TokenNameEQUAL
precision	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
abstract	TokenNameabstract
String	TokenNameIdentifier
getFullyQualifiedName	TokenNameIdentifier
(	TokenNameLPAREN
LoggingEvent	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
String	TokenNameIdentifier
convert	TokenNameIdentifier
(	TokenNameLPAREN
LoggingEvent	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
n	TokenNameIdentifier
=	TokenNameEQUAL
getFullyQualifiedName	TokenNameIdentifier
(	TokenNameLPAREN
event	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
precision	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
n	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
n	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
precision	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
end	TokenNameIdentifier
=	TokenNameEQUAL
n	TokenNameIdentifier
.	TokenNameDOT
lastIndexOf	TokenNameIdentifier
(	TokenNameLPAREN
'.'	TokenNameCharacterLiteral
,	TokenNameCOMMA
end	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
end	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
n	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
n	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
end	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
class	TokenNameclass
ClassNamePatternConverter	TokenNameIdentifier
extends	TokenNameextends
NamedPatternConverter	TokenNameIdentifier
{	TokenNameLBRACE
ClassNamePatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
FormattingInfo	TokenNameIdentifier
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
precision	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
precision	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
getFullyQualifiedName	TokenNameIdentifier
(	TokenNameLPAREN
LoggingEvent	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
event	TokenNameIdentifier
.	TokenNameDOT
getLocationInformation	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getClassName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
class	TokenNameclass
CategoryPatternConverter	TokenNameIdentifier
extends	TokenNameextends
NamedPatternConverter	TokenNameIdentifier
{	TokenNameLBRACE
CategoryPatternConverter	TokenNameIdentifier
(	TokenNameLPAREN
FormattingInfo	TokenNameIdentifier
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
precision	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
formattingInfo	TokenNameIdentifier
,	TokenNameCOMMA
precision	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
getFullyQualifiedName	TokenNameIdentifier
(	TokenNameLPAREN
LoggingEvent	TokenNameIdentifier
event	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
event	TokenNameIdentifier
.	TokenNameDOT
getLoggerName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
