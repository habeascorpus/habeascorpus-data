package	TokenNamepackage
com	TokenNameIdentifier
.	TokenNameDOT
klopotek	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
.	TokenNameDOT
log	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
sql	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
log4j	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
log4j	TokenNameIdentifier
.	TokenNameDOT
helpers	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
log4j	TokenNameIdentifier
.	TokenNameDOT
spi	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
JDBCLogger	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
ArrayList	TokenNameIdentifier
logcols	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
column_list	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
num	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
isconfigured	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
ready	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
errormsg	TokenNameIdentifier
=	TokenNameEQUAL
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
Connection	TokenNameIdentifier
con	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
Statement	TokenNameIdentifier
stmt	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
ResultSet	TokenNameIdentifier
rs	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
table	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
sql	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
new_sql	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
new_sql_part1	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
new_sql_part2	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
msg_wildcard	TokenNameIdentifier
=	TokenNameEQUAL
"@MSG@"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
msg_wildcard_pos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
append	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
_msg	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ready	TokenNameIdentifier
)	TokenNameRPAREN
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ready	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"JDBCLogger::append(), Not ready to append !"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sql	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
appendSQL	TokenNameIdentifier
(	TokenNameLPAREN
_msg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
LogColumn	TokenNameIdentifier
logcol	TokenNameIdentifier
;	TokenNameSEMICOLON
rs	TokenNameIdentifier
.	TokenNameDOT
moveToInsertRow	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
num	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
logcol	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
LogColumn	TokenNameIdentifier
)	TokenNameRPAREN
logcols	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
MSG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
rs	TokenNameIdentifier
.	TokenNameDOT
updateObject	TokenNameIdentifier
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
,	TokenNameCOMMA
_msg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
ID	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
rs	TokenNameIdentifier
.	TokenNameDOT
updateObject	TokenNameIdentifier
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
,	TokenNameCOMMA
logcol	TokenNameIdentifier
.	TokenNameDOT
idhandler	TokenNameIdentifier
.	TokenNameDOT
getID	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
STATIC	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
rs	TokenNameIdentifier
.	TokenNameDOT
updateObject	TokenNameIdentifier
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
,	TokenNameCOMMA
logcol	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
TIMESTAMP	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
rs	TokenNameIdentifier
.	TokenNameDOT
updateObject	TokenNameIdentifier
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
Timestamp	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
new	TokenNamenew
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Date	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
rs	TokenNameIdentifier
.	TokenNameDOT
insertRow	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
appendSQL	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
_msg	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ready	TokenNameIdentifier
)	TokenNameRPAREN
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
ready	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"JDBCLogger::appendSQL(), Not ready to append !"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sql	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"JDBCLogger::appendSQL(), No SQL-Statement configured !"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
msg_wildcard_pos	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
new_sql	TokenNameIdentifier
=	TokenNameEQUAL
new_sql_part1	TokenNameIdentifier
+	TokenNamePLUS
_msg	TokenNameIdentifier
+	TokenNamePLUS
new_sql_part2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
new_sql	TokenNameIdentifier
=	TokenNameEQUAL
sql	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
stmt	TokenNameIdentifier
.	TokenNameDOT
executeUpdate	TokenNameIdentifier
(	TokenNameLPAREN
new_sql	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
errormsg	TokenNameIdentifier
=	TokenNameEQUAL
new_sql	TokenNameIdentifier
;	TokenNameSEMICOLON
throw	TokenNamethrow
e	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
configureTable	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
_table	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
isconfigured	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
stmt	TokenNameIdentifier
=	TokenNameEQUAL
con	TokenNameIdentifier
.	TokenNameDOT
createStatement	TokenNameIdentifier
(	TokenNameLPAREN
ResultSet	TokenNameIdentifier
.	TokenNameDOT
TYPE_SCROLL_INSENSITIVE	TokenNameIdentifier
,	TokenNameCOMMA
ResultSet	TokenNameIdentifier
.	TokenNameDOT
CONCUR_UPDATABLE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
rs	TokenNameIdentifier
=	TokenNameEQUAL
stmt	TokenNameIdentifier
.	TokenNameDOT
executeQuery	TokenNameIdentifier
(	TokenNameLPAREN
"SELECT * FROM "	TokenNameStringLiteral
+	TokenNamePLUS
_table	TokenNameIdentifier
+	TokenNamePLUS
" WHERE 1 = 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LogColumn	TokenNameIdentifier
logcol	TokenNameIdentifier
;	TokenNameSEMICOLON
ResultSetMetaData	TokenNameIdentifier
rsmd	TokenNameIdentifier
=	TokenNameEQUAL
rs	TokenNameIdentifier
.	TokenNameDOT
getMetaData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
num	TokenNameIdentifier
=	TokenNameEQUAL
rsmd	TokenNameIdentifier
.	TokenNameDOT
getColumnCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
logcols	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
(	TokenNameLPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
num	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
logcol	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LogColumn	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
logcol	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
=	TokenNameEQUAL
rsmd	TokenNameIdentifier
.	TokenNameDOT
getColumnName	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
toUpperCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
logcol	TokenNameIdentifier
.	TokenNameDOT
type	TokenNameIdentifier
=	TokenNameEQUAL
rsmd	TokenNameIdentifier
.	TokenNameDOT
getColumnTypeName	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
logcol	TokenNameIdentifier
.	TokenNameDOT
nullable	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
rsmd	TokenNameIdentifier
.	TokenNameDOT
isNullable	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
rsmd	TokenNameIdentifier
.	TokenNameDOT
columnNullable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
logcol	TokenNameIdentifier
.	TokenNameDOT
isWritable	TokenNameIdentifier
=	TokenNameEQUAL
rsmd	TokenNameIdentifier
.	TokenNameDOT
isWritable	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
logcol	TokenNameIdentifier
.	TokenNameDOT
isWritable	TokenNameIdentifier
)	TokenNameRPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
ignore	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
logcols	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
logcol	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
table	TokenNameIdentifier
=	TokenNameEQUAL
_table	TokenNameIdentifier
;	TokenNameSEMICOLON
isconfigured	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
configureSQL	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
_sql	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
isconfigured	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isConnected	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"JDBCLogger::configureSQL(), Not connected to database !"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
_sql	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
_sql	TokenNameIdentifier
.	TokenNameDOT
trim	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"JDBCLogger::configureSQL(), Invalid SQL-Statement !"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sql	TokenNameIdentifier
=	TokenNameEQUAL
_sql	TokenNameIdentifier
.	TokenNameDOT
trim	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stmt	TokenNameIdentifier
=	TokenNameEQUAL
con	TokenNameIdentifier
.	TokenNameDOT
createStatement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
msg_wildcard_pos	TokenNameIdentifier
=	TokenNameEQUAL
sql	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
msg_wildcard	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
msg_wildcard_pos	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
new_sql_part1	TokenNameIdentifier
=	TokenNameEQUAL
sql	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
msg_wildcard_pos	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
"'"	TokenNameStringLiteral
;	TokenNameSEMICOLON
new_sql_part2	TokenNameIdentifier
=	TokenNameEQUAL
"'"	TokenNameStringLiteral
+	TokenNamePLUS
sql	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
msg_wildcard_pos	TokenNameIdentifier
+	TokenNamePLUS
msg_wildcard	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
isconfigured	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setConnection	TokenNameIdentifier
(	TokenNameLPAREN
Connection	TokenNameIdentifier
_con	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
con	TokenNameIdentifier
=	TokenNameEQUAL
_con	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isConnected	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"JDBCLogger::setConnection(), Given connection isnt connected to database !"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setLogType	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
_name	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
_logtype	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
_value	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isconfigured	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"JDBCLogger::setLogType(), Not configured !"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sql	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
_name	TokenNameIdentifier
=	TokenNameEQUAL
_name	TokenNameIdentifier
.	TokenNameDOT
toUpperCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
_name	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
!	TokenNameNOT
(	TokenNameLPAREN
_name	TokenNameIdentifier
.	TokenNameDOT
trim	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"JDBCLogger::setLogType(), Missing argument name !"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
LogType	TokenNameIdentifier
.	TokenNameDOT
isLogType	TokenNameIdentifier
(	TokenNameLPAREN
_logtype	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"JDBCLogger::setLogType(), Invalid logtype '"	TokenNameStringLiteral
+	TokenNamePLUS
_logtype	TokenNameIdentifier
+	TokenNamePLUS
"' !"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
_logtype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
MSG	TokenNameIdentifier
&&	TokenNameAND_AND
_logtype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
EMPTY	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
_value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"JDBCLogger::setLogType(), Missing argument value !"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LogColumn	TokenNameIdentifier
logcol	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
num	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
logcol	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
LogColumn	TokenNameIdentifier
)	TokenNameRPAREN
logcols	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
_name	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
logcol	TokenNameIdentifier
.	TokenNameDOT
isWritable	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"JDBCLogger::setLogType(), Column "	TokenNameStringLiteral
+	TokenNamePLUS
_name	TokenNameIdentifier
+	TokenNamePLUS
" is not writeable !"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
_logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
MSG	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
=	TokenNameEQUAL
_logtype	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
_logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
ID	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
=	TokenNameEQUAL
_logtype	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
logcol	TokenNameIdentifier
.	TokenNameDOT
idhandler	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
JDBCIDHandler	TokenNameIdentifier
)	TokenNameRPAREN
_value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
logcol	TokenNameIdentifier
.	TokenNameDOT
idhandler	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
JDBCIDHandler	TokenNameIdentifier
)	TokenNameRPAREN
(	TokenNameLPAREN
Class	TokenNameIdentifier
.	TokenNameDOT
forName	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
String	TokenNameIdentifier
)	TokenNameRPAREN
_value	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
newInstance	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"JDBCLogger::setLogType(), Cannot cast value of class "	TokenNameStringLiteral
+	TokenNamePLUS
_value	TokenNameIdentifier
.	TokenNameDOT
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" to class JDBCIDHandler !"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
_logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
STATIC	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
=	TokenNameEQUAL
_logtype	TokenNameIdentifier
;	TokenNameSEMICOLON
logcol	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
=	TokenNameEQUAL
_value	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
_logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
TIMESTAMP	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
=	TokenNameEQUAL
_logtype	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
_logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
EMPTY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
=	TokenNameEQUAL
_logtype	TokenNameIdentifier
;	TokenNameSEMICOLON
logcol	TokenNameIdentifier
.	TokenNameDOT
ignore	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
ready	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ready	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isconfigured	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
errormsg	TokenNameIdentifier
=	TokenNameEQUAL
"Not ready to append ! Call configure() first !"	TokenNameStringLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sql	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
ready	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
msgcol_defined	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
LogColumn	TokenNameIdentifier
logcol	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
num	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
logcol	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
LogColumn	TokenNameIdentifier
)	TokenNameRPAREN
logcols	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
ignore	TokenNameIdentifier
||	TokenNameOR_OR
!	TokenNameNOT
logcol	TokenNameIdentifier
.	TokenNameDOT
isWritable	TokenNameIdentifier
)	TokenNameRPAREN
continue	TokenNamecontinue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
logcol	TokenNameIdentifier
.	TokenNameDOT
nullable	TokenNameIdentifier
&&	TokenNameAND_AND
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
EMPTY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
errormsg	TokenNameIdentifier
=	TokenNameEQUAL
"Not ready to append ! Column "	TokenNameStringLiteral
+	TokenNamePLUS
logcol	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
+	TokenNamePLUS
" is not nullable, and must be specified by setLogType() !"	TokenNameStringLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
ID	TokenNameIdentifier
&&	TokenNameAND_AND
logcol	TokenNameIdentifier
.	TokenNameDOT
idhandler	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
errormsg	TokenNameIdentifier
=	TokenNameEQUAL
"Not ready to append ! Column "	TokenNameStringLiteral
+	TokenNamePLUS
logcol	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
+	TokenNamePLUS
" is specified as an ID-column, and a JDBCIDHandler has to be set !"	TokenNameStringLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
STATIC	TokenNameIdentifier
&&	TokenNameAND_AND
logcol	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
errormsg	TokenNameIdentifier
=	TokenNameEQUAL
"Not ready to append ! Column "	TokenNameStringLiteral
+	TokenNamePLUS
logcol	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
+	TokenNamePLUS
" is specified as a static field, and a value has to be set !"	TokenNameStringLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
MSG	TokenNameIdentifier
)	TokenNameRPAREN
msgcol_defined	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
msgcol_defined	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
num	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
logcol	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
LogColumn	TokenNameIdentifier
)	TokenNameRPAREN
logcols	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
ignore	TokenNameIdentifier
||	TokenNameOR_OR
!	TokenNameNOT
logcol	TokenNameIdentifier
.	TokenNameDOT
isWritable	TokenNameIdentifier
)	TokenNameRPAREN
continue	TokenNamecontinue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
logcol	TokenNameIdentifier
.	TokenNameDOT
logtype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
EMPTY	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
column_list	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
column_list	TokenNameIdentifier
=	TokenNameEQUAL
logcol	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
column_list	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
", "	TokenNameStringLiteral
+	TokenNamePLUS
logcol	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
rs	TokenNameIdentifier
=	TokenNameEQUAL
stmt	TokenNameIdentifier
.	TokenNameDOT
executeQuery	TokenNameIdentifier
(	TokenNameLPAREN
"SELECT "	TokenNameStringLiteral
+	TokenNamePLUS
column_list	TokenNameIdentifier
+	TokenNamePLUS
" FROM "	TokenNameStringLiteral
+	TokenNamePLUS
table	TokenNameIdentifier
+	TokenNamePLUS
" WHERE 1 = 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
errormsg	TokenNameIdentifier
=	TokenNameEQUAL
"Not ready to append ! Cannot select columns '"	TokenNameStringLiteral
+	TokenNamePLUS
column_list	TokenNameIdentifier
+	TokenNamePLUS
"' of table "	TokenNameStringLiteral
+	TokenNamePLUS
table	TokenNameIdentifier
+	TokenNamePLUS
" !"	TokenNameStringLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ready	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isConfigured	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
isconfigured	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isConnected	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
con	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
!	TokenNameNOT
con	TokenNameIdentifier
.	TokenNameDOT
isClosed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getErrorMsg	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
r	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
errormsg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
errormsg	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
r	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
class	TokenNameclass
LogColumn	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
String	TokenNameIdentifier
type	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
boolean	TokenNameboolean
nullable	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isWritable	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
boolean	TokenNameboolean
ignore	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
logtype	TokenNameIdentifier
=	TokenNameEQUAL
LogType	TokenNameIdentifier
.	TokenNameDOT
EMPTY	TokenNameIdentifier
;	TokenNameSEMICOLON
Object	TokenNameIdentifier
value	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
JDBCIDHandler	TokenNameIdentifier
idhandler	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
class	TokenNameclass
LogType	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MSG	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
ID	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
STATIC	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
TIMESTAMP	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
EMPTY	TokenNameIdentifier
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isLogType	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
_lt	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
_lt	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
MSG	TokenNameIdentifier
||	TokenNameOR_OR
_lt	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
STATIC	TokenNameIdentifier
||	TokenNameOR_OR
_lt	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
ID	TokenNameIdentifier
||	TokenNameOR_OR
_lt	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TIMESTAMP	TokenNameIdentifier
||	TokenNameOR_OR
_lt	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
EMPTY	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
parseLogType	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
_lt	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
_lt	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"MSG"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
MSG	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
_lt	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"ID"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
ID	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
_lt	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"STATIC"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
STATIC	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
_lt	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"TIMESTAMP"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
TIMESTAMP	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
_lt	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"EMPTY"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
EMPTY	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
