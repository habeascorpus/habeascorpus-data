package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
suggest	TokenNameIdentifier
.	TokenNameDOT
jaspell	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
BufferedReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
FileInputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
InputStreamReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Vector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
zip	TokenNameIdentifier
.	TokenNameDOT
GZIPInputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
JaspellTernarySearchTrie	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
final	TokenNamefinal
class	TokenNameclass
TSTNode	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
final	TokenNamefinal
static	TokenNamestatic
int	TokenNameint
PARENT	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
LOKID	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
EQKID	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
HIKID	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
Object	TokenNameIdentifier
data	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
TSTNode	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
relatives	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TSTNode	TokenNameIdentifier
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
char	TokenNamechar
splitchar	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
TSTNode	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
splitchar	TokenNameIdentifier
,	TokenNameCOMMA
TSTNode	TokenNameIdentifier
parent	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
splitchar	TokenNameIdentifier
=	TokenNameEQUAL
splitchar	TokenNameIdentifier
;	TokenNameSEMICOLON
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
PARENT	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
parent	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
compareCharsAlphabetically	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
cCompare2	TokenNameIdentifier
,	TokenNameCOMMA
char	TokenNamechar
cRef	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
cCompare2	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
Character	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
cRef	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
defaultNumReturnValues	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
matchAlmostDiff	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
TSTNode	TokenNameIdentifier
rootNode	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
JaspellTernarySearchTrie	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
void	TokenNamevoid
setRoot	TokenNameIdentifier
(	TokenNameLPAREN
TSTNode	TokenNameIdentifier
newRoot	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
rootNode	TokenNameIdentifier
=	TokenNameEQUAL
newRoot	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
TSTNode	TokenNameIdentifier
getRoot	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
rootNode	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
JaspellTernarySearchTrie	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
file	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
file	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
JaspellTernarySearchTrie	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
file	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
compression	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BufferedReader	TokenNameIdentifier
in	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
compression	TokenNameIdentifier
)	TokenNameRPAREN
in	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BufferedReader	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
InputStreamReader	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
GZIPInputStream	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
FileInputStream	TokenNameIdentifier
(	TokenNameLPAREN
file	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
in	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BufferedReader	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
InputStreamReader	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
new	TokenNamenew
FileInputStream	TokenNameIdentifier
(	TokenNameLPAREN
file	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
word	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
pos	TokenNameIdentifier
;	TokenNameSEMICOLON
Float	TokenNameIdentifier
occur	TokenNameIdentifier
,	TokenNameCOMMA
one	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Float	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
numWords	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
word	TokenNameIdentifier
=	TokenNameEQUAL
in	TokenNameIdentifier
.	TokenNameDOT
readLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
numWords	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
pos	TokenNameIdentifier
=	TokenNameEQUAL
word	TokenNameIdentifier
.	TokenNameDOT
indexOf	TokenNameIdentifier
(	TokenNameLPAREN
" "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
occur	TokenNameIdentifier
=	TokenNameEQUAL
one	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
pos	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
occur	TokenNameIdentifier
=	TokenNameEQUAL
Float	TokenNameIdentifier
.	TokenNameDOT
parseFloat	TokenNameIdentifier
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
pos	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
trim	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
word	TokenNameIdentifier
=	TokenNameEQUAL
word	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
pos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
key	TokenNameIdentifier
=	TokenNameEQUAL
word	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
rootNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
rootNode	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TSTNode	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
TSTNode	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
rootNode	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
TSTNode	TokenNameIdentifier
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
rootNode	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
charIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
int	TokenNameint
charComp	TokenNameIdentifier
=	TokenNameEQUAL
compareCharsAlphabetically	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
charIndex	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
currentNode	TokenNameIdentifier
.	TokenNameDOT
splitchar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
charComp	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
charIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
charIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
key	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
node	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
charComp	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
Float	TokenNameIdentifier
occur2	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
node	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
occur2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
Float	TokenNameIdentifier
)	TokenNameRPAREN
(	TokenNameLPAREN
node	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
occur2	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
occur	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
occur2	TokenNameIdentifier
.	TokenNameDOT
floatValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
getOrCreateNode	TokenNameIdentifier
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
trim	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentNode	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
=	TokenNameEQUAL
occur	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
in	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
deleteNode	TokenNameIdentifier
(	TokenNameLPAREN
TSTNode	TokenNameIdentifier
nodeToDelete	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nodeToDelete	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
nodeToDelete	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
nodeToDelete	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
nodeToDelete	TokenNameIdentifier
=	TokenNameEQUAL
deleteNodeRecursion	TokenNameIdentifier
(	TokenNameLPAREN
nodeToDelete	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
TSTNode	TokenNameIdentifier
deleteNodeRecursion	TokenNameIdentifier
(	TokenNameLPAREN
TSTNode	TokenNameIdentifier
currentNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
currentNode	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
TSTNode	TokenNameIdentifier
currentParent	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
PARENT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
boolean	TokenNameboolean
lokidNull	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
boolean	TokenNameboolean
hikidNull	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
childType	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
currentParent	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
currentNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
childType	TokenNameIdentifier
=	TokenNameEQUAL
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
currentParent	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
currentNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
childType	TokenNameIdentifier
=	TokenNameEQUAL
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
currentParent	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
currentNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
childType	TokenNameIdentifier
=	TokenNameEQUAL
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
rootNode	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lokidNull	TokenNameIdentifier
&&	TokenNameAND_AND
hikidNull	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
currentParent	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
childType	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
return	TokenNamereturn
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
lokidNull	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
currentParent	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
childType	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
PARENT	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
hikidNull	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
currentParent	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
childType	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
PARENT	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
deltaHi	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
splitchar	TokenNameIdentifier
-	TokenNameMINUS
currentNode	TokenNameIdentifier
.	TokenNameDOT
splitchar	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
deltaLo	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
splitchar	TokenNameIdentifier
-	TokenNameMINUS
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
splitchar	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
movingKid	TokenNameIdentifier
;	TokenNameSEMICOLON
TSTNode	TokenNameIdentifier
targetNode	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
deltaHi	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
deltaLo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
random	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
0.5	TokenNameDoubleLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
deltaHi	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
deltaLo	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
deltaHi	TokenNameIdentifier
>	TokenNameGREATER
deltaLo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
movingKid	TokenNameIdentifier
=	TokenNameEQUAL
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
;	TokenNameSEMICOLON
targetNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
movingKid	TokenNameIdentifier
=	TokenNameEQUAL
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
;	TokenNameSEMICOLON
targetNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
targetNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
movingKid	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
targetNode	TokenNameIdentifier
=	TokenNameEQUAL
targetNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
movingKid	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
targetNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
movingKid	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
movingKid	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
currentParent	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
childType	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
targetNode	TokenNameIdentifier
;	TokenNameSEMICOLON
targetNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
PARENT	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
lokidNull	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
hikidNull	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
currentParent	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Object	TokenNameIdentifier
get	TokenNameIdentifier
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
TSTNode	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
getNode	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
node	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
node	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Float	TokenNameIdentifier
getAndIncrement	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
key2	TokenNameIdentifier
=	TokenNameEQUAL
key	TokenNameIdentifier
.	TokenNameDOT
trim	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TSTNode	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
getNode	TokenNameIdentifier
(	TokenNameLPAREN
key2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
node	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Float	TokenNameIdentifier
aux	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Float	TokenNameIdentifier
)	TokenNameRPAREN
(	TokenNameLPAREN
node	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
aux	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
aux	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Float	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
aux	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Float	TokenNameIdentifier
(	TokenNameLPAREN
aux	TokenNameIdentifier
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
put	TokenNameIdentifier
(	TokenNameLPAREN
key2	TokenNameIdentifier
,	TokenNameCOMMA
aux	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
aux	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
String	TokenNameIdentifier
getKey	TokenNameIdentifier
(	TokenNameLPAREN
TSTNode	TokenNameIdentifier
node	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuffer	TokenNameIdentifier
getKeyBuffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
getKeyBuffer	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
getKeyBuffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
+	TokenNamePLUS
node	TokenNameIdentifier
.	TokenNameDOT
splitchar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TSTNode	TokenNameIdentifier
currentNode	TokenNameIdentifier
;	TokenNameSEMICOLON
TSTNode	TokenNameIdentifier
lastNode	TokenNameIdentifier
;	TokenNameSEMICOLON
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
PARENT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
lastNode	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
lastNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
getKeyBuffer	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
+	TokenNamePLUS
currentNode	TokenNameIdentifier
.	TokenNameDOT
splitchar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
lastNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
;	TokenNameSEMICOLON
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
PARENT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
getKeyBuffer	TokenNameIdentifier
.	TokenNameDOT
reverse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
getKeyBuffer	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
TSTNode	TokenNameIdentifier
getNode	TokenNameIdentifier
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getNode	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
rootNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
TSTNode	TokenNameIdentifier
getNode	TokenNameIdentifier
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
TSTNode	TokenNameIdentifier
startNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
key	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
startNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
key	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
TSTNode	TokenNameIdentifier
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
startNode	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
charIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
charComp	TokenNameIdentifier
=	TokenNameEQUAL
compareCharsAlphabetically	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
charIndex	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
currentNode	TokenNameIdentifier
.	TokenNameDOT
splitchar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
charComp	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
charIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
charIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
key	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
currentNode	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
charComp	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
TSTNode	TokenNameIdentifier
getOrCreateNode	TokenNameIdentifier
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
NullPointerException	TokenNameIdentifier
,	TokenNameCOMMA
IllegalArgumentException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
key	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
NullPointerException	TokenNameIdentifier
(	TokenNameLPAREN
"attempt to get or create node with null key"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"attempt to get or create node with key of zero length"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
rootNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
rootNode	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TSTNode	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
TSTNode	TokenNameIdentifier
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
rootNode	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
charIndex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
charComp	TokenNameIdentifier
=	TokenNameEQUAL
compareCharsAlphabetically	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
charIndex	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
currentNode	TokenNameIdentifier
.	TokenNameDOT
splitchar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
charComp	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
charIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
charIndex	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
key	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
currentNode	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
TSTNode	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
charIndex	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
currentNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
charComp	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
TSTNode	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
charIndex	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
currentNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
TSTNode	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
charIndex	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
currentNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
currentNode	TokenNameIdentifier
=	TokenNameEQUAL
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
matchAlmost	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
matchAlmost	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
defaultNumReturnValues	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
matchAlmost	TokenNameIdentifier
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numReturnValues	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
matchAlmostRecursion	TokenNameIdentifier
(	TokenNameLPAREN
rootNode	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
matchAlmostDiff	TokenNameIdentifier
,	TokenNameCOMMA
key	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
numReturnValues	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
numReturnValues	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Vector	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
matchAlmostRecursion	TokenNameIdentifier
(	TokenNameLPAREN
TSTNode	TokenNameIdentifier
currentNode	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
charIndex	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
d	TokenNameIdentifier
,	TokenNameCOMMA
CharSequence	TokenNameIdentifier
matchAlmostKey	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
matchAlmostNumReturnValues	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
matchAlmostResult2	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
upTo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
matchAlmostNumReturnValues	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
matchAlmostResult2	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
matchAlmostNumReturnValues	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
d	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
charIndex	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
matchAlmostKey	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
matchAlmostResult2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
charComp	TokenNameIdentifier
=	TokenNameEQUAL
compareCharsAlphabetically	TokenNameIdentifier
(	TokenNameLPAREN
matchAlmostKey	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
charIndex	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
currentNode	TokenNameIdentifier
.	TokenNameDOT
splitchar	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
matchAlmostResult	TokenNameIdentifier
=	TokenNameEQUAL
matchAlmostResult2	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
d	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
charComp	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
matchAlmostResult	TokenNameIdentifier
=	TokenNameEQUAL
matchAlmostRecursion	TokenNameIdentifier
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
charIndex	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
,	TokenNameCOMMA
matchAlmostKey	TokenNameIdentifier
,	TokenNameCOMMA
matchAlmostNumReturnValues	TokenNameIdentifier
,	TokenNameCOMMA
matchAlmostResult	TokenNameIdentifier
,	TokenNameCOMMA
upTo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
nextD	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
charComp	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
d	TokenNameIdentifier
:	TokenNameCOLON
d	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
cond	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
upTo	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
nextD	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
:	TokenNameCOLON
(	TokenNameLPAREN
nextD	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
matchAlmostKey	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
charIndex	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&&	TokenNameAND_AND
cond	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
matchAlmostResult	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
getKey	TokenNameIdentifier
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
matchAlmostResult	TokenNameIdentifier
=	TokenNameEQUAL
matchAlmostRecursion	TokenNameIdentifier
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
charIndex	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
nextD	TokenNameIdentifier
,	TokenNameCOMMA
matchAlmostKey	TokenNameIdentifier
,	TokenNameCOMMA
matchAlmostNumReturnValues	TokenNameIdentifier
,	TokenNameCOMMA
matchAlmostResult	TokenNameIdentifier
,	TokenNameCOMMA
upTo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
d	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
charComp	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
matchAlmostResult	TokenNameIdentifier
=	TokenNameEQUAL
matchAlmostRecursion	TokenNameIdentifier
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
charIndex	TokenNameIdentifier
,	TokenNameCOMMA
d	TokenNameIdentifier
,	TokenNameCOMMA
matchAlmostKey	TokenNameIdentifier
,	TokenNameCOMMA
matchAlmostNumReturnValues	TokenNameIdentifier
,	TokenNameCOMMA
matchAlmostResult	TokenNameIdentifier
,	TokenNameCOMMA
upTo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
matchAlmostResult	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
matchPrefix	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
prefix	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
matchPrefix	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
,	TokenNameCOMMA
defaultNumReturnValues	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
matchPrefix	TokenNameIdentifier
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
prefix	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numReturnValues	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Vector	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
sortKeysResult	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Vector	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TSTNode	TokenNameIdentifier
startNode	TokenNameIdentifier
=	TokenNameEQUAL
getNode	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
startNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
sortKeysResult	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
startNode	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sortKeysResult	TokenNameIdentifier
.	TokenNameDOT
addElement	TokenNameIdentifier
(	TokenNameLPAREN
getKey	TokenNameIdentifier
(	TokenNameLPAREN
startNode	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
sortKeysRecursion	TokenNameIdentifier
(	TokenNameLPAREN
startNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
numReturnValues	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
numReturnValues	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
sortKeysResult	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
numDataNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
numDataNodes	TokenNameIdentifier
(	TokenNameLPAREN
rootNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
numDataNodes	TokenNameIdentifier
(	TokenNameLPAREN
TSTNode	TokenNameIdentifier
startingNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
recursiveNodeCalculator	TokenNameIdentifier
(	TokenNameLPAREN
startingNode	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
numNodes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
numNodes	TokenNameIdentifier
(	TokenNameLPAREN
rootNode	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
numNodes	TokenNameIdentifier
(	TokenNameLPAREN
TSTNode	TokenNameIdentifier
startingNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
recursiveNodeCalculator	TokenNameIdentifier
(	TokenNameLPAREN
startingNode	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
put	TokenNameIdentifier
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
getOrCreateNode	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
data	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
recursiveNodeCalculator	TokenNameIdentifier
(	TokenNameLPAREN
TSTNode	TokenNameIdentifier
currentNode	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
checkData	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numNodes2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
numNodes2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
numNodes	TokenNameIdentifier
=	TokenNameEQUAL
recursiveNodeCalculator	TokenNameIdentifier
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
checkData	TokenNameIdentifier
,	TokenNameCOMMA
numNodes2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
numNodes	TokenNameIdentifier
=	TokenNameEQUAL
recursiveNodeCalculator	TokenNameIdentifier
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
checkData	TokenNameIdentifier
,	TokenNameCOMMA
numNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
numNodes	TokenNameIdentifier
=	TokenNameEQUAL
recursiveNodeCalculator	TokenNameIdentifier
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
checkData	TokenNameIdentifier
,	TokenNameCOMMA
numNodes	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
checkData	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
numNodes	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
numNodes	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
numNodes	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
remove	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
deleteNode	TokenNameIdentifier
(	TokenNameLPAREN
getNode	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
.	TokenNameDOT
trim	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setMatchAlmostDiff	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
diff	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
diff	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
matchAlmostDiff	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
diff	TokenNameIdentifier
>	TokenNameGREATER
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
matchAlmostDiff	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
matchAlmostDiff	TokenNameIdentifier
=	TokenNameEQUAL
diff	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setNumReturnValues	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
num	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
defaultNumReturnValues	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
num	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
num	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
sortKeys	TokenNameIdentifier
(	TokenNameLPAREN
TSTNode	TokenNameIdentifier
startNode	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numReturnValues	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
sortKeysRecursion	TokenNameIdentifier
(	TokenNameLPAREN
startNode	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
numReturnValues	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
numReturnValues	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Vector	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
sortKeysRecursion	TokenNameIdentifier
(	TokenNameLPAREN
TSTNode	TokenNameIdentifier
currentNode	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
sortKeysNumReturnValues	TokenNameIdentifier
,	TokenNameCOMMA
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
sortKeysResult2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
sortKeysResult2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
List	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
sortKeysResult	TokenNameIdentifier
=	TokenNameEQUAL
sortKeysRecursion	TokenNameIdentifier
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
LOKID	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
sortKeysNumReturnValues	TokenNameIdentifier
,	TokenNameCOMMA
sortKeysResult2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sortKeysNumReturnValues	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
sortKeysResult	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
sortKeysNumReturnValues	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
sortKeysResult	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
data	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
sortKeysResult	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
getKey	TokenNameIdentifier
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sortKeysResult	TokenNameIdentifier
=	TokenNameEQUAL
sortKeysRecursion	TokenNameIdentifier
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
EQKID	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
sortKeysNumReturnValues	TokenNameIdentifier
,	TokenNameCOMMA
sortKeysResult	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
sortKeysRecursion	TokenNameIdentifier
(	TokenNameLPAREN
currentNode	TokenNameIdentifier
.	TokenNameDOT
relatives	TokenNameIdentifier
[	TokenNameLBRACKET
TSTNode	TokenNameIdentifier
.	TokenNameDOT
HIKID	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
sortKeysNumReturnValues	TokenNameIdentifier
,	TokenNameCOMMA
sortKeysResult	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
