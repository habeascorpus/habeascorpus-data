package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
grouping	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
IndexReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
abstract	TokenNameabstract
public	TokenNamepublic
class	TokenNameclass
AbstractFirstPassGroupingCollector	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>	TokenNameGREATER
extends	TokenNameextends
Collector	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
Sort	TokenNameIdentifier
groupSort	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
FieldComparator	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
[	TokenNameLBRACKET
]	TokenNameRBRACKET
comparators	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
reversed	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
topNGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
HashMap	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
CollectedSearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
groupMap	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
compIDXEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
TreeSet	TokenNameIdentifier
<	TokenNameLESS
CollectedSearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
orderedGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
docBase	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
spareSlot	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
AbstractFirstPassGroupingCollector	TokenNameIdentifier
(	TokenNameLPAREN
Sort	TokenNameIdentifier
groupSort	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
topNGroups	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
topNGroups	TokenNameIdentifier
<	TokenNameLESS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"topNGroups must be >= 1 (got "	TokenNameStringLiteral
+	TokenNamePLUS
topNGroups	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
groupSort	TokenNameIdentifier
=	TokenNameEQUAL
groupSort	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
topNGroups	TokenNameIdentifier
=	TokenNameEQUAL
topNGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
SortField	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sortFields	TokenNameIdentifier
=	TokenNameEQUAL
groupSort	TokenNameIdentifier
.	TokenNameDOT
getSort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
comparators	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FieldComparator	TokenNameIdentifier
[	TokenNameLBRACKET
sortFields	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
compIDXEnd	TokenNameIdentifier
=	TokenNameEQUAL
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
reversed	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
sortFields	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
sortFields	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
SortField	TokenNameIdentifier
sortField	TokenNameIdentifier
=	TokenNameEQUAL
sortFields	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
sortField	TokenNameIdentifier
.	TokenNameDOT
getComparator	TokenNameIdentifier
(	TokenNameLPAREN
topNGroups	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
reversed	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
sortField	TokenNameIdentifier
.	TokenNameDOT
getReverse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
spareSlot	TokenNameIdentifier
=	TokenNameEQUAL
topNGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
groupMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
CollectedSearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
(	TokenNameLPAREN
topNGroups	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Collection	TokenNameIdentifier
<	TokenNameLESS
SearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
getTopGroups	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
groupOffset	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
fillFields	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
groupOffset	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"groupOffset must be >= 0 (got "	TokenNameStringLiteral
+	TokenNamePLUS
groupOffset	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
groupMap	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<=	TokenNameLESS_EQUAL
groupOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
orderedGroups	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
buildSortedSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
Collection	TokenNameIdentifier
<	TokenNameLESS
SearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
SearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
upto	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
sortFieldCount	TokenNameIdentifier
=	TokenNameEQUAL
groupSort	TokenNameIdentifier
.	TokenNameDOT
getSort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
CollectedSearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>	TokenNameGREATER
group	TokenNameIdentifier
:	TokenNameCOLON
orderedGroups	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
upto	TokenNameIdentifier
++	TokenNamePLUS_PLUS
<	TokenNameLESS
groupOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
SearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>	TokenNameGREATER
searchGroup	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
searchGroup	TokenNameIdentifier
.	TokenNameDOT
groupValue	TokenNameIdentifier
=	TokenNameEQUAL
group	TokenNameIdentifier
.	TokenNameDOT
groupValue	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fillFields	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
searchGroup	TokenNameIdentifier
.	TokenNameDOT
sortValues	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
sortFieldCount	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
sortFieldIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sortFieldIDX	TokenNameIdentifier
<	TokenNameLESS
sortFieldCount	TokenNameIdentifier
;	TokenNameSEMICOLON
sortFieldIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
searchGroup	TokenNameIdentifier
.	TokenNameDOT
sortValues	TokenNameIdentifier
[	TokenNameLBRACKET
sortFieldIDX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
sortFieldIDX	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
value	TokenNameIdentifier
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
comparatorSlot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
result	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
searchGroup	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setScorer	TokenNameIdentifier
(	TokenNameLPAREN
Scorer	TokenNameIdentifier
scorer	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
FieldComparator	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
comparator	TokenNameIdentifier
:	TokenNameCOLON
comparators	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
comparator	TokenNameIdentifier
.	TokenNameDOT
setScorer	TokenNameIdentifier
(	TokenNameLPAREN
scorer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
collect	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
doc	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
orderedGroups	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
compIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
compIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
reversed	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
compareBottom	TokenNameIdentifier
(	TokenNameLPAREN
doc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compIDX	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
compIDXEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
final	TokenNamefinal
GROUP_VALUE_TYPE	TokenNameIdentifier
groupValue	TokenNameIdentifier
=	TokenNameEQUAL
getDocGroupValue	TokenNameIdentifier
(	TokenNameLPAREN
doc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
CollectedSearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>	TokenNameGREATER
group	TokenNameIdentifier
=	TokenNameEQUAL
groupMap	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
groupValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
group	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
groupMap	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
topNGroups	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
CollectedSearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>	TokenNameGREATER
sg	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CollectedSearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sg	TokenNameIdentifier
.	TokenNameDOT
groupValue	TokenNameIdentifier
=	TokenNameEQUAL
copyDocGroupValue	TokenNameIdentifier
(	TokenNameLPAREN
groupValue	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sg	TokenNameIdentifier
.	TokenNameDOT
comparatorSlot	TokenNameIdentifier
=	TokenNameEQUAL
groupMap	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sg	TokenNameIdentifier
.	TokenNameDOT
topDoc	TokenNameIdentifier
=	TokenNameEQUAL
docBase	TokenNameIdentifier
+	TokenNamePLUS
doc	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
FieldComparator	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
fc	TokenNameIdentifier
:	TokenNameCOLON
comparators	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fc	TokenNameIdentifier
.	TokenNameDOT
copy	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
comparatorSlot	TokenNameIdentifier
,	TokenNameCOMMA
doc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
groupMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
sg	TokenNameIdentifier
.	TokenNameDOT
groupValue	TokenNameIdentifier
,	TokenNameCOMMA
sg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
groupMap	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
topNGroups	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
buildSortedSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
CollectedSearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>	TokenNameGREATER
bottomGroup	TokenNameIdentifier
=	TokenNameEQUAL
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
last	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
remove	TokenNameIdentifier
(	TokenNameLPAREN
bottomGroup	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
topNGroups	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
groupMap	TokenNameIdentifier
.	TokenNameDOT
remove	TokenNameIdentifier
(	TokenNameLPAREN
bottomGroup	TokenNameIdentifier
.	TokenNameDOT
groupValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bottomGroup	TokenNameIdentifier
.	TokenNameDOT
groupValue	TokenNameIdentifier
=	TokenNameEQUAL
copyDocGroupValue	TokenNameIdentifier
(	TokenNameLPAREN
groupValue	TokenNameIdentifier
,	TokenNameCOMMA
bottomGroup	TokenNameIdentifier
.	TokenNameDOT
groupValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bottomGroup	TokenNameIdentifier
.	TokenNameDOT
topDoc	TokenNameIdentifier
=	TokenNameEQUAL
docBase	TokenNameIdentifier
+	TokenNamePLUS
doc	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
FieldComparator	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
fc	TokenNameIdentifier
:	TokenNameCOLON
comparators	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fc	TokenNameIdentifier
.	TokenNameDOT
copy	TokenNameIdentifier
(	TokenNameLPAREN
bottomGroup	TokenNameIdentifier
.	TokenNameDOT
comparatorSlot	TokenNameIdentifier
,	TokenNameCOMMA
doc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
groupMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
bottomGroup	TokenNameIdentifier
.	TokenNameDOT
groupValue	TokenNameIdentifier
,	TokenNameCOMMA
bottomGroup	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
bottomGroup	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
topNGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
lastComparatorSlot	TokenNameIdentifier
=	TokenNameEQUAL
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
last	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
comparatorSlot	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
FieldComparator	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
fc	TokenNameIdentifier
:	TokenNameCOLON
comparators	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fc	TokenNameIdentifier
.	TokenNameDOT
setBottom	TokenNameIdentifier
(	TokenNameLPAREN
lastComparatorSlot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
compIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
compIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
FieldComparator	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
fc	TokenNameIdentifier
=	TokenNameEQUAL
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fc	TokenNameIdentifier
.	TokenNameDOT
copy	TokenNameIdentifier
(	TokenNameLPAREN
spareSlot	TokenNameIdentifier
,	TokenNameCOMMA
doc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
reversed	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
fc	TokenNameIdentifier
.	TokenNameDOT
compare	TokenNameIdentifier
(	TokenNameLPAREN
group	TokenNameIdentifier
.	TokenNameDOT
comparatorSlot	TokenNameIdentifier
,	TokenNameCOMMA
spareSlot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
compIDX2	TokenNameIdentifier
=	TokenNameEQUAL
compIDX	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
compIDX2	TokenNameIdentifier
<	TokenNameLESS
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
compIDX2	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX2	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
copy	TokenNameIdentifier
(	TokenNameLPAREN
spareSlot	TokenNameIdentifier
,	TokenNameCOMMA
doc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compIDX	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
compIDXEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
final	TokenNamefinal
CollectedSearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>	TokenNameGREATER
prevLast	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
orderedGroups	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
prevLast	TokenNameIdentifier
=	TokenNameEQUAL
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
last	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
remove	TokenNameIdentifier
(	TokenNameLPAREN
group	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
topNGroups	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
prevLast	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
group	TokenNameIdentifier
.	TokenNameDOT
topDoc	TokenNameIdentifier
=	TokenNameEQUAL
docBase	TokenNameIdentifier
+	TokenNamePLUS
doc	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
tmp	TokenNameIdentifier
=	TokenNameEQUAL
spareSlot	TokenNameIdentifier
;	TokenNameSEMICOLON
spareSlot	TokenNameIdentifier
=	TokenNameEQUAL
group	TokenNameIdentifier
.	TokenNameDOT
comparatorSlot	TokenNameIdentifier
;	TokenNameSEMICOLON
group	TokenNameIdentifier
.	TokenNameDOT
comparatorSlot	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
orderedGroups	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
group	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
topNGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
CollectedSearchGroup	TokenNameIdentifier
newLast	TokenNameIdentifier
=	TokenNameEQUAL
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
last	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
group	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
newLast	TokenNameIdentifier
||	TokenNameOR_OR
prevLast	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
newLast	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
FieldComparator	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
fc	TokenNameIdentifier
:	TokenNameCOLON
comparators	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fc	TokenNameIdentifier
.	TokenNameDOT
setBottom	TokenNameIdentifier
(	TokenNameLPAREN
newLast	TokenNameIdentifier
.	TokenNameDOT
comparatorSlot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
buildSortedSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Comparator	TokenNameIdentifier
<	TokenNameLESS
CollectedSearchGroup	TokenNameIdentifier
>	TokenNameGREATER
comparator	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Comparator	TokenNameIdentifier
<	TokenNameLESS
CollectedSearchGroup	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
int	TokenNameint
compare	TokenNameIdentifier
(	TokenNameLPAREN
CollectedSearchGroup	TokenNameIdentifier
o1	TokenNameIdentifier
,	TokenNameCOMMA
CollectedSearchGroup	TokenNameIdentifier
o2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
compIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
compIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
FieldComparator	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
fc	TokenNameIdentifier
=	TokenNameEQUAL
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
reversed	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
fc	TokenNameIdentifier
.	TokenNameDOT
compare	TokenNameIdentifier
(	TokenNameLPAREN
o1	TokenNameIdentifier
.	TokenNameDOT
comparatorSlot	TokenNameIdentifier
,	TokenNameCOMMA
o2	TokenNameIdentifier
.	TokenNameDOT
comparatorSlot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
compIDX	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
compIDXEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
o1	TokenNameIdentifier
.	TokenNameDOT
topDoc	TokenNameIdentifier
-	TokenNameMINUS
o2	TokenNameIdentifier
.	TokenNameDOT
topDoc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
orderedGroups	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TreeSet	TokenNameIdentifier
<	TokenNameLESS
CollectedSearchGroup	TokenNameIdentifier
<	TokenNameLESS
GROUP_VALUE_TYPE	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
(	TokenNameLPAREN
comparator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
addAll	TokenNameIdentifier
(	TokenNameLPAREN
groupMap	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
FieldComparator	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
fc	TokenNameIdentifier
:	TokenNameCOLON
comparators	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fc	TokenNameIdentifier
.	TokenNameDOT
setBottom	TokenNameIdentifier
(	TokenNameLPAREN
orderedGroups	TokenNameIdentifier
.	TokenNameDOT
last	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
comparatorSlot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
boolean	TokenNameboolean
acceptsDocsOutOfOrder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setNextReader	TokenNameIdentifier
(	TokenNameLPAREN
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
docBase	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
docBase	TokenNameIdentifier
=	TokenNameEQUAL
docBase	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
setNextReader	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
docBase	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
abstract	TokenNameabstract
GROUP_VALUE_TYPE	TokenNameIdentifier
getDocGroupValue	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
doc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
protected	TokenNameprotected
abstract	TokenNameabstract
GROUP_VALUE_TYPE	TokenNameIdentifier
copyDocGroupValue	TokenNameIdentifier
(	TokenNameLPAREN
GROUP_VALUE_TYPE	TokenNameIdentifier
groupValue	TokenNameIdentifier
,	TokenNameCOMMA
GROUP_VALUE_TYPE	TokenNameIdentifier
reuse	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
class	TokenNameclass
CollectedSearchGroup	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
extends	TokenNameextends
SearchGroup	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
int	TokenNameint
topDoc	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
comparatorSlot	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
