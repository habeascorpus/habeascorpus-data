package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
spatial	TokenNameIdentifier
.	TokenNameDOT
geometry	TokenNameIdentifier
.	TokenNameDOT
shape	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
class	TokenNameclass
Ellipse	TokenNameIdentifier
implements	TokenNameimplements
Geometry2D	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
Point2D	TokenNameIdentifier
center	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
a	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
b	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
k1	TokenNameIdentifier
,	TokenNameCOMMA
k2	TokenNameIdentifier
,	TokenNameCOMMA
k3	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
s	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
c	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Ellipse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
center	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
double	TokenNamedouble
SQR	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
d	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
d	TokenNameIdentifier
*	TokenNameMULTIPLY
d	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Ellipse	TokenNameIdentifier
(	TokenNameLPAREN
Point2D	TokenNameIdentifier
p1	TokenNameIdentifier
,	TokenNameCOMMA
Point2D	TokenNameIdentifier
p2	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
angle	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
center	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
center	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
0.5f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
center	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
0.5f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
angleRad	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
toRadians	TokenNameIdentifier
(	TokenNameLPAREN
angle	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
c	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
cos	TokenNameIdentifier
(	TokenNameLPAREN
angleRad	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
s	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
sin	TokenNameIdentifier
(	TokenNameLPAREN
angleRad	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
dx	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
0.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
dy	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
abs	TokenNameIdentifier
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
p1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
0.5	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
dx	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
dy	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
dx	TokenNameIdentifier
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
dy	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
dy	TokenNameIdentifier
;	TokenNameSEMICOLON
b	TokenNameIdentifier
=	TokenNameEQUAL
dx	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
k1	TokenNameIdentifier
=	TokenNameEQUAL
SQR	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
/	TokenNameDIVIDE
a	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
SQR	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
/	TokenNameDIVIDE
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
k2	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
s	TokenNameIdentifier
*	TokenNameMULTIPLY
c	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
/	TokenNameDIVIDE
SQR	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
/	TokenNameDIVIDE
SQR	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
k3	TokenNameIdentifier
=	TokenNameEQUAL
SQR	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
/	TokenNameDIVIDE
a	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
SQR	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
/	TokenNameDIVIDE
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
intersect	TokenNameIdentifier
(	TokenNameLPAREN
LineSegment	TokenNameIdentifier
seg	TokenNameIdentifier
,	TokenNameCOMMA
Point2D	TokenNameIdentifier
pt0	TokenNameIdentifier
,	TokenNameCOMMA
Point2D	TokenNameIdentifier
pt1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
pt0	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
pt0	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
pt1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
pt1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
x1	TokenNameIdentifier
=	TokenNameEQUAL
center	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
y1	TokenNameIdentifier
=	TokenNameEQUAL
center	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
u1	TokenNameIdentifier
=	TokenNameEQUAL
seg	TokenNameIdentifier
.	TokenNameDOT
A	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
v1	TokenNameIdentifier
=	TokenNameEQUAL
seg	TokenNameIdentifier
.	TokenNameDOT
A	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
u2	TokenNameIdentifier
=	TokenNameEQUAL
seg	TokenNameIdentifier
.	TokenNameDOT
B	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
v2	TokenNameIdentifier
=	TokenNameEQUAL
seg	TokenNameIdentifier
.	TokenNameDOT
B	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
dx	TokenNameIdentifier
=	TokenNameEQUAL
u2	TokenNameIdentifier
-	TokenNameMINUS
u1	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
dy	TokenNameIdentifier
=	TokenNameEQUAL
v2	TokenNameIdentifier
-	TokenNameMINUS
v1	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
q0	TokenNameIdentifier
=	TokenNameEQUAL
k1	TokenNameIdentifier
*	TokenNameMULTIPLY
SQR	TokenNameIdentifier
(	TokenNameLPAREN
u1	TokenNameIdentifier
-	TokenNameMINUS
x1	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
k2	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
u1	TokenNameIdentifier
-	TokenNameMINUS
x1	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
(	TokenNameLPAREN
v1	TokenNameIdentifier
-	TokenNameMINUS
y1	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
k3	TokenNameIdentifier
*	TokenNameMULTIPLY
SQR	TokenNameIdentifier
(	TokenNameLPAREN
v1	TokenNameIdentifier
-	TokenNameMINUS
y1	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
q1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
k1	TokenNameIdentifier
*	TokenNameMULTIPLY
dx	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
u1	TokenNameIdentifier
-	TokenNameMINUS
x1	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
k2	TokenNameIdentifier
*	TokenNameMULTIPLY
dx	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
v1	TokenNameIdentifier
-	TokenNameMINUS
y1	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
k2	TokenNameIdentifier
*	TokenNameMULTIPLY
dy	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
u1	TokenNameIdentifier
-	TokenNameMINUS
x1	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
k3	TokenNameIdentifier
*	TokenNameMULTIPLY
dy	TokenNameIdentifier
*	TokenNameMULTIPLY
(	TokenNameLPAREN
v1	TokenNameIdentifier
-	TokenNameMINUS
y1	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
q2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
k1	TokenNameIdentifier
*	TokenNameMULTIPLY
SQR	TokenNameIdentifier
(	TokenNameLPAREN
dx	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
k2	TokenNameIdentifier
*	TokenNameMULTIPLY
dx	TokenNameIdentifier
*	TokenNameMULTIPLY
dy	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
k3	TokenNameIdentifier
*	TokenNameMULTIPLY
SQR	TokenNameIdentifier
(	TokenNameLPAREN
dy	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
d	TokenNameIdentifier
=	TokenNameEQUAL
SQR	TokenNameIdentifier
(	TokenNameLPAREN
q1	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
q0	TokenNameIdentifier
*	TokenNameMULTIPLY
q2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
d	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
d	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
t	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
q1	TokenNameIdentifier
/	TokenNameDIVIDE
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
q2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
<=	TokenNameLESS_EQUAL
t	TokenNameIdentifier
&&	TokenNameAND_AND
t	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
pt0	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
u1	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
dx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pt0	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
v1	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
dy	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
double	TokenNamedouble
q	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
sqrt	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
-	TokenNameMINUS
q1	TokenNameIdentifier
-	TokenNameMINUS
q	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
q2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
<=	TokenNameLESS_EQUAL
t	TokenNameIdentifier
&&	TokenNameAND_AND
t	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
pt0	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
u1	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
dx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pt0	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
v1	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
dy	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
-	TokenNameMINUS
q1	TokenNameIdentifier
+	TokenNamePLUS
q	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
q2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
<=	TokenNameLESS_EQUAL
t	TokenNameIdentifier
&&	TokenNameAND_AND
t	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
n	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
pt0	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
u1	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
dx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pt0	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
v1	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
dy	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
pt1	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
u1	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
dx	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pt1	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
v1	TokenNameIdentifier
+	TokenNamePLUS
t	TokenNameIdentifier
*	TokenNameMULTIPLY
dy	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
n	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
n	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
IntersectCase	TokenNameIdentifier
intersect	TokenNameIdentifier
(	TokenNameLPAREN
Rectangle	TokenNameIdentifier
r	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Point2D	TokenNameIdentifier
ul	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
.	TokenNameDOT
MinPt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
r	TokenNameIdentifier
.	TokenNameDOT
MaxPt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Point2D	TokenNameIdentifier
ur	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
.	TokenNameDOT
MaxPt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
r	TokenNameIdentifier
.	TokenNameDOT
MaxPt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Point2D	TokenNameIdentifier
ll	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
.	TokenNameDOT
MinPt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
r	TokenNameIdentifier
.	TokenNameDOT
MinPt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Point2D	TokenNameIdentifier
lr	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
.	TokenNameDOT
MaxPt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
r	TokenNameIdentifier
.	TokenNameDOT
MinPt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
contains	TokenNameIdentifier
(	TokenNameLPAREN
ul	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
contains	TokenNameIdentifier
(	TokenNameLPAREN
ur	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
contains	TokenNameIdentifier
(	TokenNameLPAREN
ll	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
contains	TokenNameIdentifier
(	TokenNameLPAREN
lr	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
IntersectCase	TokenNameIdentifier
.	TokenNameDOT
CONTAINS	TokenNameIdentifier
;	TokenNameSEMICOLON
Point2D	TokenNameIdentifier
pt0	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
pt1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Point2D	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LineSegment	TokenNameIdentifier
bottom	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LineSegment	TokenNameIdentifier
(	TokenNameLPAREN
ll	TokenNameIdentifier
,	TokenNameCOMMA
lr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
intersect	TokenNameIdentifier
(	TokenNameLPAREN
bottom	TokenNameIdentifier
,	TokenNameCOMMA
pt0	TokenNameIdentifier
,	TokenNameCOMMA
pt1	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
IntersectCase	TokenNameIdentifier
.	TokenNameDOT
INTERSECTS	TokenNameIdentifier
;	TokenNameSEMICOLON
LineSegment	TokenNameIdentifier
top	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LineSegment	TokenNameIdentifier
(	TokenNameLPAREN
ul	TokenNameIdentifier
,	TokenNameCOMMA
ur	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
intersect	TokenNameIdentifier
(	TokenNameLPAREN
top	TokenNameIdentifier
,	TokenNameCOMMA
pt0	TokenNameIdentifier
,	TokenNameCOMMA
pt1	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
IntersectCase	TokenNameIdentifier
.	TokenNameDOT
INTERSECTS	TokenNameIdentifier
;	TokenNameSEMICOLON
LineSegment	TokenNameIdentifier
left	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LineSegment	TokenNameIdentifier
(	TokenNameLPAREN
ll	TokenNameIdentifier
,	TokenNameCOMMA
ul	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
intersect	TokenNameIdentifier
(	TokenNameLPAREN
left	TokenNameIdentifier
,	TokenNameCOMMA
pt0	TokenNameIdentifier
,	TokenNameCOMMA
pt1	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
IntersectCase	TokenNameIdentifier
.	TokenNameDOT
INTERSECTS	TokenNameIdentifier
;	TokenNameSEMICOLON
LineSegment	TokenNameIdentifier
right	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LineSegment	TokenNameIdentifier
(	TokenNameLPAREN
lr	TokenNameIdentifier
,	TokenNameCOMMA
ur	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
intersect	TokenNameIdentifier
(	TokenNameLPAREN
right	TokenNameIdentifier
,	TokenNameCOMMA
pt0	TokenNameIdentifier
,	TokenNameCOMMA
pt1	TokenNameIdentifier
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
IntersectCase	TokenNameIdentifier
.	TokenNameDOT
INTERSECTS	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
r	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
center	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
IntersectCase	TokenNameIdentifier
.	TokenNameDOT
WITHIN	TokenNameIdentifier
:	TokenNameCOLON
IntersectCase	TokenNameIdentifier
.	TokenNameDOT
OUTSIDE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
double	TokenNamedouble
area	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
UnsupportedOperationException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Point2D	TokenNameIdentifier
centroid	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
UnsupportedOperationException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
contains	TokenNameIdentifier
(	TokenNameLPAREN
Point2D	TokenNameIdentifier
pt	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
dx	TokenNameIdentifier
=	TokenNameEQUAL
pt	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
center	TokenNameIdentifier
.	TokenNameDOT
x	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
dy	TokenNameIdentifier
=	TokenNameEQUAL
pt	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
center	TokenNameIdentifier
.	TokenNameDOT
y	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
double	TokenNamedouble
eq	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
k1	TokenNameIdentifier
*	TokenNameMULTIPLY
SQR	TokenNameIdentifier
(	TokenNameLPAREN
dx	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
k2	TokenNameIdentifier
*	TokenNameMULTIPLY
dx	TokenNameIdentifier
*	TokenNameMULTIPLY
dy	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
k3	TokenNameIdentifier
*	TokenNameMULTIPLY
SQR	TokenNameIdentifier
(	TokenNameLPAREN
dy	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
eq	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
translate	TokenNameIdentifier
(	TokenNameLPAREN
Vector2D	TokenNameIdentifier
v	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
UnsupportedOperationException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
