package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
surround	TokenNameIdentifier
.	TokenNameDOT
query	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
junit	TokenNameIdentifier
.	TokenNameDOT
framework	TokenNameIdentifier
.	TokenNameDOT
TestSuite	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
junit	TokenNameIdentifier
.	TokenNameDOT
textui	TokenNameIdentifier
.	TokenNameDOT
TestRunner	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
LuceneTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Test03Distance	TokenNameIdentifier
extends	TokenNameextends
LuceneTestCase	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
main	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
args	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
TestRunner	TokenNameIdentifier
.	TokenNameDOT
run	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TestSuite	TokenNameIdentifier
(	TokenNameLPAREN
Test03Distance	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
verbose	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
maxBasicQueries	TokenNameIdentifier
=	TokenNameEQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
exceptionQueries	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"(aa and bb) w cc"	TokenNameStringLiteral
,	TokenNameCOMMA
"(aa or bb) w (cc and dd)"	TokenNameStringLiteral
,	TokenNameCOMMA
"(aa opt bb) w cc"	TokenNameStringLiteral
,	TokenNameCOMMA
"(aa not bb) w cc"	TokenNameStringLiteral
,	TokenNameCOMMA
"(aa or bb) w (bi:cc)"	TokenNameStringLiteral
,	TokenNameCOMMA
"(aa or bb) w bi:cc"	TokenNameStringLiteral
,	TokenNameCOMMA
"(aa or bi:bb) w cc"	TokenNameStringLiteral
,	TokenNameCOMMA
"(aa or (bi:bb)) w cc"	TokenNameStringLiteral
,	TokenNameCOMMA
"(aa or (bb and dd)) w cc"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
test00Exceptions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
m	TokenNameIdentifier
=	TokenNameEQUAL
ExceptionQueryTst	TokenNameIdentifier
.	TokenNameDOT
getFailQueries	TokenNameIdentifier
(	TokenNameLPAREN
exceptionQueries	TokenNameIdentifier
,	TokenNameCOMMA
verbose	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
m	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"No ParseException for: "	TokenNameStringLiteral
+	TokenNamePLUS
m	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
final	TokenNamefinal
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
=	TokenNameEQUAL
"bi"	TokenNameStringLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
docs1	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"word1 word2 word3"	TokenNameStringLiteral
,	TokenNameCOMMA
"word4 word5"	TokenNameStringLiteral
,	TokenNameCOMMA
"ord1 ord2 ord3"	TokenNameStringLiteral
,	TokenNameCOMMA
"orda1 orda2 orda3 word2 worda3"	TokenNameStringLiteral
,	TokenNameCOMMA
"a c e a b c"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
SingleFieldTestDb	TokenNameIdentifier
db1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SingleFieldTestDb	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
docs1	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
void	TokenNamevoid
distanceTst	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
,	TokenNameCOMMA
SingleFieldTestDb	TokenNameIdentifier
db	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
BooleanQueryTst	TokenNameIdentifier
bqt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BooleanQueryTst	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
,	TokenNameCOMMA
db	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
,	TokenNameCOMMA
new	TokenNamenew
BasicQueryFactory	TokenNameIdentifier
(	TokenNameLPAREN
maxBasicQueries	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bqt	TokenNameIdentifier
.	TokenNameDOT
setVerbose	TokenNameIdentifier
(	TokenNameLPAREN
verbose	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bqt	TokenNameIdentifier
.	TokenNameDOT
doTest	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
distanceTst	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
,	TokenNameCOMMA
db1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test0W01	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word1 w word2"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test0N01	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word1 n word2"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test0N01r	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word2 n word1"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test0W02	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word2 w word1"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test0W03	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word2 2W word1"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test0N03	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word2 2N word1"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test0N03r	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word1 2N word2"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test0W04	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word2 3w word1"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test0N04	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word2 3n word1"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test0N04r	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word1 3n word2"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test0W05	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"orda1 w orda3"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test0W06	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
3	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"orda1 2w orda3"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Wtrunc01	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word1* w word2"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Wtrunc02	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word* w word2"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Wtrunc02r	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word2 w word*"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Ntrunc02	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word* n word2"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Ntrunc02r	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word2 n word*"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Wtrunc03	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word1* w word2*"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Ntrunc03	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word1* N word2*"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Wtrunc04	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"kxork* w kxor*"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Ntrunc04	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"kxork* 99n kxor*"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Wtrunc05	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word2* 2W word1*"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Ntrunc05	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word2* 2N word1*"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Wtrunc06	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
3	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"ord* W word*"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Ntrunc06	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
3	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"ord* N word*"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Ntrunc06r	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
3	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"word* N ord*"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Wtrunc07	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
3	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"(orda2 OR orda3) W word*"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Wtrunc08	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
3	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"(orda2 OR orda3) W (word2 OR worda3)"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Wtrunc09	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
3	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"(orda2 OR orda3) 2W (word2 OR worda3)"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test1Ntrunc09	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
3	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest1	TokenNameIdentifier
(	TokenNameLPAREN
"(orda2 OR orda3) 2N (word2 OR worda3)"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
docs2	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"w1 w2 w3 w4 w5"	TokenNameStringLiteral
,	TokenNameCOMMA
"w1 w3 w2 w3"	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
SingleFieldTestDb	TokenNameIdentifier
db2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SingleFieldTestDb	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
docs2	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
distanceTest2	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
distanceTst	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
,	TokenNameCOMMA
db2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test2Wprefix01	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest2	TokenNameIdentifier
(	TokenNameLPAREN
"W (w1, w2, w3)"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test2Nprefix01a	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest2	TokenNameIdentifier
(	TokenNameLPAREN
"N(w1, w2, w3)"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test2Nprefix01b	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest2	TokenNameIdentifier
(	TokenNameLPAREN
"N(w3, w1, w2)"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test2Wprefix02	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest2	TokenNameIdentifier
(	TokenNameLPAREN
"2W(w1,w2,w3)"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test2Nprefix02a	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest2	TokenNameIdentifier
(	TokenNameLPAREN
"2N(w1,w2,w3)"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test2Nprefix02b	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest2	TokenNameIdentifier
(	TokenNameLPAREN
"2N(w2,w3,w1)"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test2Wnested01	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest2	TokenNameIdentifier
(	TokenNameLPAREN
"w1 W w2 W w3"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test2Nnested01	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest2	TokenNameIdentifier
(	TokenNameLPAREN
"w1 N w2 N w3"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test2Wnested02	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest2	TokenNameIdentifier
(	TokenNameLPAREN
"w1 2W w2 2W w3"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test2Nnested02	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest2	TokenNameIdentifier
(	TokenNameLPAREN
"w1 2N w2 2N w3"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
docs3	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"low pressure temperature inversion and rain"	TokenNameStringLiteral
,	TokenNameCOMMA
"when the temperature has a negative height above a depression no precipitation gradient is expected"	TokenNameStringLiteral
,	TokenNameCOMMA
"when the temperature has a negative height gradient above a depression no precipitation is expected"	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
SingleFieldTestDb	TokenNameIdentifier
db3	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SingleFieldTestDb	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
docs3	TokenNameIdentifier
,	TokenNameCOMMA
fieldName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
distanceTest3	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
distanceTst	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
,	TokenNameCOMMA
db3	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
test3Example01	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expdnrs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
distanceTest3	TokenNameIdentifier
(	TokenNameLPAREN
"50n((low w pressure*) or depression*,"	TokenNameStringLiteral
+	TokenNamePLUS
"5n(temperat*, (invers* or (negativ* 3n gradient*))),"	TokenNameStringLiteral
+	TokenNamePLUS
"rain* or precipitat*)"	TokenNameStringLiteral
,	TokenNameCOMMA
expdnrs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
