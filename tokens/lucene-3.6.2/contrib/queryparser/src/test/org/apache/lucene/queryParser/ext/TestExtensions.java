package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
LuceneTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TestExtensions	TokenNameIdentifier
extends	TokenNameextends
LuceneTestCase	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
Extensions	TokenNameIdentifier
ext	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
ext	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Extensions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBuildExtensionField	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"field\:key"	TokenNameStringLiteral
,	TokenNameCOMMA
ext	TokenNameIdentifier
.	TokenNameDOT
buildExtensionField	TokenNameIdentifier
(	TokenNameLPAREN
"key"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"\:key"	TokenNameStringLiteral
,	TokenNameCOMMA
ext	TokenNameIdentifier
.	TokenNameDOT
buildExtensionField	TokenNameIdentifier
(	TokenNameLPAREN
"key"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ext	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Extensions	TokenNameIdentifier
(	TokenNameLPAREN
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"field.key"	TokenNameStringLiteral
,	TokenNameCOMMA
ext	TokenNameIdentifier
.	TokenNameDOT
buildExtensionField	TokenNameIdentifier
(	TokenNameLPAREN
"key"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
".key"	TokenNameStringLiteral
,	TokenNameCOMMA
ext	TokenNameIdentifier
.	TokenNameDOT
buildExtensionField	TokenNameIdentifier
(	TokenNameLPAREN
"key"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testSplitExtensionField	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"field\:key"	TokenNameStringLiteral
,	TokenNameCOMMA
ext	TokenNameIdentifier
.	TokenNameDOT
buildExtensionField	TokenNameIdentifier
(	TokenNameLPAREN
"key"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"\:key"	TokenNameStringLiteral
,	TokenNameCOMMA
ext	TokenNameIdentifier
.	TokenNameDOT
buildExtensionField	TokenNameIdentifier
(	TokenNameLPAREN
"key"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ext	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Extensions	TokenNameIdentifier
(	TokenNameLPAREN
'.'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"field.key"	TokenNameStringLiteral
,	TokenNameCOMMA
ext	TokenNameIdentifier
.	TokenNameDOT
buildExtensionField	TokenNameIdentifier
(	TokenNameLPAREN
"key"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
".key"	TokenNameStringLiteral
,	TokenNameCOMMA
ext	TokenNameIdentifier
.	TokenNameDOT
buildExtensionField	TokenNameIdentifier
(	TokenNameLPAREN
"key"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testAddGetExtension	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ParserExtension	TokenNameIdentifier
extension	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ExtensionStub	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNull	TokenNameIdentifier
(	TokenNameLPAREN
ext	TokenNameIdentifier
.	TokenNameDOT
getExtension	TokenNameIdentifier
(	TokenNameLPAREN
"foo"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ext	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"foo"	TokenNameStringLiteral
,	TokenNameCOMMA
extension	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertSame	TokenNameIdentifier
(	TokenNameLPAREN
extension	TokenNameIdentifier
,	TokenNameCOMMA
ext	TokenNameIdentifier
.	TokenNameDOT
getExtension	TokenNameIdentifier
(	TokenNameLPAREN
"foo"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ext	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"foo"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNull	TokenNameIdentifier
(	TokenNameLPAREN
ext	TokenNameIdentifier
.	TokenNameDOT
getExtension	TokenNameIdentifier
(	TokenNameLPAREN
"foo"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testGetExtDelimiter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
Extensions	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_EXTENSION_FIELD_DELIMITER	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
getExtensionFieldDelimiter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ext	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Extensions	TokenNameIdentifier
(	TokenNameLPAREN
'?'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
'?'	TokenNameCharacterLiteral
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
getExtensionFieldDelimiter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testEscapeExtension	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"abc\:\?\{\}\[\]\\\(\)\+\-\!\~"	TokenNameStringLiteral
,	TokenNameCOMMA
ext	TokenNameIdentifier
.	TokenNameDOT
escapeExtensionField	TokenNameIdentifier
(	TokenNameLPAREN
"abc:?{}[]\()+-!~"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
ext	TokenNameIdentifier
.	TokenNameDOT
escapeExtensionField	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fail	TokenNameIdentifier
(	TokenNameLPAREN
"should throw NPE - escape string is null"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NullPointerException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
