package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
surround	TokenNameIdentifier
.	TokenNameDOT
query	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
junit	TokenNameIdentifier
.	TokenNameDOT
framework	TokenNameIdentifier
.	TokenNameDOT
TestSuite	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
junit	TokenNameIdentifier
.	TokenNameDOT
textui	TokenNameIdentifier
.	TokenNameDOT
TestRunner	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
LuceneTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Test01Exceptions	TokenNameIdentifier
extends	TokenNameextends
LuceneTestCase	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
main	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
args	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
TestRunner	TokenNameIdentifier
.	TokenNameDOT
run	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TestSuite	TokenNameIdentifier
(	TokenNameLPAREN
Test01Exceptions	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
verbose	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
=	TokenNameEQUAL
"bi"	TokenNameStringLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
exceptionQueries	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"*"	TokenNameStringLiteral
,	TokenNameCOMMA
"a*"	TokenNameStringLiteral
,	TokenNameCOMMA
"ab*"	TokenNameStringLiteral
,	TokenNameCOMMA
"?"	TokenNameStringLiteral
,	TokenNameCOMMA
"a?"	TokenNameStringLiteral
,	TokenNameCOMMA
"ab?"	TokenNameStringLiteral
,	TokenNameCOMMA
"a???b"	TokenNameStringLiteral
,	TokenNameCOMMA
"a?"	TokenNameStringLiteral
,	TokenNameCOMMA
"a*b?"	TokenNameStringLiteral
,	TokenNameCOMMA
"word1 word2"	TokenNameStringLiteral
,	TokenNameCOMMA
"word2 AND"	TokenNameStringLiteral
,	TokenNameCOMMA
"word1 OR"	TokenNameStringLiteral
,	TokenNameCOMMA
"AND(word2)"	TokenNameStringLiteral
,	TokenNameCOMMA
"AND(word2,)"	TokenNameStringLiteral
,	TokenNameCOMMA
"AND(word2,word1,)"	TokenNameStringLiteral
,	TokenNameCOMMA
"OR(word2)"	TokenNameStringLiteral
,	TokenNameCOMMA
"OR(word2 ,"	TokenNameStringLiteral
,	TokenNameCOMMA
"OR(word2 , word1 ,)"	TokenNameStringLiteral
,	TokenNameCOMMA
"xx NOT"	TokenNameStringLiteral
,	TokenNameCOMMA
"xx (a AND b)"	TokenNameStringLiteral
,	TokenNameCOMMA
"(a AND b"	TokenNameStringLiteral
,	TokenNameCOMMA
"a OR b)"	TokenNameStringLiteral
,	TokenNameCOMMA
"or(word2+ not ord+, and xyz,def)"	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
test01Exceptions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
m	TokenNameIdentifier
=	TokenNameEQUAL
ExceptionQueryTst	TokenNameIdentifier
.	TokenNameDOT
getFailQueries	TokenNameIdentifier
(	TokenNameLPAREN
exceptionQueries	TokenNameIdentifier
,	TokenNameCOMMA
verbose	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
m	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"No ParseException for: "	TokenNameStringLiteral
+	TokenNamePLUS
m	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
