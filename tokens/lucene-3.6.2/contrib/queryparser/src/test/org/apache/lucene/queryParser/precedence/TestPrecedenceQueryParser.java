package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
precedence	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Reader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
text	TokenNameIdentifier
.	TokenNameDOT
DateFormat	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Calendar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Collections	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Date	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
GregorianCalendar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Analyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
LowerCaseTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
MockAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
MockTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
standard	TokenNameIdentifier
.	TokenNameDOT
StandardAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
tokenattributes	TokenNameIdentifier
.	TokenNameDOT
CharTermAttribute	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
tokenattributes	TokenNameIdentifier
.	TokenNameDOT
OffsetAttribute	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
document	TokenNameIdentifier
.	TokenNameDOT
DateField	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
document	TokenNameIdentifier
.	TokenNameDOT
DateTools	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
core	TokenNameIdentifier
.	TokenNameDOT
QueryNodeException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
core	TokenNameIdentifier
.	TokenNameDOT
QueryNodeParseException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
standard	TokenNameIdentifier
.	TokenNameDOT
config	TokenNameIdentifier
.	TokenNameDOT
StandardQueryConfigHandler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
standard	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
ParseException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
BooleanQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
FuzzyQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
PhraseQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
PrefixQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
Query	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
TermQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
TermRangeQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
WildcardQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
LuceneTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TestPrecedenceQueryParser	TokenNameIdentifier
extends	TokenNameextends
LuceneTestCase	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
Analyzer	TokenNameIdentifier
qpAnalyzer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QPTestAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
QPTestFilter	TokenNameIdentifier
extends	TokenNameextends
TokenFilter	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
QPTestFilter	TokenNameIdentifier
(	TokenNameLPAREN
TokenStream	TokenNameIdentifier
in	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
in	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
inPhrase	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
savedStart	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
savedEnd	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
CharTermAttribute	TokenNameIdentifier
termAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
CharTermAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
OffsetAttribute	TokenNameIdentifier
offsetAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
OffsetAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
boolean	TokenNameboolean
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
inPhrase	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
inPhrase	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
termAtt	TokenNameIdentifier
.	TokenNameDOT
setEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"phrase2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
setOffset	TokenNameIdentifier
(	TokenNameLPAREN
savedStart	TokenNameIdentifier
,	TokenNameCOMMA
savedEnd	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
while	TokenNamewhile
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
if	TokenNameif
(	TokenNameLPAREN
termAtt	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"phrase"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
inPhrase	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
savedStart	TokenNameIdentifier
=	TokenNameEQUAL
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
startOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
savedEnd	TokenNameIdentifier
=	TokenNameEQUAL
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
endOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
termAtt	TokenNameIdentifier
.	TokenNameDOT
setEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"phrase1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
setOffset	TokenNameIdentifier
(	TokenNameLPAREN
savedStart	TokenNameIdentifier
,	TokenNameCOMMA
savedEnd	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
termAtt	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"stop"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
inPhrase	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
savedStart	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
savedEnd	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
QPTestAnalyzer	TokenNameIdentifier
extends	TokenNameextends
Analyzer	TokenNameIdentifier
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
final	TokenNamefinal
TokenStream	TokenNameIdentifier
tokenStream	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
QPTestFilter	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
LowerCaseTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
reader	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
originalMaxClauses	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
originalMaxClauses	TokenNameIdentifier
=	TokenNameEQUAL
BooleanQuery	TokenNameIdentifier
.	TokenNameDOT
getMaxClauseCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
PrecedenceQueryParser	TokenNameIdentifier
getParser	TokenNameIdentifier
(	TokenNameLPAREN
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
a	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
SIMPLE	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PrecedenceQueryParser	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PrecedenceQueryParser	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
StandardQueryConfigHandler	TokenNameIdentifier
.	TokenNameDOT
Operator	TokenNameIdentifier
.	TokenNameDOT
OR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
qp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Query	TokenNameIdentifier
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
getParser	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
q	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
s	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"Query /"	TokenNameStringLiteral
+	TokenNamePLUS
query	TokenNameIdentifier
+	TokenNamePLUS
"/ yielded /"	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"/, expecting /"	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
lowercase	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
PrecedenceQueryParser	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
getParser	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setLowercaseExpandedTerms	TokenNameIdentifier
(	TokenNameLPAREN
lowercase	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
q	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
s	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"WildcardQuery /"	TokenNameStringLiteral
+	TokenNamePLUS
query	TokenNameIdentifier
+	TokenNamePLUS
"/ yielded /"	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"/, expecting /"	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
PrecedenceQueryParser	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
getParser	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
q	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
s	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"WildcardQuery /"	TokenNameStringLiteral
+	TokenNamePLUS
query	TokenNameIdentifier
+	TokenNamePLUS
"/ yielded /"	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"/, expecting /"	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
Query	TokenNameIdentifier
getQueryDOA	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
a	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
SIMPLE	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PrecedenceQueryParser	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PrecedenceQueryParser	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
StandardQueryConfigHandler	TokenNameIdentifier
.	TokenNameDOT
Operator	TokenNameIdentifier
.	TokenNameDOT
AND	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
getQueryDOA	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
q	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
s	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"Query /"	TokenNameStringLiteral
+	TokenNamePLUS
query	TokenNameIdentifier
+	TokenNamePLUS
"/ yielded /"	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"/, expecting /"	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testSimple	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term term term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"türm term term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"türm term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"ümlaut"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"ümlaut"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a AND b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a +b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"(a AND b)"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a +b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"c OR (a AND b)"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"c (+a +b)"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a AND NOT b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a AND -b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a AND !b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a && b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a +b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a && ! b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a OR b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"a b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a || b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"a b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"+term -term term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+term -term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"foo:term AND field:anotherTerm"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+foo:term +anotherterm"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term AND "phrase phrase""	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+term +"phrase phrase""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""hello there""	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""hello there""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"a AND b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
BooleanQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"hello"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
TermQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
""hello there""	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
PhraseQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"germ term^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"germ term^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"(term)^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"(germ term)^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"(germ term)^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term^2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""germ term"^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""germ term"^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""term germ"^2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""term germ"^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"(foo OR bar) AND (baz OR boo)"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+(foo bar) +(baz boo)"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"((a OR b) AND NOT c) OR d"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"(+(a b) -c) d"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"+(apple "steve jobs") -(foo bar baz)"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+(apple "steve jobs") -(foo bar baz)"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"+title:(dog OR cat) -author:"bob dole""	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+(title:dog title:cat) -author:"bob dole""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PrecedenceQueryParser	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PrecedenceQueryParser	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
StandardQueryConfigHandler	TokenNameIdentifier
.	TokenNameDOT
Operator	TokenNameIdentifier
.	TokenNameDOT
OR	TokenNameIdentifier
,	TokenNameCOMMA
qp	TokenNameIdentifier
.	TokenNameDOT
getDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
StandardQueryConfigHandler	TokenNameIdentifier
.	TokenNameDOT
Operator	TokenNameIdentifier
.	TokenNameDOT
AND	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
StandardQueryConfigHandler	TokenNameIdentifier
.	TokenNameDOT
Operator	TokenNameIdentifier
.	TokenNameDOT
AND	TokenNameIdentifier
,	TokenNameCOMMA
qp	TokenNameIdentifier
.	TokenNameDOT
getDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
StandardQueryConfigHandler	TokenNameIdentifier
.	TokenNameDOT
Operator	TokenNameIdentifier
.	TokenNameDOT
OR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
StandardQueryConfigHandler	TokenNameIdentifier
.	TokenNameDOT
Operator	TokenNameIdentifier
.	TokenNameDOT
OR	TokenNameIdentifier
,	TokenNameCOMMA
qp	TokenNameIdentifier
.	TokenNameDOT
getDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a OR !b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a OR ! b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a OR -b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testPunct	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a&b"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a&b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a&&b"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a&&b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
".NET"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
".NET"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testSlop	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""term germ"~2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""term germ"~2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""term germ"~2 flork"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""term germ"~2 flork"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""term"~2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"" "~2 germ"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"germ"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""term germ"~2^2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""term germ"~2^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"3"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term 1.0 1 2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term term1 term2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"3"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"3"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term 1.0 1 2"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"term 1.0 1 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term term1 term2"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"term term1 term2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testWildcard	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term*"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term*^2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term*^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term~"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term~0.7"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term~0.7"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term~^3"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term~0.5^3.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term^3~"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term~0.5^3.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term*germ"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term*germ"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term*germ^3"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term*germ^3.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term*"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
PrefixQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term*^2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
PrefixQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term~"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
FuzzyQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term~0.7"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
FuzzyQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
FuzzyQuery	TokenNameIdentifier
fq	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
FuzzyQuery	TokenNameIdentifier
)	TokenNameRPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term~0.7"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
0.7f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
fq	TokenNameIdentifier
.	TokenNameDOT
getMinSimilarity	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0.1f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
FuzzyQuery	TokenNameIdentifier
.	TokenNameDOT
defaultPrefixLength	TokenNameIdentifier
,	TokenNameCOMMA
fq	TokenNameIdentifier
.	TokenNameDOT
getPrefixLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fq	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
FuzzyQuery	TokenNameIdentifier
)	TokenNameRPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term~"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
0.5f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
fq	TokenNameIdentifier
.	TokenNameDOT
getMinSimilarity	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0.1f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
FuzzyQuery	TokenNameIdentifier
.	TokenNameDOT
defaultPrefixLength	TokenNameIdentifier
,	TokenNameCOMMA
fq	TokenNameIdentifier
.	TokenNameDOT
getPrefixLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term~1.1"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fail	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ParseException	TokenNameIdentifier
pe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term*germ"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
WildcardQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Term*"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term*"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Term*"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"TERM*"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term*"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Term*"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"Term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"TERM*"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"TERM*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Te?m"	TokenNameStringLiteral
,	TokenNameCOMMA
"te?m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"te?m"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"te?m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Te?m"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"te?m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"TE?M"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"te?m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Te?m*gerM"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"te?m*germ"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"te?m"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"te?m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Te?m"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"Te?m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"TE?M"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"TE?M"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Te?m*gerM"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"Te?m*gerM"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Term~"	TokenNameStringLiteral
,	TokenNameCOMMA
"term~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Term~"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"term~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Term~"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"Term~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[A TO C]"	TokenNameStringLiteral
,	TokenNameCOMMA
"[a TO c]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[A TO C]"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"[a TO c]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[A TO C]"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"[A TO C]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testQPA	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term term term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"term term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term +stop term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term -stop term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"drop AND stop AND roll"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"+drop +roll"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term phrase term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"term (phrase1 phrase2) term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term AND NOT phrase term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"(+term -(phrase1 phrase2)) term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"stop"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"stop OR stop AND stop"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term term term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
BooleanQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term +stop"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
TermQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a TO z]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"[a TO z]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"[ a TO z]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
TermRangeQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a TO z ]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"[a TO z]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"{ a TO z}"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"{a TO z}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"{ a TO z }"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"{a TO z}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"{ a TO z }^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"{a TO z}^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a TO z] OR bar"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"[a TO z] bar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a TO z] AND bar"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+[a TO z] +bar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"( bar blar { a TO z}) "	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"bar blar {a TO z}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"gack ( bar blar { a TO z}) "	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"gack (bar blar {a TO z})"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
" "	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"""	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"""	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
s	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getDate	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
DateFormat	TokenNameIdentifier
df	TokenNameIdentifier
=	TokenNameEQUAL
DateFormat	TokenNameIdentifier
.	TokenNameDOT
getDateInstance	TokenNameIdentifier
(	TokenNameLPAREN
DateFormat	TokenNameIdentifier
.	TokenNameDOT
SHORT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
DateTools	TokenNameIdentifier
.	TokenNameDOT
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
df	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
DAY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getLocalizedDate	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
day	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
extendLastDate	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
DateFormat	TokenNameIdentifier
df	TokenNameIdentifier
=	TokenNameEQUAL
DateFormat	TokenNameIdentifier
.	TokenNameDOT
getDateInstance	TokenNameIdentifier
(	TokenNameLPAREN
DateFormat	TokenNameIdentifier
.	TokenNameDOT
SHORT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Calendar	TokenNameIdentifier
calendar	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calendar	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
,	TokenNameCOMMA
month	TokenNameIdentifier
,	TokenNameCOMMA
day	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
extendLastDate	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
calendar	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
HOUR_OF_DAY	TokenNameIdentifier
,	TokenNameCOMMA
23	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calendar	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MINUTE	TokenNameIdentifier
,	TokenNameCOMMA
59	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calendar	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
SECOND	TokenNameIdentifier
,	TokenNameCOMMA
59	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calendar	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
,	TokenNameCOMMA
999	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
df	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
calendar	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDateRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
startDate	TokenNameIdentifier
=	TokenNameEQUAL
getLocalizedDate	TokenNameIdentifier
(	TokenNameLPAREN
2002	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
endDate	TokenNameIdentifier
=	TokenNameEQUAL
getLocalizedDate	TokenNameIdentifier
(	TokenNameLPAREN
2002	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Calendar	TokenNameIdentifier
endDateExpected	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
2002	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
23	TokenNameIntegerLiteral
,	TokenNameCOMMA
59	TokenNameIntegerLiteral
,	TokenNameCOMMA
59	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
,	TokenNameCOMMA
999	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
defaultField	TokenNameIdentifier
=	TokenNameEQUAL
"default"	TokenNameStringLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
monthField	TokenNameIdentifier
=	TokenNameEQUAL
"month"	TokenNameStringLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
hourField	TokenNameIdentifier
=	TokenNameEQUAL
"hour"	TokenNameStringLiteral
;	TokenNameSEMICOLON
PrecedenceQueryParser	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PrecedenceQueryParser	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertDateRangeQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
defaultField	TokenNameIdentifier
,	TokenNameCOMMA
startDate	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Map	TokenNameIdentifier
<	TokenNameLESS
CharSequence	TokenNameIdentifier
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
>	TokenNameGREATER
fieldMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
CharSequence	TokenNameIdentifier
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fieldMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
monthField	TokenNameIdentifier
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
MONTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDateResolution	TokenNameIdentifier
(	TokenNameLPAREN
fieldMap	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertDateRangeQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
defaultField	TokenNameIdentifier
,	TokenNameCOMMA
startDate	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDateResolution	TokenNameIdentifier
(	TokenNameLPAREN
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fieldMap	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
hourField	TokenNameIdentifier
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
HOUR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDateResolution	TokenNameIdentifier
(	TokenNameLPAREN
fieldMap	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertDateRangeQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
defaultField	TokenNameIdentifier
,	TokenNameCOMMA
startDate	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertDateRangeQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
monthField	TokenNameIdentifier
,	TokenNameCOMMA
startDate	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
MONTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertDateRangeQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
hourField	TokenNameIdentifier
,	TokenNameCOMMA
startDate	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
HOUR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getDate	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
resolution	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
DateFormat	TokenNameIdentifier
df	TokenNameIdentifier
=	TokenNameEQUAL
DateFormat	TokenNameIdentifier
.	TokenNameDOT
getDateInstance	TokenNameIdentifier
(	TokenNameLPAREN
DateFormat	TokenNameIdentifier
.	TokenNameDOT
SHORT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
getDate	TokenNameIdentifier
(	TokenNameLPAREN
df	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
resolution	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getDate	TokenNameIdentifier
(	TokenNameLPAREN
Date	TokenNameIdentifier
d	TokenNameIdentifier
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
resolution	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
resolution	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DateField	TokenNameIdentifier
.	TokenNameDOT
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
DateTools	TokenNameIdentifier
.	TokenNameDOT
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
,	TokenNameCOMMA
resolution	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
PrecedenceQueryParser	TokenNameIdentifier
qp	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
q	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
field	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
s	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"Query /"	TokenNameStringLiteral
+	TokenNamePLUS
query	TokenNameIdentifier
+	TokenNamePLUS
"/ yielded /"	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"/, expecting /"	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertDateRangeQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
PrecedenceQueryParser	TokenNameIdentifier
qp	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
startDate	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
endDate	TokenNameIdentifier
,	TokenNameCOMMA
Date	TokenNameIdentifier
endDateInclusive	TokenNameIdentifier
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
resolution	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
+	TokenNamePLUS
":["	TokenNameStringLiteral
+	TokenNamePLUS
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
startDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" TO "	TokenNameStringLiteral
+	TokenNamePLUS
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
endDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"]"	TokenNameStringLiteral
,	TokenNameCOMMA
"["	TokenNameStringLiteral
+	TokenNamePLUS
getDate	TokenNameIdentifier
(	TokenNameLPAREN
startDate	TokenNameIdentifier
,	TokenNameCOMMA
resolution	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" TO "	TokenNameStringLiteral
+	TokenNamePLUS
getDate	TokenNameIdentifier
(	TokenNameLPAREN
endDateInclusive	TokenNameIdentifier
,	TokenNameCOMMA
resolution	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
+	TokenNamePLUS
":{"	TokenNameStringLiteral
+	TokenNamePLUS
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
startDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" TO "	TokenNameStringLiteral
+	TokenNamePLUS
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
endDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"}"	TokenNameStringLiteral
,	TokenNameCOMMA
"{"	TokenNameStringLiteral
+	TokenNamePLUS
getDate	TokenNameIdentifier
(	TokenNameLPAREN
startDate	TokenNameIdentifier
,	TokenNameCOMMA
resolution	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" TO "	TokenNameStringLiteral
+	TokenNamePLUS
getDate	TokenNameIdentifier
(	TokenNameLPAREN
endDate	TokenNameIdentifier
,	TokenNameCOMMA
resolution	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testEscaped	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a\-b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a-b:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a\+b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a+b:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a\:b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a\\b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\b:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\-c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b-c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\+c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b+c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\\c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b\c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\-c*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b-c*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\+c*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b+c*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\:c*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b:c*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\\c*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b\c*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\-?c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b-?c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\+?c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b+?c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\:?c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b:?c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\\?c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b\?c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\-c~"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b-c~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\+c~"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b+c~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\:c~"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b:c~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\\c~"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b\c~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a\- TO a\+ ]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"[a- TO a+]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a\: TO a\~ ]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"[a: TO a~]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a\\ TO a\* ]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"[a\ TO a*]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTabNewlineCarriageReturn	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"+weltbank +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"+weltbank +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank  +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank   +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"+weltbank+worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank  +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"+weltbank +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank  +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank   +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank    +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"+weltbank +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank  +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank   +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testSimpleDAO	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"term term term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+term +term +term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"term +term term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+term +term +term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"term term +term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+term +term +term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"term +term +term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+term +term +term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"-term term term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"-term +term +term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBoost	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
StandardAnalyzer	TokenNameIdentifier
oneStopAnalyzer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StandardAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
Collections	TokenNameIdentifier
.	TokenNameDOT
singleton	TokenNameIdentifier
(	TokenNameLPAREN
"on"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PrecedenceQueryParser	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PrecedenceQueryParser	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
oneStopAnalyzer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"on^1.0"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
""hello"^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
.	TokenNameDOT
getBoost	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
2.0	TokenNameDoubleLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
0.5	TokenNameDoubleLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"hello^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
.	TokenNameDOT
getBoost	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
2.0	TokenNameDoubleLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
0.5	TokenNameDoubleLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
""on"^1.0"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
q	TokenNameIdentifier
=	TokenNameEQUAL
getParser	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StandardAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"the^3"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""some phrase"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"abc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fail	TokenNameIdentifier
(	TokenNameLPAREN
"ParseException expected, not thrown"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
QueryNodeParseException	TokenNameIdentifier
expected	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBooleanQuery	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
BooleanQuery	TokenNameIdentifier
.	TokenNameDOT
setMaxClauseCount	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
getParser	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"one two three"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fail	TokenNameIdentifier
(	TokenNameLPAREN
"ParseException expected due to too many boolean clauses"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
QueryNodeException	TokenNameIdentifier
expected	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testNOT	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"NOT foo AND bar"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"-foo +bar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testPrecedence	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
PrecedenceQueryParser	TokenNameIdentifier
parser	TokenNameIdentifier
=	TokenNameEQUAL
getParser	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Query	TokenNameIdentifier
query1	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A AND B OR C AND D"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Query	TokenNameIdentifier
query2	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"(A AND B) OR (C AND D)"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
query1	TokenNameIdentifier
,	TokenNameCOMMA
query2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query1	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A OR B C"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query2	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"(A B) C"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
query1	TokenNameIdentifier
,	TokenNameCOMMA
query2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query1	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A AND B C"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query2	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"(+A +B) C"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
query1	TokenNameIdentifier
,	TokenNameCOMMA
query2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query1	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A AND NOT B"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query2	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"+A -B"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
query1	TokenNameIdentifier
,	TokenNameCOMMA
query2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query1	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A OR NOT B"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query2	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A -B"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
query1	TokenNameIdentifier
,	TokenNameCOMMA
query2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query1	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A OR NOT B AND C"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query2	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A (-B +C)"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
query1	TokenNameIdentifier
,	TokenNameCOMMA
query2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parser	TokenNameIdentifier
.	TokenNameDOT
setDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
StandardQueryConfigHandler	TokenNameIdentifier
.	TokenNameDOT
Operator	TokenNameIdentifier
.	TokenNameDOT
AND	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query1	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A AND B OR C AND D"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query2	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"(A AND B) OR (C AND D)"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
query1	TokenNameIdentifier
,	TokenNameCOMMA
query2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query1	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A AND B C"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query2	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"(A B) C"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
query1	TokenNameIdentifier
,	TokenNameCOMMA
query2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query1	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A AND B C"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query2	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"(+A +B) C"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
query1	TokenNameIdentifier
,	TokenNameCOMMA
query2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query1	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A AND NOT B"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query2	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"+A -B"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
query1	TokenNameIdentifier
,	TokenNameCOMMA
query2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query1	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A AND NOT B OR C"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
query2	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"(+A -B) OR C"	TokenNameStringLiteral
,	TokenNameCOMMA
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
query1	TokenNameIdentifier
,	TokenNameCOMMA
query2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
tearDown	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
BooleanQuery	TokenNameIdentifier
.	TokenNameDOT
setMaxClauseCount	TokenNameIdentifier
(	TokenNameLPAREN
originalMaxClauses	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
super	TokenNamesuper
.	TokenNameDOT
tearDown	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
