package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
standard	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Reader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
text	TokenNameIdentifier
.	TokenNameDOT
Collator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
text	TokenNameIdentifier
.	TokenNameDOT
DateFormat	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Calendar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Date	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
GregorianCalendar	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Collections	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Analyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
KeywordAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
LowerCaseTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
SimpleAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
StopAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
StopFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
WhitespaceAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
standard	TokenNameIdentifier
.	TokenNameDOT
StandardAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
tokenattributes	TokenNameIdentifier
.	TokenNameDOT
OffsetAttribute	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
tokenattributes	TokenNameIdentifier
.	TokenNameDOT
CharTermAttribute	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
document	TokenNameIdentifier
.	TokenNameDOT
DateField	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
document	TokenNameIdentifier
.	TokenNameDOT
DateTools	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
document	TokenNameIdentifier
.	TokenNameDOT
Document	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
document	TokenNameIdentifier
.	TokenNameDOT
Field	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
IndexWriter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
Term	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
messages	TokenNameIdentifier
.	TokenNameDOT
MessageImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
ParseException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
core	TokenNameIdentifier
.	TokenNameDOT
QueryNodeException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
core	TokenNameIdentifier
.	TokenNameDOT
messages	TokenNameIdentifier
.	TokenNameDOT
QueryParserMessages	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
core	TokenNameIdentifier
.	TokenNameDOT
nodes	TokenNameIdentifier
.	TokenNameDOT
FuzzyQueryNode	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
core	TokenNameIdentifier
.	TokenNameDOT
nodes	TokenNameIdentifier
.	TokenNameDOT
QueryNode	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
core	TokenNameIdentifier
.	TokenNameDOT
processors	TokenNameIdentifier
.	TokenNameDOT
QueryNodeProcessorImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
core	TokenNameIdentifier
.	TokenNameDOT
processors	TokenNameIdentifier
.	TokenNameDOT
QueryNodeProcessorPipeline	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
standard	TokenNameIdentifier
.	TokenNameDOT
nodes	TokenNameIdentifier
.	TokenNameDOT
WildcardQueryNode	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
standard	TokenNameIdentifier
.	TokenNameDOT
processors	TokenNameIdentifier
.	TokenNameDOT
WildcardQueryNodeProcessor	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
BooleanClause	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
BooleanQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
FuzzyQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
IndexSearcher	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
MatchAllDocsQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
MultiTermQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
PhraseQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
PrefixQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
Query	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
ScoreDoc	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
TermQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
TermRangeQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
WildcardQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
store	TokenNameIdentifier
.	TokenNameDOT
Directory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
LuceneTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
class	TokenNameclass
TestQueryParserWrapper	TokenNameIdentifier
extends	TokenNameextends
LuceneTestCase	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
Analyzer	TokenNameIdentifier
qpAnalyzer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QPTestAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
QPTestFilter	TokenNameIdentifier
extends	TokenNameextends
TokenFilter	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
CharTermAttribute	TokenNameIdentifier
termAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
CharTermAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
OffsetAttribute	TokenNameIdentifier
offsetAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
OffsetAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
QPTestFilter	TokenNameIdentifier
(	TokenNameLPAREN
TokenStream	TokenNameIdentifier
in	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
in	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
boolean	TokenNameboolean
inPhrase	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
savedStart	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
savedEnd	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
boolean	TokenNameboolean
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
inPhrase	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
inPhrase	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
clearAttributes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
termAtt	TokenNameIdentifier
.	TokenNameDOT
setEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"phrase2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
setOffset	TokenNameIdentifier
(	TokenNameLPAREN
savedStart	TokenNameIdentifier
,	TokenNameCOMMA
savedEnd	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
while	TokenNamewhile
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
termAtt	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"phrase"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
inPhrase	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
savedStart	TokenNameIdentifier
=	TokenNameEQUAL
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
startOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
savedEnd	TokenNameIdentifier
=	TokenNameEQUAL
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
endOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
termAtt	TokenNameIdentifier
.	TokenNameDOT
setEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"phrase1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
setOffset	TokenNameIdentifier
(	TokenNameLPAREN
savedStart	TokenNameIdentifier
,	TokenNameCOMMA
savedEnd	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
termAtt	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"stop"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
QPTestAnalyzer	TokenNameIdentifier
extends	TokenNameextends
Analyzer	TokenNameIdentifier
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
final	TokenNamefinal
TokenStream	TokenNameIdentifier
tokenStream	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
QPTestFilter	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
LowerCaseTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
reader	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
QPTestParser	TokenNameIdentifier
extends	TokenNameextends
QueryParserWrapper	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
QPTestParser	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
f	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
f	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QueryNodeProcessorPipeline	TokenNameIdentifier
newProcessorPipeline	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryNodeProcessorPipeline	TokenNameIdentifier
(	TokenNameLPAREN
getQueryProcessor	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getQueryConfigHandler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newProcessorPipeline	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
WildcardQueryNodeProcessor	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newProcessorPipeline	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
QPTestParserQueryNodeProcessor	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newProcessorPipeline	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
getQueryProcessor	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setQueryProcessor	TokenNameIdentifier
(	TokenNameLPAREN
newProcessorPipeline	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
Query	TokenNameIdentifier
getFuzzyQuery	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
termStr	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
minSimilarity	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
ParseException	TokenNameIdentifier
(	TokenNameLPAREN
"Fuzzy queries not allowed"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
Query	TokenNameIdentifier
getWildcardQuery	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
termStr	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
ParseException	TokenNameIdentifier
(	TokenNameLPAREN
"Wildcard queries not allowed"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
QPTestParserQueryNodeProcessor	TokenNameIdentifier
extends	TokenNameextends
QueryNodeProcessorImpl	TokenNameIdentifier
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
QueryNode	TokenNameIdentifier
postProcessNode	TokenNameIdentifier
(	TokenNameLPAREN
QueryNode	TokenNameIdentifier
node	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
QueryNodeException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
QueryNode	TokenNameIdentifier
preProcessNode	TokenNameIdentifier
(	TokenNameLPAREN
QueryNode	TokenNameIdentifier
node	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
QueryNodeException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
node	TokenNameIdentifier
instanceof	TokenNameinstanceof
WildcardQueryNode	TokenNameIdentifier
||	TokenNameOR_OR
node	TokenNameIdentifier
instanceof	TokenNameinstanceof
FuzzyQueryNode	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
QueryNodeException	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
MessageImpl	TokenNameIdentifier
(	TokenNameLPAREN
QueryParserMessages	TokenNameIdentifier
.	TokenNameDOT
EMPTY_MESSAGE	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
List	TokenNameIdentifier
<	TokenNameLESS
QueryNode	TokenNameIdentifier
>	TokenNameGREATER
setChildrenOrder	TokenNameIdentifier
(	TokenNameLPAREN
List	TokenNameIdentifier
<	TokenNameLESS
QueryNode	TokenNameIdentifier
>	TokenNameGREATER
children	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
QueryNodeException	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
children	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
originalMaxClauses	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
originalMaxClauses	TokenNameIdentifier
=	TokenNameEQUAL
BooleanQuery	TokenNameIdentifier
.	TokenNameDOT
getMaxClauseCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
QueryParserWrapper	TokenNameIdentifier
getParser	TokenNameIdentifier
(	TokenNameLPAREN
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
a	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
QueryParserWrapper	TokenNameIdentifier
.	TokenNameDOT
OR_OPERATOR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
qp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Query	TokenNameIdentifier
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
getParser	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Query	TokenNameIdentifier
getQueryAllowLeadingWildcard	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
QueryParserWrapper	TokenNameIdentifier
parser	TokenNameIdentifier
=	TokenNameEQUAL
getParser	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
parser	TokenNameIdentifier
.	TokenNameDOT
setAllowLeadingWildcard	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
parser	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
q	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
s	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"Query /"	TokenNameStringLiteral
+	TokenNamePLUS
query	TokenNameIdentifier
+	TokenNamePLUS
"/ yielded /"	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"/, expecting /"	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertQueryEqualsAllowLeadingWildcard	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
getQueryAllowLeadingWildcard	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
q	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
s	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"Query /"	TokenNameStringLiteral
+	TokenNamePLUS
query	TokenNameIdentifier
+	TokenNamePLUS
"/ yielded /"	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"/, expecting /"	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
q	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
field	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
s	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"Query /"	TokenNameStringLiteral
+	TokenNamePLUS
query	TokenNameIdentifier
+	TokenNamePLUS
"/ yielded /"	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"/, expecting /"	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
escapedQuery	TokenNameIdentifier
=	TokenNameEQUAL
QueryParserWrapper	TokenNameIdentifier
.	TokenNameDOT
escape	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
escapedQuery	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"Query /"	TokenNameStringLiteral
+	TokenNamePLUS
query	TokenNameIdentifier
+	TokenNamePLUS
"/ yielded /"	TokenNameStringLiteral
+	TokenNamePLUS
escapedQuery	TokenNameIdentifier
+	TokenNamePLUS
"/, expecting /"	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
lowercase	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
allowLeadingWildcard	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
getParser	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setLowercaseExpandedTerms	TokenNameIdentifier
(	TokenNameLPAREN
lowercase	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setAllowLeadingWildcard	TokenNameIdentifier
(	TokenNameLPAREN
allowLeadingWildcard	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
q	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
s	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"WildcardQuery /"	TokenNameStringLiteral
+	TokenNamePLUS
query	TokenNameIdentifier
+	TokenNamePLUS
"/ yielded /"	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"/, expecting /"	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
lowercase	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
lowercase	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
getParser	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
q	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
s	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"WildcardQuery /"	TokenNameStringLiteral
+	TokenNamePLUS
query	TokenNameIdentifier
+	TokenNamePLUS
"/ yielded /"	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"/, expecting /"	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
Query	TokenNameIdentifier
getQueryDOA	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
a	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SimpleAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
QueryParserWrapper	TokenNameIdentifier
.	TokenNameDOT
AND_OPERATOR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
result	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
getQueryDOA	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
q	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
s	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"Query /"	TokenNameStringLiteral
+	TokenNamePLUS
query	TokenNameIdentifier
+	TokenNamePLUS
"/ yielded /"	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"/, expecting /"	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCJK	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term　term　term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsAllowLeadingWildcard	TokenNameIdentifier
(	TokenNameLPAREN
"??　??　??"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"?? ?? ??"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCJKTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
StandardAnalyzer	TokenNameIdentifier
analyzer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StandardAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BooleanQuery	TokenNameIdentifier
expected	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BooleanQuery	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TermQuery	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
"中"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
BooleanClause	TokenNameIdentifier
.	TokenNameDOT
Occur	TokenNameIdentifier
.	TokenNameDOT
SHOULD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TermQuery	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
"国"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
BooleanClause	TokenNameIdentifier
.	TokenNameDOT
Occur	TokenNameIdentifier
.	TokenNameDOT
SHOULD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
,	TokenNameCOMMA
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"中国"	TokenNameStringLiteral
,	TokenNameCOMMA
analyzer	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCJKBoostedTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
StandardAnalyzer	TokenNameIdentifier
analyzer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StandardAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BooleanQuery	TokenNameIdentifier
expected	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BooleanQuery	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
setBoost	TokenNameIdentifier
(	TokenNameLPAREN
0.5f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TermQuery	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
"中"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
BooleanClause	TokenNameIdentifier
.	TokenNameDOT
Occur	TokenNameIdentifier
.	TokenNameDOT
SHOULD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TermQuery	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
"国"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
BooleanClause	TokenNameIdentifier
.	TokenNameDOT
Occur	TokenNameIdentifier
.	TokenNameDOT
SHOULD	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
,	TokenNameCOMMA
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"中国^0.5"	TokenNameStringLiteral
,	TokenNameCOMMA
analyzer	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCJKPhrase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
StandardAnalyzer	TokenNameIdentifier
analyzer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StandardAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PhraseQuery	TokenNameIdentifier
expected	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PhraseQuery	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
"中"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
"国"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
,	TokenNameCOMMA
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
""中国""	TokenNameStringLiteral
,	TokenNameCOMMA
analyzer	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCJKBoostedPhrase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
StandardAnalyzer	TokenNameIdentifier
analyzer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StandardAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PhraseQuery	TokenNameIdentifier
expected	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PhraseQuery	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
setBoost	TokenNameIdentifier
(	TokenNameLPAREN
0.5f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
"中"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
"国"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
,	TokenNameCOMMA
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
""中国"^0.5"	TokenNameStringLiteral
,	TokenNameCOMMA
analyzer	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCJKSloppyPhrase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
StandardAnalyzer	TokenNameIdentifier
analyzer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StandardAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PhraseQuery	TokenNameIdentifier
expected	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PhraseQuery	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
setSlop	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
"中"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Term	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
"国"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
,	TokenNameCOMMA
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
""中国"~3"	TokenNameStringLiteral
,	TokenNameCOMMA
analyzer	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testSimple	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""term germ"~2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""term germ"~2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term term term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"t�rm term term"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"t�rm term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"�mlaut"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
"�mlaut"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""""	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
KeywordAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"foo:"""	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
KeywordAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"foo:"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a AND b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a +b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"(a AND b)"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a +b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"c OR (a AND b)"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"c (+a +b)"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a AND NOT b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a AND -b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a AND !b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a && b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a +b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a && ! b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a OR b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"a b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a || b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"a b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a OR !b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a OR ! b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a OR -b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"a -b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"+term -term term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+term -term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"foo:term AND field:anotherTerm"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+foo:term +anotherterm"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term AND "phrase phrase""	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+term +"phrase phrase""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""hello there""	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""hello there""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"a AND b"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
BooleanQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"hello"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
TermQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
""hello there""	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
PhraseQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"germ term^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"germ term^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"(term)^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"(germ term)^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"(germ term)^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term^2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""germ term"^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""germ term"^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""term germ"^2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""term germ"^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"(foo OR bar) AND (baz OR boo)"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+(foo bar) +(baz boo)"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"((a OR b) AND NOT c) OR d"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"(+(a b) -c) d"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"+(apple "steve jobs") -(foo bar baz)"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+(apple "steve jobs") -(foo bar baz)"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"+title:(dog OR cat) -author:"bob dole""	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+(title:dog title:cat) -author:"bob dole""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
StandardAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
QueryParserWrapper	TokenNameIdentifier
.	TokenNameDOT
OR_OPERATOR	TokenNameIdentifier
,	TokenNameCOMMA
qp	TokenNameIdentifier
.	TokenNameDOT
getDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
QueryParserWrapper	TokenNameIdentifier
.	TokenNameDOT
AND_OPERATOR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
QueryParserWrapper	TokenNameIdentifier
.	TokenNameDOT
AND_OPERATOR	TokenNameIdentifier
,	TokenNameCOMMA
qp	TokenNameIdentifier
.	TokenNameDOT
getDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
QueryParserWrapper	TokenNameIdentifier
.	TokenNameDOT
OR_OPERATOR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
QueryParserWrapper	TokenNameIdentifier
.	TokenNameDOT
OR_OPERATOR	TokenNameIdentifier
,	TokenNameCOMMA
qp	TokenNameIdentifier
.	TokenNameDOT
getDefaultOperator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testPunct	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a&b"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a&b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a&&b"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a&&b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
".NET"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
".NET"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testSlop	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""term germ"~2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""term germ"~2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""term germ"~2 flork"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""term germ"~2 flork"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""term"~2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"" "~2 germ"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"germ"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""term germ"~2^2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""term germ"~2^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testNumber	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"3"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term 1.0 1 2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term term1 term2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StandardAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"3"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"3"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term 1.0 1 2"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"term 1.0 1 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term term1 term2"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"term term1 term2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testWildcard	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term*"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term*^2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term*^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term~"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term~0.7"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term~0.7"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term~^2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term~0.5^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term^2~"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term~0.5^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term*germ"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term*germ"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term*germ^3"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"term*germ^3.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term*"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
PrefixQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term*^2"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
PrefixQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term~"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
FuzzyQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term~0.7"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
FuzzyQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
FuzzyQuery	TokenNameIdentifier
fq	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
FuzzyQuery	TokenNameIdentifier
)	TokenNameRPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term~0.7"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
0.7f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
fq	TokenNameIdentifier
.	TokenNameDOT
getMinSimilarity	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0.1f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
FuzzyQuery	TokenNameIdentifier
.	TokenNameDOT
defaultPrefixLength	TokenNameIdentifier
,	TokenNameCOMMA
fq	TokenNameIdentifier
.	TokenNameDOT
getPrefixLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fq	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
FuzzyQuery	TokenNameIdentifier
)	TokenNameRPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term~"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
0.5f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
fq	TokenNameIdentifier
.	TokenNameDOT
getMinSimilarity	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0.1f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
FuzzyQuery	TokenNameIdentifier
.	TokenNameDOT
defaultPrefixLength	TokenNameIdentifier
,	TokenNameCOMMA
fq	TokenNameIdentifier
.	TokenNameDOT
getPrefixLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
"term~1.1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term*germ"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
WildcardQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Term*"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term*"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Term*"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"TERM*"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term*"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Term*"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"Term*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"TERM*"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"TERM*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Te?m"	TokenNameStringLiteral
,	TokenNameCOMMA
"te?m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"te?m"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"te?m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Te?m"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"te?m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"TE?M"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"te?m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Te?m*gerM"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"te?m*germ"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"te?m"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"te?m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Te?m"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"Te?m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"TE?M"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"TE?M"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Te?m*gerM"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"Te?m*gerM"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Term~"	TokenNameStringLiteral
,	TokenNameCOMMA
"term~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Term~"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"term~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Term~"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"Term~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[A TO C]"	TokenNameStringLiteral
,	TokenNameCOMMA
"[a TO c]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[A TO C]"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"[a TO c]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[A TO C]"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
"[A TO C]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"*Term"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"*term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fail	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ParseException	TokenNameIdentifier
pe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"?Term"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"?term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fail	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ParseException	TokenNameIdentifier
pe	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"*Term"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"*term"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertWildcardQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"?Term"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
"?term"	TokenNameStringLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testLeadingWildcardType	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
getParser	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setAllowLeadingWildcard	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
WildcardQuery	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
,	TokenNameCOMMA
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"t*erm*"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
WildcardQuery	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
,	TokenNameCOMMA
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"?term*"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
WildcardQuery	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
,	TokenNameCOMMA
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"*term*"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testQPA	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term term^3.0 term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"term term^3.0 term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term stop^3.0 term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term term term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"term term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term +stop term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term -stop term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"drop AND (stop) AND roll"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"+drop +roll"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term +(stop) term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term -(stop) term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"term term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"drop AND stop AND roll"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"+drop +roll"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term phrase term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"term (phrase1 phrase2) term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term AND NOT phrase term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
"+term -(phrase1 phrase2) term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"stop^3"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"stop"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"(stop)^3"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"((stop))^3"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"(stop^3)"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"((stop)^3)"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"(stop)"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"((stop))"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term term term"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
BooleanQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"term +stop"	TokenNameStringLiteral
,	TokenNameCOMMA
qpAnalyzer	TokenNameIdentifier
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
TermQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a TO z]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"[a TO z]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
MultiTermQuery	TokenNameIdentifier
.	TokenNameDOT
CONSTANT_SCORE_AUTO_REWRITE_DEFAULT	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
TermRangeQuery	TokenNameIdentifier
)	TokenNameRPAREN
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
"[ a TO z]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getRewriteMethod	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
SimpleAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setMultiTermRewriteMethod	TokenNameIdentifier
(	TokenNameLPAREN
MultiTermQuery	TokenNameIdentifier
.	TokenNameDOT
SCORING_BOOLEAN_QUERY_REWRITE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
MultiTermQuery	TokenNameIdentifier
.	TokenNameDOT
SCORING_BOOLEAN_QUERY_REWRITE	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
TermRangeQuery	TokenNameIdentifier
)	TokenNameRPAREN
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"[ a TO z]"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getRewriteMethod	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a TO z ]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"[a TO z]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"{ a TO z}"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"{a TO z}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"{ a TO z }"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"{a TO z}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"{ a TO z }^2.0"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"{a TO z}^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a TO z] OR bar"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"[a TO z] bar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a TO z] AND bar"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+[a TO z] +bar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"( bar blar { a TO z}) "	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"bar blar {a TO z}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"gack ( bar blar { a TO z}) "	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"gack (bar blar {a TO z})"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFarsiRangeCollating	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Directory	TokenNameIdentifier
ramDir	TokenNameIdentifier
=	TokenNameEQUAL
newDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexWriter	TokenNameIdentifier
iw	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexWriter	TokenNameIdentifier
(	TokenNameLPAREN
ramDir	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
IndexWriter	TokenNameIdentifier
.	TokenNameDOT
MaxFieldLength	TokenNameIdentifier
.	TokenNameDOT
LIMITED	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Document	TokenNameIdentifier
doc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Document	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
doc	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
newField	TokenNameIdentifier
(	TokenNameLPAREN
"content"	TokenNameStringLiteral
,	TokenNameCOMMA
"ساب"	TokenNameStringLiteral
,	TokenNameCOMMA
Field	TokenNameIdentifier
.	TokenNameDOT
Store	TokenNameIdentifier
.	TokenNameDOT
YES	TokenNameIdentifier
,	TokenNameCOMMA
Field	TokenNameIdentifier
.	TokenNameDOT
Index	TokenNameIdentifier
.	TokenNameDOT
NOT_ANALYZED	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
iw	TokenNameIdentifier
.	TokenNameDOT
addDocument	TokenNameIdentifier
(	TokenNameLPAREN
doc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
iw	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexSearcher	TokenNameIdentifier
is	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexSearcher	TokenNameIdentifier
(	TokenNameLPAREN
ramDir	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"content"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Collator	TokenNameIdentifier
c	TokenNameIdentifier
=	TokenNameEQUAL
Collator	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
"ar"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setRangeCollator	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setMultiTermRewriteMethod	TokenNameIdentifier
(	TokenNameLPAREN
MultiTermQuery	TokenNameIdentifier
.	TokenNameDOT
CONSTANT_SCORE_FILTER_REWRITE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ScoreDoc	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
result	TokenNameIdentifier
=	TokenNameEQUAL
is	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"[ د TO ژ ]"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"The index Term should not be included."	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
is	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"[ س TO ظ ]"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"The index Term should be included."	TokenNameStringLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setMultiTermRewriteMethod	TokenNameIdentifier
(	TokenNameLPAREN
MultiTermQuery	TokenNameIdentifier
.	TokenNameDOT
SCORING_BOOLEAN_QUERY_REWRITE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
is	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"[ د TO ژ ]"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"The index Term should not be included."	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
is	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"[ س TO ظ ]"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"The index Term should be included."	TokenNameStringLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
is	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ramDir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
" "	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"""	TokenNameStringLiteral
+	TokenNamePLUS
s	TokenNameIdentifier
+	TokenNamePLUS
"""	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
s	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getLegacyDate	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
DateFormat	TokenNameIdentifier
df	TokenNameIdentifier
=	TokenNameEQUAL
DateFormat	TokenNameIdentifier
.	TokenNameDOT
getDateInstance	TokenNameIdentifier
(	TokenNameLPAREN
DateFormat	TokenNameIdentifier
.	TokenNameDOT
SHORT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
DateField	TokenNameIdentifier
.	TokenNameDOT
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
df	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getDate	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
resolution	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
DateFormat	TokenNameIdentifier
df	TokenNameIdentifier
=	TokenNameEQUAL
DateFormat	TokenNameIdentifier
.	TokenNameDOT
getDateInstance	TokenNameIdentifier
(	TokenNameLPAREN
DateFormat	TokenNameIdentifier
.	TokenNameDOT
SHORT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
getDate	TokenNameIdentifier
(	TokenNameLPAREN
df	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
resolution	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getDate	TokenNameIdentifier
(	TokenNameLPAREN
Date	TokenNameIdentifier
d	TokenNameIdentifier
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
resolution	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
resolution	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DateField	TokenNameIdentifier
.	TokenNameDOT
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
DateTools	TokenNameIdentifier
.	TokenNameDOT
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
,	TokenNameCOMMA
resolution	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getLocalizedDate	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
day	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
DateFormat	TokenNameIdentifier
df	TokenNameIdentifier
=	TokenNameEQUAL
DateFormat	TokenNameIdentifier
.	TokenNameDOT
getDateInstance	TokenNameIdentifier
(	TokenNameLPAREN
DateFormat	TokenNameIdentifier
.	TokenNameDOT
SHORT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Calendar	TokenNameIdentifier
calendar	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calendar	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calendar	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
,	TokenNameCOMMA
month	TokenNameIdentifier
,	TokenNameCOMMA
day	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calendar	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
HOUR_OF_DAY	TokenNameIdentifier
,	TokenNameCOMMA
23	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calendar	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MINUTE	TokenNameIdentifier
,	TokenNameCOMMA
59	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calendar	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
SECOND	TokenNameIdentifier
,	TokenNameCOMMA
59	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
calendar	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
,	TokenNameCOMMA
999	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
df	TokenNameIdentifier
.	TokenNameDOT
format	TokenNameIdentifier
(	TokenNameLPAREN
calendar	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testLegacyDateRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
startDate	TokenNameIdentifier
=	TokenNameEQUAL
getLocalizedDate	TokenNameIdentifier
(	TokenNameLPAREN
2002	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
endDate	TokenNameIdentifier
=	TokenNameEQUAL
getLocalizedDate	TokenNameIdentifier
(	TokenNameLPAREN
2002	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Calendar	TokenNameIdentifier
endDateExpected	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
2002	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
23	TokenNameIntegerLiteral
,	TokenNameCOMMA
59	TokenNameIntegerLiteral
,	TokenNameCOMMA
59	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
,	TokenNameCOMMA
999	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ "	TokenNameStringLiteral
+	TokenNamePLUS
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
startDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" TO "	TokenNameStringLiteral
+	TokenNamePLUS
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
endDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"["	TokenNameStringLiteral
+	TokenNamePLUS
getLegacyDate	TokenNameIdentifier
(	TokenNameLPAREN
startDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" TO "	TokenNameStringLiteral
+	TokenNamePLUS
DateField	TokenNameIdentifier
.	TokenNameDOT
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
"]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"{  "	TokenNameStringLiteral
+	TokenNamePLUS
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
startDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"    "	TokenNameStringLiteral
+	TokenNamePLUS
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
endDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"   }"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"{"	TokenNameStringLiteral
+	TokenNamePLUS
getLegacyDate	TokenNameIdentifier
(	TokenNameLPAREN
startDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" TO "	TokenNameStringLiteral
+	TokenNamePLUS
getLegacyDate	TokenNameIdentifier
(	TokenNameLPAREN
endDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDateRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
startDate	TokenNameIdentifier
=	TokenNameEQUAL
getLocalizedDate	TokenNameIdentifier
(	TokenNameLPAREN
2002	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
endDate	TokenNameIdentifier
=	TokenNameEQUAL
getLocalizedDate	TokenNameIdentifier
(	TokenNameLPAREN
2002	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Calendar	TokenNameIdentifier
endDateExpected	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GregorianCalendar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
2002	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
23	TokenNameIntegerLiteral
,	TokenNameCOMMA
59	TokenNameIntegerLiteral
,	TokenNameCOMMA
59	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
Calendar	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
,	TokenNameCOMMA
999	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
defaultField	TokenNameIdentifier
=	TokenNameEQUAL
"default"	TokenNameStringLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
monthField	TokenNameIdentifier
=	TokenNameEQUAL
"month"	TokenNameStringLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
hourField	TokenNameIdentifier
=	TokenNameEQUAL
"hour"	TokenNameStringLiteral
;	TokenNameSEMICOLON
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
SimpleAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertDateRangeQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
defaultField	TokenNameIdentifier
,	TokenNameCOMMA
startDate	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDateResolution	TokenNameIdentifier
(	TokenNameLPAREN
monthField	TokenNameIdentifier
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
MONTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertDateRangeQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
defaultField	TokenNameIdentifier
,	TokenNameCOMMA
startDate	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDateResolution	TokenNameIdentifier
(	TokenNameLPAREN
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setDateResolution	TokenNameIdentifier
(	TokenNameLPAREN
hourField	TokenNameIdentifier
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
HOUR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertDateRangeQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
defaultField	TokenNameIdentifier
,	TokenNameCOMMA
startDate	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
MILLISECOND	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertDateRangeQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
monthField	TokenNameIdentifier
,	TokenNameCOMMA
startDate	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
MONTH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertDateRangeQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
hourField	TokenNameIdentifier
,	TokenNameCOMMA
startDate	TokenNameIdentifier
,	TokenNameCOMMA
endDate	TokenNameIdentifier
,	TokenNameCOMMA
endDateExpected	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
.	TokenNameDOT
HOUR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertDateRangeQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
startDate	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
endDate	TokenNameIdentifier
,	TokenNameCOMMA
Date	TokenNameIdentifier
endDateInclusive	TokenNameIdentifier
,	TokenNameCOMMA
DateTools	TokenNameIdentifier
.	TokenNameDOT
Resolution	TokenNameIdentifier
resolution	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
+	TokenNamePLUS
":["	TokenNameStringLiteral
+	TokenNamePLUS
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
startDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" TO "	TokenNameStringLiteral
+	TokenNamePLUS
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
endDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"]"	TokenNameStringLiteral
,	TokenNameCOMMA
"["	TokenNameStringLiteral
+	TokenNamePLUS
getDate	TokenNameIdentifier
(	TokenNameLPAREN
startDate	TokenNameIdentifier
,	TokenNameCOMMA
resolution	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" TO "	TokenNameStringLiteral
+	TokenNamePLUS
getDate	TokenNameIdentifier
(	TokenNameLPAREN
endDateInclusive	TokenNameIdentifier
,	TokenNameCOMMA
resolution	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
qp	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
+	TokenNamePLUS
":{"	TokenNameStringLiteral
+	TokenNamePLUS
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
startDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" TO "	TokenNameStringLiteral
+	TokenNamePLUS
escapeDateString	TokenNameIdentifier
(	TokenNameLPAREN
endDate	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"}"	TokenNameStringLiteral
,	TokenNameCOMMA
"{"	TokenNameStringLiteral
+	TokenNamePLUS
getDate	TokenNameIdentifier
(	TokenNameLPAREN
startDate	TokenNameIdentifier
,	TokenNameCOMMA
resolution	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" TO "	TokenNameStringLiteral
+	TokenNamePLUS
getDate	TokenNameIdentifier
(	TokenNameLPAREN
endDate	TokenNameIdentifier
,	TokenNameCOMMA
resolution	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
"}"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testEscaped	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"\a"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a\-b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a-b:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a\+b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a+b:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a\:b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a\\b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\b:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\-c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b-c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\+c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b+c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\\c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b\c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\-c*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b-c*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\+c*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b+c*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\:c*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b:c*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\\c*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b\c*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\-?c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b-?c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\+?c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b+?c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\:?c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b:?c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\\?c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b\?c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\-c~"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b-c~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\+c~"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b+c~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\:c~"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b:c~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\\c~"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a:b\c~0.5"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a\- TO a\+ ]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"[a- TO a+]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a\: TO a\~ ]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"[a: TO a~]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a\\ TO a\* ]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"[a\ TO a*]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"["c\:\\temp\\\~foo0.txt" TO "c\:\\temp\\\~foo9.txt"]"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"[c:\temp\~foo0.txt TO c:\temp\~foo9.txt]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a\\\+b"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\+b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a \"b c\" d"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a "b c" d"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""a \"b c\" d""	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
""a "b c" d""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""a \+b c d""	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
""a +b c d""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"c\:\\temp\\\~foo.txt"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"c:\temp\~foo.txt"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
"XY\"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a\u0062c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"abc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"XY\u005a"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"XYZ"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"XY\u005A"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"XYZ"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
""a \\\u0028\u0062\" c""	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
""a \(b" c""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
"XY\u005G"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
"XY\u005"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"(item:\\ item:ABCD\\)"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"item:\ item:ABCD\"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
"(item:\\ item:ABCD\\))"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"\*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"\\"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"\"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
"\"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"("a\\") or ("b")"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\ or b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testQueryStringEscaping	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a-b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\-b\:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a+b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\+b\:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a\b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\\b\:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b-c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\-c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b+c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\+c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b:c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\:c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\\c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b-c*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\-c\*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b+c*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\+c\*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b:c*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\:c\*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\\c*"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\\\\c\*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b-?c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\-\?c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b+?c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\+\?c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b:?c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\:\?c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b?c"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\?c"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b-c~"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\-c\~"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b+c~"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\+c\~"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b:c~"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\:c\~"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"a:b\c~"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"a\:b\\c\~"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a - TO a+ ]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"\[ a \- TO a\+ \]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a : TO a~ ]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"\[ a \: TO a\~ \]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"[ a\ TO a* ]"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"\[ a\\ TO a\* \]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"|| abc ||"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"\|\| abc \|\|"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEscapedQueryEquals	TokenNameIdentifier
(	TokenNameLPAREN
"&& abc &&"	TokenNameStringLiteral
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
"\&\& abc \&\&"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTabNewlineCarriageReturn	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"+weltbank +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"+weltbank +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank  +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank   +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"+weltbank+worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank  +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"+weltbank +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank  +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank   +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank    +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"+weltbank +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank  +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"weltbank   +worlbank"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+weltbank +worlbank"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testSimpleDAO	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"term term term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+term +term +term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"term +term term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+term +term +term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"term term +term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+term +term +term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"term +term +term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"+term +term +term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertQueryEqualsDOA	TokenNameIdentifier
(	TokenNameLPAREN
"-term term term"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"-term +term +term"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBoost	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
StandardAnalyzer	TokenNameIdentifier
oneStopAnalyzer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StandardAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
Collections	TokenNameIdentifier
.	TokenNameDOT
singleton	TokenNameIdentifier
(	TokenNameLPAREN
"on"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
oneStopAnalyzer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"on^1.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
""hello"^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
.	TokenNameDOT
getBoost	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
2.0	TokenNameDoubleLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
0.5	TokenNameDoubleLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"hello^2.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
.	TokenNameDOT
getBoost	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
2.0	TokenNameDoubleLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
0.5	TokenNameDoubleLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
""on"^1.0"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
QueryParserWrapper	TokenNameIdentifier
qp2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
StandardAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
q	TokenNameIdentifier
=	TokenNameEQUAL
qp2	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"the^3"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
q	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
1.0f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
q	TokenNameIdentifier
.	TokenNameDOT
getBoost	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0.01f	TokenNameFloatingPointLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
queryString	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
queryString	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ParseException	TokenNameIdentifier
expected	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fail	TokenNameIdentifier
(	TokenNameLPAREN
"ParseException expected, not thrown"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
""some phrase"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
"(foo bar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
"foo bar))"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
"field:term:with:colon some more terms"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
"(sub query)^5.0^2.0 plus more"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertParseException	TokenNameIdentifier
(	TokenNameLPAREN
"secret AND illegal) AND access:confidential"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCustomQueryParserWildcard	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
new	TokenNamenew
QPTestParser	TokenNameIdentifier
(	TokenNameLPAREN
"contents"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"a?t"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fail	TokenNameIdentifier
(	TokenNameLPAREN
"Wildcard queries should not be allowed"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ParseException	TokenNameIdentifier
expected	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCustomQueryParserFuzzy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
new	TokenNamenew
QPTestParser	TokenNameIdentifier
(	TokenNameLPAREN
"contents"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"xunit~"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fail	TokenNameIdentifier
(	TokenNameLPAREN
"Fuzzy queries should not be allowed"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ParseException	TokenNameIdentifier
expected	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBooleanQuery	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
BooleanQuery	TokenNameIdentifier
.	TokenNameDOT
setMaxClauseCount	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"one two three"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fail	TokenNameIdentifier
(	TokenNameLPAREN
"ParseException expected due to too many boolean clauses"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ParseException	TokenNameIdentifier
expected	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testPrecedence	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Query	TokenNameIdentifier
query1	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"A AND B OR C AND D"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Query	TokenNameIdentifier
query2	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"+A +B +C +D"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
query1	TokenNameIdentifier
,	TokenNameCOMMA
query2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testLocalDateFormat	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
,	TokenNameCOMMA
ParseException	TokenNameIdentifier
{	TokenNameLBRACE
Directory	TokenNameIdentifier
ramDir	TokenNameIdentifier
=	TokenNameEQUAL
newDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexWriter	TokenNameIdentifier
iw	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexWriter	TokenNameIdentifier
(	TokenNameLPAREN
ramDir	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
IndexWriter	TokenNameIdentifier
.	TokenNameDOT
MaxFieldLength	TokenNameIdentifier
.	TokenNameDOT
LIMITED	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addDateDoc	TokenNameIdentifier
(	TokenNameLPAREN
"a"	TokenNameStringLiteral
,	TokenNameCOMMA
2005	TokenNameIntegerLiteral
,	TokenNameCOMMA
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
15	TokenNameIntegerLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
iw	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
addDateDoc	TokenNameIdentifier
(	TokenNameLPAREN
"b"	TokenNameStringLiteral
,	TokenNameCOMMA
2005	TokenNameIntegerLiteral
,	TokenNameCOMMA
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
22	TokenNameIntegerLiteral
,	TokenNameCOMMA
15	TokenNameIntegerLiteral
,	TokenNameCOMMA
00	TokenNameIntegerLiteral
,	TokenNameCOMMA
iw	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
iw	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexSearcher	TokenNameIdentifier
is	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexSearcher	TokenNameIdentifier
(	TokenNameLPAREN
ramDir	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertHits	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
"[12/1/2005 TO 12/3/2005]"	TokenNameStringLiteral
,	TokenNameCOMMA
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertHits	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
"[12/1/2005 TO 12/4/2005]"	TokenNameStringLiteral
,	TokenNameCOMMA
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertHits	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
"[12/3/2005 TO 12/4/2005]"	TokenNameStringLiteral
,	TokenNameCOMMA
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertHits	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
"{12/1/2005 TO 12/3/2005}"	TokenNameStringLiteral
,	TokenNameCOMMA
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertHits	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
"{12/1/2005 TO 12/4/2005}"	TokenNameStringLiteral
,	TokenNameCOMMA
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertHits	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
"{12/3/2005 TO 12/4/2005}"	TokenNameStringLiteral
,	TokenNameCOMMA
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
is	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ramDir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testStarParsing	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testStopwords	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"a"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
StopAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
StopFilter	TokenNameIdentifier
.	TokenNameDOT
makeStopSet	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
"the"	TokenNameStringLiteral
,	TokenNameCOMMA
"foo"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Query	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"a:the OR a:foo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
"result is null and it shouldn't be"	TokenNameStringLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"result is not a BooleanQuery"	TokenNameStringLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
instanceof	TokenNameinstanceof
BooleanQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
BooleanQuery	TokenNameIdentifier
)	TokenNameRPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
clauses	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" does not equal: "	TokenNameStringLiteral
+	TokenNamePLUS
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
BooleanQuery	TokenNameIdentifier
)	TokenNameRPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
clauses	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"a:woo OR a:the"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
"result is null and it shouldn't be"	TokenNameStringLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"result is not a TermQuery"	TokenNameStringLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
instanceof	TokenNameinstanceof
TermQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
"result is null and it shouldn't be"	TokenNameStringLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"result is not a BooleanQuery"	TokenNameStringLiteral
,	TokenNameCOMMA
result	TokenNameIdentifier
instanceof	TokenNameinstanceof
BooleanQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
VERBOSE	TokenNameIdentifier
)	TokenNameRPAREN
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Result: "	TokenNameStringLiteral
+	TokenNamePLUS
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
BooleanQuery	TokenNameIdentifier
)	TokenNameRPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
clauses	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" does not equal: "	TokenNameStringLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
BooleanQuery	TokenNameIdentifier
)	TokenNameRPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
clauses	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testPositionIncrement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"a"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
StopAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
StopFilter	TokenNameIdentifier
.	TokenNameDOT
makeStopSet	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
"the"	TokenNameStringLiteral
,	TokenNameCOMMA
"in"	TokenNameStringLiteral
,	TokenNameCOMMA
"are"	TokenNameStringLiteral
,	TokenNameCOMMA
"this"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setEnablePositionIncrements	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
qtxt	TokenNameIdentifier
=	TokenNameEQUAL
""the words in poisitions pos02578 are stopped in this phrasequery""	TokenNameStringLiteral
;	TokenNameSEMICOLON
int	TokenNameint
expectedPositions	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
9	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
PhraseQuery	TokenNameIdentifier
pq	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
PhraseQuery	TokenNameIdentifier
)	TokenNameRPAREN
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
qtxt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Term	TokenNameIdentifier
t	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
pq	TokenNameIdentifier
.	TokenNameDOT
getTerms	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
pos	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
pq	TokenNameIdentifier
.	TokenNameDOT
getPositions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
t	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"term "	TokenNameStringLiteral
+	TokenNamePLUS
i	TokenNameIdentifier
+	TokenNamePLUS
" = "	TokenNameStringLiteral
+	TokenNamePLUS
t	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
" has wrong term-position!"	TokenNameStringLiteral
,	TokenNameCOMMA
expectedPositions	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
pos	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testMatchAllDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"field"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
MatchAllDocsQuery	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"*:*"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
MatchAllDocsQuery	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"(*:*)"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BooleanQuery	TokenNameIdentifier
bq	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
BooleanQuery	TokenNameIdentifier
)	TokenNameRPAREN
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
"+*:* -*:*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
bq	TokenNameIdentifier
.	TokenNameDOT
getClauses	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
MatchAllDocsQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
bq	TokenNameIdentifier
.	TokenNameDOT
getClauses	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
getQuery	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
instanceof	TokenNameinstanceof
MatchAllDocsQuery	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
assertHits	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
expected	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
IndexSearcher	TokenNameIdentifier
is	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ParseException	TokenNameIdentifier
,	TokenNameCOMMA
IOException	TokenNameIdentifier
{	TokenNameLBRACE
QueryParserWrapper	TokenNameIdentifier
qp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
QueryParserWrapper	TokenNameIdentifier
(	TokenNameLPAREN
"date"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
qp	TokenNameIdentifier
.	TokenNameDOT
setLocale	TokenNameIdentifier
(	TokenNameLPAREN
Locale	TokenNameIdentifier
.	TokenNameDOT
ENGLISH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Query	TokenNameIdentifier
q	TokenNameIdentifier
=	TokenNameEQUAL
qp	TokenNameIdentifier
.	TokenNameDOT
parse	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ScoreDoc	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
hits	TokenNameIdentifier
=	TokenNameEQUAL
is	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
(	TokenNameLPAREN
q	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
1000	TokenNameIntegerLiteral
)	TokenNameRPAREN
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
,	TokenNameCOMMA
hits	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addDateDoc	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
content	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
year	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
month	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
day	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
hour	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minute	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
second	TokenNameIdentifier
,	TokenNameCOMMA
IndexWriter	TokenNameIdentifier
iw	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
Document	TokenNameIdentifier
d	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Document	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
d	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
newField	TokenNameIdentifier
(	TokenNameLPAREN
"f"	TokenNameStringLiteral
,	TokenNameCOMMA
content	TokenNameIdentifier
,	TokenNameCOMMA
Field	TokenNameIdentifier
.	TokenNameDOT
Store	TokenNameIdentifier
.	TokenNameDOT
YES	TokenNameIdentifier
,	TokenNameCOMMA
Field	TokenNameIdentifier
.	TokenNameDOT
Index	TokenNameIdentifier
.	TokenNameDOT
ANALYZED	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Calendar	TokenNameIdentifier
cal	TokenNameIdentifier
=	TokenNameEQUAL
Calendar	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
Locale	TokenNameIdentifier
.	TokenNameDOT
ENGLISH	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cal	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
year	TokenNameIdentifier
,	TokenNameCOMMA
month	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
day	TokenNameIdentifier
,	TokenNameCOMMA
hour	TokenNameIdentifier
,	TokenNameCOMMA
minute	TokenNameIdentifier
,	TokenNameCOMMA
second	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
d	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
newField	TokenNameIdentifier
(	TokenNameLPAREN
"date"	TokenNameStringLiteral
,	TokenNameCOMMA
DateField	TokenNameIdentifier
.	TokenNameDOT
dateToString	TokenNameIdentifier
(	TokenNameLPAREN
cal	TokenNameIdentifier
.	TokenNameDOT
getTime	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
Field	TokenNameIdentifier
.	TokenNameDOT
Store	TokenNameIdentifier
.	TokenNameDOT
YES	TokenNameIdentifier
,	TokenNameCOMMA
Field	TokenNameIdentifier
.	TokenNameDOT
Index	TokenNameIdentifier
.	TokenNameDOT
NOT_ANALYZED	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
iw	TokenNameIdentifier
.	TokenNameDOT
addDocument	TokenNameIdentifier
(	TokenNameLPAREN
d	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
tearDown	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
BooleanQuery	TokenNameIdentifier
.	TokenNameDOT
setMaxClauseCount	TokenNameIdentifier
(	TokenNameLPAREN
originalMaxClauses	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
super	TokenNamesuper
.	TokenNameDOT
tearDown	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
