package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
surround	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
StringReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
surround	TokenNameIdentifier
.	TokenNameDOT
query	TokenNameIdentifier
.	TokenNameDOT
SrndQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
surround	TokenNameIdentifier
.	TokenNameDOT
query	TokenNameIdentifier
.	TokenNameDOT
FieldsQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
surround	TokenNameIdentifier
.	TokenNameDOT
query	TokenNameIdentifier
.	TokenNameDOT
OrQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
surround	TokenNameIdentifier
.	TokenNameDOT
query	TokenNameIdentifier
.	TokenNameDOT
AndQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
surround	TokenNameIdentifier
.	TokenNameDOT
query	TokenNameIdentifier
.	TokenNameDOT
NotQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
surround	TokenNameIdentifier
.	TokenNameDOT
query	TokenNameIdentifier
.	TokenNameDOT
DistanceQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
surround	TokenNameIdentifier
.	TokenNameDOT
query	TokenNameIdentifier
.	TokenNameDOT
SrndTermQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
surround	TokenNameIdentifier
.	TokenNameDOT
query	TokenNameIdentifier
.	TokenNameDOT
SrndPrefixQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
queryParser	TokenNameIdentifier
.	TokenNameDOT
surround	TokenNameIdentifier
.	TokenNameDOT
query	TokenNameIdentifier
.	TokenNameDOT
SrndTruncQuery	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
QueryParserTokenManager	TokenNameIdentifier
implements	TokenNameimplements
QueryParserConstants	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
PrintStream	TokenNameIdentifier
debugStream	TokenNameIdentifier
=	TokenNameEQUAL
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
setDebugStream	TokenNameIdentifier
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
PrintStream	TokenNameIdentifier
ds	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
debugStream	TokenNameIdentifier
=	TokenNameEQUAL
ds	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
jjStopStringLiteralDfa_1	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
pos	TokenNameIdentifier
,	TokenNameCOMMA
long	TokenNamelong
active0	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
pos	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
jjStartNfa_1	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
pos	TokenNameIdentifier
,	TokenNameCOMMA
long	TokenNamelong
active0	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
jjMoveNfa_1	TokenNameIdentifier
(	TokenNameLPAREN
jjStopStringLiteralDfa_1	TokenNameIdentifier
(	TokenNameLPAREN
pos	TokenNameIdentifier
,	TokenNameCOMMA
active0	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
pos	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
jjStopAtPos	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
pos	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
kind	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
jjmatchedKind	TokenNameIdentifier
=	TokenNameEQUAL
kind	TokenNameIdentifier
;	TokenNameSEMICOLON
jjmatchedPos	TokenNameIdentifier
=	TokenNameEQUAL
pos	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
pos	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
jjMoveStringLiteralDfa0_1	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
curChar	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
40	TokenNameIntegerLiteral
:	TokenNameCOLON
return	TokenNamereturn
jjStopAtPos	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
41	TokenNameIntegerLiteral
:	TokenNameCOLON
return	TokenNamereturn
jjStopAtPos	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
44	TokenNameIntegerLiteral
:	TokenNameCOLON
return	TokenNamereturn
jjStopAtPos	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
15	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
58	TokenNameIntegerLiteral
:	TokenNameCOLON
return	TokenNamereturn
jjStopAtPos	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
94	TokenNameIntegerLiteral
:	TokenNameCOLON
return	TokenNamereturn
jjStopAtPos	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
17	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
return	TokenNamereturn
jjMoveNfa_1	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
jjbitVec0	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0xfffffffffffffffeL	TokenNameLongLiteral
,	TokenNameCOMMA
0xffffffffffffffffL	TokenNameLongLiteral
,	TokenNameCOMMA
0xffffffffffffffffL	TokenNameLongLiteral
,	TokenNameCOMMA
0xffffffffffffffffL	TokenNameLongLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
jjbitVec2	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0x0L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0L	TokenNameLongLiteral
,	TokenNameCOMMA
0xffffffffffffffffL	TokenNameLongLiteral
,	TokenNameCOMMA
0xffffffffffffffffL	TokenNameLongLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
jjMoveNfa_1	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
startState	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
curPos	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
startsAt	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjnewStateCnt	TokenNameIdentifier
=	TokenNameEQUAL
38	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
startState	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
kind	TokenNameIdentifier
=	TokenNameEQUAL
0x7fffffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
jjround	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x7fffffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
ReInitRounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
<	TokenNameLESS
64	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
l	TokenNameIdentifier
=	TokenNameEQUAL
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
curChar	TokenNameIdentifier
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
0	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x7bffe8faffffd9ffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
22	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x100002600L	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
7	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
34	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x3fc000000000000L	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
11	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
49	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjCheckNAddTwoStates	TokenNameIdentifier
(	TokenNameLPAREN
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
21	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
19	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x3fc000000000000L	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
11	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
20	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x3ff000000000000L	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
jjCheckNAdd	TokenNameIdentifier
(	TokenNameLPAREN
17	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
21	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x3ff000000000000L	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
jjCheckNAdd	TokenNameIdentifier
(	TokenNameLPAREN
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
22	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
49	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjCheckNAddTwoStates	TokenNameIdentifier
(	TokenNameLPAREN
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
21	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
23	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
34	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
24	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0xfffffffbffffffffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
jjCheckNAddTwoStates	TokenNameIdentifier
(	TokenNameLPAREN
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
25	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
25	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
34	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
26	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
26	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
42	TokenNameIntegerLiteral
&&	TokenNameAND_AND
kind	TokenNameIdentifier
>	TokenNameGREATER
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
18	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
27	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0xfffffffbffffffffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
29	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
34	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
30	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
34	TokenNameIntegerLiteral
&&	TokenNameAND_AND
kind	TokenNameIdentifier
>	TokenNameGREATER
19	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
19	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
31	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x7bffe8faffffd9ffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
22	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
32	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x7bffe8faffffd9ffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
jjCheckNAddTwoStates	TokenNameIdentifier
(	TokenNameLPAREN
32	TokenNameIntegerLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
33	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
42	TokenNameIntegerLiteral
&&	TokenNameAND_AND
kind	TokenNameIdentifier
>	TokenNameGREATER
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
34	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x7bffe8faffffd9ffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
jjCheckNAddTwoStates	TokenNameIdentifier
(	TokenNameLPAREN
34	TokenNameIntegerLiteral
,	TokenNameCOMMA
35	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
35	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x8000040000000000L	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
21	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
21	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjCheckNAddTwoStates	TokenNameIdentifier
(	TokenNameLPAREN
35	TokenNameIntegerLiteral
,	TokenNameCOMMA
36	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
36	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0xfbffecfaffffd9ffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
21	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
21	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjCheckNAdd	TokenNameIdentifier
(	TokenNameLPAREN
36	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
37	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x7bffe8faffffd9ffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
22	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjCheckNAdd	TokenNameIdentifier
(	TokenNameLPAREN
37	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
startsAt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
<	TokenNameLESS
128	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
l	TokenNameIdentifier
=	TokenNameEQUAL
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
curChar	TokenNameIdentifier
&	TokenNameAND
077	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
0	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0xffffffffbfffffffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
22	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x400000004000L	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
12	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x80000000800000L	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
11	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
11	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
97	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
65	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
111	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
79	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
110	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
15	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
78	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
12	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
82	TokenNameIntegerLiteral
&&	TokenNameAND_AND
kind	TokenNameIdentifier
>	TokenNameGREATER
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
79	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
114	TokenNameIntegerLiteral
&&	TokenNameAND_AND
kind	TokenNameIdentifier
>	TokenNameGREATER
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
4	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
111	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
5	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
68	TokenNameIntegerLiteral
&&	TokenNameAND_AND
kind	TokenNameIdentifier
>	TokenNameGREATER
9	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
6	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
78	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
7	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
65	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
8	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
100	TokenNameIntegerLiteral
&&	TokenNameAND_AND
kind	TokenNameIdentifier
>	TokenNameGREATER
9	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
9	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
110	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
10	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
97	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
9	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
11	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
84	TokenNameIntegerLiteral
&&	TokenNameAND_AND
kind	TokenNameIdentifier
>	TokenNameGREATER
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
12	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
79	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
11	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
13	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
78	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
12	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
14	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
116	TokenNameIntegerLiteral
&&	TokenNameAND_AND
kind	TokenNameIdentifier
>	TokenNameGREATER
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
15	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
111	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
14	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
16	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
110	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
15	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
17	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x80000000800000L	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
&&	TokenNameAND_AND
kind	TokenNameIdentifier
>	TokenNameGREATER
11	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
11	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
18	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x400000004000L	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
&&	TokenNameAND_AND
kind	TokenNameIdentifier
>	TokenNameGREATER
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
12	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
24	TokenNameIntegerLiteral
:	TokenNameCOLON
jjAddStates	TokenNameIdentifier
(	TokenNameLPAREN
15	TokenNameIntegerLiteral
,	TokenNameCOMMA
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
27	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0xffffffffefffffffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
28	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
92	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
29	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
29	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
92	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
31	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0xffffffffbfffffffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
22	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
32	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0xffffffffbfffffffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
jjCheckNAddTwoStates	TokenNameIdentifier
(	TokenNameLPAREN
32	TokenNameIntegerLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
34	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0xffffffffbfffffffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
jjCheckNAddTwoStates	TokenNameIdentifier
(	TokenNameLPAREN
34	TokenNameIntegerLiteral
,	TokenNameCOMMA
35	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
36	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0xffffffffbfffffffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
21	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
21	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
36	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
37	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0xffffffffbfffffffL	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
22	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjCheckNAdd	TokenNameIdentifier
(	TokenNameLPAREN
37	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
startsAt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
hiByte	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
curChar	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
i1	TokenNameIdentifier
=	TokenNameEQUAL
hiByte	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
l1	TokenNameIdentifier
=	TokenNameEQUAL
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
hiByte	TokenNameIdentifier
&	TokenNameAND
077	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
i2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
curChar	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
l2	TokenNameIdentifier
=	TokenNameEQUAL
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
curChar	TokenNameIdentifier
&	TokenNameAND
077	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
0	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
jjCanMove_0	TokenNameIdentifier
(	TokenNameLPAREN
hiByte	TokenNameIdentifier
,	TokenNameCOMMA
i1	TokenNameIdentifier
,	TokenNameCOMMA
i2	TokenNameIdentifier
,	TokenNameCOMMA
l1	TokenNameIdentifier
,	TokenNameCOMMA
l2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
22	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
24	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
jjCanMove_0	TokenNameIdentifier
(	TokenNameLPAREN
hiByte	TokenNameIdentifier
,	TokenNameCOMMA
i1	TokenNameIdentifier
,	TokenNameCOMMA
i2	TokenNameIdentifier
,	TokenNameCOMMA
l1	TokenNameIdentifier
,	TokenNameCOMMA
l2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
jjAddStates	TokenNameIdentifier
(	TokenNameLPAREN
15	TokenNameIntegerLiteral
,	TokenNameCOMMA
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
27	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
jjCanMove_0	TokenNameIdentifier
(	TokenNameLPAREN
hiByte	TokenNameIdentifier
,	TokenNameCOMMA
i1	TokenNameIdentifier
,	TokenNameCOMMA
i2	TokenNameIdentifier
,	TokenNameCOMMA
l1	TokenNameIdentifier
,	TokenNameCOMMA
l2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
jjAddStates	TokenNameIdentifier
(	TokenNameLPAREN
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
32	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
jjCanMove_0	TokenNameIdentifier
(	TokenNameLPAREN
hiByte	TokenNameIdentifier
,	TokenNameCOMMA
i1	TokenNameIdentifier
,	TokenNameCOMMA
i2	TokenNameIdentifier
,	TokenNameCOMMA
l1	TokenNameIdentifier
,	TokenNameCOMMA
l2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
jjCheckNAddTwoStates	TokenNameIdentifier
(	TokenNameLPAREN
32	TokenNameIntegerLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
34	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
jjCanMove_0	TokenNameIdentifier
(	TokenNameLPAREN
hiByte	TokenNameIdentifier
,	TokenNameCOMMA
i1	TokenNameIdentifier
,	TokenNameCOMMA
i2	TokenNameIdentifier
,	TokenNameCOMMA
l1	TokenNameIdentifier
,	TokenNameCOMMA
l2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
jjCheckNAddTwoStates	TokenNameIdentifier
(	TokenNameLPAREN
34	TokenNameIntegerLiteral
,	TokenNameCOMMA
35	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
36	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
jjCanMove_0	TokenNameIdentifier
(	TokenNameLPAREN
hiByte	TokenNameIdentifier
,	TokenNameCOMMA
i1	TokenNameIdentifier
,	TokenNameCOMMA
i2	TokenNameIdentifier
,	TokenNameCOMMA
l1	TokenNameIdentifier
,	TokenNameCOMMA
l2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
21	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
21	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
36	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
37	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
jjCanMove_0	TokenNameIdentifier
(	TokenNameLPAREN
hiByte	TokenNameIdentifier
,	TokenNameCOMMA
i1	TokenNameIdentifier
,	TokenNameCOMMA
i2	TokenNameIdentifier
,	TokenNameCOMMA
l1	TokenNameIdentifier
,	TokenNameCOMMA
l2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
22	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
22	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjCheckNAdd	TokenNameIdentifier
(	TokenNameLPAREN
37	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
startsAt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0x7fffffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
jjmatchedKind	TokenNameIdentifier
=	TokenNameEQUAL
kind	TokenNameIdentifier
;	TokenNameSEMICOLON
jjmatchedPos	TokenNameIdentifier
=	TokenNameEQUAL
curPos	TokenNameIdentifier
;	TokenNameSEMICOLON
kind	TokenNameIdentifier
=	TokenNameEQUAL
0x7fffffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
++	TokenNamePLUS_PLUS
curPos	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
jjnewStateCnt	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
(	TokenNameLPAREN
startsAt	TokenNameIdentifier
=	TokenNameEQUAL
38	TokenNameIntegerLiteral
-	TokenNameMINUS
(	TokenNameLPAREN
jjnewStateCnt	TokenNameIdentifier
=	TokenNameEQUAL
startsAt	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
curPos	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
curChar	TokenNameIdentifier
=	TokenNameEQUAL
input_stream	TokenNameIdentifier
.	TokenNameDOT
readChar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
curPos	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
jjMoveStringLiteralDfa0_0	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
jjMoveNfa_0	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
jjMoveNfa_0	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
startState	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
curPos	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
startsAt	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjnewStateCnt	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
startState	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
kind	TokenNameIdentifier
=	TokenNameEQUAL
0x7fffffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
jjround	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0x7fffffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
ReInitRounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
<	TokenNameLESS
64	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
l	TokenNameIdentifier
=	TokenNameEQUAL
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
curChar	TokenNameIdentifier
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
0	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x3ff000000000000L	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
23	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
23	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjAddStates	TokenNameIdentifier
(	TokenNameLPAREN
17	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
46	TokenNameIntegerLiteral
)	TokenNameRPAREN
jjCheckNAdd	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
0x3ff000000000000L	TokenNameLongLiteral
&	TokenNameAND
l	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
>	TokenNameGREATER
23	TokenNameIntegerLiteral
)	TokenNameRPAREN
kind	TokenNameIdentifier
=	TokenNameEQUAL
23	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjCheckNAdd	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
startsAt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
<	TokenNameLESS
128	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
l	TokenNameIdentifier
=	TokenNameEQUAL
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
curChar	TokenNameIdentifier
&	TokenNameAND
077	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
startsAt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
hiByte	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
curChar	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
i1	TokenNameIdentifier
=	TokenNameEQUAL
hiByte	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
l1	TokenNameIdentifier
=	TokenNameEQUAL
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
hiByte	TokenNameIdentifier
&	TokenNameAND
077	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
i2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
curChar	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
l2	TokenNameIdentifier
=	TokenNameEQUAL
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
curChar	TokenNameIdentifier
&	TokenNameAND
077	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
--	TokenNameMINUS_MINUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
default	TokenNamedefault
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
startsAt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
kind	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0x7fffffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
jjmatchedKind	TokenNameIdentifier
=	TokenNameEQUAL
kind	TokenNameIdentifier
;	TokenNameSEMICOLON
jjmatchedPos	TokenNameIdentifier
=	TokenNameEQUAL
curPos	TokenNameIdentifier
;	TokenNameSEMICOLON
kind	TokenNameIdentifier
=	TokenNameEQUAL
0x7fffffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
++	TokenNamePLUS_PLUS
curPos	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
jjnewStateCnt	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
(	TokenNameLPAREN
startsAt	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
-	TokenNameMINUS
(	TokenNameLPAREN
jjnewStateCnt	TokenNameIdentifier
=	TokenNameEQUAL
startsAt	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
curPos	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
curChar	TokenNameIdentifier
=	TokenNameEQUAL
input_stream	TokenNameIdentifier
.	TokenNameDOT
readChar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
curPos	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
jjnextStates	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
32	TokenNameIntegerLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
34	TokenNameIntegerLiteral
,	TokenNameCOMMA
35	TokenNameIntegerLiteral
,	TokenNameCOMMA
37	TokenNameIntegerLiteral
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
17	TokenNameIntegerLiteral
,	TokenNameCOMMA
21	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
30	TokenNameIntegerLiteral
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
25	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
boolean	TokenNameboolean
jjCanMove_0	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
hiByte	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
i1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
i2	TokenNameIdentifier
,	TokenNameCOMMA
long	TokenNamelong
l1	TokenNameIdentifier
,	TokenNameCOMMA
long	TokenNamelong
l2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
hiByte	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
0	TokenNameIntegerLiteral
:	TokenNameCOLON
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
jjbitVec2	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
l2	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
jjbitVec0	TokenNameIdentifier
[	TokenNameLBRACKET
i1	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
l1	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
jjstrLiteralImages	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
""	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
"("	TokenNameStringLiteral
,	TokenNameCOMMA
")"	TokenNameStringLiteral
,	TokenNameCOMMA
","	TokenNameStringLiteral
,	TokenNameCOMMA
":"	TokenNameStringLiteral
,	TokenNameCOMMA
"^"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
lexStateNames	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"Boost"	TokenNameStringLiteral
,	TokenNameCOMMA
"DEFAULT"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
jjnewLexState	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
jjtoToken	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0xffff01L	TokenNameLongLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
jjtoSkip	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0x80L	TokenNameLongLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
protected	TokenNameprotected
CharStream	TokenNameIdentifier
input_stream	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
jjrounds	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
38	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
jjstateSet	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
76	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
char	TokenNamechar
curChar	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
QueryParserTokenManager	TokenNameIdentifier
(	TokenNameLPAREN
CharStream	TokenNameIdentifier
stream	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
input_stream	TokenNameIdentifier
=	TokenNameEQUAL
stream	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
QueryParserTokenManager	TokenNameIdentifier
(	TokenNameLPAREN
CharStream	TokenNameIdentifier
stream	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
lexState	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
stream	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SwitchTo	TokenNameIdentifier
(	TokenNameLPAREN
lexState	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
ReInit	TokenNameIdentifier
(	TokenNameLPAREN
CharStream	TokenNameIdentifier
stream	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
jjmatchedPos	TokenNameIdentifier
=	TokenNameEQUAL
jjnewStateCnt	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
curLexState	TokenNameIdentifier
=	TokenNameEQUAL
defaultLexState	TokenNameIdentifier
;	TokenNameSEMICOLON
input_stream	TokenNameIdentifier
=	TokenNameEQUAL
stream	TokenNameIdentifier
;	TokenNameSEMICOLON
ReInitRounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
ReInitRounds	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
i	TokenNameIdentifier
;	TokenNameSEMICOLON
jjround	TokenNameIdentifier
=	TokenNameEQUAL
0x80000001	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
38	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
jjrounds	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0x80000000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
ReInit	TokenNameIdentifier
(	TokenNameLPAREN
CharStream	TokenNameIdentifier
stream	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
lexState	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ReInit	TokenNameIdentifier
(	TokenNameLPAREN
stream	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SwitchTo	TokenNameIdentifier
(	TokenNameLPAREN
lexState	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
SwitchTo	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
lexState	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
lexState	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
2	TokenNameIntegerLiteral
||	TokenNameOR_OR
lexState	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
TokenMgrError	TokenNameIdentifier
(	TokenNameLPAREN
"Error: Ignoring invalid lexical state : "	TokenNameStringLiteral
+	TokenNamePLUS
lexState	TokenNameIdentifier
+	TokenNamePLUS
". State unchanged."	TokenNameStringLiteral
,	TokenNameCOMMA
TokenMgrError	TokenNameIdentifier
.	TokenNameDOT
INVALID_LEXICAL_STATE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
curLexState	TokenNameIdentifier
=	TokenNameEQUAL
lexState	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Token	TokenNameIdentifier
jjFillToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Token	TokenNameIdentifier
t	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
String	TokenNameIdentifier
curTokenImage	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
beginLine	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
endLine	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
beginColumn	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
endColumn	TokenNameIdentifier
;	TokenNameSEMICOLON
String	TokenNameIdentifier
im	TokenNameIdentifier
=	TokenNameEQUAL
jjstrLiteralImages	TokenNameIdentifier
[	TokenNameLBRACKET
jjmatchedKind	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
curTokenImage	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
im	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
input_stream	TokenNameIdentifier
.	TokenNameDOT
GetImage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
im	TokenNameIdentifier
;	TokenNameSEMICOLON
beginLine	TokenNameIdentifier
=	TokenNameEQUAL
input_stream	TokenNameIdentifier
.	TokenNameDOT
getBeginLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
beginColumn	TokenNameIdentifier
=	TokenNameEQUAL
input_stream	TokenNameIdentifier
.	TokenNameDOT
getBeginColumn	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endLine	TokenNameIdentifier
=	TokenNameEQUAL
input_stream	TokenNameIdentifier
.	TokenNameDOT
getEndLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endColumn	TokenNameIdentifier
=	TokenNameEQUAL
input_stream	TokenNameIdentifier
.	TokenNameDOT
getEndColumn	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
t	TokenNameIdentifier
=	TokenNameEQUAL
Token	TokenNameIdentifier
.	TokenNameDOT
newToken	TokenNameIdentifier
(	TokenNameLPAREN
jjmatchedKind	TokenNameIdentifier
,	TokenNameCOMMA
curTokenImage	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
t	TokenNameIdentifier
.	TokenNameDOT
beginLine	TokenNameIdentifier
=	TokenNameEQUAL
beginLine	TokenNameIdentifier
;	TokenNameSEMICOLON
t	TokenNameIdentifier
.	TokenNameDOT
endLine	TokenNameIdentifier
=	TokenNameEQUAL
endLine	TokenNameIdentifier
;	TokenNameSEMICOLON
t	TokenNameIdentifier
.	TokenNameDOT
beginColumn	TokenNameIdentifier
=	TokenNameEQUAL
beginColumn	TokenNameIdentifier
;	TokenNameSEMICOLON
t	TokenNameIdentifier
.	TokenNameDOT
endColumn	TokenNameIdentifier
=	TokenNameEQUAL
endColumn	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
t	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
curLexState	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
defaultLexState	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
jjnewStateCnt	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
jjround	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
jjmatchedPos	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
jjmatchedKind	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Token	TokenNameIdentifier
getNextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Token	TokenNameIdentifier
matchedToken	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
curPos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
EOFLoop	TokenNameIdentifier
:	TokenNameCOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
curChar	TokenNameIdentifier
=	TokenNameEQUAL
input_stream	TokenNameIdentifier
.	TokenNameDOT
BeginToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
jjmatchedKind	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
matchedToken	TokenNameIdentifier
=	TokenNameEQUAL
jjFillToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
matchedToken	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
curLexState	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
0	TokenNameIntegerLiteral
:	TokenNameCOLON
jjmatchedKind	TokenNameIdentifier
=	TokenNameEQUAL
0x7fffffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjmatchedPos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
curPos	TokenNameIdentifier
=	TokenNameEQUAL
jjMoveStringLiteralDfa0_0	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
jjmatchedKind	TokenNameIdentifier
=	TokenNameEQUAL
0x7fffffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
jjmatchedPos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
curPos	TokenNameIdentifier
=	TokenNameEQUAL
jjMoveStringLiteralDfa0_1	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
jjmatchedKind	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0x7fffffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
jjmatchedPos	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
curPos	TokenNameIdentifier
)	TokenNameRPAREN
input_stream	TokenNameIdentifier
.	TokenNameDOT
backup	TokenNameIdentifier
(	TokenNameLPAREN
curPos	TokenNameIdentifier
-	TokenNameMINUS
jjmatchedPos	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
jjtoToken	TokenNameIdentifier
[	TokenNameLBRACKET
jjmatchedKind	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
jjmatchedKind	TokenNameIdentifier
&	TokenNameAND
077	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
matchedToken	TokenNameIdentifier
=	TokenNameEQUAL
jjFillToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
jjnewLexState	TokenNameIdentifier
[	TokenNameLBRACKET
jjmatchedKind	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
curLexState	TokenNameIdentifier
=	TokenNameEQUAL
jjnewLexState	TokenNameIdentifier
[	TokenNameLBRACKET
jjmatchedKind	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
return	TokenNamereturn
matchedToken	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
jjnewLexState	TokenNameIdentifier
[	TokenNameLBRACKET
jjmatchedKind	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
curLexState	TokenNameIdentifier
=	TokenNameEQUAL
jjnewLexState	TokenNameIdentifier
[	TokenNameLBRACKET
jjmatchedKind	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
continue	TokenNamecontinue
EOFLoop	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
int	TokenNameint
error_line	TokenNameIdentifier
=	TokenNameEQUAL
input_stream	TokenNameIdentifier
.	TokenNameDOT
getEndLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
error_column	TokenNameIdentifier
=	TokenNameEQUAL
input_stream	TokenNameIdentifier
.	TokenNameDOT
getEndColumn	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
error_after	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
boolean	TokenNameboolean
EOFSeen	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
input_stream	TokenNameIdentifier
.	TokenNameDOT
readChar	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
input_stream	TokenNameIdentifier
.	TokenNameDOT
backup	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
e1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
EOFSeen	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
error_after	TokenNameIdentifier
=	TokenNameEQUAL
curPos	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
1	TokenNameIntegerLiteral
?	TokenNameQUESTION
""	TokenNameStringLiteral
:	TokenNameCOLON
input_stream	TokenNameIdentifier
.	TokenNameDOT
GetImage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\n'	TokenNameCharacterLiteral
||	TokenNameOR_OR
curChar	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'\r'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
error_line	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
error_column	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
error_column	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
EOFSeen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
input_stream	TokenNameIdentifier
.	TokenNameDOT
backup	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
error_after	TokenNameIdentifier
=	TokenNameEQUAL
curPos	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
1	TokenNameIntegerLiteral
?	TokenNameQUESTION
""	TokenNameStringLiteral
:	TokenNameCOLON
input_stream	TokenNameIdentifier
.	TokenNameDOT
GetImage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
throw	TokenNamethrow
new	TokenNamenew
TokenMgrError	TokenNameIdentifier
(	TokenNameLPAREN
EOFSeen	TokenNameIdentifier
,	TokenNameCOMMA
curLexState	TokenNameIdentifier
,	TokenNameCOMMA
error_line	TokenNameIdentifier
,	TokenNameCOMMA
error_column	TokenNameIdentifier
,	TokenNameCOMMA
error_after	TokenNameIdentifier
,	TokenNameCOMMA
curChar	TokenNameIdentifier
,	TokenNameCOMMA
TokenMgrError	TokenNameIdentifier
.	TokenNameDOT
LEXICAL_ERROR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
jjCheckNAdd	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
state	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
jjrounds	TokenNameIdentifier
[	TokenNameLBRACKET
state	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
jjround	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
state	TokenNameIdentifier
;	TokenNameSEMICOLON
jjrounds	TokenNameIdentifier
[	TokenNameLBRACKET
state	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
jjround	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
jjAddStates	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
do	TokenNamedo
{	TokenNameLBRACE
jjstateSet	TokenNameIdentifier
[	TokenNameLBRACKET
jjnewStateCnt	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
jjnextStates	TokenNameIdentifier
[	TokenNameLBRACKET
start	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
start	TokenNameIdentifier
++	TokenNamePLUS_PLUS
!=	TokenNameNOT_EQUAL
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
jjCheckNAddTwoStates	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
state1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
state2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
jjCheckNAdd	TokenNameIdentifier
(	TokenNameLPAREN
state1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
jjCheckNAdd	TokenNameIdentifier
(	TokenNameLPAREN
state2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
jjCheckNAddStates	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
do	TokenNamedo
{	TokenNameLBRACE
jjCheckNAdd	TokenNameIdentifier
(	TokenNameLPAREN
jjnextStates	TokenNameIdentifier
[	TokenNameLBRACKET
start	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
start	TokenNameIdentifier
++	TokenNamePLUS_PLUS
!=	TokenNameNOT_EQUAL
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
