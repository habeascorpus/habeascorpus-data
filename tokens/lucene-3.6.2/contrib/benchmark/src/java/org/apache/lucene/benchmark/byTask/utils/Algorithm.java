package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
byTask	TokenNameIdentifier
.	TokenNameDOT
utils	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
StreamTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
StringReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
reflect	TokenNameIdentifier
.	TokenNameDOT
Constructor	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Arrays	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
byTask	TokenNameIdentifier
.	TokenNameDOT
PerfRunData	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
byTask	TokenNameIdentifier
.	TokenNameDOT
tasks	TokenNameIdentifier
.	TokenNameDOT
PerfTask	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
byTask	TokenNameIdentifier
.	TokenNameDOT
tasks	TokenNameIdentifier
.	TokenNameDOT
RepSumByPrefTask	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
byTask	TokenNameIdentifier
.	TokenNameDOT
tasks	TokenNameIdentifier
.	TokenNameDOT
TaskSequence	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Algorithm	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
TaskSequence	TokenNameIdentifier
sequence	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
taskPackages	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
SuppressWarnings	TokenNameIdentifier
(	TokenNameLPAREN
"fallthrough"	TokenNameStringLiteral
)	TokenNameRPAREN
public	TokenNamepublic
Algorithm	TokenNameIdentifier
(	TokenNameLPAREN
PerfRunData	TokenNameIdentifier
runData	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Config	TokenNameIdentifier
config	TokenNameIdentifier
=	TokenNameEQUAL
runData	TokenNameIdentifier
.	TokenNameDOT
getConfig	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
taskPackages	TokenNameIdentifier
=	TokenNameEQUAL
initTasksPackages	TokenNameIdentifier
(	TokenNameLPAREN
config	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
algTxt	TokenNameIdentifier
=	TokenNameEQUAL
config	TokenNameIdentifier
.	TokenNameDOT
getAlgorithmText	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sequence	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TaskSequence	TokenNameIdentifier
(	TokenNameLPAREN
runData	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TaskSequence	TokenNameIdentifier
currSequence	TokenNameIdentifier
=	TokenNameEQUAL
sequence	TokenNameIdentifier
;	TokenNameSEMICOLON
PerfTask	TokenNameIdentifier
prevTask	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
StreamTokenizer	TokenNameIdentifier
stok	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StreamTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
algTxt	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stok	TokenNameIdentifier
.	TokenNameDOT
commentChar	TokenNameIdentifier
(	TokenNameLPAREN
'#'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stok	TokenNameIdentifier
.	TokenNameDOT
eolIsSignificant	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stok	TokenNameIdentifier
.	TokenNameDOT
ordinaryChar	TokenNameIdentifier
(	TokenNameLPAREN
'"'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stok	TokenNameIdentifier
.	TokenNameDOT
ordinaryChar	TokenNameIdentifier
(	TokenNameLPAREN
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stok	TokenNameIdentifier
.	TokenNameDOT
ordinaryChar	TokenNameIdentifier
(	TokenNameLPAREN
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stok	TokenNameIdentifier
.	TokenNameDOT
ordinaryChar	TokenNameIdentifier
(	TokenNameLPAREN
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
colonOk	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isDisableCountNextTask	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
currSequence	TokenNameIdentifier
.	TokenNameDOT
setDepth	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
StreamTokenizer	TokenNameIdentifier
.	TokenNameDOT
TT_EOF	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
StreamTokenizer	TokenNameIdentifier
.	TokenNameDOT
TT_WORD	TokenNameIdentifier
:	TokenNameCOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
stok	TokenNameIdentifier
.	TokenNameDOT
sval	TokenNameIdentifier
;	TokenNameSEMICOLON
Constructor	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
extends	TokenNameextends
PerfTask	TokenNameIdentifier
>	TokenNameGREATER
cnstr	TokenNameIdentifier
=	TokenNameEQUAL
taskClass	TokenNameIdentifier
(	TokenNameLPAREN
config	TokenNameIdentifier
,	TokenNameCOMMA
s	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
asSubclass	TokenNameIdentifier
(	TokenNameLPAREN
PerfTask	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
.	TokenNameDOT
getConstructor	TokenNameIdentifier
(	TokenNameLPAREN
PerfRunData	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PerfTask	TokenNameIdentifier
task	TokenNameIdentifier
=	TokenNameEQUAL
cnstr	TokenNameIdentifier
.	TokenNameDOT
newInstance	TokenNameIdentifier
(	TokenNameLPAREN
runData	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
task	TokenNameIdentifier
.	TokenNameDOT
setDisableCounting	TokenNameIdentifier
(	TokenNameLPAREN
isDisableCountNextTask	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
isDisableCountNextTask	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
currSequence	TokenNameIdentifier
.	TokenNameDOT
addTask	TokenNameIdentifier
(	TokenNameLPAREN
task	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
task	TokenNameIdentifier
instanceof	TokenNameinstanceof
RepSumByPrefTask	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
prefix	TokenNameIdentifier
=	TokenNameEQUAL
stok	TokenNameIdentifier
.	TokenNameDOT
sval	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
prefix	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
prefix	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"named report prefix problem - "	TokenNameStringLiteral
+	TokenNamePLUS
stok	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
RepSumByPrefTask	TokenNameIdentifier
)	TokenNameRPAREN
task	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setPrefix	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'('	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
pushBack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
StringBuilder	TokenNameIdentifier
params	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuilder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
')'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
StreamTokenizer	TokenNameIdentifier
.	TokenNameDOT
TT_NUMBER	TokenNameIdentifier
:	TokenNameCOLON
params	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
nval	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
StreamTokenizer	TokenNameIdentifier
.	TokenNameDOT
TT_WORD	TokenNameIdentifier
:	TokenNameCOLON
params	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
sval	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
StreamTokenizer	TokenNameIdentifier
.	TokenNameDOT
TT_EOF	TokenNameIdentifier
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"unexpexted EOF: - "	TokenNameStringLiteral
+	TokenNamePLUS
stok	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
params	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
prm	TokenNameIdentifier
=	TokenNameEQUAL
params	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
trim	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
prm	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
task	TokenNameIdentifier
.	TokenNameDOT
setParams	TokenNameIdentifier
(	TokenNameLPAREN
prm	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
colonOk	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
prevTask	TokenNameIdentifier
=	TokenNameEQUAL
task	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
':'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
colonOk	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"colon unexpexted: - "	TokenNameStringLiteral
+	TokenNamePLUS
stok	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
colonOk	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'*'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
TaskSequence	TokenNameIdentifier
)	TokenNameRPAREN
prevTask	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setRepetitions	TokenNameIdentifier
(	TokenNameLPAREN
TaskSequence	TokenNameIdentifier
.	TokenNameDOT
REPEAT_EXHAUST	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
StreamTokenizer	TokenNameIdentifier
.	TokenNameDOT
TT_NUMBER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"expected repetitions number or XXXs: - "	TokenNameStringLiteral
+	TokenNamePLUS
stok	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
double	TokenNamedouble
num	TokenNameIdentifier
=	TokenNameEQUAL
stok	TokenNameIdentifier
.	TokenNameDOT
nval	TokenNameIdentifier
;	TokenNameSEMICOLON
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
StreamTokenizer	TokenNameIdentifier
.	TokenNameDOT
TT_WORD	TokenNameIdentifier
&&	TokenNameAND_AND
stok	TokenNameIdentifier
.	TokenNameDOT
sval	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"s"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
TaskSequence	TokenNameIdentifier
)	TokenNameRPAREN
prevTask	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setRunTime	TokenNameIdentifier
(	TokenNameLPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
pushBack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
(	TokenNameLPAREN
(	TokenNameLPAREN
TaskSequence	TokenNameIdentifier
)	TokenNameRPAREN
prevTask	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setRepetitions	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
':'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
pushBack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
StreamTokenizer	TokenNameIdentifier
.	TokenNameDOT
TT_NUMBER	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"expected rate number: - "	TokenNameStringLiteral
+	TokenNamePLUS
stok	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
pushBack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
(	TokenNameLPAREN
(	TokenNameLPAREN
TaskSequence	TokenNameIdentifier
)	TokenNameRPAREN
prevTask	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setRate	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
nval	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
StreamTokenizer	TokenNameIdentifier
.	TokenNameDOT
TT_WORD	TokenNameIdentifier
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"expected rate unit: 'min' or 'sec' - "	TokenNameStringLiteral
+	TokenNamePLUS
stok	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
unit	TokenNameIdentifier
=	TokenNameEQUAL
stok	TokenNameIdentifier
.	TokenNameDOT
sval	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
"min"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
unit	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
TaskSequence	TokenNameIdentifier
)	TokenNameRPAREN
prevTask	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setRate	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
nval	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
"sec"	TokenNameStringLiteral
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
unit	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
TaskSequence	TokenNameIdentifier
)	TokenNameRPAREN
prevTask	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setRate	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
nval	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"expected rate unit: 'min' or 'sec' - "	TokenNameStringLiteral
+	TokenNamePLUS
stok	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
colonOk	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'{'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'['	TokenNameCharacterLiteral
:	TokenNameCOLON
String	TokenNameIdentifier
name	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'"'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
pushBack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
name	TokenNameIdentifier
=	TokenNameEQUAL
stok	TokenNameIdentifier
.	TokenNameDOT
sval	TokenNameIdentifier
;	TokenNameSEMICOLON
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
'"'	TokenNameCharacterLiteral
||	TokenNameOR_OR
name	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
name	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"sequence name problem - "	TokenNameStringLiteral
+	TokenNamePLUS
stok	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
TaskSequence	TokenNameIdentifier
seq2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TaskSequence	TokenNameIdentifier
(	TokenNameLPAREN
runData	TokenNameIdentifier
,	TokenNameCOMMA
name	TokenNameIdentifier
,	TokenNameCOMMA
currSequence	TokenNameIdentifier
,	TokenNameCOMMA
c	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'['	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currSequence	TokenNameIdentifier
.	TokenNameDOT
addTask	TokenNameIdentifier
(	TokenNameLPAREN
seq2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currSequence	TokenNameIdentifier
=	TokenNameEQUAL
seq2	TokenNameIdentifier
;	TokenNameSEMICOLON
colonOk	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'&'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
currSequence	TokenNameIdentifier
.	TokenNameDOT
isParallel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"Can only create background tasks within a serial task"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
nextToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
deltaPri	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
ttype	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
StreamTokenizer	TokenNameIdentifier
.	TokenNameDOT
TT_NUMBER	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stok	TokenNameIdentifier
.	TokenNameDOT
pushBack	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
deltaPri	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
deltaPri	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
stok	TokenNameIdentifier
.	TokenNameDOT
nval	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
prevTask	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"& was unexpected"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
prevTask	TokenNameIdentifier
.	TokenNameDOT
getRunInBackground	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"double & was unexpected"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
prevTask	TokenNameIdentifier
.	TokenNameDOT
setRunInBackground	TokenNameIdentifier
(	TokenNameLPAREN
deltaPri	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'>'	TokenNameCharacterLiteral
:	TokenNameCOLON
currSequence	TokenNameIdentifier
.	TokenNameDOT
setNoChildReport	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
'}'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
']'	TokenNameCharacterLiteral
:	TokenNameCOLON
colonOk	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
prevTask	TokenNameIdentifier
=	TokenNameEQUAL
currSequence	TokenNameIdentifier
;	TokenNameSEMICOLON
currSequence	TokenNameIdentifier
=	TokenNameEQUAL
currSequence	TokenNameIdentifier
.	TokenNameDOT
getParent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
isDisableCountNextTask	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sequence	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
currSequence	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
Exception	TokenNameIdentifier
(	TokenNameLPAREN
"Unmatched sequences"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
sequence	TokenNameIdentifier
.	TokenNameDOT
isCollapsable	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
sequence	TokenNameIdentifier
.	TokenNameDOT
getRepetitions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
sequence	TokenNameIdentifier
.	TokenNameDOT
getRate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ArrayList	TokenNameIdentifier
<	TokenNameLESS
PerfTask	TokenNameIdentifier
>	TokenNameGREATER
t	TokenNameIdentifier
=	TokenNameEQUAL
sequence	TokenNameIdentifier
.	TokenNameDOT
getTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
t	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
PerfTask	TokenNameIdentifier
p	TokenNameIdentifier
=	TokenNameEQUAL
t	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
p	TokenNameIdentifier
instanceof	TokenNameinstanceof
TaskSequence	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
sequence	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
TaskSequence	TokenNameIdentifier
)	TokenNameRPAREN
p	TokenNameIdentifier
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
initTasksPackages	TokenNameIdentifier
(	TokenNameLPAREN
Config	TokenNameIdentifier
config	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
alts	TokenNameIdentifier
=	TokenNameEQUAL
config	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"alt.tasks.packages"	TokenNameStringLiteral
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
dfltPkg	TokenNameIdentifier
=	TokenNameEQUAL
PerfTask	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
.	TokenNameDOT
getPackage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
alts	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
dfltPkg	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ArrayList	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
pkgs	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pkgs	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
dfltPkg	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
alt	TokenNameIdentifier
:	TokenNameCOLON
alts	TokenNameIdentifier
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
","	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
pkgs	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
alt	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
pkgs	TokenNameIdentifier
.	TokenNameDOT
toArray	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
Class	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
taskClass	TokenNameIdentifier
(	TokenNameLPAREN
Config	TokenNameIdentifier
config	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
taskName	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ClassNotFoundException	TokenNameIdentifier
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
String	TokenNameIdentifier
pkg	TokenNameIdentifier
:	TokenNameCOLON
taskPackages	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
return	TokenNamereturn
Class	TokenNameIdentifier
.	TokenNameDOT
forName	TokenNameIdentifier
(	TokenNameLPAREN
pkg	TokenNameIdentifier
+	TokenNamePLUS
'.'	TokenNameCharacterLiteral
+	TokenNamePLUS
taskName	TokenNameIdentifier
+	TokenNamePLUS
"Task"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ClassNotFoundException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
throw	TokenNamethrow
new	TokenNamenew
ClassNotFoundException	TokenNameIdentifier
(	TokenNameLPAREN
taskName	TokenNameIdentifier
+	TokenNamePLUS
" not found in packages "	TokenNameStringLiteral
+	TokenNamePLUS
Arrays	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
taskPackages	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
newline	TokenNameIdentifier
=	TokenNameEQUAL
System	TokenNameIdentifier
.	TokenNameDOT
getProperty	TokenNameIdentifier
(	TokenNameLPAREN
"line.separator"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
StringBuilder	TokenNameIdentifier
sb	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuilder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sb	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
sequence	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sb	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
newline	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
sb	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
execute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
sequence	TokenNameIdentifier
.	TokenNameDOT
runAndMaybeStats	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
sequence	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
ArrayList	TokenNameIdentifier
<	TokenNameLESS
PerfTask	TokenNameIdentifier
>	TokenNameGREATER
extractTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ArrayList	TokenNameIdentifier
<	TokenNameLESS
PerfTask	TokenNameIdentifier
>	TokenNameGREATER
res	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
PerfTask	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
extractTasks	TokenNameIdentifier
(	TokenNameLPAREN
res	TokenNameIdentifier
,	TokenNameCOMMA
sequence	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
res	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
extractTasks	TokenNameIdentifier
(	TokenNameLPAREN
ArrayList	TokenNameIdentifier
<	TokenNameLESS
PerfTask	TokenNameIdentifier
>	TokenNameGREATER
extrct	TokenNameIdentifier
,	TokenNameCOMMA
TaskSequence	TokenNameIdentifier
seq	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
seq	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
extrct	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
seq	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ArrayList	TokenNameIdentifier
<	TokenNameLESS
PerfTask	TokenNameIdentifier
>	TokenNameGREATER
t	TokenNameIdentifier
=	TokenNameEQUAL
sequence	TokenNameIdentifier
.	TokenNameDOT
getTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
final	TokenNamefinal
PerfTask	TokenNameIdentifier
p	TokenNameIdentifier
:	TokenNameCOLON
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
p	TokenNameIdentifier
instanceof	TokenNameinstanceof
TaskSequence	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
extractTasks	TokenNameIdentifier
(	TokenNameLPAREN
extrct	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
TaskSequence	TokenNameIdentifier
)	TokenNameRPAREN
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
extrct	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
