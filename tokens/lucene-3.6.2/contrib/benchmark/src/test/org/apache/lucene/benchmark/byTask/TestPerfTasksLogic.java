package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
byTask	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
BufferedReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
FileReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
StringReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
text	TokenNameIdentifier
.	TokenNameDOT
Collator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Analyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
BaseTokenStreamTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
MockAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
tokenattributes	TokenNameIdentifier
.	TokenNameDOT
CharTermAttribute	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
BenchmarkTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
byTask	TokenNameIdentifier
.	TokenNameDOT
feeds	TokenNameIdentifier
.	TokenNameDOT
DocMaker	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
byTask	TokenNameIdentifier
.	TokenNameDOT
feeds	TokenNameIdentifier
.	TokenNameDOT
ReutersQueryMaker	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
byTask	TokenNameIdentifier
.	TokenNameDOT
stats	TokenNameIdentifier
.	TokenNameDOT
TaskStats	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
byTask	TokenNameIdentifier
.	TokenNameDOT
tasks	TokenNameIdentifier
.	TokenNameDOT
CountingHighlighterTestTask	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
byTask	TokenNameIdentifier
.	TokenNameDOT
tasks	TokenNameIdentifier
.	TokenNameDOT
CountingSearchTestTask	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
benchmark	TokenNameIdentifier
.	TokenNameDOT
byTask	TokenNameIdentifier
.	TokenNameDOT
tasks	TokenNameIdentifier
.	TokenNameDOT
WriteLineDocTask	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
collation	TokenNameIdentifier
.	TokenNameDOT
CollationKeyAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
facet	TokenNameIdentifier
.	TokenNameDOT
taxonomy	TokenNameIdentifier
.	TokenNameDOT
TaxonomyReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
IndexReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
IndexWriter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
IndexWriterConfig	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
LogDocMergePolicy	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
LogMergePolicy	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
Term	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
TermEnum	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
TermDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
SegmentInfos	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
SerialMergeScheduler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
TermFreqVector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
IndexWriterConfig	TokenNameIdentifier
.	TokenNameDOT
OpenMode	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
store	TokenNameIdentifier
.	TokenNameDOT
Directory	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
FieldCache	TokenNameIdentifier
.	TokenNameDOT
StringIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
FieldCache	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TestPerfTasksLogic	TokenNameIdentifier
extends	TokenNameextends
BenchmarkTestCase	TokenNameIdentifier
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
copyToWorkDir	TokenNameIdentifier
(	TokenNameLPAREN
"reuters.first20.lines.txt"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIndexAndSearchTasks	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ AddDoc } : 1000"	TokenNameStringLiteral
,	TokenNameCOMMA
"ForceMerge(1)"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"OpenReader"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ CountingSearchTest } : 200"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseReader"	TokenNameStringLiteral
,	TokenNameCOMMA
"[ CountingSearchTest > : 70"	TokenNameStringLiteral
,	TokenNameCOMMA
"[ CountingSearchTest > : 9"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
CountingSearchTestTask	TokenNameIdentifier
.	TokenNameDOT
numSearches	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"TestSearchTask was supposed to be called!"	TokenNameStringLiteral
,	TokenNameCOMMA
279	TokenNameIntegerLiteral
,	TokenNameCOMMA
CountingSearchTestTask	TokenNameIdentifier
.	TokenNameDOT
numSearches	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"Index does not exist?...!"	TokenNameStringLiteral
,	TokenNameCOMMA
IndexReader	TokenNameIdentifier
.	TokenNameDOT
indexExists	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexWriter	TokenNameIdentifier
iw	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexWriter	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
IndexWriterConfig	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
setOpenMode	TokenNameIdentifier
(	TokenNameLPAREN
OpenMode	TokenNameIdentifier
.	TokenNameDOT
APPEND	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
iw	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"1000 docs were added to the index, this is what we expect to find!"	TokenNameStringLiteral
,	TokenNameCOMMA
1000	TokenNameIntegerLiteral
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTimedSearchTask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"log.step=100000"	TokenNameStringLiteral
,	TokenNameCOMMA
"ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ AddDoc } : 100"	TokenNameStringLiteral
,	TokenNameCOMMA
"ForceMerge(1)"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"OpenReader"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ CountingSearchTest } : .5s"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseReader"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
CountingSearchTestTask	TokenNameIdentifier
.	TokenNameDOT
numSearches	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
CountingSearchTestTask	TokenNameIdentifier
.	TokenNameDOT
numSearches	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
elapsed	TokenNameIdentifier
=	TokenNameEQUAL
CountingSearchTestTask	TokenNameIdentifier
.	TokenNameDOT
prevLastMillis	TokenNameIdentifier
-	TokenNameMINUS
CountingSearchTestTask	TokenNameIdentifier
.	TokenNameDOT
startMillis	TokenNameIdentifier
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"elapsed time was "	TokenNameStringLiteral
+	TokenNamePLUS
elapsed	TokenNameIdentifier
+	TokenNamePLUS
" msec"	TokenNameStringLiteral
,	TokenNameCOMMA
elapsed	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
1500	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBGSearchTaskThreads	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"log.time.step.msec = 100"	TokenNameStringLiteral
,	TokenNameCOMMA
"log.step=100000"	TokenNameStringLiteral
,	TokenNameCOMMA
"ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ AddDoc } : 1000"	TokenNameStringLiteral
,	TokenNameCOMMA
"ForceMerge(1)"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"OpenReader"	TokenNameStringLiteral
,	TokenNameCOMMA
"{"	TokenNameStringLiteral
,	TokenNameCOMMA
"  [ "XSearch" { CountingSearchTest > : * ] : 2 &-1"	TokenNameStringLiteral
,	TokenNameCOMMA
"  Wait(0.5)"	TokenNameStringLiteral
,	TokenNameCOMMA
"}"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseReader"	TokenNameStringLiteral
,	TokenNameCOMMA
"RepSumByPref X"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
CountingSearchTestTask	TokenNameIdentifier
.	TokenNameDOT
numSearches	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
CountingSearchTestTask	TokenNameIdentifier
.	TokenNameDOT
numSearches	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testHighlighting	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"doc.stored=true"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"query.maker="	TokenNameStringLiteral
+	TokenNamePLUS
ReutersQueryMaker	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ AddDoc } : 100"	TokenNameStringLiteral
,	TokenNameCOMMA
"ForceMerge(1)"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"OpenReader(true)"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseReader"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numHighlightedResults	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numDocsRetrieved	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"TestSearchTask was supposed to be called!"	TokenNameStringLiteral
,	TokenNameCOMMA
92	TokenNameIntegerLiteral
,	TokenNameCOMMA
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numDocsRetrieved	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"TestSearchTask was supposed to be called!"	TokenNameStringLiteral
,	TokenNameCOMMA
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numDocsRetrieved	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numHighlightedResults	TokenNameIdentifier
&&	TokenNameAND_AND
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numHighlightedResults	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"Index does not exist?...!"	TokenNameStringLiteral
,	TokenNameCOMMA
IndexReader	TokenNameIdentifier
.	TokenNameDOT
indexExists	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexWriter	TokenNameIdentifier
iw	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexWriter	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
IndexWriterConfig	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
setOpenMode	TokenNameIdentifier
(	TokenNameLPAREN
OpenMode	TokenNameIdentifier
.	TokenNameDOT
APPEND	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
iw	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"100 docs were added to the index, this is what we expect to find!"	TokenNameStringLiteral
,	TokenNameCOMMA
100	TokenNameIntegerLiteral
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testHighlightingTV	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"doc.stored=true"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector.offsets=true"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"query.maker="	TokenNameStringLiteral
+	TokenNamePLUS
ReutersQueryMaker	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ AddDoc } : 1000"	TokenNameStringLiteral
,	TokenNameCOMMA
"ForceMerge(1)"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"OpenReader(false)"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseReader"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numHighlightedResults	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numDocsRetrieved	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"TestSearchTask was supposed to be called!"	TokenNameStringLiteral
,	TokenNameCOMMA
92	TokenNameIntegerLiteral
,	TokenNameCOMMA
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numDocsRetrieved	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"TestSearchTask was supposed to be called!"	TokenNameStringLiteral
,	TokenNameCOMMA
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numDocsRetrieved	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numHighlightedResults	TokenNameIdentifier
&&	TokenNameAND_AND
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numHighlightedResults	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"Index does not exist?...!"	TokenNameStringLiteral
,	TokenNameCOMMA
IndexReader	TokenNameIdentifier
.	TokenNameDOT
indexExists	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexWriter	TokenNameIdentifier
iw	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexWriter	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
IndexWriterConfig	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
setOpenMode	TokenNameIdentifier
(	TokenNameLPAREN
OpenMode	TokenNameIdentifier
.	TokenNameDOT
APPEND	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
iw	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"1000 docs were added to the index, this is what we expect to find!"	TokenNameStringLiteral
,	TokenNameCOMMA
1000	TokenNameIntegerLiteral
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testHighlightingNoTvNoStore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"query.maker="	TokenNameStringLiteral
+	TokenNamePLUS
ReutersQueryMaker	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ AddDoc } : 1000"	TokenNameStringLiteral
,	TokenNameCOMMA
"ForceMerge(1)"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"OpenReader"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseReader"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numHighlightedResults	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
CountingHighlighterTestTask	TokenNameIdentifier
.	TokenNameDOT
numDocsRetrieved	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"CountingHighlighterTest should have thrown an exception"	TokenNameStringLiteral
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testExhaustContentSource	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.log.step=1"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ AddDoc } : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"ForceMerge(1)"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"OpenReader"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ CountingSearchTest } : 100"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseReader"	TokenNameStringLiteral
,	TokenNameCOMMA
"[ CountingSearchTest > : 30"	TokenNameStringLiteral
,	TokenNameCOMMA
"[ CountingSearchTest > : 9"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
CountingSearchTestTask	TokenNameIdentifier
.	TokenNameDOT
numSearches	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"TestSearchTask was supposed to be called!"	TokenNameStringLiteral
,	TokenNameCOMMA
139	TokenNameIntegerLiteral
,	TokenNameCOMMA
CountingSearchTestTask	TokenNameIdentifier
.	TokenNameDOT
numSearches	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"Index does not exist?...!"	TokenNameStringLiteral
,	TokenNameCOMMA
IndexReader	TokenNameIdentifier
.	TokenNameDOT
indexExists	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexWriter	TokenNameIdentifier
iw	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexWriter	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
IndexWriterConfig	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
setOpenMode	TokenNameIdentifier
(	TokenNameLPAREN
OpenMode	TokenNameIdentifier
.	TokenNameDOT
APPEND	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
iw	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"1 docs were added to the index, this is what we expect to find!"	TokenNameStringLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDocMakerThreadSafety	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"log.step.AddDoc=10000"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=true"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.reuse.fields=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.index.props=true"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"[ { AddDoc > : 250 ] : 4"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
CountingSearchTestTask	TokenNameIdentifier
.	TokenNameDOT
numSearches	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
r	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
StringIndex	TokenNameIdentifier
idx	TokenNameIdentifier
=	TokenNameEQUAL
FieldCache	TokenNameIdentifier
.	TokenNameDOT
DEFAULT	TokenNameIdentifier
.	TokenNameDOT
getStringIndex	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
"country"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
maxDoc	TokenNameIdentifier
=	TokenNameEQUAL
r	TokenNameIdentifier
.	TokenNameDOT
maxDoc	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
1000	TokenNameIntegerLiteral
,	TokenNameCOMMA
maxDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
1000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
"doc "	TokenNameStringLiteral
+	TokenNamePLUS
i	TokenNameIdentifier
+	TokenNamePLUS
" has null country"	TokenNameStringLiteral
,	TokenNameCOMMA
idx	TokenNameIdentifier
.	TokenNameDOT
lookup	TokenNameIdentifier
[	TokenNameLBRACKET
idx	TokenNameIdentifier
.	TokenNameDOT
order	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
r	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testParallelDocMaker	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.log.step=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=FSDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"[ { AddDoc } : * ] : 4 "	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ndocsExpected	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong number of docs in the index!"	TokenNameStringLiteral
,	TokenNameCOMMA
ndocsExpected	TokenNameIdentifier
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testLineDocFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
File	TokenNameIdentifier
lineFile	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
TEMP_DIR	TokenNameIdentifier
,	TokenNameCOMMA
"test.reuters.lines.txt"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
NUM_TRY_DOCS	TokenNameIdentifier
=	TokenNameEQUAL
50	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
algLines1	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=true"	TokenNameStringLiteral
,	TokenNameCOMMA
"line.file.out="	TokenNameStringLiteral
+	TokenNamePLUS
lineFile	TokenNameIdentifier
.	TokenNameDOT
getAbsolutePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
replace	TokenNameIdentifier
(	TokenNameLPAREN
'\\'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"{WriteLineDoc()}:"	TokenNameStringLiteral
+	TokenNamePLUS
NUM_TRY_DOCS	TokenNameIdentifier
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
BufferedReader	TokenNameIdentifier
r	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BufferedReader	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
FileReader	TokenNameIdentifier
(	TokenNameLPAREN
lineFile	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
numLines	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
line	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
line	TokenNameIdentifier
=	TokenNameEQUAL
r	TokenNameIdentifier
.	TokenNameDOT
readLine	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
numLines	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
line	TokenNameIdentifier
.	TokenNameDOT
startsWith	TokenNameIdentifier
(	TokenNameLPAREN
WriteLineDocTask	TokenNameIdentifier
.	TokenNameDOT
FIELDS_HEADER_INDICATOR	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
numLines	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
r	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"did not see the right number of docs; should be "	TokenNameStringLiteral
+	TokenNamePLUS
NUM_TRY_DOCS	TokenNameIdentifier
+	TokenNamePLUS
" but was "	TokenNameStringLiteral
+	TokenNamePLUS
numLines	TokenNameIdentifier
,	TokenNameCOMMA
NUM_TRY_DOCS	TokenNameIdentifier
,	TokenNameCOMMA
numLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
algLines2	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"analyzer=org.apache.lucene.analysis.WhitespaceAnalyzer"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
lineFile	TokenNameIdentifier
.	TokenNameDOT
getAbsolutePath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
replace	TokenNameIdentifier
(	TokenNameLPAREN
'\\'	TokenNameCharacterLiteral
,	TokenNameCOMMA
'/'	TokenNameCharacterLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.reuse.fields=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"ram.flush.mb=4"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{AddDoc}: *"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexWriter	TokenNameIdentifier
iw	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IndexWriter	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
IndexWriterConfig	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
MockAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
setOpenMode	TokenNameIdentifier
(	TokenNameLPAREN
OpenMode	TokenNameIdentifier
.	TokenNameDOT
APPEND	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
iw	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
numLines	TokenNameIdentifier
+	TokenNamePLUS
" lines were created but "	TokenNameStringLiteral
+	TokenNamePLUS
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
" docs are in the index"	TokenNameStringLiteral
,	TokenNameCOMMA
numLines	TokenNameIdentifier
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lineFile	TokenNameIdentifier
.	TokenNameDOT
delete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testReadTokens	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
NUM_DOCS	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
algLines1	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"analyzer=org.apache.lucene.analysis.WhitespaceAnalyzer"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"{ReadTokens}: "	TokenNameStringLiteral
+	TokenNamePLUS
NUM_DOCS	TokenNameIdentifier
,	TokenNameCOMMA
"ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{AddDoc}: "	TokenNameStringLiteral
+	TokenNamePLUS
NUM_DOCS	TokenNameIdentifier
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
List	TokenNameIdentifier
<	TokenNameLESS
TaskStats	TokenNameIdentifier
>	TokenNameGREATER
stats	TokenNameIdentifier
=	TokenNameEQUAL
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getPoints	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
taskStats	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
totalTokenCount1	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
final	TokenNamefinal
TaskStats	TokenNameIdentifier
stat	TokenNameIdentifier
:	TokenNameCOLON
stats	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
stat	TokenNameIdentifier
.	TokenNameDOT
getTask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"ReadTokens"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
totalTokenCount1	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
stat	TokenNameIdentifier
.	TokenNameDOT
getCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
NUM_DOCS	TokenNameIdentifier
,	TokenNameCOMMA
reader	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TermEnum	TokenNameIdentifier
terms	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
terms	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TermDocs	TokenNameIdentifier
termDocs	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
termDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
totalTokenCount2	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
terms	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Term	TokenNameIdentifier
term	TokenNameIdentifier
=	TokenNameEQUAL
terms	TokenNameIdentifier
.	TokenNameDOT
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
term	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
term	TokenNameIdentifier
.	TokenNameDOT
field	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
DocMaker	TokenNameIdentifier
.	TokenNameDOT
ID_FIELD	TokenNameIdentifier
&&	TokenNameAND_AND
term	TokenNameIdentifier
.	TokenNameDOT
field	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
DocMaker	TokenNameIdentifier
.	TokenNameDOT
DATE_MSEC_FIELD	TokenNameIdentifier
&&	TokenNameAND_AND
term	TokenNameIdentifier
.	TokenNameDOT
field	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
DocMaker	TokenNameIdentifier
.	TokenNameDOT
TIME_SEC_FIELD	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
termDocs	TokenNameIdentifier
.	TokenNameDOT
seek	TokenNameIdentifier
(	TokenNameLPAREN
terms	TokenNameIdentifier
.	TokenNameDOT
term	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
termDocs	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
totalTokenCount2	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
termDocs	TokenNameIdentifier
.	TokenNameDOT
freq	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
reader	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
totalTokenCount1	TokenNameIdentifier
,	TokenNameCOMMA
totalTokenCount2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testParallelExhausted	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.log.step=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"task.max.depth.log=1"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ [ AddDoc]: 4} : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"ResetInputs "	TokenNameStringLiteral
,	TokenNameCOMMA
"{ [ AddDoc]: 4} : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"WaitForMerges"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ndocsExpected	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong number of docs in the index!"	TokenNameStringLiteral
,	TokenNameCOMMA
ndocsExpected	TokenNameIdentifier
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testExhaustedLooped	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.log.step=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"task.max.depth.log=1"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"{ "Rounds""	TokenNameStringLiteral
,	TokenNameCOMMA
"  ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"  CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"  { "AddDocs"  AddDoc > : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"  WaitForMerges"	TokenNameStringLiteral
,	TokenNameCOMMA
"  CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"} : 2"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ndocsExpected	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong number of docs in the index!"	TokenNameStringLiteral
,	TokenNameCOMMA
ndocsExpected	TokenNameIdentifier
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCloseIndexFalse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"ram.flush.mb=-1"	TokenNameStringLiteral
,	TokenNameCOMMA
"max.buffered=2"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.log.step=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"debug.level=1"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"{ "Rounds""	TokenNameStringLiteral
,	TokenNameCOMMA
"  ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"  CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"  { "AddDocs"  AddDoc > : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"  CloseIndex(false)"	TokenNameStringLiteral
,	TokenNameCOMMA
"} : 2"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ndocsExpected	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong number of docs in the index!"	TokenNameStringLiteral
,	TokenNameCOMMA
ndocsExpected	TokenNameIdentifier
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
MyMergeScheduler	TokenNameIdentifier
extends	TokenNameextends
SerialMergeScheduler	TokenNameIdentifier
{	TokenNameLBRACE
boolean	TokenNameboolean
called	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
MyMergeScheduler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
called	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDeleteByPercent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"ram.flush.mb=-1"	TokenNameStringLiteral
,	TokenNameCOMMA
"max.buffered=2"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.log.step=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"debug.level=1"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ "AddDocs"  AddDoc > : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex()"	TokenNameStringLiteral
,	TokenNameCOMMA
"OpenReader(false)"	TokenNameStringLiteral
,	TokenNameCOMMA
"DeleteByPercent(20)"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseReader"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ndocsExpected	TokenNameIdentifier
=	TokenNameEQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong number of docs in the index!"	TokenNameStringLiteral
,	TokenNameCOMMA
ndocsExpected	TokenNameIdentifier
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testMergeScheduler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.log.step=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"merge.scheduler="	TokenNameStringLiteral
+	TokenNamePLUS
MyMergeScheduler	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"debug.level=1"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"{ "Rounds""	TokenNameStringLiteral
,	TokenNameCOMMA
"  ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"  CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"  { "AddDocs"  AddDoc > : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"} : 2"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"did not use the specified MergeScheduler"	TokenNameStringLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
MyMergeScheduler	TokenNameIdentifier
)	TokenNameRPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getIndexWriter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getConfig	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getMergeScheduler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
called	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getIndexWriter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ndocsExpected	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong number of docs in the index!"	TokenNameStringLiteral
,	TokenNameCOMMA
ndocsExpected	TokenNameIdentifier
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
MyMergePolicy	TokenNameIdentifier
extends	TokenNameextends
LogDocMergePolicy	TokenNameIdentifier
{	TokenNameLBRACE
boolean	TokenNameboolean
called	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
MyMergePolicy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
called	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testMergePolicy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.log.step=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"ram.flush.mb=-1"	TokenNameStringLiteral
,	TokenNameCOMMA
"max.buffered=2"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"merge.policy="	TokenNameStringLiteral
+	TokenNamePLUS
MyMergePolicy	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"debug.level=1"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"{ "Rounds""	TokenNameStringLiteral
,	TokenNameCOMMA
"  ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"  CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"  { "AddDocs"  AddDoc > : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"} : 2"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"did not use the specified MergePolicy"	TokenNameStringLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
MyMergePolicy	TokenNameIdentifier
)	TokenNameRPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getIndexWriter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getConfig	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getMergePolicy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
called	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getIndexWriter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ndocsExpected	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong number of docs in the index!"	TokenNameStringLiteral
,	TokenNameCOMMA
ndocsExpected	TokenNameIdentifier
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIndexWriterSettings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.log.step=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"ram.flush.mb=-1"	TokenNameStringLiteral
,	TokenNameCOMMA
"max.buffered=2"	TokenNameStringLiteral
,	TokenNameCOMMA
"compound=cmpnd:true:false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector=vector:false:true"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"merge.factor=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"debug.level=1"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"{ "Rounds""	TokenNameStringLiteral
,	TokenNameCOMMA
"  ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"  CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"  { "AddDocs"  AddDoc > : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"  NewRound"	TokenNameStringLiteral
,	TokenNameCOMMA
"} : 2"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
IndexWriter	TokenNameIdentifier
writer	TokenNameIdentifier
=	TokenNameEQUAL
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getIndexWriter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
writer	TokenNameIdentifier
.	TokenNameDOT
getConfig	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getMaxBufferedDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
IndexWriterConfig	TokenNameIdentifier
.	TokenNameDOT
DISABLE_AUTO_FLUSH	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
writer	TokenNameIdentifier
.	TokenNameDOT
getConfig	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getRAMBufferSizeMB	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
LogMergePolicy	TokenNameIdentifier
)	TokenNameRPAREN
writer	TokenNameIdentifier
.	TokenNameDOT
getConfig	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getMergePolicy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getMergeFactor	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFalse	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
LogMergePolicy	TokenNameIdentifier
)	TokenNameRPAREN
writer	TokenNameIdentifier
.	TokenNameDOT
getConfig	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getMergePolicy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getUseCompoundFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
writer	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Directory	TokenNameIdentifier
dir	TokenNameIdentifier
=	TokenNameEQUAL
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
dir	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TermFreqVector	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tfv	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
.	TokenNameDOT
getTermFreqVectors	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
tfv	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
tfv	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
reader	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIndexingWithFacets	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.log.step=100"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"merge.factor=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"debug.level=1"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateTaxonomyIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ "AddDocs"  AddFacetedDoc > : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"CloseTaxonomyIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"OpenTaxonomyReader"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
PerfRunData	TokenNameIdentifier
runData	TokenNameIdentifier
=	TokenNameEQUAL
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNull	TokenNameIdentifier
(	TokenNameLPAREN
"taxo writer was not properly closed"	TokenNameStringLiteral
,	TokenNameCOMMA
runData	TokenNameIdentifier
.	TokenNameDOT
getTaxonomyWriter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TaxonomyReader	TokenNameIdentifier
taxoReader	TokenNameIdentifier
=	TokenNameEQUAL
runData	TokenNameIdentifier
.	TokenNameDOT
getTaxonomyReader	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNotNull	TokenNameIdentifier
(	TokenNameLPAREN
"taxo reader was not opened"	TokenNameStringLiteral
,	TokenNameCOMMA
taxoReader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"nothing was added to the taxnomy (expecting root and at least one addtional category)"	TokenNameStringLiteral
,	TokenNameCOMMA
taxoReader	TokenNameIdentifier
.	TokenNameDOT
getSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
taxoReader	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testForceMerge	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.log.step=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"ram.flush.mb=-1"	TokenNameStringLiteral
,	TokenNameCOMMA
"max.buffered=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"merge.policy=org.apache.lucene.index.LogDocMergePolicy"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"debug.level=1"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"{ "Rounds""	TokenNameStringLiteral
,	TokenNameCOMMA
"  ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"  CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"  { "AddDocs"  AddDoc > : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"  ForceMerge(3)"	TokenNameStringLiteral
,	TokenNameCOMMA
"  CloseIndex()"	TokenNameStringLiteral
,	TokenNameCOMMA
"} : 2"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IndexReader	TokenNameIdentifier
ir	TokenNameIdentifier
=	TokenNameEQUAL
IndexReader	TokenNameIdentifier
.	TokenNameDOT
open	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
ndocsExpected	TokenNameIdentifier
=	TokenNameEQUAL
20	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong number of docs in the index!"	TokenNameStringLiteral
,	TokenNameCOMMA
ndocsExpected	TokenNameIdentifier
,	TokenNameCOMMA
ir	TokenNameIdentifier
.	TokenNameDOT
numDocs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ir	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
SegmentInfos	TokenNameIdentifier
infos	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SegmentInfos	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
infos	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
infos	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDisableCounting	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
doTestDisableCounting	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
doTestDisableCounting	TokenNameIdentifier
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
doTestDisableCounting	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
disable	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
disableCountingLines	TokenNameIdentifier
(	TokenNameLPAREN
disable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
algLines	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
disable	TokenNameIdentifier
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
nChecked	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
final	TokenNamefinal
TaskStats	TokenNameIdentifier
stats	TokenNameIdentifier
:	TokenNameCOLON
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getPoints	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
taskStats	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
taskName	TokenNameIdentifier
=	TokenNameEQUAL
stats	TokenNameIdentifier
.	TokenNameDOT
getTask	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
taskName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"Rounds"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Wrong total count!"	TokenNameStringLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
+	TokenNamePLUS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
n	TokenNameIdentifier
,	TokenNameCOMMA
stats	TokenNameIdentifier
.	TokenNameDOT
getCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nChecked	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
taskName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"CreateIndex"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Wrong count for CreateIndex!"	TokenNameStringLiteral
,	TokenNameCOMMA
n	TokenNameIdentifier
,	TokenNameCOMMA
stats	TokenNameIdentifier
.	TokenNameDOT
getCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nChecked	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
taskName	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"CloseIndex"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Wrong count for CloseIndex!"	TokenNameStringLiteral
,	TokenNameCOMMA
n	TokenNameIdentifier
,	TokenNameCOMMA
stats	TokenNameIdentifier
.	TokenNameDOT
getCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
nChecked	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Missing some tasks to check!"	TokenNameStringLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
nChecked	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
disableCountingLines	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
disable	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
dis	TokenNameIdentifier
=	TokenNameEQUAL
disable	TokenNameIdentifier
?	TokenNameQUESTION
"-"	TokenNameStringLiteral
:	TokenNameCOLON
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.log.step=30"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.term.vector=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.stored=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"doc.tokenized=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"task.max.depth.log=1"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"{ "Rounds""	TokenNameStringLiteral
,	TokenNameCOMMA
"  ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"  "	TokenNameStringLiteral
+	TokenNamePLUS
dis	TokenNameIdentifier
+	TokenNamePLUS
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"  { "AddDocs"  AddDoc > : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"  "	TokenNameStringLiteral
+	TokenNamePLUS
dis	TokenNameIdentifier
+	TokenNamePLUS
"  CloseIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"}"	TokenNameStringLiteral
,	TokenNameCOMMA
"RepSumByName"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testLocale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getLocaleConfig	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertNull	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getLocale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getLocaleConfig	TokenNameIdentifier
(	TokenNameLPAREN
"ROOT"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getLocale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getLocaleConfig	TokenNameIdentifier
(	TokenNameLPAREN
"de"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
"de"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getLocale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getLocaleConfig	TokenNameIdentifier
(	TokenNameLPAREN
"en,US"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
"en"	TokenNameStringLiteral
,	TokenNameCOMMA
"US"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getLocale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getLocaleConfig	TokenNameIdentifier
(	TokenNameLPAREN
"no,NO,NY"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
"no"	TokenNameStringLiteral
,	TokenNameCOMMA
"NO"	TokenNameStringLiteral
,	TokenNameCOMMA
"NY"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getLocale	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getLocaleConfig	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
localeParam	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.log.step=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"{ "Rounds""	TokenNameStringLiteral
,	TokenNameCOMMA
"  ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"  NewLocale("	TokenNameStringLiteral
+	TokenNamePLUS
localeParam	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
,	TokenNameCOMMA
"  CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"  { "AddDocs"  AddDoc > : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"  NewRound"	TokenNameStringLiteral
,	TokenNameCOMMA
"} : 1"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
return	TokenNamereturn
algLines	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testCollator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getCollatorConfig	TokenNameIdentifier
(	TokenNameLPAREN
"ROOT"	TokenNameStringLiteral
,	TokenNameCOMMA
"impl:jdk"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
CollationKeyAnalyzer	TokenNameIdentifier
expected	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CollationKeyAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Collator	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEqualCollation	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
,	TokenNameCOMMA
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"foobar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getCollatorConfig	TokenNameIdentifier
(	TokenNameLPAREN
"de"	TokenNameStringLiteral
,	TokenNameCOMMA
"impl:jdk"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CollationKeyAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Collator	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
"de"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEqualCollation	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
,	TokenNameCOMMA
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"foobar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getCollatorConfig	TokenNameIdentifier
(	TokenNameLPAREN
"en,US"	TokenNameStringLiteral
,	TokenNameCOMMA
"impl:jdk"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CollationKeyAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Collator	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
"en"	TokenNameStringLiteral
,	TokenNameCOMMA
"US"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEqualCollation	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
,	TokenNameCOMMA
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"foobar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getCollatorConfig	TokenNameIdentifier
(	TokenNameLPAREN
"no,NO,NY"	TokenNameStringLiteral
,	TokenNameCOMMA
"impl:jdk"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
expected	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CollationKeyAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Collator	TokenNameIdentifier
.	TokenNameDOT
getInstance	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Locale	TokenNameIdentifier
(	TokenNameLPAREN
"no"	TokenNameStringLiteral
,	TokenNameCOMMA
"NO"	TokenNameStringLiteral
,	TokenNameCOMMA
"NY"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEqualCollation	TokenNameIdentifier
(	TokenNameLPAREN
expected	TokenNameIdentifier
,	TokenNameCOMMA
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"foobar"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
assertEqualCollation	TokenNameIdentifier
(	TokenNameLPAREN
Analyzer	TokenNameIdentifier
a1	TokenNameIdentifier
,	TokenNameCOMMA
Analyzer	TokenNameIdentifier
a2	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
text	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
TokenStream	TokenNameIdentifier
ts1	TokenNameIdentifier
=	TokenNameEQUAL
a1	TokenNameIdentifier
.	TokenNameDOT
tokenStream	TokenNameIdentifier
(	TokenNameLPAREN
"bogus"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
text	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TokenStream	TokenNameIdentifier
ts2	TokenNameIdentifier
=	TokenNameEQUAL
a2	TokenNameIdentifier
.	TokenNameDOT
tokenStream	TokenNameIdentifier
(	TokenNameLPAREN
"bogus"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
text	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ts1	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ts2	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
CharTermAttribute	TokenNameIdentifier
termAtt1	TokenNameIdentifier
=	TokenNameEQUAL
ts1	TokenNameIdentifier
.	TokenNameDOT
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
CharTermAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
CharTermAttribute	TokenNameIdentifier
termAtt2	TokenNameIdentifier
=	TokenNameEQUAL
ts2	TokenNameIdentifier
.	TokenNameDOT
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
CharTermAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
ts1	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
ts2	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
termAtt1	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
termAtt2	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFalse	TokenNameIdentifier
(	TokenNameLPAREN
ts1	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertFalse	TokenNameIdentifier
(	TokenNameLPAREN
ts2	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ts1	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ts2	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getCollatorConfig	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
localeParam	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
collationParam	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"# ----- properties "	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.log.step=3"	TokenNameStringLiteral
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"# ----- alg "	TokenNameStringLiteral
,	TokenNameCOMMA
"{ "Rounds""	TokenNameStringLiteral
,	TokenNameCOMMA
"  ResetSystemErase"	TokenNameStringLiteral
,	TokenNameCOMMA
"  NewLocale("	TokenNameStringLiteral
+	TokenNamePLUS
localeParam	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
,	TokenNameCOMMA
"  NewCollationAnalyzer("	TokenNameStringLiteral
+	TokenNamePLUS
collationParam	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
,	TokenNameCOMMA
"  CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"  { "AddDocs"  AddDoc > : * "	TokenNameStringLiteral
,	TokenNameCOMMA
"  NewRound"	TokenNameStringLiteral
,	TokenNameCOMMA
"} : 1"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
return	TokenNamereturn
algLines	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testShingleAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
text	TokenNameIdentifier
=	TokenNameEQUAL
"one,two,three, four five six"	TokenNameStringLiteral
;	TokenNameSEMICOLON
Benchmark	TokenNameIdentifier
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getShingleConfig	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
tokenStream	TokenNameIdentifier
(	TokenNameLPAREN
"bogus"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
text	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEqualShingle	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"one"	TokenNameStringLiteral
,	TokenNameCOMMA
"one two"	TokenNameStringLiteral
,	TokenNameCOMMA
"two"	TokenNameStringLiteral
,	TokenNameCOMMA
"two three"	TokenNameStringLiteral
,	TokenNameCOMMA
"three"	TokenNameStringLiteral
,	TokenNameCOMMA
"three four"	TokenNameStringLiteral
,	TokenNameCOMMA
"four"	TokenNameStringLiteral
,	TokenNameCOMMA
"four five"	TokenNameStringLiteral
,	TokenNameCOMMA
"five"	TokenNameStringLiteral
,	TokenNameCOMMA
"five six"	TokenNameStringLiteral
,	TokenNameCOMMA
"six"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getShingleConfig	TokenNameIdentifier
(	TokenNameLPAREN
"maxShingleSize:3,outputUnigrams:false"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEqualShingle	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"one two"	TokenNameStringLiteral
,	TokenNameCOMMA
"one two three"	TokenNameStringLiteral
,	TokenNameCOMMA
"two three"	TokenNameStringLiteral
,	TokenNameCOMMA
"two three four"	TokenNameStringLiteral
,	TokenNameCOMMA
"three four"	TokenNameStringLiteral
,	TokenNameCOMMA
"three four five"	TokenNameStringLiteral
,	TokenNameCOMMA
"four five"	TokenNameStringLiteral
,	TokenNameCOMMA
"four five six"	TokenNameStringLiteral
,	TokenNameCOMMA
"five six"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getShingleConfig	TokenNameIdentifier
(	TokenNameLPAREN
"analyzer:WhitespaceAnalyzer"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEqualShingle	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"one,two,three,"	TokenNameStringLiteral
,	TokenNameCOMMA
"one,two,three, four"	TokenNameStringLiteral
,	TokenNameCOMMA
"four"	TokenNameStringLiteral
,	TokenNameCOMMA
"four five"	TokenNameStringLiteral
,	TokenNameCOMMA
"five"	TokenNameStringLiteral
,	TokenNameCOMMA
"five six"	TokenNameStringLiteral
,	TokenNameCOMMA
"six"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
benchmark	TokenNameIdentifier
=	TokenNameEQUAL
execBenchmark	TokenNameIdentifier
(	TokenNameLPAREN
getShingleConfig	TokenNameIdentifier
(	TokenNameLPAREN
"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEqualShingle	TokenNameIdentifier
(	TokenNameLPAREN
benchmark	TokenNameIdentifier
.	TokenNameDOT
getRunData	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"one,two,three, four"	TokenNameStringLiteral
,	TokenNameCOMMA
"one,two,three, four five"	TokenNameStringLiteral
,	TokenNameCOMMA
"four five"	TokenNameStringLiteral
,	TokenNameCOMMA
"four five six"	TokenNameStringLiteral
,	TokenNameCOMMA
"five six"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
assertEqualShingle	TokenNameIdentifier
(	TokenNameLPAREN
Analyzer	TokenNameIdentifier
analyzer	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
text	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
expected	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
BaseTokenStreamTestCase	TokenNameIdentifier
.	TokenNameDOT
assertAnalyzesTo	TokenNameIdentifier
(	TokenNameLPAREN
analyzer	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
expected	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getShingleConfig	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
params	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
algLines	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource"	TokenNameStringLiteral
,	TokenNameCOMMA
"docs.file="	TokenNameStringLiteral
+	TokenNamePLUS
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
"content.source.forever=false"	TokenNameStringLiteral
,	TokenNameCOMMA
"directory=RAMDirectory"	TokenNameStringLiteral
,	TokenNameCOMMA
"NewShingleAnalyzer("	TokenNameStringLiteral
+	TokenNamePLUS
params	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
,	TokenNameCOMMA
"CreateIndex"	TokenNameStringLiteral
,	TokenNameCOMMA
"{ "AddDocs"  AddDoc > : * "	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
return	TokenNamereturn
algLines	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
getReuters20LinesFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
getWorkDirResourcePath	TokenNameIdentifier
(	TokenNameLPAREN
"reuters.first20.lines.txt"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
