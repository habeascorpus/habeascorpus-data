package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
join	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Arrays	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
IndexReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
IndexWriter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
Collector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
FieldComparator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
FieldValueHitQueue	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
Query	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
ScoreCachingWrappingScorer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
Scorer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
Sort	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
TopDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
TopDocsCollector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
TopFieldCollector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
TopScoreDocCollector	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
Weight	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
grouping	TokenNameIdentifier
.	TokenNameDOT
GroupDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
grouping	TokenNameIdentifier
.	TokenNameDOT
TopGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayUtil	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
ToParentBlockJoinCollector	TokenNameIdentifier
extends	TokenNameextends
Collector	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
Sort	TokenNameIdentifier
sort	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Map	TokenNameIdentifier
<	TokenNameLESS
Query	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
>	TokenNameGREATER
joinQueryID	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
Query	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
numParentHits	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
FieldValueHitQueue	TokenNameIdentifier
<	TokenNameLESS
OneGroup	TokenNameIdentifier
>	TokenNameGREATER
queue	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
FieldComparator	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
comparators	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
reverseMul	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
compEnd	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
trackMaxScore	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
trackScores	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
docBase	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
ToParentBlockJoinQuery	TokenNameIdentifier
.	TokenNameDOT
BlockJoinScorer	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
joinScorers	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ToParentBlockJoinQuery	TokenNameIdentifier
.	TokenNameDOT
BlockJoinScorer	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
IndexReader	TokenNameIdentifier
currentReader	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Scorer	TokenNameIdentifier
scorer	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
queueFull	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
OneGroup	TokenNameIdentifier
bottom	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
totalHitCount	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
float	TokenNamefloat
maxScore	TokenNameIdentifier
=	TokenNameEQUAL
Float	TokenNameIdentifier
.	TokenNameDOT
NaN	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ToParentBlockJoinCollector	TokenNameIdentifier
(	TokenNameLPAREN
Sort	TokenNameIdentifier
sort	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numParentHits	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
trackScores	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
trackMaxScore	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
sort	TokenNameIdentifier
=	TokenNameEQUAL
sort	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
trackMaxScore	TokenNameIdentifier
=	TokenNameEQUAL
trackMaxScore	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
trackScores	TokenNameIdentifier
=	TokenNameEQUAL
trackScores	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
numParentHits	TokenNameIdentifier
=	TokenNameEQUAL
numParentHits	TokenNameIdentifier
;	TokenNameSEMICOLON
queue	TokenNameIdentifier
=	TokenNameEQUAL
FieldValueHitQueue	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
sort	TokenNameIdentifier
.	TokenNameDOT
getSort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
numParentHits	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
comparators	TokenNameIdentifier
=	TokenNameEQUAL
queue	TokenNameIdentifier
.	TokenNameDOT
getComparators	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
reverseMul	TokenNameIdentifier
=	TokenNameEQUAL
queue	TokenNameIdentifier
.	TokenNameDOT
getReverseMul	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
compEnd	TokenNameIdentifier
=	TokenNameEQUAL
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
OneGroup	TokenNameIdentifier
extends	TokenNameextends
FieldValueHitQueue	TokenNameIdentifier
.	TokenNameDOT
Entry	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
OneGroup	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
comparatorSlot	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
parentDoc	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
parentScore	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numJoins	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
doScores	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
comparatorSlot	TokenNameIdentifier
,	TokenNameCOMMA
parentDoc	TokenNameIdentifier
,	TokenNameCOMMA
parentScore	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
docs	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
numJoins	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
joinID	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
joinID	TokenNameIdentifier
<	TokenNameLESS
numJoins	TokenNameIdentifier
;	TokenNameSEMICOLON
joinID	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
docs	TokenNameIdentifier
[	TokenNameLBRACKET
joinID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
doScores	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
scores	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
float	TokenNamefloat
[	TokenNameLBRACKET
numJoins	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
joinID	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
joinID	TokenNameIdentifier
<	TokenNameLESS
numJoins	TokenNameIdentifier
;	TokenNameSEMICOLON
joinID	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
scores	TokenNameIdentifier
[	TokenNameLBRACKET
joinID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
float	TokenNamefloat
[	TokenNameLBRACKET
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
counts	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
numJoins	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
docBase	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
docs	TokenNameIdentifier
;	TokenNameSEMICOLON
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
scores	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
counts	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
;	TokenNameSEMICOLON
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
collect	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
parentDoc	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
totalHitCount	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
float	TokenNamefloat
score	TokenNameIdentifier
=	TokenNameEQUAL
Float	TokenNameIdentifier
.	TokenNameDOT
NaN	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
trackMaxScore	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
score	TokenNameIdentifier
=	TokenNameEQUAL
scorer	TokenNameIdentifier
.	TokenNameDOT
score	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
score	TokenNameIdentifier
>	TokenNameGREATER
maxScore	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
maxScore	TokenNameIdentifier
=	TokenNameEQUAL
score	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
queueFull	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
reverseMul	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
compareBottom	TokenNameIdentifier
(	TokenNameLPAREN
parentDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
compEnd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
copy	TokenNameIdentifier
(	TokenNameLPAREN
bottom	TokenNameIdentifier
.	TokenNameDOT
slot	TokenNameIdentifier
,	TokenNameCOMMA
parentDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
trackMaxScore	TokenNameIdentifier
&&	TokenNameAND_AND
trackScores	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
score	TokenNameIdentifier
=	TokenNameEQUAL
scorer	TokenNameIdentifier
.	TokenNameDOT
score	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bottom	TokenNameIdentifier
.	TokenNameDOT
doc	TokenNameIdentifier
=	TokenNameEQUAL
docBase	TokenNameIdentifier
+	TokenNamePLUS
parentDoc	TokenNameIdentifier
;	TokenNameSEMICOLON
bottom	TokenNameIdentifier
.	TokenNameDOT
reader	TokenNameIdentifier
=	TokenNameEQUAL
currentReader	TokenNameIdentifier
;	TokenNameSEMICOLON
bottom	TokenNameIdentifier
.	TokenNameDOT
docBase	TokenNameIdentifier
=	TokenNameEQUAL
docBase	TokenNameIdentifier
;	TokenNameSEMICOLON
bottom	TokenNameIdentifier
.	TokenNameDOT
score	TokenNameIdentifier
=	TokenNameEQUAL
score	TokenNameIdentifier
;	TokenNameSEMICOLON
copyGroups	TokenNameIdentifier
(	TokenNameLPAREN
bottom	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bottom	TokenNameIdentifier
=	TokenNameEQUAL
queue	TokenNameIdentifier
.	TokenNameDOT
updateTop	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
setBottom	TokenNameIdentifier
(	TokenNameLPAREN
bottom	TokenNameIdentifier
.	TokenNameDOT
slot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
comparatorSlot	TokenNameIdentifier
=	TokenNameEQUAL
totalHitCount	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
copy	TokenNameIdentifier
(	TokenNameLPAREN
comparatorSlot	TokenNameIdentifier
,	TokenNameCOMMA
parentDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
OneGroup	TokenNameIdentifier
og	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
OneGroup	TokenNameIdentifier
(	TokenNameLPAREN
comparatorSlot	TokenNameIdentifier
,	TokenNameCOMMA
docBase	TokenNameIdentifier
+	TokenNamePLUS
parentDoc	TokenNameIdentifier
,	TokenNameCOMMA
score	TokenNameIdentifier
,	TokenNameCOMMA
joinScorers	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
,	TokenNameCOMMA
trackScores	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
og	TokenNameIdentifier
.	TokenNameDOT
reader	TokenNameIdentifier
=	TokenNameEQUAL
currentReader	TokenNameIdentifier
;	TokenNameSEMICOLON
og	TokenNameIdentifier
.	TokenNameDOT
docBase	TokenNameIdentifier
=	TokenNameEQUAL
docBase	TokenNameIdentifier
;	TokenNameSEMICOLON
copyGroups	TokenNameIdentifier
(	TokenNameLPAREN
og	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bottom	TokenNameIdentifier
=	TokenNameEQUAL
queue	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
og	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
queueFull	TokenNameIdentifier
=	TokenNameEQUAL
totalHitCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
numParentHits	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
queueFull	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
setBottom	TokenNameIdentifier
(	TokenNameLPAREN
bottom	TokenNameIdentifier
.	TokenNameDOT
slot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
copyGroups	TokenNameIdentifier
(	TokenNameLPAREN
OneGroup	TokenNameIdentifier
og	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
numSubScorers	TokenNameIdentifier
=	TokenNameEQUAL
joinScorers	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
og	TokenNameIdentifier
.	TokenNameDOT
docs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<	TokenNameLESS
numSubScorers	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
og	TokenNameIdentifier
.	TokenNameDOT
docs	TokenNameIdentifier
=	TokenNameEQUAL
ArrayUtil	TokenNameIdentifier
.	TokenNameDOT
grow	TokenNameIdentifier
(	TokenNameLPAREN
og	TokenNameIdentifier
.	TokenNameDOT
docs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
og	TokenNameIdentifier
.	TokenNameDOT
counts	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<	TokenNameLESS
numSubScorers	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
og	TokenNameIdentifier
.	TokenNameDOT
counts	TokenNameIdentifier
=	TokenNameEQUAL
ArrayUtil	TokenNameIdentifier
.	TokenNameDOT
grow	TokenNameIdentifier
(	TokenNameLPAREN
og	TokenNameIdentifier
.	TokenNameDOT
counts	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
trackScores	TokenNameIdentifier
&&	TokenNameAND_AND
og	TokenNameIdentifier
.	TokenNameDOT
scores	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<	TokenNameLESS
numSubScorers	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
og	TokenNameIdentifier
.	TokenNameDOT
scores	TokenNameIdentifier
=	TokenNameEQUAL
ArrayUtil	TokenNameIdentifier
.	TokenNameDOT
grow	TokenNameIdentifier
(	TokenNameLPAREN
og	TokenNameIdentifier
.	TokenNameDOT
scores	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
scorerIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
scorerIDX	TokenNameIdentifier
<	TokenNameLESS
numSubScorers	TokenNameIdentifier
;	TokenNameSEMICOLON
scorerIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
ToParentBlockJoinQuery	TokenNameIdentifier
.	TokenNameDOT
BlockJoinScorer	TokenNameIdentifier
joinScorer	TokenNameIdentifier
=	TokenNameEQUAL
joinScorers	TokenNameIdentifier
[	TokenNameLBRACKET
scorerIDX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
joinScorer	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
og	TokenNameIdentifier
.	TokenNameDOT
counts	TokenNameIdentifier
[	TokenNameLBRACKET
scorerIDX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
joinScorer	TokenNameIdentifier
.	TokenNameDOT
getChildCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
og	TokenNameIdentifier
.	TokenNameDOT
docs	TokenNameIdentifier
[	TokenNameLBRACKET
scorerIDX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
joinScorer	TokenNameIdentifier
.	TokenNameDOT
swapChildDocs	TokenNameIdentifier
(	TokenNameLPAREN
og	TokenNameIdentifier
.	TokenNameDOT
docs	TokenNameIdentifier
[	TokenNameLBRACKET
scorerIDX	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
trackScores	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
og	TokenNameIdentifier
.	TokenNameDOT
scores	TokenNameIdentifier
[	TokenNameLBRACKET
scorerIDX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
joinScorer	TokenNameIdentifier
.	TokenNameDOT
swapChildScores	TokenNameIdentifier
(	TokenNameLPAREN
og	TokenNameIdentifier
.	TokenNameDOT
scores	TokenNameIdentifier
[	TokenNameLBRACKET
scorerIDX	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setNextReader	TokenNameIdentifier
(	TokenNameLPAREN
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
docBase	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
currentReader	TokenNameIdentifier
=	TokenNameEQUAL
reader	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
docBase	TokenNameIdentifier
=	TokenNameEQUAL
docBase	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
compIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
compIDX	TokenNameIdentifier
<	TokenNameLESS
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
compIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
setNextReader	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
docBase	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
boolean	TokenNameboolean
acceptsDocsOutOfOrder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
enroll	TokenNameIdentifier
(	TokenNameLPAREN
ToParentBlockJoinQuery	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
ToParentBlockJoinQuery	TokenNameIdentifier
.	TokenNameDOT
BlockJoinScorer	TokenNameIdentifier
scorer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Integer	TokenNameIdentifier
slot	TokenNameIdentifier
=	TokenNameEQUAL
joinQueryID	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
slot	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
joinQueryID	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
,	TokenNameCOMMA
joinScorers	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
ToParentBlockJoinQuery	TokenNameIdentifier
.	TokenNameDOT
BlockJoinScorer	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newArray	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ToParentBlockJoinQuery	TokenNameIdentifier
.	TokenNameDOT
BlockJoinScorer	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
+	TokenNamePLUS
joinScorers	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
joinScorers	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newArray	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
joinScorers	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
joinScorers	TokenNameIdentifier
=	TokenNameEQUAL
newArray	TokenNameIdentifier
;	TokenNameSEMICOLON
joinScorers	TokenNameIdentifier
[	TokenNameLBRACKET
joinScorers	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
scorer	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
joinScorers	TokenNameIdentifier
[	TokenNameLBRACKET
slot	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
scorer	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setScorer	TokenNameIdentifier
(	TokenNameLPAREN
Scorer	TokenNameIdentifier
scorer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
scorer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ScoreCachingWrappingScorer	TokenNameIdentifier
(	TokenNameLPAREN
scorer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
compIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
compIDX	TokenNameIdentifier
<	TokenNameLESS
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
compIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
setScorer	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
scorer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Arrays	TokenNameIdentifier
.	TokenNameDOT
fill	TokenNameIdentifier
(	TokenNameLPAREN
joinScorers	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
scorer	TokenNameIdentifier
.	TokenNameDOT
visitScorers	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
Scorer	TokenNameIdentifier
.	TokenNameDOT
ScorerVisitor	TokenNameIdentifier
<	TokenNameLESS
Query	TokenNameIdentifier
,	TokenNameCOMMA
Query	TokenNameIdentifier
,	TokenNameCOMMA
Scorer	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
visitOptional	TokenNameIdentifier
(	TokenNameLPAREN
Query	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Query	TokenNameIdentifier
child	TokenNameIdentifier
,	TokenNameCOMMA
Scorer	TokenNameIdentifier
scorer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
child	TokenNameIdentifier
instanceof	TokenNameinstanceof
ToParentBlockJoinQuery	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
enroll	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
ToParentBlockJoinQuery	TokenNameIdentifier
)	TokenNameRPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
ToParentBlockJoinQuery	TokenNameIdentifier
.	TokenNameDOT
BlockJoinScorer	TokenNameIdentifier
)	TokenNameRPAREN
scorer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
visitRequired	TokenNameIdentifier
(	TokenNameLPAREN
Query	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Query	TokenNameIdentifier
child	TokenNameIdentifier
,	TokenNameCOMMA
Scorer	TokenNameIdentifier
scorer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
child	TokenNameIdentifier
instanceof	TokenNameinstanceof
ToParentBlockJoinQuery	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
enroll	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
ToParentBlockJoinQuery	TokenNameIdentifier
)	TokenNameRPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
ToParentBlockJoinQuery	TokenNameIdentifier
.	TokenNameDOT
BlockJoinScorer	TokenNameIdentifier
)	TokenNameRPAREN
scorer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
visitProhibited	TokenNameIdentifier
(	TokenNameLPAREN
Query	TokenNameIdentifier
parent	TokenNameIdentifier
,	TokenNameCOMMA
Query	TokenNameIdentifier
child	TokenNameIdentifier
,	TokenNameCOMMA
Scorer	TokenNameIdentifier
scorer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
child	TokenNameIdentifier
instanceof	TokenNameinstanceof
ToParentBlockJoinQuery	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
enroll	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
ToParentBlockJoinQuery	TokenNameIdentifier
)	TokenNameRPAREN
child	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
ToParentBlockJoinQuery	TokenNameIdentifier
.	TokenNameDOT
BlockJoinScorer	TokenNameIdentifier
)	TokenNameRPAREN
scorer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
class	TokenNameclass
FakeScorer	TokenNameIdentifier
extends	TokenNameextends
Scorer	TokenNameIdentifier
{	TokenNameLBRACE
float	TokenNamefloat
score	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
doc	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
FakeScorer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
(	TokenNameLPAREN
Weight	TokenNameIdentifier
)	TokenNameRPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
float	TokenNamefloat
score	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
score	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
int	TokenNameint
docID	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
doc	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
int	TokenNameint
advance	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
target	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
UnsupportedOperationException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
int	TokenNameint
nextDoc	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
UnsupportedOperationException	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
OneGroup	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sortedGroups	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
void	TokenNamevoid
sortQueue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sortedGroups	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
OneGroup	TokenNameIdentifier
[	TokenNameLBRACKET
queue	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
downTo	TokenNameIdentifier
=	TokenNameEQUAL
queue	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
downTo	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
downTo	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
sortedGroups	TokenNameIdentifier
[	TokenNameLBRACKET
downTo	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
queue	TokenNameIdentifier
.	TokenNameDOT
pop	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
SuppressWarnings	TokenNameIdentifier
(	TokenNameLPAREN
"unchecked"	TokenNameStringLiteral
)	TokenNameRPAREN
public	TokenNamepublic
TopGroups	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
getTopGroups	TokenNameIdentifier
(	TokenNameLPAREN
ToParentBlockJoinQuery	TokenNameIdentifier
query	TokenNameIdentifier
,	TokenNameCOMMA
Sort	TokenNameIdentifier
withinGroupSort	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
offset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxDocsPerGroup	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
withinGroupOffset	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
fillSortFields	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
Integer	TokenNameIdentifier
_slot	TokenNameIdentifier
=	TokenNameEQUAL
joinQueryID	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
query	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
_slot	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
totalHitCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"the Query did not contain the provided BlockJoinQuery"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
slot	TokenNameIdentifier
=	TokenNameEQUAL
_slot	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sortedGroups	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
offset	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
queue	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
sortQueue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
offset	TokenNameIdentifier
>	TokenNameGREATER
sortedGroups	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
totalGroupedHitCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
FakeScorer	TokenNameIdentifier
fakeScorer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FakeScorer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
GroupDocs	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
[	TokenNameLBRACKET
]	TokenNameRBRACKET
groups	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
GroupDocs	TokenNameIdentifier
[	TokenNameLBRACKET
sortedGroups	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
groupIDX	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
groupIDX	TokenNameIdentifier
<	TokenNameLESS
sortedGroups	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
groupIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
OneGroup	TokenNameIdentifier
og	TokenNameIdentifier
=	TokenNameEQUAL
sortedGroups	TokenNameIdentifier
[	TokenNameLBRACKET
groupIDX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
TopDocsCollector	TokenNameIdentifier
collector	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
withinGroupSort	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
trackScores	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"cannot sort by relevance within group: trackScores=false"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
collector	TokenNameIdentifier
=	TokenNameEQUAL
TopScoreDocCollector	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
maxDocsPerGroup	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
collector	TokenNameIdentifier
=	TokenNameEQUAL
TopFieldCollector	TokenNameIdentifier
.	TokenNameDOT
create	TokenNameIdentifier
(	TokenNameLPAREN
withinGroupSort	TokenNameIdentifier
,	TokenNameCOMMA
maxDocsPerGroup	TokenNameIdentifier
,	TokenNameCOMMA
fillSortFields	TokenNameIdentifier
,	TokenNameCOMMA
trackScores	TokenNameIdentifier
,	TokenNameCOMMA
trackMaxScore	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
collector	TokenNameIdentifier
.	TokenNameDOT
setScorer	TokenNameIdentifier
(	TokenNameLPAREN
fakeScorer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
collector	TokenNameIdentifier
.	TokenNameDOT
setNextReader	TokenNameIdentifier
(	TokenNameLPAREN
og	TokenNameIdentifier
.	TokenNameDOT
reader	TokenNameIdentifier
,	TokenNameCOMMA
og	TokenNameIdentifier
.	TokenNameDOT
docBase	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
numChildDocs	TokenNameIdentifier
=	TokenNameEQUAL
og	TokenNameIdentifier
.	TokenNameDOT
counts	TokenNameIdentifier
[	TokenNameLBRACKET
slot	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
docIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
docIDX	TokenNameIdentifier
<	TokenNameLESS
numChildDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
docIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
doc	TokenNameIdentifier
=	TokenNameEQUAL
og	TokenNameIdentifier
.	TokenNameDOT
docs	TokenNameIdentifier
[	TokenNameLBRACKET
slot	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
docIDX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
fakeScorer	TokenNameIdentifier
.	TokenNameDOT
doc	TokenNameIdentifier
=	TokenNameEQUAL
doc	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
trackScores	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
fakeScorer	TokenNameIdentifier
.	TokenNameDOT
score	TokenNameIdentifier
=	TokenNameEQUAL
og	TokenNameIdentifier
.	TokenNameDOT
scores	TokenNameIdentifier
[	TokenNameLBRACKET
slot	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
docIDX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
collector	TokenNameIdentifier
.	TokenNameDOT
collect	TokenNameIdentifier
(	TokenNameLPAREN
doc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
totalGroupedHitCount	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
numChildDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
groupSortValues	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fillSortFields	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
groupSortValues	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
sortFieldIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sortFieldIDX	TokenNameIdentifier
<	TokenNameLESS
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
sortFieldIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
groupSortValues	TokenNameIdentifier
[	TokenNameLBRACKET
sortFieldIDX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
sortFieldIDX	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
value	TokenNameIdentifier
(	TokenNameLPAREN
og	TokenNameIdentifier
.	TokenNameDOT
slot	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
groupSortValues	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
TopDocs	TokenNameIdentifier
topDocs	TokenNameIdentifier
=	TokenNameEQUAL
collector	TokenNameIdentifier
.	TokenNameDOT
topDocs	TokenNameIdentifier
(	TokenNameLPAREN
withinGroupOffset	TokenNameIdentifier
,	TokenNameCOMMA
maxDocsPerGroup	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
groups	TokenNameIdentifier
[	TokenNameLBRACKET
groupIDX	TokenNameIdentifier
-	TokenNameMINUS
offset	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
GroupDocs	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
topDocs	TokenNameIdentifier
.	TokenNameDOT
getMaxScore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
og	TokenNameIdentifier
.	TokenNameDOT
counts	TokenNameIdentifier
[	TokenNameLBRACKET
slot	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
topDocs	TokenNameIdentifier
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
,	TokenNameCOMMA
og	TokenNameIdentifier
.	TokenNameDOT
doc	TokenNameIdentifier
,	TokenNameCOMMA
groupSortValues	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
TopGroups	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
new	TokenNamenew
TopGroups	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
sort	TokenNameIdentifier
.	TokenNameDOT
getSort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
withinGroupSort	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
withinGroupSort	TokenNameIdentifier
.	TokenNameDOT
getSort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
totalGroupedHitCount	TokenNameIdentifier
,	TokenNameCOMMA
groups	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
totalHitCount	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
