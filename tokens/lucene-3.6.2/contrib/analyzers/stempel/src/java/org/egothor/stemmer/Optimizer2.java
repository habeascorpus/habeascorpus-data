package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
egothor	TokenNameIdentifier
.	TokenNameDOT
stemmer	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Optimizer2	TokenNameIdentifier
extends	TokenNameextends
Optimizer	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
Optimizer2	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
Cell	TokenNameIdentifier
merge	TokenNameIdentifier
(	TokenNameLPAREN
Cell	TokenNameIdentifier
m	TokenNameIdentifier
,	TokenNameCOMMA
Cell	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
m	TokenNameIdentifier
.	TokenNameDOT
cmd	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
e	TokenNameIdentifier
.	TokenNameDOT
cmd	TokenNameIdentifier
&&	TokenNameAND_AND
m	TokenNameIdentifier
.	TokenNameDOT
ref	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
e	TokenNameIdentifier
.	TokenNameDOT
ref	TokenNameIdentifier
&&	TokenNameAND_AND
m	TokenNameIdentifier
.	TokenNameDOT
skip	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
e	TokenNameIdentifier
.	TokenNameDOT
skip	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Cell	TokenNameIdentifier
c	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Cell	TokenNameIdentifier
(	TokenNameLPAREN
m	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
c	TokenNameIdentifier
.	TokenNameDOT
cnt	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
e	TokenNameIdentifier
.	TokenNameDOT
cnt	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
