package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
egothor	TokenNameIdentifier
.	TokenNameDOT
stemmer	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
Diff	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
sizex	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
sizey	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
net	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
way	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
INSERT	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
DELETE	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
REPLACE	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
NOOP	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Diff	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Diff	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ins	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
del	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
rep	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
noop	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
INSERT	TokenNameIdentifier
=	TokenNameEQUAL
ins	TokenNameIdentifier
;	TokenNameSEMICOLON
DELETE	TokenNameIdentifier
=	TokenNameEQUAL
del	TokenNameIdentifier
;	TokenNameSEMICOLON
REPLACE	TokenNameIdentifier
=	TokenNameEQUAL
rep	TokenNameIdentifier
;	TokenNameSEMICOLON
NOOP	TokenNameIdentifier
=	TokenNameEQUAL
noop	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
apply	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
dest	TokenNameIdentifier
,	TokenNameCOMMA
CharSequence	TokenNameIdentifier
diff	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
diff	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
pos	TokenNameIdentifier
=	TokenNameEQUAL
dest	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
pos	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
diff	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
cmd	TokenNameIdentifier
=	TokenNameEQUAL
diff	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
param	TokenNameIdentifier
=	TokenNameEQUAL
diff	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
par_num	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
param	TokenNameIdentifier
-	TokenNameMINUS
'a'	TokenNameCharacterLiteral
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
cmd	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'-'	TokenNameCharacterLiteral
:	TokenNameCOLON
pos	TokenNameIdentifier
=	TokenNameEQUAL
pos	TokenNameIdentifier
-	TokenNameMINUS
par_num	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'R'	TokenNameCharacterLiteral
:	TokenNameCOLON
dest	TokenNameIdentifier
.	TokenNameDOT
setCharAt	TokenNameIdentifier
(	TokenNameLPAREN
pos	TokenNameIdentifier
,	TokenNameCOMMA
param	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'D'	TokenNameCharacterLiteral
:	TokenNameCOLON
int	TokenNameint
o	TokenNameIdentifier
=	TokenNameEQUAL
pos	TokenNameIdentifier
;	TokenNameSEMICOLON
pos	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
par_num	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
dest	TokenNameIdentifier
.	TokenNameDOT
delete	TokenNameIdentifier
(	TokenNameLPAREN
pos	TokenNameIdentifier
,	TokenNameCOMMA
o	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'I'	TokenNameCharacterLiteral
:	TokenNameCOLON
dest	TokenNameIdentifier
.	TokenNameDOT
insert	TokenNameIdentifier
(	TokenNameLPAREN
pos	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
param	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pos	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
StringIndexOutOfBoundsException	TokenNameIdentifier
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
ArrayIndexOutOfBoundsException	TokenNameIdentifier
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
synchronized	TokenNamesynchronized
String	TokenNameIdentifier
exec	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
a	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
b	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
a	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
b	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
x	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
y	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxx	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
maxy	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
go	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
X	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
Y	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
R	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
D	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxx	TokenNameIdentifier
=	TokenNameEQUAL
a	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
maxy	TokenNameIdentifier
=	TokenNameEQUAL
b	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
maxx	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
sizex	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
maxy	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
sizey	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
sizex	TokenNameIdentifier
=	TokenNameEQUAL
maxx	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
sizey	TokenNameIdentifier
=	TokenNameEQUAL
maxy	TokenNameIdentifier
+	TokenNamePLUS
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
net	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
sizex	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
sizey	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
way	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
sizex	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
sizey	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
x	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
x	TokenNameIdentifier
<	TokenNameLESS
maxx	TokenNameIdentifier
;	TokenNameSEMICOLON
x	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
y	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
<	TokenNameLESS
maxy	TokenNameIdentifier
;	TokenNameSEMICOLON
y	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
net	TokenNameIdentifier
[	TokenNameLBRACKET
x	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
y	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
x	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
x	TokenNameIdentifier
<	TokenNameLESS
maxx	TokenNameIdentifier
;	TokenNameSEMICOLON
x	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
net	TokenNameIdentifier
[	TokenNameLBRACKET
x	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
x	TokenNameIdentifier
;	TokenNameSEMICOLON
way	TokenNameIdentifier
[	TokenNameLBRACKET
x	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
X	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
y	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
<	TokenNameLESS
maxy	TokenNameIdentifier
;	TokenNameSEMICOLON
y	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
net	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
y	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
y	TokenNameIdentifier
;	TokenNameSEMICOLON
way	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
y	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
Y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
x	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
x	TokenNameIdentifier
<	TokenNameLESS
maxx	TokenNameIdentifier
;	TokenNameSEMICOLON
x	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
y	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
<	TokenNameLESS
maxy	TokenNameIdentifier
;	TokenNameSEMICOLON
y	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
go	TokenNameIdentifier
[	TokenNameLBRACKET
X	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
net	TokenNameIdentifier
[	TokenNameLBRACKET
x	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
y	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
DELETE	TokenNameIdentifier
;	TokenNameSEMICOLON
go	TokenNameIdentifier
[	TokenNameLBRACKET
Y	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
net	TokenNameIdentifier
[	TokenNameLBRACKET
x	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
y	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
INSERT	TokenNameIdentifier
;	TokenNameSEMICOLON
go	TokenNameIdentifier
[	TokenNameLBRACKET
R	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
net	TokenNameIdentifier
[	TokenNameLBRACKET
x	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
y	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
REPLACE	TokenNameIdentifier
;	TokenNameSEMICOLON
go	TokenNameIdentifier
[	TokenNameLBRACKET
D	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
net	TokenNameIdentifier
[	TokenNameLBRACKET
x	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
y	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
a	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
b	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
y	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
NOOP	TokenNameIdentifier
:	TokenNameCOLON
100	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
short	TokenNameshort
min	TokenNameIdentifier
=	TokenNameEQUAL
D	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
go	TokenNameIdentifier
[	TokenNameLBRACKET
min	TokenNameIdentifier
]	TokenNameRBRACKET
>=	TokenNameGREATER_EQUAL
go	TokenNameIdentifier
[	TokenNameLBRACKET
X	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
min	TokenNameIdentifier
=	TokenNameEQUAL
X	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
go	TokenNameIdentifier
[	TokenNameLBRACKET
min	TokenNameIdentifier
]	TokenNameRBRACKET
>	TokenNameGREATER
go	TokenNameIdentifier
[	TokenNameLBRACKET
Y	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
min	TokenNameIdentifier
=	TokenNameEQUAL
Y	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
go	TokenNameIdentifier
[	TokenNameLBRACKET
min	TokenNameIdentifier
]	TokenNameRBRACKET
>	TokenNameGREATER
go	TokenNameIdentifier
[	TokenNameLBRACKET
R	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
min	TokenNameIdentifier
=	TokenNameEQUAL
R	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
way	TokenNameIdentifier
[	TokenNameLBRACKET
x	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
y	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
min	TokenNameIdentifier
;	TokenNameSEMICOLON
net	TokenNameIdentifier
[	TokenNameLBRACKET
x	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
y	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
go	TokenNameIdentifier
[	TokenNameLBRACKET
min	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
StringBuffer	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
base	TokenNameIdentifier
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
char	TokenNamechar
deletes	TokenNameIdentifier
=	TokenNameEQUAL
base	TokenNameIdentifier
;	TokenNameSEMICOLON
char	TokenNamechar
equals	TokenNameIdentifier
=	TokenNameEQUAL
base	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
x	TokenNameIdentifier
=	TokenNameEQUAL
maxx	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
y	TokenNameIdentifier
=	TokenNameEQUAL
maxy	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
x	TokenNameIdentifier
+	TokenNamePLUS
y	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
way	TokenNameIdentifier
[	TokenNameLBRACKET
x	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
y	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
X	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
equals	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
base	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"-"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
equals	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
equals	TokenNameIdentifier
=	TokenNameEQUAL
base	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
deletes	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
x	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
Y	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
deletes	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
base	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"D"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
deletes	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
deletes	TokenNameIdentifier
=	TokenNameEQUAL
base	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
equals	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
base	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"-"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
equals	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
equals	TokenNameIdentifier
=	TokenNameEQUAL
base	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'I'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
--	TokenNameMINUS_MINUS
y	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
R	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
deletes	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
base	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"D"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
deletes	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
deletes	TokenNameIdentifier
=	TokenNameEQUAL
base	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
equals	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
base	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"-"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
equals	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
equals	TokenNameIdentifier
=	TokenNameEQUAL
base	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'R'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
--	TokenNameMINUS_MINUS
y	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
x	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
D	TokenNameIdentifier
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
deletes	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
base	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"D"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
deletes	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
deletes	TokenNameIdentifier
=	TokenNameEQUAL
base	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
equals	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
x	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
y	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
deletes	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
base	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"D"	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
deletes	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
deletes	TokenNameIdentifier
=	TokenNameEQUAL
base	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
