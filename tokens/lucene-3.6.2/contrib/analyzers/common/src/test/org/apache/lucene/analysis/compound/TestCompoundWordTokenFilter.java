package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
compound	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Reader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
StringReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Analyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
BaseTokenStreamTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
CharReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
MockTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
ReusableAnalyzerBase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Tokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
WhitespaceTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
MappingCharFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
NormalizeCharMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
compound	TokenNameIdentifier
.	TokenNameDOT
hyphenation	TokenNameIdentifier
.	TokenNameDOT
HyphenationTree	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
KeywordTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
tokenattributes	TokenNameIdentifier
.	TokenNameDOT
CharTermAttribute	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Attribute	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
AttributeImpl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
InputSource	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TestCompoundWordTokenFilter	TokenNameIdentifier
extends	TokenNameextends
BaseTokenStreamTestCase	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
testHyphenationCompoundWordsDA	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dict	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"læse"	TokenNameStringLiteral
,	TokenNameCOMMA
"hest"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
InputSource	TokenNameIdentifier
is	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
InputSource	TokenNameIdentifier
(	TokenNameLPAREN
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getResource	TokenNameIdentifier
(	TokenNameLPAREN
"da_UTF8.xml"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
toExternalForm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
=	TokenNameEQUAL
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
.	TokenNameDOT
getHyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
tf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
MockTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"min veninde som er lidt af en læsehest"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
dict	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MAX_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTokenStreamContents	TokenNameIdentifier
(	TokenNameLPAREN
tf	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"min"	TokenNameStringLiteral
,	TokenNameCOMMA
"veninde"	TokenNameStringLiteral
,	TokenNameCOMMA
"som"	TokenNameStringLiteral
,	TokenNameCOMMA
"er"	TokenNameStringLiteral
,	TokenNameCOMMA
"lidt"	TokenNameStringLiteral
,	TokenNameCOMMA
"af"	TokenNameStringLiteral
,	TokenNameCOMMA
"en"	TokenNameStringLiteral
,	TokenNameCOMMA
"læsehest"	TokenNameStringLiteral
,	TokenNameCOMMA
"læse"	TokenNameStringLiteral
,	TokenNameCOMMA
"hest"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testHyphenationCompoundWordsDELongestMatch	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dict	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"basketball"	TokenNameStringLiteral
,	TokenNameCOMMA
"basket"	TokenNameStringLiteral
,	TokenNameCOMMA
"ball"	TokenNameStringLiteral
,	TokenNameCOMMA
"kurv"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
InputSource	TokenNameIdentifier
is	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
InputSource	TokenNameIdentifier
(	TokenNameLPAREN
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getResource	TokenNameIdentifier
(	TokenNameLPAREN
"da_UTF8.xml"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
toExternalForm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
=	TokenNameEQUAL
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
.	TokenNameDOT
getHyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
tf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
MockTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"basketballkurv"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
dict	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
40	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTokenStreamContents	TokenNameIdentifier
(	TokenNameLPAREN
tf	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"basketballkurv"	TokenNameStringLiteral
,	TokenNameCOMMA
"basketball"	TokenNameStringLiteral
,	TokenNameCOMMA
"ball"	TokenNameStringLiteral
,	TokenNameCOMMA
"kurv"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testHyphenationOnly	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
InputSource	TokenNameIdentifier
is	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
InputSource	TokenNameIdentifier
(	TokenNameLPAREN
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getResource	TokenNameIdentifier
(	TokenNameLPAREN
"da_UTF8.xml"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
toExternalForm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
=	TokenNameEQUAL
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
.	TokenNameDOT
getHyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
tf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
MockTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"basketballkurv"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTokenStreamContents	TokenNameIdentifier
(	TokenNameLPAREN
tf	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"basketballkurv"	TokenNameStringLiteral
,	TokenNameCOMMA
"ba"	TokenNameStringLiteral
,	TokenNameCOMMA
"sket"	TokenNameStringLiteral
,	TokenNameCOMMA
"bal"	TokenNameStringLiteral
,	TokenNameCOMMA
"ball"	TokenNameStringLiteral
,	TokenNameCOMMA
"kurv"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
MockTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"basketballkurv"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTokenStreamContents	TokenNameIdentifier
(	TokenNameLPAREN
tf	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"basketballkurv"	TokenNameStringLiteral
,	TokenNameCOMMA
"basket"	TokenNameStringLiteral
,	TokenNameCOMMA
"sket"	TokenNameStringLiteral
,	TokenNameCOMMA
"ball"	TokenNameStringLiteral
,	TokenNameCOMMA
"lkurv"	TokenNameStringLiteral
,	TokenNameCOMMA
"kurv"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
MockTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"basketballkurv"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTokenStreamContents	TokenNameIdentifier
(	TokenNameLPAREN
tf	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"basketballkurv"	TokenNameStringLiteral
,	TokenNameCOMMA
"basket"	TokenNameStringLiteral
,	TokenNameCOMMA
"basketbal"	TokenNameStringLiteral
,	TokenNameCOMMA
"basketball"	TokenNameStringLiteral
,	TokenNameCOMMA
"sket"	TokenNameStringLiteral
,	TokenNameCOMMA
"sketbal"	TokenNameStringLiteral
,	TokenNameCOMMA
"sketball"	TokenNameStringLiteral
,	TokenNameCOMMA
"ball"	TokenNameStringLiteral
,	TokenNameCOMMA
"ballkurv"	TokenNameStringLiteral
,	TokenNameCOMMA
"lkurv"	TokenNameStringLiteral
,	TokenNameCOMMA
"kurv"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDumbCompoundWordsSE	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dict	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"Bil"	TokenNameStringLiteral
,	TokenNameCOMMA
"Dörr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Motor"	TokenNameStringLiteral
,	TokenNameCOMMA
"Tak"	TokenNameStringLiteral
,	TokenNameCOMMA
"Borr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Slag"	TokenNameStringLiteral
,	TokenNameCOMMA
"Hammar"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pelar"	TokenNameStringLiteral
,	TokenNameCOMMA
"Glas"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ögon"	TokenNameStringLiteral
,	TokenNameCOMMA
"Fodral"	TokenNameStringLiteral
,	TokenNameCOMMA
"Bas"	TokenNameStringLiteral
,	TokenNameCOMMA
"Fiol"	TokenNameStringLiteral
,	TokenNameCOMMA
"Makare"	TokenNameStringLiteral
,	TokenNameCOMMA
"Gesäll"	TokenNameStringLiteral
,	TokenNameCOMMA
"Sko"	TokenNameStringLiteral
,	TokenNameCOMMA
"Vind"	TokenNameStringLiteral
,	TokenNameCOMMA
"Rute"	TokenNameStringLiteral
,	TokenNameCOMMA
"Torkare"	TokenNameStringLiteral
,	TokenNameCOMMA
"Blad"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
tf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
MockTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
,	TokenNameCOMMA
dict	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTokenStreamContents	TokenNameIdentifier
(	TokenNameLPAREN
tf	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"Bildörr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Bil"	TokenNameStringLiteral
,	TokenNameCOMMA
"dörr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Bilmotor"	TokenNameStringLiteral
,	TokenNameCOMMA
"Bil"	TokenNameStringLiteral
,	TokenNameCOMMA
"motor"	TokenNameStringLiteral
,	TokenNameCOMMA
"Biltak"	TokenNameStringLiteral
,	TokenNameCOMMA
"Bil"	TokenNameStringLiteral
,	TokenNameCOMMA
"tak"	TokenNameStringLiteral
,	TokenNameCOMMA
"Slagborr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Slag"	TokenNameStringLiteral
,	TokenNameCOMMA
"borr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Hammarborr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Hammar"	TokenNameStringLiteral
,	TokenNameCOMMA
"borr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pelarborr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pelar"	TokenNameStringLiteral
,	TokenNameCOMMA
"borr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Glasögonfodral"	TokenNameStringLiteral
,	TokenNameCOMMA
"Glas"	TokenNameStringLiteral
,	TokenNameCOMMA
"ögon"	TokenNameStringLiteral
,	TokenNameCOMMA
"fodral"	TokenNameStringLiteral
,	TokenNameCOMMA
"Basfiolsfodral"	TokenNameStringLiteral
,	TokenNameCOMMA
"Bas"	TokenNameStringLiteral
,	TokenNameCOMMA
"fiol"	TokenNameStringLiteral
,	TokenNameCOMMA
"fodral"	TokenNameStringLiteral
,	TokenNameCOMMA
"Basfiolsfodralmakaregesäll"	TokenNameStringLiteral
,	TokenNameCOMMA
"Bas"	TokenNameStringLiteral
,	TokenNameCOMMA
"fiol"	TokenNameStringLiteral
,	TokenNameCOMMA
"fodral"	TokenNameStringLiteral
,	TokenNameCOMMA
"makare"	TokenNameStringLiteral
,	TokenNameCOMMA
"gesäll"	TokenNameStringLiteral
,	TokenNameCOMMA
"Skomakare"	TokenNameStringLiteral
,	TokenNameCOMMA
"Sko"	TokenNameStringLiteral
,	TokenNameCOMMA
"makare"	TokenNameStringLiteral
,	TokenNameCOMMA
"Vindrutetorkare"	TokenNameStringLiteral
,	TokenNameCOMMA
"Vind"	TokenNameStringLiteral
,	TokenNameCOMMA
"rute"	TokenNameStringLiteral
,	TokenNameCOMMA
"torkare"	TokenNameStringLiteral
,	TokenNameCOMMA
"Vindrutetorkarblad"	TokenNameStringLiteral
,	TokenNameCOMMA
"Vind"	TokenNameStringLiteral
,	TokenNameCOMMA
"rute"	TokenNameStringLiteral
,	TokenNameCOMMA
"blad"	TokenNameStringLiteral
,	TokenNameCOMMA
"abba"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
11	TokenNameIntegerLiteral
,	TokenNameCOMMA
17	TokenNameIntegerLiteral
,	TokenNameCOMMA
17	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
,	TokenNameCOMMA
44	TokenNameIntegerLiteral
,	TokenNameCOMMA
44	TokenNameIntegerLiteral
,	TokenNameCOMMA
49	TokenNameIntegerLiteral
,	TokenNameCOMMA
54	TokenNameIntegerLiteral
,	TokenNameCOMMA
54	TokenNameIntegerLiteral
,	TokenNameCOMMA
58	TokenNameIntegerLiteral
,	TokenNameCOMMA
62	TokenNameIntegerLiteral
,	TokenNameCOMMA
69	TokenNameIntegerLiteral
,	TokenNameCOMMA
69	TokenNameIntegerLiteral
,	TokenNameCOMMA
72	TokenNameIntegerLiteral
,	TokenNameCOMMA
77	TokenNameIntegerLiteral
,	TokenNameCOMMA
84	TokenNameIntegerLiteral
,	TokenNameCOMMA
84	TokenNameIntegerLiteral
,	TokenNameCOMMA
87	TokenNameIntegerLiteral
,	TokenNameCOMMA
92	TokenNameIntegerLiteral
,	TokenNameCOMMA
98	TokenNameIntegerLiteral
,	TokenNameCOMMA
104	TokenNameIntegerLiteral
,	TokenNameCOMMA
111	TokenNameIntegerLiteral
,	TokenNameCOMMA
111	TokenNameIntegerLiteral
,	TokenNameCOMMA
114	TokenNameIntegerLiteral
,	TokenNameCOMMA
121	TokenNameIntegerLiteral
,	TokenNameCOMMA
121	TokenNameIntegerLiteral
,	TokenNameCOMMA
125	TokenNameIntegerLiteral
,	TokenNameCOMMA
129	TokenNameIntegerLiteral
,	TokenNameCOMMA
137	TokenNameIntegerLiteral
,	TokenNameCOMMA
137	TokenNameIntegerLiteral
,	TokenNameCOMMA
141	TokenNameIntegerLiteral
,	TokenNameCOMMA
151	TokenNameIntegerLiteral
,	TokenNameCOMMA
156	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
16	TokenNameIntegerLiteral
,	TokenNameCOMMA
11	TokenNameIntegerLiteral
,	TokenNameCOMMA
16	TokenNameIntegerLiteral
,	TokenNameCOMMA
23	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
23	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
,	TokenNameCOMMA
43	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
,	TokenNameCOMMA
43	TokenNameIntegerLiteral
,	TokenNameCOMMA
53	TokenNameIntegerLiteral
,	TokenNameCOMMA
49	TokenNameIntegerLiteral
,	TokenNameCOMMA
53	TokenNameIntegerLiteral
,	TokenNameCOMMA
68	TokenNameIntegerLiteral
,	TokenNameCOMMA
58	TokenNameIntegerLiteral
,	TokenNameCOMMA
62	TokenNameIntegerLiteral
,	TokenNameCOMMA
68	TokenNameIntegerLiteral
,	TokenNameCOMMA
83	TokenNameIntegerLiteral
,	TokenNameCOMMA
72	TokenNameIntegerLiteral
,	TokenNameCOMMA
76	TokenNameIntegerLiteral
,	TokenNameCOMMA
83	TokenNameIntegerLiteral
,	TokenNameCOMMA
110	TokenNameIntegerLiteral
,	TokenNameCOMMA
87	TokenNameIntegerLiteral
,	TokenNameCOMMA
91	TokenNameIntegerLiteral
,	TokenNameCOMMA
98	TokenNameIntegerLiteral
,	TokenNameCOMMA
104	TokenNameIntegerLiteral
,	TokenNameCOMMA
110	TokenNameIntegerLiteral
,	TokenNameCOMMA
120	TokenNameIntegerLiteral
,	TokenNameCOMMA
114	TokenNameIntegerLiteral
,	TokenNameCOMMA
120	TokenNameIntegerLiteral
,	TokenNameCOMMA
136	TokenNameIntegerLiteral
,	TokenNameCOMMA
125	TokenNameIntegerLiteral
,	TokenNameCOMMA
129	TokenNameIntegerLiteral
,	TokenNameCOMMA
136	TokenNameIntegerLiteral
,	TokenNameCOMMA
155	TokenNameIntegerLiteral
,	TokenNameCOMMA
141	TokenNameIntegerLiteral
,	TokenNameCOMMA
145	TokenNameIntegerLiteral
,	TokenNameCOMMA
155	TokenNameIntegerLiteral
,	TokenNameCOMMA
160	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDumbCompoundWordsSELongestMatch	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dict	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"Bil"	TokenNameStringLiteral
,	TokenNameCOMMA
"Dörr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Motor"	TokenNameStringLiteral
,	TokenNameCOMMA
"Tak"	TokenNameStringLiteral
,	TokenNameCOMMA
"Borr"	TokenNameStringLiteral
,	TokenNameCOMMA
"Slag"	TokenNameStringLiteral
,	TokenNameCOMMA
"Hammar"	TokenNameStringLiteral
,	TokenNameCOMMA
"Pelar"	TokenNameStringLiteral
,	TokenNameCOMMA
"Glas"	TokenNameStringLiteral
,	TokenNameCOMMA
"Ögon"	TokenNameStringLiteral
,	TokenNameCOMMA
"Fodral"	TokenNameStringLiteral
,	TokenNameCOMMA
"Bas"	TokenNameStringLiteral
,	TokenNameCOMMA
"Fiols"	TokenNameStringLiteral
,	TokenNameCOMMA
"Makare"	TokenNameStringLiteral
,	TokenNameCOMMA
"Gesäll"	TokenNameStringLiteral
,	TokenNameCOMMA
"Sko"	TokenNameStringLiteral
,	TokenNameCOMMA
"Vind"	TokenNameStringLiteral
,	TokenNameCOMMA
"Rute"	TokenNameStringLiteral
,	TokenNameCOMMA
"Torkare"	TokenNameStringLiteral
,	TokenNameCOMMA
"Blad"	TokenNameStringLiteral
,	TokenNameCOMMA
"Fiolsfodral"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
tf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
MockTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"Basfiolsfodralmakaregesäll"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
,	TokenNameCOMMA
dict	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MAX_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTokenStreamContents	TokenNameIdentifier
(	TokenNameLPAREN
tf	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"Basfiolsfodralmakaregesäll"	TokenNameStringLiteral
,	TokenNameCOMMA
"Bas"	TokenNameStringLiteral
,	TokenNameCOMMA
"fiolsfodral"	TokenNameStringLiteral
,	TokenNameCOMMA
"fodral"	TokenNameStringLiteral
,	TokenNameCOMMA
"makare"	TokenNameStringLiteral
,	TokenNameCOMMA
"gesäll"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
26	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
,	TokenNameCOMMA
26	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTokenEndingWithWordComponentOfMinimumLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dict	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"ab"	TokenNameStringLiteral
,	TokenNameCOMMA
"cd"	TokenNameStringLiteral
,	TokenNameCOMMA
"ef"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
tf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"abcdef"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dict	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MAX_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTokenStreamContents	TokenNameIdentifier
(	TokenNameLPAREN
tf	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"abcdef"	TokenNameStringLiteral
,	TokenNameCOMMA
"ab"	TokenNameStringLiteral
,	TokenNameCOMMA
"cd"	TokenNameStringLiteral
,	TokenNameCOMMA
"ef"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testWordComponentWithLessThanMinimumLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dict	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"abc"	TokenNameStringLiteral
,	TokenNameCOMMA
"d"	TokenNameStringLiteral
,	TokenNameCOMMA
"efg"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
tf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
WhitespaceTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"abcdefg"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
dict	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MAX_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTokenStreamContents	TokenNameIdentifier
(	TokenNameLPAREN
tf	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"abcdefg"	TokenNameStringLiteral
,	TokenNameCOMMA
"abc"	TokenNameStringLiteral
,	TokenNameCOMMA
"efg"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testReset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dict	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"Rind"	TokenNameStringLiteral
,	TokenNameCOMMA
"Fleisch"	TokenNameStringLiteral
,	TokenNameCOMMA
"Draht"	TokenNameStringLiteral
,	TokenNameCOMMA
"Schere"	TokenNameStringLiteral
,	TokenNameCOMMA
"Gesetz"	TokenNameStringLiteral
,	TokenNameCOMMA
"Aufgabe"	TokenNameStringLiteral
,	TokenNameCOMMA
"Überwachung"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Tokenizer	TokenNameIdentifier
wsTokenizer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
WhitespaceTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"Rindfleischüberwachungsgesetz"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
tf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
wsTokenizer	TokenNameIdentifier
,	TokenNameCOMMA
dict	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MAX_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
CharTermAttribute	TokenNameIdentifier
termAtt	TokenNameIdentifier
=	TokenNameEQUAL
tf	TokenNameIdentifier
.	TokenNameDOT
getAttribute	TokenNameIdentifier
(	TokenNameLPAREN
CharTermAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
tf	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Rindfleischüberwachungsgesetz"	TokenNameStringLiteral
,	TokenNameCOMMA
termAtt	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
tf	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Rind"	TokenNameStringLiteral
,	TokenNameCOMMA
termAtt	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
wsTokenizer	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"Rindfleischüberwachungsgesetz"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tf	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
tf	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Rindfleischüberwachungsgesetz"	TokenNameStringLiteral
,	TokenNameCOMMA
termAtt	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testRetainMockAttribute	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dict	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"abc"	TokenNameStringLiteral
,	TokenNameCOMMA
"d"	TokenNameStringLiteral
,	TokenNameCOMMA
"efg"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Tokenizer	TokenNameIdentifier
tokenizer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
WhitespaceTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"abcdefg"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TokenStream	TokenNameIdentifier
stream	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MockRetainAttributeFilter	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
stream	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
stream	TokenNameIdentifier
,	TokenNameCOMMA
dict	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
CompoundWordTokenFilterBase	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MAX_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
MockRetainAttribute	TokenNameIdentifier
retAtt	TokenNameIdentifier
=	TokenNameEQUAL
stream	TokenNameIdentifier
.	TokenNameDOT
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
MockRetainAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
stream	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"Custom attribute value was lost"	TokenNameStringLiteral
,	TokenNameCOMMA
retAtt	TokenNameIdentifier
.	TokenNameDOT
getRetain	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
interface	TokenNameinterface
MockRetainAttribute	TokenNameIdentifier
extends	TokenNameextends
Attribute	TokenNameIdentifier
{	TokenNameLBRACE
void	TokenNamevoid
setRetain	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
attr	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
boolean	TokenNameboolean
getRetain	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
MockRetainAttributeImpl	TokenNameIdentifier
extends	TokenNameextends
AttributeImpl	TokenNameIdentifier
implements	TokenNameimplements
MockRetainAttribute	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
boolean	TokenNameboolean
retain	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
retain	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
getRetain	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
retain	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setRetain	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
retain	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
retain	TokenNameIdentifier
=	TokenNameEQUAL
retain	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
copyTo	TokenNameIdentifier
(	TokenNameLPAREN
AttributeImpl	TokenNameIdentifier
target	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
MockRetainAttribute	TokenNameIdentifier
t	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
MockRetainAttribute	TokenNameIdentifier
)	TokenNameRPAREN
target	TokenNameIdentifier
;	TokenNameSEMICOLON
t	TokenNameIdentifier
.	TokenNameDOT
setRetain	TokenNameIdentifier
(	TokenNameLPAREN
retain	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
MockRetainAttributeFilter	TokenNameIdentifier
extends	TokenNameextends
TokenFilter	TokenNameIdentifier
{	TokenNameLBRACE
MockRetainAttribute	TokenNameIdentifier
retainAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
MockRetainAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
MockRetainAttributeFilter	TokenNameIdentifier
(	TokenNameLPAREN
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
boolean	TokenNameboolean
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
retainAtt	TokenNameIdentifier
.	TokenNameDOT
setRetain	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testInvalidOffsets	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dict	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"fall"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
final	TokenNamefinal
NormalizeCharMap	TokenNameIdentifier
normMap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
NormalizeCharMap	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
normMap	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"ü"	TokenNameStringLiteral
,	TokenNameCOMMA
"ue"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Analyzer	TokenNameIdentifier
analyzer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ReusableAnalyzerBase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
protected	TokenNameprotected
TokenStreamComponents	TokenNameIdentifier
createComponents	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Tokenizer	TokenNameIdentifier
tokenizer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MockTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TokenFilter	TokenNameIdentifier
filter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
dict	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
filter	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
Reader	TokenNameIdentifier
initReader	TokenNameIdentifier
(	TokenNameLPAREN
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
MappingCharFilter	TokenNameIdentifier
(	TokenNameLPAREN
normMap	TokenNameIdentifier
,	TokenNameCOMMA
CharReader	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
assertAnalyzesTo	TokenNameIdentifier
(	TokenNameLPAREN
analyzer	TokenNameIdentifier
,	TokenNameCOMMA
"banküberfall"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"bankueberfall"	TokenNameStringLiteral
,	TokenNameCOMMA
"fall"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
12	TokenNameIntegerLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testRandomStrings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dict	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"a"	TokenNameStringLiteral
,	TokenNameCOMMA
"e"	TokenNameStringLiteral
,	TokenNameCOMMA
"i"	TokenNameStringLiteral
,	TokenNameCOMMA
"o"	TokenNameStringLiteral
,	TokenNameCOMMA
"u"	TokenNameStringLiteral
,	TokenNameCOMMA
"y"	TokenNameStringLiteral
,	TokenNameCOMMA
"bc"	TokenNameStringLiteral
,	TokenNameCOMMA
"def"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ReusableAnalyzerBase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
TokenStreamComponents	TokenNameIdentifier
createComponents	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Tokenizer	TokenNameIdentifier
tokenizer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MockTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
dict	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
checkRandomData	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
10000	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
RANDOM_MULTIPLIER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
InputSource	TokenNameIdentifier
is	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
InputSource	TokenNameIdentifier
(	TokenNameLPAREN
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getResource	TokenNameIdentifier
(	TokenNameLPAREN
"da_UTF8.xml"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
toExternalForm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
=	TokenNameEQUAL
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
.	TokenNameDOT
getHyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Analyzer	TokenNameIdentifier
b	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ReusableAnalyzerBase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
TokenStreamComponents	TokenNameIdentifier
createComponents	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Tokenizer	TokenNameIdentifier
tokenizer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MockTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TokenFilter	TokenNameIdentifier
filter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
filter	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
checkRandomData	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
,	TokenNameCOMMA
10000	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
RANDOM_MULTIPLIER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testEmptyTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dict	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"a"	TokenNameStringLiteral
,	TokenNameCOMMA
"e"	TokenNameStringLiteral
,	TokenNameCOMMA
"i"	TokenNameStringLiteral
,	TokenNameCOMMA
"o"	TokenNameStringLiteral
,	TokenNameCOMMA
"u"	TokenNameStringLiteral
,	TokenNameCOMMA
"y"	TokenNameStringLiteral
,	TokenNameCOMMA
"bc"	TokenNameStringLiteral
,	TokenNameCOMMA
"def"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ReusableAnalyzerBase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
TokenStreamComponents	TokenNameIdentifier
createComponents	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Tokenizer	TokenNameIdentifier
tokenizer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
KeywordTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
DictionaryCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
dict	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
InputSource	TokenNameIdentifier
is	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
InputSource	TokenNameIdentifier
(	TokenNameLPAREN
getClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getResource	TokenNameIdentifier
(	TokenNameLPAREN
"da_UTF8.xml"	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
toExternalForm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
=	TokenNameEQUAL
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
.	TokenNameDOT
getHyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Analyzer	TokenNameIdentifier
b	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ReusableAnalyzerBase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
TokenStreamComponents	TokenNameIdentifier
createComponents	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Tokenizer	TokenNameIdentifier
tokenizer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
KeywordTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TokenFilter	TokenNameIdentifier
filter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
filter	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
b	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
