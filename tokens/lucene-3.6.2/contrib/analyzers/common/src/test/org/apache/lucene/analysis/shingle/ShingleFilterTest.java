package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
shingle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Reader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
StringReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Analyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
BaseTokenStreamTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
MockTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
ReusableAnalyzerBase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Token	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Tokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
WhitespaceTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
KeywordTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
tokenattributes	TokenNameIdentifier
.	TokenNameDOT
*	TokenNameMULTIPLY
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
ShingleFilterTest	TokenNameIdentifier
extends	TokenNameextends
BaseTokenStreamTestCase	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
class	TokenNameclass
TestTokenStream	TokenNameIdentifier
extends	TokenNameextends
TokenStream	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
int	TokenNameint
index	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
protected	TokenNameprotected
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
testToken	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
CharTermAttribute	TokenNameIdentifier
termAtt	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
OffsetAttribute	TokenNameIdentifier
offsetAtt	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
PositionIncrementAttribute	TokenNameIdentifier
posIncrAtt	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
TypeAttribute	TokenNameIdentifier
typeAtt	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
TestTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
testToken	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
testToken	TokenNameIdentifier
=	TokenNameEQUAL
testToken	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
termAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
CharTermAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
offsetAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
OffsetAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
posIncrAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
PositionIncrementAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
typeAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
TypeAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
final	TokenNamefinal
boolean	TokenNameboolean
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
clearAttributes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
index	TokenNameIdentifier
<	TokenNameLESS
testToken	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Token	TokenNameIdentifier
t	TokenNameIdentifier
=	TokenNameEQUAL
testToken	TokenNameIdentifier
[	TokenNameLBRACKET
index	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
termAtt	TokenNameIdentifier
.	TokenNameDOT
copyBuffer	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
buffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
t	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
setOffset	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
startOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
t	TokenNameIdentifier
.	TokenNameDOT
endOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posIncrAtt	TokenNameIdentifier
.	TokenNameDOT
setPositionIncrement	TokenNameIdentifier
(	TokenNameLPAREN
t	TokenNameIdentifier
.	TokenNameDOT
getPositionIncrement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
typeAtt	TokenNameIdentifier
.	TokenNameDOT
setType	TokenNameIdentifier
(	TokenNameLPAREN
TypeAttribute	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TEST_TOKEN	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
UNIGRAM_ONLY_POSITION_INCREMENTS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
UNIGRAM_ONLY_TYPES	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
testTokenWithHoles	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TOKENS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_POSITION_INCREMENTS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TYPES	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TOKENS_WITH_HOLES	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide _"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence _"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_POSITION_INCREMENTS_WITH_HOLES	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TYPES_WITH_HOLES	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TOKENS_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TYPES_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TOKENS_WITH_HOLES_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide _"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence _"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_POSITION_INCREMENTS_WITH_HOLES_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TEST_SINGLE_TOKEN	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
SINGLE_TOKEN	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
SINGLE_TOKEN_INCREMENTS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
SINGLE_TOKEN_TYPES	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
EMPTY_TOKEN_ARRAY	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
EMPTY_TOKEN_INCREMENTS_ARRAY	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
EMPTY_TOKEN_TYPES_ARRAY	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_TOKENS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_POSITION_INCREMENTS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_TYPES	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS_MIN_TRI_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES_MIN_TRI_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_TOKENS_MIN_TRI_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_TYPES_MIN_TRI_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_TOKENS_MIN_FOUR_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_POSITION_INCREMENTS_MIN_FOUR_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_TYPES_MIN_FOUR_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TOKENS_NO_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"pleasedivide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"dividethis"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"thissentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentenceinto"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"intoshingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TYPES_NO_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"pleasedivide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"dividethis"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"thissentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentenceinto"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"intoshingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS_NO_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"pleasedivide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"pleasedividethis"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"dividethis"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"dividethissentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"thissentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"thissentenceinto"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentenceinto"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentenceintoshingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"intoshingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES_NO_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"pleasedivide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"pleasedividethis"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"dividethis"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"dividethissentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"thissentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"thissentenceinto"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentenceinto"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentenceintoshingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"intoshingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TOKENS_ALT_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please<SEP>divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide<SEP>this"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this<SEP>sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence<SEP>into"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into<SEP>shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TYPES_ALT_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please<SEP>divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide<SEP>this"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this<SEP>sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence<SEP>into"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into<SEP>shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
BI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS_ALT_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please<SEP>divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please<SEP>divide<SEP>this"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide<SEP>this"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide<SEP>this<SEP>sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this<SEP>sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this<SEP>sentence<SEP>into"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence<SEP>into"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence<SEP>into<SEP>shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into<SEP>shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES_ALT_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please<SEP>divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please<SEP>divide<SEP>this"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide<SEP>this"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide<SEP>this<SEP>sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this<SEP>sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this<SEP>sentence<SEP>into"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence<SEP>into"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence<SEP>into<SEP>shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into<SEP>shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS_NULL_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"pleasedivide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"pleasedividethis"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"dividethis"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"dividethissentence"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"thissentence"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"thissentenceinto"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentenceinto"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentenceintoshingles"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"intoshingles"	TokenNameStringLiteral
,	TokenNameCOMMA
28	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS_NULL_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES_NULL_SEPARATOR	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TEST_TOKEN_POS_INCR_EQUAL_TO_N	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
37	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
38	TokenNameIntegerLiteral
,	TokenNameCOMMA
42	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
43	TokenNameIntegerLiteral
,	TokenNameCOMMA
49	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this _"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this _"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this _ _"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ _ sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
37	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
37	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
42	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
37	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
42	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
49	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
38	TokenNameIntegerLiteral
,	TokenNameCOMMA
42	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
38	TokenNameIntegerLiteral
,	TokenNameCOMMA
49	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
43	TokenNameIntegerLiteral
,	TokenNameCOMMA
49	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this _"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this _"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this _ _"	TokenNameStringLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ _ sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
37	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
37	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
42	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
42	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
49	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
38	TokenNameIntegerLiteral
,	TokenNameCOMMA
49	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TEST_TOKEN_POS_INCR_GREATER_THAN_N	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
,	TokenNameCOMMA
63	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
64	TokenNameIntegerLiteral
,	TokenNameCOMMA
68	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
69	TokenNameIntegerLiteral
,	TokenNameCOMMA
77	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
78	TokenNameIntegerLiteral
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
83	TokenNameIntegerLiteral
,	TokenNameCOMMA
89	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please _"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please _ _"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ _ divide"	TokenNameStringLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
,	TokenNameCOMMA
63	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ divide"	TokenNameStringLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
,	TokenNameCOMMA
63	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
,	TokenNameCOMMA
68	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
,	TokenNameCOMMA
63	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
,	TokenNameCOMMA
68	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
,	TokenNameCOMMA
77	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
64	TokenNameIntegerLiteral
,	TokenNameCOMMA
68	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
64	TokenNameIntegerLiteral
,	TokenNameCOMMA
77	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
64	TokenNameIntegerLiteral
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
69	TokenNameIntegerLiteral
,	TokenNameCOMMA
77	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
69	TokenNameIntegerLiteral
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
69	TokenNameIntegerLiteral
,	TokenNameCOMMA
89	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
78	TokenNameIntegerLiteral
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
78	TokenNameIntegerLiteral
,	TokenNameCOMMA
89	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
83	TokenNameIntegerLiteral
,	TokenNameCOMMA
89	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"word"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please _"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please _ _"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ _ divide"	TokenNameStringLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
,	TokenNameCOMMA
63	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ divide"	TokenNameStringLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
,	TokenNameCOMMA
63	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"_ divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
,	TokenNameCOMMA
68	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
,	TokenNameCOMMA
68	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
57	TokenNameIntegerLiteral
,	TokenNameCOMMA
77	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
64	TokenNameIntegerLiteral
,	TokenNameCOMMA
77	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"this sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
64	TokenNameIntegerLiteral
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into"	TokenNameStringLiteral
,	TokenNameCOMMA
69	TokenNameIntegerLiteral
,	TokenNameCOMMA
82	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
69	TokenNameIntegerLiteral
,	TokenNameCOMMA
89	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"into shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
78	TokenNameIntegerLiteral
,	TokenNameCOMMA
89	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
setUp	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
testTokenWithHoles	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
createToken	TokenNameIdentifier
(	TokenNameLPAREN
"shingles"	TokenNameStringLiteral
,	TokenNameCOMMA
33	TokenNameIntegerLiteral
,	TokenNameCOMMA
39	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBiGramFilter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TOKENS	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_POSITION_INCREMENTS	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TYPES	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBiGramFilterWithHoles	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
testTokenWithHoles	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TOKENS_WITH_HOLES	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_POSITION_INCREMENTS_WITH_HOLES	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TYPES_WITH_HOLES	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBiGramFilterWithoutUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TOKENS_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TYPES_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBiGramFilterWithHolesWithoutUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
testTokenWithHoles	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TOKENS_WITH_HOLES_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_POSITION_INCREMENTS_WITH_HOLES_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TYPES_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBiGramFilterWithSingleToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_SINGLE_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
SINGLE_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
SINGLE_TOKEN_INCREMENTS	TokenNameIdentifier
,	TokenNameCOMMA
SINGLE_TOKEN_TYPES	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBiGramFilterWithSingleTokenWithoutUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_SINGLE_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
EMPTY_TOKEN_ARRAY	TokenNameIdentifier
,	TokenNameCOMMA
EMPTY_TOKEN_INCREMENTS_ARRAY	TokenNameIdentifier
,	TokenNameCOMMA
EMPTY_TOKEN_TYPES_ARRAY	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBiGramFilterWithEmptyTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
EMPTY_TOKEN_ARRAY	TokenNameIdentifier
,	TokenNameCOMMA
EMPTY_TOKEN_ARRAY	TokenNameIdentifier
,	TokenNameCOMMA
EMPTY_TOKEN_INCREMENTS_ARRAY	TokenNameIdentifier
,	TokenNameCOMMA
EMPTY_TOKEN_TYPES_ARRAY	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBiGramFilterWithEmptyTokenStreamWithoutUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
EMPTY_TOKEN_ARRAY	TokenNameIdentifier
,	TokenNameCOMMA
EMPTY_TOKEN_ARRAY	TokenNameIdentifier
,	TokenNameCOMMA
EMPTY_TOKEN_INCREMENTS_ARRAY	TokenNameIdentifier
,	TokenNameCOMMA
EMPTY_TOKEN_TYPES_ARRAY	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTriGramFilter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTriGramFilterWithoutUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFourGramFilter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_TOKENS	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_POSITION_INCREMENTS	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_TYPES	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFourGramFilterWithoutUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTriGramFilterMinTriGram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS_MIN_TRI_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES_MIN_TRI_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTriGramFilterWithoutUnigramsMinTriGram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFourGramFilterMinTriGram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_TOKENS_MIN_TRI_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_TYPES_MIN_TRI_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFourGramFilterWithoutUnigramsMinTriGram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFourGramFilterMinFourGram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_TOKENS_MIN_FOUR_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_POSITION_INCREMENTS_MIN_FOUR_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_TYPES_MIN_FOUR_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFourGramFilterWithoutUnigramsMinFourGram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBiGramFilterNoSeparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TOKENS_NO_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TYPES_NO_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBiGramFilterWithoutUnigramsNoSeparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTriGramFilterNoSeparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS_NO_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES_NO_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTriGramFilterWithoutUnigramsNoSeparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBiGramFilterAltSeparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
"<SEP>"	TokenNameStringLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TOKENS_ALT_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TYPES_ALT_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBiGramFilterWithoutUnigramsAltSeparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
"<SEP>"	TokenNameStringLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTriGramFilterAltSeparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
"<SEP>"	TokenNameStringLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS_ALT_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES_ALT_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTriGramFilterWithoutUnigramsAltSeparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
"<SEP>"	TokenNameStringLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testTriGramFilterNullSeparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS_NULL_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS_NULL_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES_NULL_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testPositionIncrementEqualToN	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN_POS_INCR_EQUAL_TO_N	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testPositionIncrementEqualToNWithoutUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN_POS_INCR_EQUAL_TO_N	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testPositionIncrementGreaterThanN	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN_POS_INCR_GREATER_THAN_N	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testPositionIncrementGreaterThanNWithoutUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN_POS_INCR_GREATER_THAN_N	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testReset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Tokenizer	TokenNameIdentifier
wsTokenizer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
WhitespaceTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this sentence"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TokenStream	TokenNameIdentifier
filter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ShingleFilter	TokenNameIdentifier
(	TokenNameLPAREN
wsTokenizer	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTokenStreamContents	TokenNameIdentifier
(	TokenNameLPAREN
filter	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
"please divide"	TokenNameStringLiteral
,	TokenNameCOMMA
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
"divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
"this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
"sentence"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
TypeAttribute	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
TypeAttribute	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
TypeAttribute	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
TypeAttribute	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
wsTokenizer	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
StringReader	TokenNameIdentifier
(	TokenNameLPAREN
"please divide this sentence"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTokenStreamContents	TokenNameIdentifier
(	TokenNameLPAREN
filter	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"please"	TokenNameStringLiteral
,	TokenNameCOMMA
"please divide"	TokenNameStringLiteral
,	TokenNameCOMMA
"divide"	TokenNameStringLiteral
,	TokenNameCOMMA
"divide this"	TokenNameStringLiteral
,	TokenNameCOMMA
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
"this sentence"	TokenNameStringLiteral
,	TokenNameCOMMA
"sentence"	TokenNameStringLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
14	TokenNameIntegerLiteral
,	TokenNameCOMMA
19	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
,	TokenNameCOMMA
13	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
,	TokenNameCOMMA
27	TokenNameIntegerLiteral
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
TypeAttribute	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
TypeAttribute	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
TypeAttribute	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE	TokenNameIdentifier
,	TokenNameCOMMA
"shingle"	TokenNameStringLiteral
,	TokenNameCOMMA
TypeAttribute	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_TYPE	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testOutputUnigramsIfNoShinglesSingleTokenCase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_SINGLE_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
SINGLE_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
SINGLE_TOKEN_INCREMENTS	TokenNameIdentifier
,	TokenNameCOMMA
SINGLE_TOKEN_TYPES	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testOutputUnigramsIfNoShinglesWithSimpleBigram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TOKENS	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_POSITION_INCREMENTS	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TYPES	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testOutputUnigramsIfNoShinglesWithSimpleUnigramlessBigram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TOKENS_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
BI_GRAM_TYPES_WITHOUT_UNIGRAMS	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testOutputUnigramsIfNoShinglesWithMultipleInputTokens	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
TEST_TOKEN	TokenNameIdentifier
,	TokenNameCOMMA
UNIGRAM_ONLY_POSITION_INCREMENTS	TokenNameIdentifier
,	TokenNameCOMMA
UNIGRAM_ONLY_TYPES	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
maxSize	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokensToShingle	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokensToCompare	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
positionIncrements	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
types	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
outputUnigrams	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
ShingleFilter	TokenNameIdentifier
filter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ShingleFilter	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TestTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
tokensToShingle	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
maxSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
filter	TokenNameIdentifier
.	TokenNameDOT
setOutputUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
outputUnigrams	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
shingleFilterTestCommon	TokenNameIdentifier
(	TokenNameLPAREN
filter	TokenNameIdentifier
,	TokenNameCOMMA
tokensToCompare	TokenNameIdentifier
,	TokenNameCOMMA
positionIncrements	TokenNameIdentifier
,	TokenNameCOMMA
types	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
minSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxSize	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokensToShingle	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokensToCompare	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
positionIncrements	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
types	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
outputUnigrams	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
ShingleFilter	TokenNameIdentifier
filter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ShingleFilter	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TestTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
tokensToShingle	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
minSize	TokenNameIdentifier
,	TokenNameCOMMA
maxSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
filter	TokenNameIdentifier
.	TokenNameDOT
setOutputUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
outputUnigrams	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
shingleFilterTestCommon	TokenNameIdentifier
(	TokenNameLPAREN
filter	TokenNameIdentifier
,	TokenNameCOMMA
tokensToCompare	TokenNameIdentifier
,	TokenNameCOMMA
positionIncrements	TokenNameIdentifier
,	TokenNameCOMMA
types	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
minSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxSize	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokensToShingle	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokensToCompare	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
positionIncrements	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
types	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
outputUnigrams	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
outputUnigramsIfNoShingles	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
ShingleFilter	TokenNameIdentifier
filter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ShingleFilter	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TestTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
tokensToShingle	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
minSize	TokenNameIdentifier
,	TokenNameCOMMA
maxSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
filter	TokenNameIdentifier
.	TokenNameDOT
setOutputUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
outputUnigrams	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
filter	TokenNameIdentifier
.	TokenNameDOT
setOutputUnigramsIfNoShingles	TokenNameIdentifier
(	TokenNameLPAREN
outputUnigramsIfNoShingles	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
shingleFilterTestCommon	TokenNameIdentifier
(	TokenNameLPAREN
filter	TokenNameIdentifier
,	TokenNameCOMMA
tokensToCompare	TokenNameIdentifier
,	TokenNameCOMMA
positionIncrements	TokenNameIdentifier
,	TokenNameCOMMA
types	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
shingleFilterTest	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
tokenSeparator	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxSize	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokensToShingle	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokensToCompare	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
positionIncrements	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
types	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
outputUnigrams	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
ShingleFilter	TokenNameIdentifier
filter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ShingleFilter	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
TestTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
tokensToShingle	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
minSize	TokenNameIdentifier
,	TokenNameCOMMA
maxSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
filter	TokenNameIdentifier
.	TokenNameDOT
setTokenSeparator	TokenNameIdentifier
(	TokenNameLPAREN
tokenSeparator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
filter	TokenNameIdentifier
.	TokenNameDOT
setOutputUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
outputUnigrams	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
shingleFilterTestCommon	TokenNameIdentifier
(	TokenNameLPAREN
filter	TokenNameIdentifier
,	TokenNameCOMMA
tokensToCompare	TokenNameIdentifier
,	TokenNameCOMMA
positionIncrements	TokenNameIdentifier
,	TokenNameCOMMA
types	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
shingleFilterTestCommon	TokenNameIdentifier
(	TokenNameLPAREN
ShingleFilter	TokenNameIdentifier
filter	TokenNameIdentifier
,	TokenNameCOMMA
Token	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokensToCompare	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
positionIncrements	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
types	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
text	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
tokensToCompare	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
startOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
tokensToCompare	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
endOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
tokensToCompare	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
tokensToCompare	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
text	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
tokensToCompare	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
buffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
tokensToCompare	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
startOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tokensToCompare	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
startOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endOffsets	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tokensToCompare	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
endOffset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
assertTokenStreamContents	TokenNameIdentifier
(	TokenNameLPAREN
filter	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
startOffsets	TokenNameIdentifier
,	TokenNameCOMMA
endOffsets	TokenNameIdentifier
,	TokenNameCOMMA
types	TokenNameIdentifier
,	TokenNameCOMMA
positionIncrements	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
Token	TokenNameIdentifier
createToken	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
term	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
offset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
createToken	TokenNameIdentifier
(	TokenNameLPAREN
term	TokenNameIdentifier
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
Token	TokenNameIdentifier
createToken	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
term	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
offset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
positionIncrement	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Token	TokenNameIdentifier
token	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Token	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
token	TokenNameIdentifier
.	TokenNameDOT
copyBuffer	TokenNameIdentifier
(	TokenNameLPAREN
term	TokenNameIdentifier
.	TokenNameDOT
toCharArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
term	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
token	TokenNameIdentifier
.	TokenNameDOT
setPositionIncrement	TokenNameIdentifier
(	TokenNameLPAREN
positionIncrement	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
token	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testRandomStrings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ReusableAnalyzerBase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
TokenStreamComponents	TokenNameIdentifier
createComponents	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Tokenizer	TokenNameIdentifier
tokenizer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MockTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
ShingleFilter	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
checkRandomData	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
10000	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
RANDOM_MULTIPLIER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testRandomHugeStrings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ReusableAnalyzerBase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
TokenStreamComponents	TokenNameIdentifier
createComponents	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Tokenizer	TokenNameIdentifier
tokenizer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MockTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
MockTokenizer	TokenNameIdentifier
.	TokenNameDOT
WHITESPACE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
ShingleFilter	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
checkRandomData	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
a	TokenNameIdentifier
,	TokenNameCOMMA
200	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
RANDOM_MULTIPLIER	TokenNameIdentifier
,	TokenNameCOMMA
8192	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testEmptyTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ReusableAnalyzerBase	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
TokenStreamComponents	TokenNameIdentifier
createComponents	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Tokenizer	TokenNameIdentifier
tokenizer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
KeywordTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
ShingleFilter	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
