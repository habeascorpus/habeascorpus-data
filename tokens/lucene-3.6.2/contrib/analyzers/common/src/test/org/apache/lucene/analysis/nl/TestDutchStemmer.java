package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
nl	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
BaseTokenStreamTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Analyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
CharArraySet	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Version	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TestDutchStemmer	TokenNameIdentifier
extends	TokenNameextends
BaseTokenStreamTestCase	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
testWithSnowballExamples	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichaamsziek"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichaamsziek"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichamelijk"	TokenNameStringLiteral
,	TokenNameCOMMA
"licham"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichamelijke"	TokenNameStringLiteral
,	TokenNameCOMMA
"licham"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichamelijkheden"	TokenNameStringLiteral
,	TokenNameCOMMA
"licham"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichamen"	TokenNameStringLiteral
,	TokenNameCOMMA
"licham"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichere"	TokenNameStringLiteral
,	TokenNameCOMMA
"licher"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"licht"	TokenNameStringLiteral
,	TokenNameCOMMA
"licht"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtbeeld"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtbeeld"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtbruin"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtbruin"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtdoorlatende"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtdoorlat"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichte"	TokenNameStringLiteral
,	TokenNameCOMMA
"licht"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichten"	TokenNameStringLiteral
,	TokenNameCOMMA
"licht"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtende"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtend"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtenvoorde"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtenvoord"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichter"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichter"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtere"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichter"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichters"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichter"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtgevoeligheid"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtgevoel"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtgewicht"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtgewicht"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtgrijs"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtgrijs"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichthoeveelheid"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichthoevel"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtintensiteit"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtintensiteit"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtje"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtj"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtjes"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtjes"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtkranten"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtkrant"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtkring"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtkring"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtkringen"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtkring"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtregelsystemen"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtregelsystem"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtste"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtst"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtstromende"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtstrom"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtte"	TokenNameStringLiteral
,	TokenNameCOMMA
"licht"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtten"	TokenNameStringLiteral
,	TokenNameCOMMA
"licht"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichttoetreding"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichttoetred"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtverontreinigde"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtverontreinigd"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lichtzinnige"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichtzinn"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lid"	TokenNameStringLiteral
,	TokenNameCOMMA
"lid"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lidia"	TokenNameStringLiteral
,	TokenNameCOMMA
"lidia"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lidmaatschap"	TokenNameStringLiteral
,	TokenNameCOMMA
"lidmaatschap"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lidstaten"	TokenNameStringLiteral
,	TokenNameCOMMA
"lidstat"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"lidvereniging"	TokenNameStringLiteral
,	TokenNameCOMMA
"lidveren"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opgingen"	TokenNameStringLiteral
,	TokenNameCOMMA
"opging"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opglanzing"	TokenNameStringLiteral
,	TokenNameCOMMA
"opglanz"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opglanzingen"	TokenNameStringLiteral
,	TokenNameCOMMA
"opglanz"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opglimlachten"	TokenNameStringLiteral
,	TokenNameCOMMA
"opglimlacht"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opglimpen"	TokenNameStringLiteral
,	TokenNameCOMMA
"opglimp"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opglimpende"	TokenNameStringLiteral
,	TokenNameCOMMA
"opglimp"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opglimping"	TokenNameStringLiteral
,	TokenNameCOMMA
"opglimp"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opglimpingen"	TokenNameStringLiteral
,	TokenNameCOMMA
"opglimp"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opgraven"	TokenNameStringLiteral
,	TokenNameCOMMA
"opgrav"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opgrijnzen"	TokenNameStringLiteral
,	TokenNameCOMMA
"opgrijnz"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opgrijzende"	TokenNameStringLiteral
,	TokenNameCOMMA
"opgrijz"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opgroeien"	TokenNameStringLiteral
,	TokenNameCOMMA
"opgroei"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opgroeiende"	TokenNameStringLiteral
,	TokenNameCOMMA
"opgroei"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opgroeiplaats"	TokenNameStringLiteral
,	TokenNameCOMMA
"opgroeiplat"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophaal"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophal"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophaaldienst"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophaaldienst"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophaalkosten"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophaalkost"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophaalsystemen"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophaalsystem"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophaalt"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophaalt"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophaaltruck"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophaaltruck"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophalen"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophal"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophalend"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophal"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophalers"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophaler"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophef"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophef"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opheldering"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophelder"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophemelde"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophemeld"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophemelen"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophemel"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"opheusden"	TokenNameStringLiteral
,	TokenNameCOMMA
"opheusd"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophief"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophief"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophield"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophield"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophieven"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophiev"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophoepelt"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophoepelt"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophoog"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophog"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophoogzand"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophoogzand"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophopen"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophop"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophoping"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophop"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
check	TokenNameIdentifier
(	TokenNameLPAREN
"ophouden"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophoud"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testOldBuggyStemmer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_30	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"opheffen"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophef"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"opheffende"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophef"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"opheffing"	TokenNameStringLiteral
,	TokenNameCOMMA
"ophef"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testSnowballCorrectness	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"opheffen"	TokenNameStringLiteral
,	TokenNameCOMMA
"opheff"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"opheffende"	TokenNameStringLiteral
,	TokenNameCOMMA
"opheff"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"opheffing"	TokenNameStringLiteral
,	TokenNameCOMMA
"opheff"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testReusableTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
Analyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"lichaamsziek"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichaamsziek"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"lichamelijk"	TokenNameStringLiteral
,	TokenNameCOMMA
"licham"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"lichamelijke"	TokenNameStringLiteral
,	TokenNameCOMMA
"licham"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"lichamelijkheden"	TokenNameStringLiteral
,	TokenNameCOMMA
"licham"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testExclusionTableReuse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
DutchAnalyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"lichamelijk"	TokenNameStringLiteral
,	TokenNameCOMMA
"licham"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
a	TokenNameIdentifier
.	TokenNameDOT
setStemExclusionTable	TokenNameIdentifier
(	TokenNameLPAREN
"lichamelijk"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"lichamelijk"	TokenNameStringLiteral
,	TokenNameCOMMA
"lichamelijk"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testExclusionTableViaCtor	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
CharArraySet	TokenNameIdentifier
set	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CharArraySet	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_30	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
set	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
"lichamelijk"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
DutchAnalyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
CharArraySet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_SET	TokenNameIdentifier
,	TokenNameCOMMA
set	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertAnalyzesToReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"lichamelijk lichamelijke"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"lichamelijk"	TokenNameStringLiteral
,	TokenNameCOMMA
"licham"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
CharArraySet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_SET	TokenNameIdentifier
,	TokenNameCOMMA
set	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertAnalyzesTo	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"lichamelijk lichamelijke"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"lichamelijk"	TokenNameStringLiteral
,	TokenNameCOMMA
"licham"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testStemDictionaryReuse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
DutchAnalyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"lichamelijk"	TokenNameStringLiteral
,	TokenNameCOMMA
"licham"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
File	TokenNameIdentifier
customDictFile	TokenNameIdentifier
=	TokenNameEQUAL
getDataFile	TokenNameIdentifier
(	TokenNameLPAREN
"customStemDict.txt"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
a	TokenNameIdentifier
.	TokenNameDOT
setStemDictionary	TokenNameIdentifier
(	TokenNameLPAREN
customDictFile	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTermReuse	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"lichamelijk"	TokenNameStringLiteral
,	TokenNameCOMMA
"somethingentirelydifferent"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testStemOverrides	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
DutchAnalyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
CharArraySet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_SET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTerm	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"fiets"	TokenNameStringLiteral
,	TokenNameCOMMA
"fiets"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testBuggyStemOverrides	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
DutchAnalyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_35	TokenNameIdentifier
,	TokenNameCOMMA
CharArraySet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_SET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkOneTerm	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"fiets"	TokenNameStringLiteral
,	TokenNameCOMMA
"fiet"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testBuggyStopwordsCasing	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
DutchAnalyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_30	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertAnalyzesTo	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"Zelf"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
"zelf"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testStopwordsCasing	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
DutchAnalyzer	TokenNameIdentifier
a	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_31	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertAnalyzesTo	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
"Zelf"	TokenNameStringLiteral
,	TokenNameCOMMA
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
check	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
String	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
String	TokenNameIdentifier
expected	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
checkOneTerm	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
input	TokenNameIdentifier
,	TokenNameCOMMA
expected	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testRandomStrings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
checkRandomData	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
DutchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
TEST_VERSION_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
10000	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
RANDOM_MULTIPLIER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
