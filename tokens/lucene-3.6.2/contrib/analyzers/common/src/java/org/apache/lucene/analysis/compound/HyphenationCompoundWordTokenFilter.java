package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
compound	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Reader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Set	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
compound	TokenNameIdentifier
.	TokenNameDOT
hyphenation	TokenNameIdentifier
.	TokenNameDOT
Hyphenation	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
compound	TokenNameIdentifier
.	TokenNameDOT
hyphenation	TokenNameIdentifier
.	TokenNameDOT
HyphenationTree	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Version	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
xml	TokenNameIdentifier
.	TokenNameDOT
sax	TokenNameIdentifier
.	TokenNameDOT
InputSource	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
extends	TokenNameextends
CompoundWordTokenFilterBase	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dictionary	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minWordSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
onlyLongestMatch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
input	TokenNameIdentifier
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
makeDictionary	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
dictionary	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
minWordSize	TokenNameIdentifier
,	TokenNameCOMMA
minSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
maxSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
onlyLongestMatch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dictionary	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_30	TokenNameIdentifier
,	TokenNameCOMMA
input	TokenNameIdentifier
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
makeDictionary	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_30	TokenNameIdentifier
,	TokenNameCOMMA
dictionary	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MIN_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MAX_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
dictionary	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
dictionary	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MIN_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MAX_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
dictionary	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minWordSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
onlyLongestMatch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
input	TokenNameIdentifier
,	TokenNameCOMMA
dictionary	TokenNameIdentifier
,	TokenNameCOMMA
minWordSize	TokenNameIdentifier
,	TokenNameCOMMA
minSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
maxSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
onlyLongestMatch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
hyphenator	TokenNameIdentifier
=	TokenNameEQUAL
hyphenator	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minWordSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxSubwordSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
input	TokenNameIdentifier
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
)	TokenNameRPAREN
null	TokenNamenull
,	TokenNameCOMMA
minWordSize	TokenNameIdentifier
,	TokenNameCOMMA
minSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
maxSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
input	TokenNameIdentifier
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MIN_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MAX_SUBWORD_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dictionary	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minWordSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
onlyLongestMatch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_30	TokenNameIdentifier
,	TokenNameCOMMA
input	TokenNameIdentifier
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
makeDictionary	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_30	TokenNameIdentifier
,	TokenNameCOMMA
dictionary	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
minWordSize	TokenNameIdentifier
,	TokenNameCOMMA
minSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
maxSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
onlyLongestMatch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
dictionary	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_30	TokenNameIdentifier
,	TokenNameCOMMA
input	TokenNameIdentifier
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
makeDictionary	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_30	TokenNameIdentifier
,	TokenNameCOMMA
dictionary	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MIN_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MAX_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
dictionary	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_30	TokenNameIdentifier
,	TokenNameCOMMA
input	TokenNameIdentifier
,	TokenNameCOMMA
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
dictionary	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MIN_WORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MIN_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
DEFAULT_MAX_SUBWORD_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
HyphenationCompoundWordTokenFilter	TokenNameIdentifier
(	TokenNameLPAREN
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
HyphenationTree	TokenNameIdentifier
hyphenator	TokenNameIdentifier
,	TokenNameCOMMA
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
dictionary	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minWordSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
onlyLongestMatch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_30	TokenNameIdentifier
,	TokenNameCOMMA
input	TokenNameIdentifier
,	TokenNameCOMMA
dictionary	TokenNameIdentifier
,	TokenNameCOMMA
minWordSize	TokenNameIdentifier
,	TokenNameCOMMA
minSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
maxSubwordSize	TokenNameIdentifier
,	TokenNameCOMMA
onlyLongestMatch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
hyphenator	TokenNameIdentifier
=	TokenNameEQUAL
hyphenator	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
HyphenationTree	TokenNameIdentifier
getHyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
hyphenationFilename	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
getHyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
InputSource	TokenNameIdentifier
(	TokenNameLPAREN
hyphenationFilename	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
HyphenationTree	TokenNameIdentifier
getHyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
hyphenationFile	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
return	TokenNamereturn
getHyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
InputSource	TokenNameIdentifier
(	TokenNameLPAREN
hyphenationFile	TokenNameIdentifier
.	TokenNameDOT
toURL	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
toExternalForm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
static	TokenNamestatic
HyphenationTree	TokenNameIdentifier
getHyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
Reader	TokenNameIdentifier
hyphenationReader	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
InputSource	TokenNameIdentifier
is	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
InputSource	TokenNameIdentifier
(	TokenNameLPAREN
hyphenationReader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
is	TokenNameIdentifier
.	TokenNameDOT
setSystemId	TokenNameIdentifier
(	TokenNameLPAREN
"urn:java:"	TokenNameStringLiteral
+	TokenNamePLUS
HyphenationTree	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
getHyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
is	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
HyphenationTree	TokenNameIdentifier
getHyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
InputSource	TokenNameIdentifier
hyphenationSource	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
HyphenationTree	TokenNameIdentifier
tree	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HyphenationTree	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tree	TokenNameIdentifier
.	TokenNameDOT
loadPatterns	TokenNameIdentifier
(	TokenNameLPAREN
hyphenationSource	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tree	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
void	TokenNamevoid
decompose	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Hyphenation	TokenNameIdentifier
hyphens	TokenNameIdentifier
=	TokenNameEQUAL
hyphenator	TokenNameIdentifier
.	TokenNameDOT
hyphenate	TokenNameIdentifier
(	TokenNameLPAREN
termAtt	TokenNameIdentifier
.	TokenNameDOT
buffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
termAtt	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
hyphens	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
hyp	TokenNameIdentifier
=	TokenNameEQUAL
hyphens	TokenNameIdentifier
.	TokenNameDOT
getHyphenationPoints	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
hyp	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
remaining	TokenNameIdentifier
=	TokenNameEQUAL
hyp	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
i	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
start	TokenNameIdentifier
=	TokenNameEQUAL
hyp	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
CompoundToken	TokenNameIdentifier
longestMatchToken	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
remaining	TokenNameIdentifier
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
partLength	TokenNameIdentifier
=	TokenNameEQUAL
hyp	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
j	TokenNameIdentifier
]	TokenNameRBRACKET
-	TokenNameMINUS
start	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
partLength	TokenNameIdentifier
>	TokenNameGREATER
this	TokenNamethis
.	TokenNameDOT
maxSubwordSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
partLength	TokenNameIdentifier
<	TokenNameLESS
this	TokenNamethis
.	TokenNameDOT
minSubwordSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
dictionary	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
dictionary	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
termAtt	TokenNameIdentifier
.	TokenNameDOT
buffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
partLength	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
onlyLongestMatch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
longestMatchToken	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
longestMatchToken	TokenNameIdentifier
.	TokenNameDOT
txt	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
partLength	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
longestMatchToken	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CompoundToken	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
partLength	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
longestMatchToken	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CompoundToken	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
partLength	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tokens	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
CompoundToken	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
partLength	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
dictionary	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
termAtt	TokenNameIdentifier
.	TokenNameDOT
buffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
start	TokenNameIdentifier
,	TokenNameCOMMA
partLength	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
onlyLongestMatch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
longestMatchToken	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
longestMatchToken	TokenNameIdentifier
.	TokenNameDOT
txt	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
partLength	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
longestMatchToken	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CompoundToken	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
partLength	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
longestMatchToken	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CompoundToken	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
partLength	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
tokens	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
CompoundToken	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
partLength	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
onlyLongestMatch	TokenNameIdentifier
&&	TokenNameAND_AND
longestMatchToken	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
tokens	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
longestMatchToken	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
