package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
tartarus	TokenNameIdentifier
.	TokenNameDOT
snowball	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
reflect	TokenNameIdentifier
.	TokenNameDOT
InvocationTargetException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayUtil	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
RamUsageEstimator	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
abstract	TokenNameabstract
class	TokenNameclass
SnowballProgram	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
EMPTY_ARGS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Object	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
SnowballProgram	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
8	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
setCurrent	TokenNameIdentifier
(	TokenNameLPAREN
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
abstract	TokenNameabstract
boolean	TokenNameboolean
stem	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
setCurrent	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
.	TokenNameDOT
toCharArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
limit	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bra	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
ket	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getCurrent	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
limit	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setCurrent	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
text	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
text	TokenNameIdentifier
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
limit	TokenNameIdentifier
=	TokenNameEQUAL
length	TokenNameIdentifier
;	TokenNameSEMICOLON
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bra	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
ket	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
getCurrentBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
current	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getCurrentBufferLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
limit	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
char	TokenNamechar
current	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
limit	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
limit_backward	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
bra	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
ket	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
void	TokenNamevoid
copy_from	TokenNameIdentifier
(	TokenNameLPAREN
SnowballProgram	TokenNameIdentifier
other	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
current	TokenNameIdentifier
=	TokenNameEQUAL
other	TokenNameIdentifier
.	TokenNameDOT
current	TokenNameIdentifier
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
other	TokenNameIdentifier
.	TokenNameDOT
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
limit	TokenNameIdentifier
=	TokenNameEQUAL
other	TokenNameIdentifier
.	TokenNameDOT
limit	TokenNameIdentifier
;	TokenNameSEMICOLON
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
other	TokenNameIdentifier
.	TokenNameDOT
limit_backward	TokenNameIdentifier
;	TokenNameSEMICOLON
bra	TokenNameIdentifier
=	TokenNameEQUAL
other	TokenNameIdentifier
.	TokenNameDOT
bra	TokenNameIdentifier
;	TokenNameSEMICOLON
ket	TokenNameIdentifier
=	TokenNameEQUAL
other	TokenNameIdentifier
.	TokenNameDOT
ket	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
in_grouping	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
s	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
min	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
max	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
limit	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
current	TokenNameIdentifier
[	TokenNameLBRACKET
cursor	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>	TokenNameGREATER
max	TokenNameIdentifier
||	TokenNameOR_OR
ch	TokenNameIdentifier
<	TokenNameLESS
min	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
ch	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
min	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
s	TokenNameIdentifier
[	TokenNameLBRACKET
ch	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
(	TokenNameLPAREN
0X1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
ch	TokenNameIdentifier
&	TokenNameAND
0X7	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
in_grouping_b	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
s	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
min	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
max	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
limit_backward	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
current	TokenNameIdentifier
[	TokenNameLBRACKET
cursor	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>	TokenNameGREATER
max	TokenNameIdentifier
||	TokenNameOR_OR
ch	TokenNameIdentifier
<	TokenNameLESS
min	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
ch	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
min	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
s	TokenNameIdentifier
[	TokenNameLBRACKET
ch	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
(	TokenNameLPAREN
0X1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
ch	TokenNameIdentifier
&	TokenNameAND
0X7	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
out_grouping	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
s	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
min	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
max	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
limit	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
current	TokenNameIdentifier
[	TokenNameLBRACKET
cursor	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>	TokenNameGREATER
max	TokenNameIdentifier
||	TokenNameOR_OR
ch	TokenNameIdentifier
<	TokenNameLESS
min	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
cursor	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
min	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
s	TokenNameIdentifier
[	TokenNameLBRACKET
ch	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
(	TokenNameLPAREN
0X1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
ch	TokenNameIdentifier
&	TokenNameAND
0X7	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
cursor	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
out_grouping_b	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
s	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
min	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
max	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
limit_backward	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
current	TokenNameIdentifier
[	TokenNameLBRACKET
cursor	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>	TokenNameGREATER
max	TokenNameIdentifier
||	TokenNameOR_OR
ch	TokenNameIdentifier
<	TokenNameLESS
min	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
cursor	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ch	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
min	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
s	TokenNameIdentifier
[	TokenNameLBRACKET
ch	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
(	TokenNameLPAREN
0X1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
ch	TokenNameIdentifier
&	TokenNameAND
0X7	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
cursor	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
in_range	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
min	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
max	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
limit	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
current	TokenNameIdentifier
[	TokenNameLBRACKET
cursor	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>	TokenNameGREATER
max	TokenNameIdentifier
||	TokenNameOR_OR
ch	TokenNameIdentifier
<	TokenNameLESS
min	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
in_range_b	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
min	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
max	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
limit_backward	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
current	TokenNameIdentifier
[	TokenNameLBRACKET
cursor	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>	TokenNameGREATER
max	TokenNameIdentifier
||	TokenNameOR_OR
ch	TokenNameIdentifier
<	TokenNameLESS
min	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
out_range	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
min	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
max	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
limit	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
current	TokenNameIdentifier
[	TokenNameLBRACKET
cursor	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
ch	TokenNameIdentifier
>	TokenNameGREATER
max	TokenNameIdentifier
||	TokenNameOR_OR
ch	TokenNameIdentifier
<	TokenNameLESS
min	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
out_range_b	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
min	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
max	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
limit_backward	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
current	TokenNameIdentifier
[	TokenNameLBRACKET
cursor	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
ch	TokenNameIdentifier
>	TokenNameGREATER
max	TokenNameIdentifier
||	TokenNameOR_OR
ch	TokenNameIdentifier
<	TokenNameLESS
min	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
eq_s	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
s_size	TokenNameIdentifier
,	TokenNameCOMMA
CharSequence	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
limit	TokenNameIdentifier
-	TokenNameMINUS
cursor	TokenNameIdentifier
<	TokenNameLESS
s_size	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
s_size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
[	TokenNameLBRACKET
cursor	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
s	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
s_size	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
eq_s	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
s_size	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
eq_s	TokenNameIdentifier
(	TokenNameLPAREN
s_size	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
)	TokenNameRPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
eq_s_b	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
s_size	TokenNameIdentifier
,	TokenNameCOMMA
CharSequence	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
-	TokenNameMINUS
limit_backward	TokenNameIdentifier
<	TokenNameLESS
s_size	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
s_size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
current	TokenNameIdentifier
[	TokenNameLBRACKET
cursor	TokenNameIdentifier
-	TokenNameMINUS
s_size	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
s	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
s_size	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
eq_s_b	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
s_size	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
eq_s_b	TokenNameIdentifier
(	TokenNameLPAREN
s_size	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
)	TokenNameRPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
eq_v	TokenNameIdentifier
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
eq_s	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
eq_v	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
eq_s	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
)	TokenNameRPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
boolean	TokenNameboolean
eq_v_b	TokenNameIdentifier
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
eq_s_b	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
eq_v_b	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
eq_s_b	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
)	TokenNameRPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
find_among	TokenNameIdentifier
(	TokenNameLPAREN
Among	TokenNameIdentifier
v	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
v_size	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
v_size	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
l	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
common_i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
common_j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
first_key_inspected	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
j	TokenNameIdentifier
-	TokenNameMINUS
i	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
diff	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
common	TokenNameIdentifier
=	TokenNameEQUAL
common_i	TokenNameIdentifier
<	TokenNameLESS
common_j	TokenNameIdentifier
?	TokenNameQUESTION
common_i	TokenNameIdentifier
:	TokenNameCOLON
common_j	TokenNameIdentifier
;	TokenNameSEMICOLON
Among	TokenNameIdentifier
w	TokenNameIdentifier
=	TokenNameEQUAL
v	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
i2	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i2	TokenNameIdentifier
=	TokenNameEQUAL
common	TokenNameIdentifier
;	TokenNameSEMICOLON
i2	TokenNameIdentifier
<	TokenNameLESS
w	TokenNameIdentifier
.	TokenNameDOT
s_size	TokenNameIdentifier
;	TokenNameSEMICOLON
i2	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
+	TokenNamePLUS
common	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
l	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
diff	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
diff	TokenNameIdentifier
=	TokenNameEQUAL
current	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
+	TokenNamePLUS
common	TokenNameIdentifier
]	TokenNameRBRACKET
-	TokenNameMINUS
w	TokenNameIdentifier
.	TokenNameDOT
s	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
diff	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
common	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
diff	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
j	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
common_j	TokenNameIdentifier
=	TokenNameEQUAL
common	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
i	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
common_i	TokenNameIdentifier
=	TokenNameEQUAL
common	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
j	TokenNameIdentifier
-	TokenNameMINUS
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
j	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
i	TokenNameIdentifier
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
first_key_inspected	TokenNameIdentifier
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
first_key_inspected	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
Among	TokenNameIdentifier
w	TokenNameIdentifier
=	TokenNameEQUAL
v	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
common_i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
w	TokenNameIdentifier
.	TokenNameDOT
s_size	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
cursor	TokenNameIdentifier
=	TokenNameEQUAL
c	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
.	TokenNameDOT
s_size	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
w	TokenNameIdentifier
.	TokenNameDOT
method	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
w	TokenNameIdentifier
.	TokenNameDOT
result	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
res	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
Object	TokenNameIdentifier
resobj	TokenNameIdentifier
=	TokenNameEQUAL
w	TokenNameIdentifier
.	TokenNameDOT
method	TokenNameIdentifier
.	TokenNameDOT
invoke	TokenNameIdentifier
(	TokenNameLPAREN
w	TokenNameIdentifier
.	TokenNameDOT
methodobject	TokenNameIdentifier
,	TokenNameCOMMA
EMPTY_ARGS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
res	TokenNameIdentifier
=	TokenNameEQUAL
resobj	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"true"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InvocationTargetException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
res	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IllegalAccessException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
res	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
=	TokenNameEQUAL
c	TokenNameIdentifier
+	TokenNamePLUS
w	TokenNameIdentifier
.	TokenNameDOT
s_size	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
res	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
w	TokenNameIdentifier
.	TokenNameDOT
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
i	TokenNameIdentifier
=	TokenNameEQUAL
w	TokenNameIdentifier
.	TokenNameDOT
substring_i	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
find_among_b	TokenNameIdentifier
(	TokenNameLPAREN
Among	TokenNameIdentifier
v	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
v_size	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
v_size	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
lb	TokenNameIdentifier
=	TokenNameEQUAL
limit_backward	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
common_i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
common_j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
boolean	TokenNameboolean
first_key_inspected	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
k	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
j	TokenNameIdentifier
-	TokenNameMINUS
i	TokenNameIdentifier
)	TokenNameRPAREN
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
diff	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
common	TokenNameIdentifier
=	TokenNameEQUAL
common_i	TokenNameIdentifier
<	TokenNameLESS
common_j	TokenNameIdentifier
?	TokenNameQUESTION
common_i	TokenNameIdentifier
:	TokenNameCOLON
common_j	TokenNameIdentifier
;	TokenNameSEMICOLON
Among	TokenNameIdentifier
w	TokenNameIdentifier
=	TokenNameEQUAL
v	TokenNameIdentifier
[	TokenNameLBRACKET
k	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
i2	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i2	TokenNameIdentifier
=	TokenNameEQUAL
w	TokenNameIdentifier
.	TokenNameDOT
s_size	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
-	TokenNameMINUS
common	TokenNameIdentifier
;	TokenNameSEMICOLON
i2	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i2	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
-	TokenNameMINUS
common	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
lb	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
diff	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
diff	TokenNameIdentifier
=	TokenNameEQUAL
current	TokenNameIdentifier
[	TokenNameLBRACKET
c	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
-	TokenNameMINUS
common	TokenNameIdentifier
]	TokenNameRBRACKET
-	TokenNameMINUS
w	TokenNameIdentifier
.	TokenNameDOT
s	TokenNameIdentifier
[	TokenNameLBRACKET
i2	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
diff	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
common	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
diff	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
j	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
common_j	TokenNameIdentifier
=	TokenNameEQUAL
common	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
i	TokenNameIdentifier
=	TokenNameEQUAL
k	TokenNameIdentifier
;	TokenNameSEMICOLON
common_i	TokenNameIdentifier
=	TokenNameEQUAL
common	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
j	TokenNameIdentifier
-	TokenNameMINUS
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
j	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
i	TokenNameIdentifier
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
first_key_inspected	TokenNameIdentifier
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
first_key_inspected	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
Among	TokenNameIdentifier
w	TokenNameIdentifier
=	TokenNameEQUAL
v	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
common_i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
w	TokenNameIdentifier
.	TokenNameDOT
s_size	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
cursor	TokenNameIdentifier
=	TokenNameEQUAL
c	TokenNameIdentifier
-	TokenNameMINUS
w	TokenNameIdentifier
.	TokenNameDOT
s_size	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
w	TokenNameIdentifier
.	TokenNameDOT
method	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
w	TokenNameIdentifier
.	TokenNameDOT
result	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
res	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
Object	TokenNameIdentifier
resobj	TokenNameIdentifier
=	TokenNameEQUAL
w	TokenNameIdentifier
.	TokenNameDOT
method	TokenNameIdentifier
.	TokenNameDOT
invoke	TokenNameIdentifier
(	TokenNameLPAREN
w	TokenNameIdentifier
.	TokenNameDOT
methodobject	TokenNameIdentifier
,	TokenNameCOMMA
EMPTY_ARGS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
res	TokenNameIdentifier
=	TokenNameEQUAL
resobj	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"true"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
InvocationTargetException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
res	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IllegalAccessException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
res	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
=	TokenNameEQUAL
c	TokenNameIdentifier
-	TokenNameMINUS
w	TokenNameIdentifier
.	TokenNameDOT
s_size	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
res	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
w	TokenNameIdentifier
.	TokenNameDOT
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
i	TokenNameIdentifier
=	TokenNameEQUAL
w	TokenNameIdentifier
.	TokenNameDOT
substring_i	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
int	TokenNameint
replace_s	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c_bra	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
c_ket	TokenNameIdentifier
,	TokenNameCOMMA
CharSequence	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
adjustment	TokenNameIdentifier
=	TokenNameEQUAL
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
(	TokenNameLPAREN
c_ket	TokenNameIdentifier
-	TokenNameMINUS
c_bra	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
newLength	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
+	TokenNamePLUS
adjustment	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
newLength	TokenNameIdentifier
>	TokenNameGREATER
current	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
newBuffer	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
ArrayUtil	TokenNameIdentifier
.	TokenNameDOT
oversize	TokenNameIdentifier
(	TokenNameLPAREN
newLength	TokenNameIdentifier
,	TokenNameCOMMA
RamUsageEstimator	TokenNameIdentifier
.	TokenNameDOT
NUM_BYTES_CHAR	TokenNameIdentifier
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
newBuffer	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
limit	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
current	TokenNameIdentifier
=	TokenNameEQUAL
newBuffer	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
adjustment	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
c_ket	TokenNameIdentifier
<	TokenNameLESS
limit	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
,	TokenNameCOMMA
c_ket	TokenNameIdentifier
,	TokenNameCOMMA
current	TokenNameIdentifier
,	TokenNameCOMMA
c_bra	TokenNameIdentifier
+	TokenNamePLUS
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
limit	TokenNameIdentifier
-	TokenNameMINUS
c_ket	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
current	TokenNameIdentifier
[	TokenNameLBRACKET
c_bra	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
s	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
limit	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
adjustment	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
c_ket	TokenNameIdentifier
)	TokenNameRPAREN
cursor	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
adjustment	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
>	TokenNameGREATER
c_bra	TokenNameIdentifier
)	TokenNameRPAREN
cursor	TokenNameIdentifier
=	TokenNameEQUAL
c_bra	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
adjustment	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
protected	TokenNameprotected
int	TokenNameint
replace_s	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c_bra	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
c_ket	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
replace_s	TokenNameIdentifier
(	TokenNameLPAREN
c_bra	TokenNameIdentifier
,	TokenNameCOMMA
c_ket	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
)	TokenNameRPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
slice_check	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
bra	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
bra	TokenNameIdentifier
>	TokenNameGREATER
ket	TokenNameIdentifier
||	TokenNameOR_OR
ket	TokenNameIdentifier
>	TokenNameGREATER
limit	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
err	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"faulty slice operation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
slice_from	TokenNameIdentifier
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
slice_check	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
replace_s	TokenNameIdentifier
(	TokenNameLPAREN
bra	TokenNameIdentifier
,	TokenNameCOMMA
ket	TokenNameIdentifier
,	TokenNameCOMMA
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
protected	TokenNameprotected
void	TokenNamevoid
slice_from	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
slice_from	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
)	TokenNameRPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
protected	TokenNameprotected
void	TokenNamevoid
slice_from	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
slice_from	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
)	TokenNameRPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
slice_del	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
slice_from	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
)	TokenNameRPAREN
""	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
void	TokenNamevoid
insert	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c_bra	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
c_ket	TokenNameIdentifier
,	TokenNameCOMMA
CharSequence	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
adjustment	TokenNameIdentifier
=	TokenNameEQUAL
replace_s	TokenNameIdentifier
(	TokenNameLPAREN
c_bra	TokenNameIdentifier
,	TokenNameCOMMA
c_ket	TokenNameIdentifier
,	TokenNameCOMMA
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c_bra	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
bra	TokenNameIdentifier
)	TokenNameRPAREN
bra	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
adjustment	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c_bra	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
ket	TokenNameIdentifier
)	TokenNameRPAREN
ket	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
adjustment	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
protected	TokenNameprotected
void	TokenNamevoid
insert	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c_bra	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
c_ket	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
insert	TokenNameIdentifier
(	TokenNameLPAREN
c_bra	TokenNameIdentifier
,	TokenNameCOMMA
c_ket	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
)	TokenNameRPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
protected	TokenNameprotected
void	TokenNamevoid
insert	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
c_bra	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
c_ket	TokenNameIdentifier
,	TokenNameCOMMA
StringBuilder	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
insert	TokenNameIdentifier
(	TokenNameLPAREN
c_bra	TokenNameIdentifier
,	TokenNameCOMMA
c_ket	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
CharSequence	TokenNameIdentifier
)	TokenNameRPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
StringBuilder	TokenNameIdentifier
slice_to	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
slice_check	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
ket	TokenNameIdentifier
-	TokenNameMINUS
bra	TokenNameIdentifier
;	TokenNameSEMICOLON
s	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
s	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
,	TokenNameCOMMA
bra	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
s	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
StringBuilder	TokenNameIdentifier
assign_to	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
s	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
s	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
current	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
limit	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
s	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
