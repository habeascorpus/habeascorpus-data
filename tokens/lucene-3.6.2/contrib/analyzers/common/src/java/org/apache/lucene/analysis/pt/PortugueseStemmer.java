package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
pt	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
PortugueseStemmer	TokenNameIdentifier
extends	TokenNameextends
RSLPStemmerBase	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Step	TokenNameIdentifier
plural	TokenNameIdentifier
,	TokenNameCOMMA
feminine	TokenNameIdentifier
,	TokenNameCOMMA
adverb	TokenNameIdentifier
,	TokenNameCOMMA
augmentative	TokenNameIdentifier
,	TokenNameCOMMA
noun	TokenNameIdentifier
,	TokenNameCOMMA
verb	TokenNameIdentifier
,	TokenNameCOMMA
vowel	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Step	TokenNameIdentifier
>	TokenNameGREATER
steps	TokenNameIdentifier
=	TokenNameEQUAL
parse	TokenNameIdentifier
(	TokenNameLPAREN
PortugueseStemmer	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
,	TokenNameCOMMA
"portuguese.rslp"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
plural	TokenNameIdentifier
=	TokenNameEQUAL
steps	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"Plural"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
feminine	TokenNameIdentifier
=	TokenNameEQUAL
steps	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"Feminine"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
adverb	TokenNameIdentifier
=	TokenNameEQUAL
steps	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"Adverb"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
augmentative	TokenNameIdentifier
=	TokenNameEQUAL
steps	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"Augmentative"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
noun	TokenNameIdentifier
=	TokenNameEQUAL
steps	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"Noun"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
verb	TokenNameIdentifier
=	TokenNameEQUAL
steps	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"Verb"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
vowel	TokenNameIdentifier
=	TokenNameEQUAL
steps	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
"Vowel"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
stem	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
s	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
len	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
len	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
"this stemmer requires an oversized array of at least 1"	TokenNameStringLiteral
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
plural	TokenNameIdentifier
.	TokenNameDOT
apply	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
adverb	TokenNameIdentifier
.	TokenNameDOT
apply	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
feminine	TokenNameIdentifier
.	TokenNameDOT
apply	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
augmentative	TokenNameIdentifier
.	TokenNameDOT
apply	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
oldlen	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
noun	TokenNameIdentifier
.	TokenNameDOT
apply	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
len	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
oldlen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
oldlen	TokenNameIdentifier
=	TokenNameEQUAL
len	TokenNameIdentifier
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
verb	TokenNameIdentifier
.	TokenNameDOT
apply	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
len	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
oldlen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
len	TokenNameIdentifier
=	TokenNameEQUAL
vowel	TokenNameIdentifier
.	TokenNameDOT
apply	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
s	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'à'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'á'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'â'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ã'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ä'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'å'	TokenNameCharacterLiteral
:	TokenNameCOLON
s	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ç'	TokenNameCharacterLiteral
:	TokenNameCOLON
s	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'c'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'è'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'é'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ê'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ë'	TokenNameCharacterLiteral
:	TokenNameCOLON
s	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'e'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ì'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'í'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'î'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ï'	TokenNameCharacterLiteral
:	TokenNameCOLON
s	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'i'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ñ'	TokenNameCharacterLiteral
:	TokenNameCOLON
s	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'n'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ò'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ó'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ô'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'õ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ö'	TokenNameCharacterLiteral
:	TokenNameCOLON
s	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'o'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ù'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ú'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'û'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ü'	TokenNameCharacterLiteral
:	TokenNameCOLON
s	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'u'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ý'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ÿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
s	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
'y'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
len	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
