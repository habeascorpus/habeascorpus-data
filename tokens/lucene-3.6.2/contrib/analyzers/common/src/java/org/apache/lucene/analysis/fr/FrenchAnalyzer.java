package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
fr	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Analyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
CharArraySet	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
LowerCaseFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
KeywordMarkerFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
StopFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
StopwordAnalyzerBase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Tokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
WordlistLoader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
snowball	TokenNameIdentifier
.	TokenNameDOT
SnowballFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
standard	TokenNameIdentifier
.	TokenNameDOT
StandardFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
standard	TokenNameIdentifier
.	TokenNameDOT
StandardTokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
standard	TokenNameIdentifier
.	TokenNameDOT
StandardAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
IOUtils	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Version	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Reader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Arrays	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashSet	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Collections	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Set	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
class	TokenNameclass
FrenchAnalyzer	TokenNameIdentifier
extends	TokenNameextends
StopwordAnalyzerBase	TokenNameIdentifier
{	TokenNameLBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FRENCH_STOP_WORDS	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
"a"	TokenNameStringLiteral
,	TokenNameCOMMA
"afin"	TokenNameStringLiteral
,	TokenNameCOMMA
"ai"	TokenNameStringLiteral
,	TokenNameCOMMA
"ainsi"	TokenNameStringLiteral
,	TokenNameCOMMA
"après"	TokenNameStringLiteral
,	TokenNameCOMMA
"attendu"	TokenNameStringLiteral
,	TokenNameCOMMA
"au"	TokenNameStringLiteral
,	TokenNameCOMMA
"aujourd"	TokenNameStringLiteral
,	TokenNameCOMMA
"auquel"	TokenNameStringLiteral
,	TokenNameCOMMA
"aussi"	TokenNameStringLiteral
,	TokenNameCOMMA
"autre"	TokenNameStringLiteral
,	TokenNameCOMMA
"autres"	TokenNameStringLiteral
,	TokenNameCOMMA
"aux"	TokenNameStringLiteral
,	TokenNameCOMMA
"auxquelles"	TokenNameStringLiteral
,	TokenNameCOMMA
"auxquels"	TokenNameStringLiteral
,	TokenNameCOMMA
"avait"	TokenNameStringLiteral
,	TokenNameCOMMA
"avant"	TokenNameStringLiteral
,	TokenNameCOMMA
"avec"	TokenNameStringLiteral
,	TokenNameCOMMA
"avoir"	TokenNameStringLiteral
,	TokenNameCOMMA
"c"	TokenNameStringLiteral
,	TokenNameCOMMA
"car"	TokenNameStringLiteral
,	TokenNameCOMMA
"ce"	TokenNameStringLiteral
,	TokenNameCOMMA
"ceci"	TokenNameStringLiteral
,	TokenNameCOMMA
"cela"	TokenNameStringLiteral
,	TokenNameCOMMA
"celle"	TokenNameStringLiteral
,	TokenNameCOMMA
"celles"	TokenNameStringLiteral
,	TokenNameCOMMA
"celui"	TokenNameStringLiteral
,	TokenNameCOMMA
"cependant"	TokenNameStringLiteral
,	TokenNameCOMMA
"certain"	TokenNameStringLiteral
,	TokenNameCOMMA
"certaine"	TokenNameStringLiteral
,	TokenNameCOMMA
"certaines"	TokenNameStringLiteral
,	TokenNameCOMMA
"certains"	TokenNameStringLiteral
,	TokenNameCOMMA
"ces"	TokenNameStringLiteral
,	TokenNameCOMMA
"cet"	TokenNameStringLiteral
,	TokenNameCOMMA
"cette"	TokenNameStringLiteral
,	TokenNameCOMMA
"ceux"	TokenNameStringLiteral
,	TokenNameCOMMA
"chez"	TokenNameStringLiteral
,	TokenNameCOMMA
"ci"	TokenNameStringLiteral
,	TokenNameCOMMA
"combien"	TokenNameStringLiteral
,	TokenNameCOMMA
"comme"	TokenNameStringLiteral
,	TokenNameCOMMA
"comment"	TokenNameStringLiteral
,	TokenNameCOMMA
"concernant"	TokenNameStringLiteral
,	TokenNameCOMMA
"contre"	TokenNameStringLiteral
,	TokenNameCOMMA
"d"	TokenNameStringLiteral
,	TokenNameCOMMA
"dans"	TokenNameStringLiteral
,	TokenNameCOMMA
"de"	TokenNameStringLiteral
,	TokenNameCOMMA
"debout"	TokenNameStringLiteral
,	TokenNameCOMMA
"dedans"	TokenNameStringLiteral
,	TokenNameCOMMA
"dehors"	TokenNameStringLiteral
,	TokenNameCOMMA
"delà"	TokenNameStringLiteral
,	TokenNameCOMMA
"depuis"	TokenNameStringLiteral
,	TokenNameCOMMA
"derrière"	TokenNameStringLiteral
,	TokenNameCOMMA
"des"	TokenNameStringLiteral
,	TokenNameCOMMA
"désormais"	TokenNameStringLiteral
,	TokenNameCOMMA
"desquelles"	TokenNameStringLiteral
,	TokenNameCOMMA
"desquels"	TokenNameStringLiteral
,	TokenNameCOMMA
"dessous"	TokenNameStringLiteral
,	TokenNameCOMMA
"dessus"	TokenNameStringLiteral
,	TokenNameCOMMA
"devant"	TokenNameStringLiteral
,	TokenNameCOMMA
"devers"	TokenNameStringLiteral
,	TokenNameCOMMA
"devra"	TokenNameStringLiteral
,	TokenNameCOMMA
"divers"	TokenNameStringLiteral
,	TokenNameCOMMA
"diverse"	TokenNameStringLiteral
,	TokenNameCOMMA
"diverses"	TokenNameStringLiteral
,	TokenNameCOMMA
"doit"	TokenNameStringLiteral
,	TokenNameCOMMA
"donc"	TokenNameStringLiteral
,	TokenNameCOMMA
"dont"	TokenNameStringLiteral
,	TokenNameCOMMA
"du"	TokenNameStringLiteral
,	TokenNameCOMMA
"duquel"	TokenNameStringLiteral
,	TokenNameCOMMA
"durant"	TokenNameStringLiteral
,	TokenNameCOMMA
"dès"	TokenNameStringLiteral
,	TokenNameCOMMA
"elle"	TokenNameStringLiteral
,	TokenNameCOMMA
"elles"	TokenNameStringLiteral
,	TokenNameCOMMA
"en"	TokenNameStringLiteral
,	TokenNameCOMMA
"entre"	TokenNameStringLiteral
,	TokenNameCOMMA
"environ"	TokenNameStringLiteral
,	TokenNameCOMMA
"est"	TokenNameStringLiteral
,	TokenNameCOMMA
"et"	TokenNameStringLiteral
,	TokenNameCOMMA
"etc"	TokenNameStringLiteral
,	TokenNameCOMMA
"etre"	TokenNameStringLiteral
,	TokenNameCOMMA
"eu"	TokenNameStringLiteral
,	TokenNameCOMMA
"eux"	TokenNameStringLiteral
,	TokenNameCOMMA
"excepté"	TokenNameStringLiteral
,	TokenNameCOMMA
"hormis"	TokenNameStringLiteral
,	TokenNameCOMMA
"hors"	TokenNameStringLiteral
,	TokenNameCOMMA
"hélas"	TokenNameStringLiteral
,	TokenNameCOMMA
"hui"	TokenNameStringLiteral
,	TokenNameCOMMA
"il"	TokenNameStringLiteral
,	TokenNameCOMMA
"ils"	TokenNameStringLiteral
,	TokenNameCOMMA
"j"	TokenNameStringLiteral
,	TokenNameCOMMA
"je"	TokenNameStringLiteral
,	TokenNameCOMMA
"jusqu"	TokenNameStringLiteral
,	TokenNameCOMMA
"jusque"	TokenNameStringLiteral
,	TokenNameCOMMA
"l"	TokenNameStringLiteral
,	TokenNameCOMMA
"la"	TokenNameStringLiteral
,	TokenNameCOMMA
"laquelle"	TokenNameStringLiteral
,	TokenNameCOMMA
"le"	TokenNameStringLiteral
,	TokenNameCOMMA
"lequel"	TokenNameStringLiteral
,	TokenNameCOMMA
"les"	TokenNameStringLiteral
,	TokenNameCOMMA
"lesquelles"	TokenNameStringLiteral
,	TokenNameCOMMA
"lesquels"	TokenNameStringLiteral
,	TokenNameCOMMA
"leur"	TokenNameStringLiteral
,	TokenNameCOMMA
"leurs"	TokenNameStringLiteral
,	TokenNameCOMMA
"lorsque"	TokenNameStringLiteral
,	TokenNameCOMMA
"lui"	TokenNameStringLiteral
,	TokenNameCOMMA
"là"	TokenNameStringLiteral
,	TokenNameCOMMA
"ma"	TokenNameStringLiteral
,	TokenNameCOMMA
"mais"	TokenNameStringLiteral
,	TokenNameCOMMA
"malgré"	TokenNameStringLiteral
,	TokenNameCOMMA
"me"	TokenNameStringLiteral
,	TokenNameCOMMA
"merci"	TokenNameStringLiteral
,	TokenNameCOMMA
"mes"	TokenNameStringLiteral
,	TokenNameCOMMA
"mien"	TokenNameStringLiteral
,	TokenNameCOMMA
"mienne"	TokenNameStringLiteral
,	TokenNameCOMMA
"miennes"	TokenNameStringLiteral
,	TokenNameCOMMA
"miens"	TokenNameStringLiteral
,	TokenNameCOMMA
"moi"	TokenNameStringLiteral
,	TokenNameCOMMA
"moins"	TokenNameStringLiteral
,	TokenNameCOMMA
"mon"	TokenNameStringLiteral
,	TokenNameCOMMA
"moyennant"	TokenNameStringLiteral
,	TokenNameCOMMA
"même"	TokenNameStringLiteral
,	TokenNameCOMMA
"mêmes"	TokenNameStringLiteral
,	TokenNameCOMMA
"n"	TokenNameStringLiteral
,	TokenNameCOMMA
"ne"	TokenNameStringLiteral
,	TokenNameCOMMA
"ni"	TokenNameStringLiteral
,	TokenNameCOMMA
"non"	TokenNameStringLiteral
,	TokenNameCOMMA
"nos"	TokenNameStringLiteral
,	TokenNameCOMMA
"notre"	TokenNameStringLiteral
,	TokenNameCOMMA
"nous"	TokenNameStringLiteral
,	TokenNameCOMMA
"néanmoins"	TokenNameStringLiteral
,	TokenNameCOMMA
"nôtre"	TokenNameStringLiteral
,	TokenNameCOMMA
"nôtres"	TokenNameStringLiteral
,	TokenNameCOMMA
"on"	TokenNameStringLiteral
,	TokenNameCOMMA
"ont"	TokenNameStringLiteral
,	TokenNameCOMMA
"ou"	TokenNameStringLiteral
,	TokenNameCOMMA
"outre"	TokenNameStringLiteral
,	TokenNameCOMMA
"où"	TokenNameStringLiteral
,	TokenNameCOMMA
"par"	TokenNameStringLiteral
,	TokenNameCOMMA
"parmi"	TokenNameStringLiteral
,	TokenNameCOMMA
"partant"	TokenNameStringLiteral
,	TokenNameCOMMA
"pas"	TokenNameStringLiteral
,	TokenNameCOMMA
"passé"	TokenNameStringLiteral
,	TokenNameCOMMA
"pendant"	TokenNameStringLiteral
,	TokenNameCOMMA
"plein"	TokenNameStringLiteral
,	TokenNameCOMMA
"plus"	TokenNameStringLiteral
,	TokenNameCOMMA
"plusieurs"	TokenNameStringLiteral
,	TokenNameCOMMA
"pour"	TokenNameStringLiteral
,	TokenNameCOMMA
"pourquoi"	TokenNameStringLiteral
,	TokenNameCOMMA
"proche"	TokenNameStringLiteral
,	TokenNameCOMMA
"près"	TokenNameStringLiteral
,	TokenNameCOMMA
"puisque"	TokenNameStringLiteral
,	TokenNameCOMMA
"qu"	TokenNameStringLiteral
,	TokenNameCOMMA
"quand"	TokenNameStringLiteral
,	TokenNameCOMMA
"que"	TokenNameStringLiteral
,	TokenNameCOMMA
"quel"	TokenNameStringLiteral
,	TokenNameCOMMA
"quelle"	TokenNameStringLiteral
,	TokenNameCOMMA
"quelles"	TokenNameStringLiteral
,	TokenNameCOMMA
"quels"	TokenNameStringLiteral
,	TokenNameCOMMA
"qui"	TokenNameStringLiteral
,	TokenNameCOMMA
"quoi"	TokenNameStringLiteral
,	TokenNameCOMMA
"quoique"	TokenNameStringLiteral
,	TokenNameCOMMA
"revoici"	TokenNameStringLiteral
,	TokenNameCOMMA
"revoilà"	TokenNameStringLiteral
,	TokenNameCOMMA
"s"	TokenNameStringLiteral
,	TokenNameCOMMA
"sa"	TokenNameStringLiteral
,	TokenNameCOMMA
"sans"	TokenNameStringLiteral
,	TokenNameCOMMA
"sauf"	TokenNameStringLiteral
,	TokenNameCOMMA
"se"	TokenNameStringLiteral
,	TokenNameCOMMA
"selon"	TokenNameStringLiteral
,	TokenNameCOMMA
"seront"	TokenNameStringLiteral
,	TokenNameCOMMA
"ses"	TokenNameStringLiteral
,	TokenNameCOMMA
"si"	TokenNameStringLiteral
,	TokenNameCOMMA
"sien"	TokenNameStringLiteral
,	TokenNameCOMMA
"sienne"	TokenNameStringLiteral
,	TokenNameCOMMA
"siennes"	TokenNameStringLiteral
,	TokenNameCOMMA
"siens"	TokenNameStringLiteral
,	TokenNameCOMMA
"sinon"	TokenNameStringLiteral
,	TokenNameCOMMA
"soi"	TokenNameStringLiteral
,	TokenNameCOMMA
"soit"	TokenNameStringLiteral
,	TokenNameCOMMA
"son"	TokenNameStringLiteral
,	TokenNameCOMMA
"sont"	TokenNameStringLiteral
,	TokenNameCOMMA
"sous"	TokenNameStringLiteral
,	TokenNameCOMMA
"suivant"	TokenNameStringLiteral
,	TokenNameCOMMA
"sur"	TokenNameStringLiteral
,	TokenNameCOMMA
"ta"	TokenNameStringLiteral
,	TokenNameCOMMA
"te"	TokenNameStringLiteral
,	TokenNameCOMMA
"tes"	TokenNameStringLiteral
,	TokenNameCOMMA
"tien"	TokenNameStringLiteral
,	TokenNameCOMMA
"tienne"	TokenNameStringLiteral
,	TokenNameCOMMA
"tiennes"	TokenNameStringLiteral
,	TokenNameCOMMA
"tiens"	TokenNameStringLiteral
,	TokenNameCOMMA
"toi"	TokenNameStringLiteral
,	TokenNameCOMMA
"ton"	TokenNameStringLiteral
,	TokenNameCOMMA
"tous"	TokenNameStringLiteral
,	TokenNameCOMMA
"tout"	TokenNameStringLiteral
,	TokenNameCOMMA
"toute"	TokenNameStringLiteral
,	TokenNameCOMMA
"toutes"	TokenNameStringLiteral
,	TokenNameCOMMA
"tu"	TokenNameStringLiteral
,	TokenNameCOMMA
"un"	TokenNameStringLiteral
,	TokenNameCOMMA
"une"	TokenNameStringLiteral
,	TokenNameCOMMA
"va"	TokenNameStringLiteral
,	TokenNameCOMMA
"vers"	TokenNameStringLiteral
,	TokenNameCOMMA
"voici"	TokenNameStringLiteral
,	TokenNameCOMMA
"voilà"	TokenNameStringLiteral
,	TokenNameCOMMA
"vos"	TokenNameStringLiteral
,	TokenNameCOMMA
"votre"	TokenNameStringLiteral
,	TokenNameCOMMA
"vous"	TokenNameStringLiteral
,	TokenNameCOMMA
"vu"	TokenNameStringLiteral
,	TokenNameCOMMA
"vôtre"	TokenNameStringLiteral
,	TokenNameCOMMA
"vôtres"	TokenNameStringLiteral
,	TokenNameCOMMA
"y"	TokenNameStringLiteral
,	TokenNameCOMMA
"à"	TokenNameStringLiteral
,	TokenNameCOMMA
"ça"	TokenNameStringLiteral
,	TokenNameCOMMA
"ès"	TokenNameStringLiteral
,	TokenNameCOMMA
"été"	TokenNameStringLiteral
,	TokenNameCOMMA
"être"	TokenNameStringLiteral
,	TokenNameCOMMA
"ô"	TokenNameStringLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
static	TokenNamestatic
String	TokenNameIdentifier
DEFAULT_STOPWORD_FILE	TokenNameIdentifier
=	TokenNameEQUAL
"french_stop.txt"	TokenNameStringLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
excltable	TokenNameIdentifier
=	TokenNameEQUAL
CharArraySet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_SET	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
getDefaultStopSet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
DefaultSetHolder	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_STOP_SET	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
DefaultSetHolder	TokenNameIdentifier
{	TokenNameLBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
static	TokenNamestatic
final	TokenNamefinal
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
DEFAULT_STOP_SET_30	TokenNameIdentifier
=	TokenNameEQUAL
CharArraySet	TokenNameIdentifier
.	TokenNameDOT
unmodifiableSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
CharArraySet	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
FRENCH_STOP_WORDS	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
DEFAULT_STOP_SET	TokenNameIdentifier
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
DEFAULT_STOP_SET	TokenNameIdentifier
=	TokenNameEQUAL
WordlistLoader	TokenNameIdentifier
.	TokenNameDOT
getSnowballWordSet	TokenNameIdentifier
(	TokenNameLPAREN
IOUtils	TokenNameIdentifier
.	TokenNameDOT
getDecodingReader	TokenNameIdentifier
(	TokenNameLPAREN
SnowballFilter	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
,	TokenNameCOMMA
DEFAULT_STOPWORD_FILE	TokenNameIdentifier
,	TokenNameCOMMA
IOUtils	TokenNameIdentifier
.	TokenNameDOT
CHARSET_UTF_8	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_CURRENT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
ex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"Unable to load default stopword set"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
FrenchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
matchVersion	TokenNameIdentifier
.	TokenNameDOT
onOrAfter	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_31	TokenNameIdentifier
)	TokenNameRPAREN
?	TokenNameQUESTION
DefaultSetHolder	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_STOP_SET	TokenNameIdentifier
:	TokenNameCOLON
DefaultSetHolder	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_STOP_SET_30	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
FrenchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
stopwords	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
stopwords	TokenNameIdentifier
,	TokenNameCOMMA
CharArraySet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_SET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
FrenchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
stopwords	TokenNameIdentifier
,	TokenNameCOMMA
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
stemExclutionSet	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
stopwords	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
excltable	TokenNameIdentifier
=	TokenNameEQUAL
CharArraySet	TokenNameIdentifier
.	TokenNameDOT
unmodifiableSet	TokenNameIdentifier
(	TokenNameLPAREN
CharArraySet	TokenNameIdentifier
.	TokenNameDOT
copy	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
stemExclutionSet	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
FrenchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
...	TokenNameELLIPSIS
stopwords	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
StopFilter	TokenNameIdentifier
.	TokenNameDOT
makeStopSet	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
stopwords	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
FrenchAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
File	TokenNameIdentifier
stopwords	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
WordlistLoader	TokenNameIdentifier
.	TokenNameDOT
getWordSet	TokenNameIdentifier
(	TokenNameLPAREN
IOUtils	TokenNameIdentifier
.	TokenNameDOT
getDecodingReader	TokenNameIdentifier
(	TokenNameLPAREN
stopwords	TokenNameIdentifier
,	TokenNameCOMMA
IOUtils	TokenNameIdentifier
.	TokenNameDOT
CHARSET_UTF_8	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
matchVersion	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setStemExclusionTable	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
...	TokenNameELLIPSIS
exclusionlist	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
excltable	TokenNameIdentifier
=	TokenNameEQUAL
StopFilter	TokenNameIdentifier
.	TokenNameDOT
makeStopSet	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
exclusionlist	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setPreviousTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setStemExclusionTable	TokenNameIdentifier
(	TokenNameLPAREN
Map	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
,	TokenNameCOMMA
?	TokenNameQUESTION
>	TokenNameGREATER
exclusionlist	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
excltable	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashSet	TokenNameIdentifier
<	TokenNameLESS
Object	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
exclusionlist	TokenNameIdentifier
.	TokenNameDOT
keySet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setPreviousTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setStemExclusionTable	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
exclusionlist	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
excltable	TokenNameIdentifier
=	TokenNameEQUAL
WordlistLoader	TokenNameIdentifier
.	TokenNameDOT
getWordSet	TokenNameIdentifier
(	TokenNameLPAREN
IOUtils	TokenNameIdentifier
.	TokenNameDOT
getDecodingReader	TokenNameIdentifier
(	TokenNameLPAREN
exclusionlist	TokenNameIdentifier
,	TokenNameCOMMA
IOUtils	TokenNameIdentifier
.	TokenNameDOT
CHARSET_UTF_8	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
matchVersion	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setPreviousTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
TokenStreamComponents	TokenNameIdentifier
createComponents	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
.	TokenNameDOT
onOrAfter	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_31	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Tokenizer	TokenNameIdentifier
source	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StandardTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
reader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TokenStream	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StandardFilter	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ElisionFilter	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
LowerCaseFilter	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StopFilter	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
,	TokenNameCOMMA
stopwords	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
excltable	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
KeywordMarkerFilter	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
excltable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
.	TokenNameDOT
onOrAfter	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_36	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FrenchLightStemFilter	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SnowballFilter	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
org	TokenNameIdentifier
.	TokenNameDOT
tartarus	TokenNameIdentifier
.	TokenNameDOT
snowball	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
.	TokenNameDOT
FrenchStemmer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
Tokenizer	TokenNameIdentifier
source	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StandardTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
reader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TokenStream	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StandardFilter	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
source	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StopFilter	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
,	TokenNameCOMMA
stopwords	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
excltable	TokenNameIdentifier
.	TokenNameDOT
isEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
KeywordMarkerFilter	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
,	TokenNameCOMMA
excltable	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
result	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FrenchStemFilter	TokenNameIdentifier
(	TokenNameLPAREN
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
source	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
LowerCaseFilter	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
