package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
ru	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Deprecated	TokenNameIdentifier
class	TokenNameclass
RussianStemmer	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
int	TokenNameint
RV	TokenNameIdentifier
,	TokenNameCOMMA
R2	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
A	TokenNameIdentifier
=	TokenNameEQUAL
'а'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
V	TokenNameIdentifier
=	TokenNameEQUAL
'в'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
G	TokenNameIdentifier
=	TokenNameEQUAL
'г'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
E	TokenNameIdentifier
=	TokenNameEQUAL
'е'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
I	TokenNameIdentifier
=	TokenNameEQUAL
'и'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
I_	TokenNameIdentifier
=	TokenNameEQUAL
'й'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
L	TokenNameIdentifier
=	TokenNameEQUAL
'л'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
M	TokenNameIdentifier
=	TokenNameEQUAL
'м'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
N	TokenNameIdentifier
=	TokenNameEQUAL
'н'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
O	TokenNameIdentifier
=	TokenNameEQUAL
'о'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
S	TokenNameIdentifier
=	TokenNameEQUAL
'с'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
T	TokenNameIdentifier
=	TokenNameEQUAL
'т'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
U	TokenNameIdentifier
=	TokenNameEQUAL
'у'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
X	TokenNameIdentifier
=	TokenNameEQUAL
'х'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
SH	TokenNameIdentifier
=	TokenNameEQUAL
'ш'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
SHCH	TokenNameIdentifier
=	TokenNameEQUAL
'щ'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
Y	TokenNameIdentifier
=	TokenNameEQUAL
'ы'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
SOFT	TokenNameIdentifier
=	TokenNameEQUAL
'ь'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
AE	TokenNameIdentifier
=	TokenNameEQUAL
'э'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
IU	TokenNameIdentifier
=	TokenNameEQUAL
'ю'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
static	TokenNamestatic
char	TokenNamechar
IA	TokenNameIdentifier
=	TokenNameEQUAL
'я'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
vowels	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
A	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
,	TokenNameCOMMA
O	TokenNameIdentifier
,	TokenNameCOMMA
U	TokenNameIdentifier
,	TokenNameCOMMA
Y	TokenNameIdentifier
,	TokenNameCOMMA
AE	TokenNameIdentifier
,	TokenNameCOMMA
IU	TokenNameIdentifier
,	TokenNameCOMMA
IA	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
perfectiveGerundEndings1	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
V	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
V	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
V	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
,	TokenNameCOMMA
S	TokenNameIdentifier
,	TokenNameCOMMA
SOFT	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
perfectiveGerund1Predessors	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
A	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
IA	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
perfectiveGerundEndings2	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
,	TokenNameCOMMA
S	TokenNameIdentifier
,	TokenNameCOMMA
SOFT	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
,	TokenNameCOMMA
S	TokenNameIdentifier
,	TokenNameCOMMA
SOFT	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
adjectiveEndings	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
O	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
O	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
O	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
X	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
X	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
U	TokenNameIdentifier
,	TokenNameCOMMA
IU	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
IU	TokenNameIdentifier
,	TokenNameCOMMA
IU	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
A	TokenNameIdentifier
,	TokenNameCOMMA
IA	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
IA	TokenNameIdentifier
,	TokenNameCOMMA
IA	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
O	TokenNameIdentifier
,	TokenNameCOMMA
IU	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
IU	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
G	TokenNameIdentifier
,	TokenNameCOMMA
O	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
O	TokenNameIdentifier
,	TokenNameCOMMA
G	TokenNameIdentifier
,	TokenNameCOMMA
O	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
,	TokenNameCOMMA
U	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
O	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
,	TokenNameCOMMA
U	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
participleEndings1	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
SHCH	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
N	TokenNameIdentifier
,	TokenNameCOMMA
N	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
V	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
IU	TokenNameIdentifier
,	TokenNameCOMMA
SHCH	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
participleEndings2	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
U	TokenNameIdentifier
,	TokenNameCOMMA
IU	TokenNameIdentifier
,	TokenNameCOMMA
SHCH	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
participle1Predessors	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
A	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
IA	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
reflexiveEndings	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
S	TokenNameIdentifier
,	TokenNameCOMMA
IA	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
S	TokenNameIdentifier
,	TokenNameCOMMA
SOFT	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
verbEndings1	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
I_	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
L	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
N	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
L	TokenNameIdentifier
,	TokenNameCOMMA
O	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
N	TokenNameIdentifier
,	TokenNameCOMMA
O	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
IU	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
L	TokenNameIdentifier
,	TokenNameCOMMA
A	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
N	TokenNameIdentifier
,	TokenNameCOMMA
A	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
L	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
N	TokenNameIdentifier
,	TokenNameCOMMA
Y	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I_	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
T	TokenNameIdentifier
,	TokenNameCOMMA
SOFT	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
,	TokenNameCOMMA
SOFT	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
N	TokenNameIdentifier
,	TokenNameCOMMA
N	TokenNameIdentifier
,	TokenNameCOMMA
O	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
verbEndings2	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
IU	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
U	TokenNameIdentifier
,	TokenNameCOMMA
IU	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
N	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
IA	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
U	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
L	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
L	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
L	TokenNameIdentifier
,	TokenNameCOMMA
A	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
L	TokenNameIdentifier
,	TokenNameCOMMA
A	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
N	TokenNameIdentifier
,	TokenNameCOMMA
A	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
L	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
L	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
L	TokenNameIdentifier
,	TokenNameCOMMA
O	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
L	TokenNameIdentifier
,	TokenNameCOMMA
O	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
N	TokenNameIdentifier
,	TokenNameCOMMA
O	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
U	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
U	TokenNameIdentifier
,	TokenNameCOMMA
IU	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
N	TokenNameIdentifier
,	TokenNameCOMMA
Y	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
,	TokenNameCOMMA
SOFT	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
,	TokenNameCOMMA
SOFT	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
,	TokenNameCOMMA
SOFT	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
U	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
verb1Predessors	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
A	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
IA	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
nounEndings	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
A	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
U	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I_	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
O	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
U	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
Y	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
SOFT	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
IA	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
O	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
SOFT	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
IA	TokenNameIdentifier
,	TokenNameCOMMA
X	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
IU	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
O	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
A	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
O	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
A	TokenNameIdentifier
,	TokenNameCOMMA
X	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
SOFT	TokenNameIdentifier
,	TokenNameCOMMA
IU	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
IA	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
SOFT	TokenNameIdentifier
,	TokenNameCOMMA
IA	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
IA	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
IA	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
A	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
IA	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
IA	TokenNameIdentifier
,	TokenNameCOMMA
X	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
I	TokenNameIdentifier
,	TokenNameCOMMA
IA	TokenNameIdentifier
,	TokenNameCOMMA
M	TokenNameIdentifier
,	TokenNameCOMMA
I	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
superlativeEndings	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
E	TokenNameIdentifier
,	TokenNameCOMMA
I_	TokenNameIdentifier
,	TokenNameCOMMA
SH	TokenNameIdentifier
,	TokenNameCOMMA
E	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
derivationalEndings	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
O	TokenNameIdentifier
,	TokenNameCOMMA
S	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
}	TokenNameRBRACE
,	TokenNameCOMMA
{	TokenNameLBRACE
O	TokenNameIdentifier
,	TokenNameCOMMA
S	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
,	TokenNameCOMMA
SOFT	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
RussianStemmer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
adjectival	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
findAndRemoveEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
adjectiveEndings	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
findAndRemoveEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
participleEndings1	TokenNameIdentifier
,	TokenNameCOMMA
participle1Predessors	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
findAndRemoveEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
participleEndings2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
derivational	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
endingLength	TokenNameIdentifier
=	TokenNameEQUAL
findEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
derivationalEndings	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
endingLength	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
R2	TokenNameIdentifier
-	TokenNameMINUS
RV	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
endingLength	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
endingLength	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
findEnding	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
startIndex	TokenNameIdentifier
,	TokenNameCOMMA
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
theEndingClass	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
boolean	TokenNameboolean
match	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
theEndingClass	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
theEnding	TokenNameIdentifier
=	TokenNameEQUAL
theEndingClass	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
startIndex	TokenNameIdentifier
<	TokenNameLESS
theEnding	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
match	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
match	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
int	TokenNameint
stemmingIndex	TokenNameIdentifier
=	TokenNameEQUAL
startIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
theEnding	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
stemmingIndex	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
theEnding	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
match	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
match	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
theEndingClass	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
findEnding	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
theEndingClass	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
findEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
theEndingClass	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
findAndRemoveEnding	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
theEndingClass	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
endingLength	TokenNameIdentifier
=	TokenNameEQUAL
findEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
theEndingClass	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
endingLength	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
else	TokenNameelse
{	TokenNameLBRACE
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
endingLength	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
findAndRemoveEnding	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
theEndingClass	TokenNameIdentifier
,	TokenNameCOMMA
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
thePredessors	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
endingLength	TokenNameIdentifier
=	TokenNameEQUAL
findEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
theEndingClass	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
endingLength	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
predessorLength	TokenNameIdentifier
=	TokenNameEQUAL
findEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
endingLength	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
thePredessors	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
predessorLength	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
else	TokenNameelse
{	TokenNameLBRACE
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
endingLength	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
markPositions	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
word	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
RV	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
R2	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
i	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
isVowel	TokenNameIdentifier
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
RV	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
i	TokenNameIdentifier
&&	TokenNameAND_AND
isVowel	TokenNameIdentifier
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
i	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
isVowel	TokenNameIdentifier
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
i	TokenNameIdentifier
&&	TokenNameAND_AND
isVowel	TokenNameIdentifier
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
word	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
<	TokenNameLESS
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
R2	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
isVowel	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
letter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
vowels	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
letter	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
vowels	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
noun	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
findAndRemoveEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
nounEndings	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
perfectiveGerund	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
findAndRemoveEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
perfectiveGerundEndings1	TokenNameIdentifier
,	TokenNameCOMMA
perfectiveGerund1Predessors	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
findAndRemoveEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
perfectiveGerundEndings2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
reflexive	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
findAndRemoveEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
reflexiveEndings	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
removeI	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
I	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
removeSoft	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
SOFT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
stem	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
input	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
markPositions	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
RV	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
input	TokenNameIdentifier
;	TokenNameSEMICOLON
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuilder	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
RV	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
perfectiveGerund	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
reflexive	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
adjectival	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
verb	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
noun	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
removeI	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
derivational	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
superlative	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
undoubleN	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
removeSoft	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
input	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
RV	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
superlative	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
findAndRemoveEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
superlativeEndings	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
undoubleN	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
doubleN	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
{	TokenNameLBRACE
N	TokenNameIdentifier
,	TokenNameCOMMA
N	TokenNameIdentifier
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
findEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
doubleN	TokenNameIdentifier
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
setLength	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
verb	TokenNameIdentifier
(	TokenNameLPAREN
StringBuilder	TokenNameIdentifier
stemmingZone	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
findAndRemoveEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
verbEndings1	TokenNameIdentifier
,	TokenNameCOMMA
verb1Predessors	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
findAndRemoveEnding	TokenNameIdentifier
(	TokenNameLPAREN
stemmingZone	TokenNameIdentifier
,	TokenNameCOMMA
verbEndings2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
stemWord	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
theWord	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
RussianStemmer	TokenNameIdentifier
stemmer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
RussianStemmer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
stemmer	TokenNameIdentifier
.	TokenNameDOT
stem	TokenNameIdentifier
(	TokenNameLPAREN
theWord	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
