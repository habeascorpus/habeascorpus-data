package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
miscellaneous	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Reader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
StringReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Arrays	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Locale	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Set	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
regex	TokenNameIdentifier
.	TokenNameDOT
Matcher	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
regex	TokenNameIdentifier
.	TokenNameDOT
Pattern	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
ReusableAnalyzerBase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Tokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
StopAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
StopFilter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
tokenattributes	TokenNameIdentifier
.	TokenNameDOT
CharTermAttribute	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
tokenattributes	TokenNameIdentifier
.	TokenNameDOT
OffsetAttribute	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
CharArraySet	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Version	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
class	TokenNameclass
PatternAnalyzer	TokenNameIdentifier
extends	TokenNameextends
ReusableAnalyzerBase	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Pattern	TokenNameIdentifier
NON_WORD_PATTERN	TokenNameIdentifier
=	TokenNameEQUAL
Pattern	TokenNameIdentifier
.	TokenNameDOT
compile	TokenNameIdentifier
(	TokenNameLPAREN
"\W+"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
Pattern	TokenNameIdentifier
WHITESPACE_PATTERN	TokenNameIdentifier
=	TokenNameEQUAL
Pattern	TokenNameIdentifier
.	TokenNameDOT
compile	TokenNameIdentifier
(	TokenNameLPAREN
"\s+"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
CharArraySet	TokenNameIdentifier
EXTENDED_ENGLISH_STOP_WORDS	TokenNameIdentifier
=	TokenNameEQUAL
CharArraySet	TokenNameIdentifier
.	TokenNameDOT
unmodifiableSet	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
CharArraySet	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
"a"	TokenNameStringLiteral
,	TokenNameCOMMA
"about"	TokenNameStringLiteral
,	TokenNameCOMMA
"above"	TokenNameStringLiteral
,	TokenNameCOMMA
"across"	TokenNameStringLiteral
,	TokenNameCOMMA
"adj"	TokenNameStringLiteral
,	TokenNameCOMMA
"after"	TokenNameStringLiteral
,	TokenNameCOMMA
"afterwards"	TokenNameStringLiteral
,	TokenNameCOMMA
"again"	TokenNameStringLiteral
,	TokenNameCOMMA
"against"	TokenNameStringLiteral
,	TokenNameCOMMA
"albeit"	TokenNameStringLiteral
,	TokenNameCOMMA
"all"	TokenNameStringLiteral
,	TokenNameCOMMA
"almost"	TokenNameStringLiteral
,	TokenNameCOMMA
"alone"	TokenNameStringLiteral
,	TokenNameCOMMA
"along"	TokenNameStringLiteral
,	TokenNameCOMMA
"already"	TokenNameStringLiteral
,	TokenNameCOMMA
"also"	TokenNameStringLiteral
,	TokenNameCOMMA
"although"	TokenNameStringLiteral
,	TokenNameCOMMA
"always"	TokenNameStringLiteral
,	TokenNameCOMMA
"among"	TokenNameStringLiteral
,	TokenNameCOMMA
"amongst"	TokenNameStringLiteral
,	TokenNameCOMMA
"an"	TokenNameStringLiteral
,	TokenNameCOMMA
"and"	TokenNameStringLiteral
,	TokenNameCOMMA
"another"	TokenNameStringLiteral
,	TokenNameCOMMA
"any"	TokenNameStringLiteral
,	TokenNameCOMMA
"anyhow"	TokenNameStringLiteral
,	TokenNameCOMMA
"anyone"	TokenNameStringLiteral
,	TokenNameCOMMA
"anything"	TokenNameStringLiteral
,	TokenNameCOMMA
"anywhere"	TokenNameStringLiteral
,	TokenNameCOMMA
"are"	TokenNameStringLiteral
,	TokenNameCOMMA
"around"	TokenNameStringLiteral
,	TokenNameCOMMA
"as"	TokenNameStringLiteral
,	TokenNameCOMMA
"at"	TokenNameStringLiteral
,	TokenNameCOMMA
"be"	TokenNameStringLiteral
,	TokenNameCOMMA
"became"	TokenNameStringLiteral
,	TokenNameCOMMA
"because"	TokenNameStringLiteral
,	TokenNameCOMMA
"become"	TokenNameStringLiteral
,	TokenNameCOMMA
"becomes"	TokenNameStringLiteral
,	TokenNameCOMMA
"becoming"	TokenNameStringLiteral
,	TokenNameCOMMA
"been"	TokenNameStringLiteral
,	TokenNameCOMMA
"before"	TokenNameStringLiteral
,	TokenNameCOMMA
"beforehand"	TokenNameStringLiteral
,	TokenNameCOMMA
"behind"	TokenNameStringLiteral
,	TokenNameCOMMA
"being"	TokenNameStringLiteral
,	TokenNameCOMMA
"below"	TokenNameStringLiteral
,	TokenNameCOMMA
"beside"	TokenNameStringLiteral
,	TokenNameCOMMA
"besides"	TokenNameStringLiteral
,	TokenNameCOMMA
"between"	TokenNameStringLiteral
,	TokenNameCOMMA
"beyond"	TokenNameStringLiteral
,	TokenNameCOMMA
"both"	TokenNameStringLiteral
,	TokenNameCOMMA
"but"	TokenNameStringLiteral
,	TokenNameCOMMA
"by"	TokenNameStringLiteral
,	TokenNameCOMMA
"can"	TokenNameStringLiteral
,	TokenNameCOMMA
"cannot"	TokenNameStringLiteral
,	TokenNameCOMMA
"co"	TokenNameStringLiteral
,	TokenNameCOMMA
"could"	TokenNameStringLiteral
,	TokenNameCOMMA
"down"	TokenNameStringLiteral
,	TokenNameCOMMA
"during"	TokenNameStringLiteral
,	TokenNameCOMMA
"each"	TokenNameStringLiteral
,	TokenNameCOMMA
"eg"	TokenNameStringLiteral
,	TokenNameCOMMA
"either"	TokenNameStringLiteral
,	TokenNameCOMMA
"else"	TokenNameStringLiteral
,	TokenNameCOMMA
"elsewhere"	TokenNameStringLiteral
,	TokenNameCOMMA
"enough"	TokenNameStringLiteral
,	TokenNameCOMMA
"etc"	TokenNameStringLiteral
,	TokenNameCOMMA
"even"	TokenNameStringLiteral
,	TokenNameCOMMA
"ever"	TokenNameStringLiteral
,	TokenNameCOMMA
"every"	TokenNameStringLiteral
,	TokenNameCOMMA
"everyone"	TokenNameStringLiteral
,	TokenNameCOMMA
"everything"	TokenNameStringLiteral
,	TokenNameCOMMA
"everywhere"	TokenNameStringLiteral
,	TokenNameCOMMA
"except"	TokenNameStringLiteral
,	TokenNameCOMMA
"few"	TokenNameStringLiteral
,	TokenNameCOMMA
"first"	TokenNameStringLiteral
,	TokenNameCOMMA
"for"	TokenNameStringLiteral
,	TokenNameCOMMA
"former"	TokenNameStringLiteral
,	TokenNameCOMMA
"formerly"	TokenNameStringLiteral
,	TokenNameCOMMA
"from"	TokenNameStringLiteral
,	TokenNameCOMMA
"further"	TokenNameStringLiteral
,	TokenNameCOMMA
"had"	TokenNameStringLiteral
,	TokenNameCOMMA
"has"	TokenNameStringLiteral
,	TokenNameCOMMA
"have"	TokenNameStringLiteral
,	TokenNameCOMMA
"he"	TokenNameStringLiteral
,	TokenNameCOMMA
"hence"	TokenNameStringLiteral
,	TokenNameCOMMA
"her"	TokenNameStringLiteral
,	TokenNameCOMMA
"here"	TokenNameStringLiteral
,	TokenNameCOMMA
"hereafter"	TokenNameStringLiteral
,	TokenNameCOMMA
"hereby"	TokenNameStringLiteral
,	TokenNameCOMMA
"herein"	TokenNameStringLiteral
,	TokenNameCOMMA
"hereupon"	TokenNameStringLiteral
,	TokenNameCOMMA
"hers"	TokenNameStringLiteral
,	TokenNameCOMMA
"herself"	TokenNameStringLiteral
,	TokenNameCOMMA
"him"	TokenNameStringLiteral
,	TokenNameCOMMA
"himself"	TokenNameStringLiteral
,	TokenNameCOMMA
"his"	TokenNameStringLiteral
,	TokenNameCOMMA
"how"	TokenNameStringLiteral
,	TokenNameCOMMA
"however"	TokenNameStringLiteral
,	TokenNameCOMMA
"i"	TokenNameStringLiteral
,	TokenNameCOMMA
"ie"	TokenNameStringLiteral
,	TokenNameCOMMA
"if"	TokenNameStringLiteral
,	TokenNameCOMMA
"in"	TokenNameStringLiteral
,	TokenNameCOMMA
"inc"	TokenNameStringLiteral
,	TokenNameCOMMA
"indeed"	TokenNameStringLiteral
,	TokenNameCOMMA
"into"	TokenNameStringLiteral
,	TokenNameCOMMA
"is"	TokenNameStringLiteral
,	TokenNameCOMMA
"it"	TokenNameStringLiteral
,	TokenNameCOMMA
"its"	TokenNameStringLiteral
,	TokenNameCOMMA
"itself"	TokenNameStringLiteral
,	TokenNameCOMMA
"last"	TokenNameStringLiteral
,	TokenNameCOMMA
"latter"	TokenNameStringLiteral
,	TokenNameCOMMA
"latterly"	TokenNameStringLiteral
,	TokenNameCOMMA
"least"	TokenNameStringLiteral
,	TokenNameCOMMA
"less"	TokenNameStringLiteral
,	TokenNameCOMMA
"ltd"	TokenNameStringLiteral
,	TokenNameCOMMA
"many"	TokenNameStringLiteral
,	TokenNameCOMMA
"may"	TokenNameStringLiteral
,	TokenNameCOMMA
"me"	TokenNameStringLiteral
,	TokenNameCOMMA
"meanwhile"	TokenNameStringLiteral
,	TokenNameCOMMA
"might"	TokenNameStringLiteral
,	TokenNameCOMMA
"more"	TokenNameStringLiteral
,	TokenNameCOMMA
"moreover"	TokenNameStringLiteral
,	TokenNameCOMMA
"most"	TokenNameStringLiteral
,	TokenNameCOMMA
"mostly"	TokenNameStringLiteral
,	TokenNameCOMMA
"much"	TokenNameStringLiteral
,	TokenNameCOMMA
"must"	TokenNameStringLiteral
,	TokenNameCOMMA
"my"	TokenNameStringLiteral
,	TokenNameCOMMA
"myself"	TokenNameStringLiteral
,	TokenNameCOMMA
"namely"	TokenNameStringLiteral
,	TokenNameCOMMA
"neither"	TokenNameStringLiteral
,	TokenNameCOMMA
"never"	TokenNameStringLiteral
,	TokenNameCOMMA
"nevertheless"	TokenNameStringLiteral
,	TokenNameCOMMA
"next"	TokenNameStringLiteral
,	TokenNameCOMMA
"no"	TokenNameStringLiteral
,	TokenNameCOMMA
"nobody"	TokenNameStringLiteral
,	TokenNameCOMMA
"none"	TokenNameStringLiteral
,	TokenNameCOMMA
"noone"	TokenNameStringLiteral
,	TokenNameCOMMA
"nor"	TokenNameStringLiteral
,	TokenNameCOMMA
"not"	TokenNameStringLiteral
,	TokenNameCOMMA
"nothing"	TokenNameStringLiteral
,	TokenNameCOMMA
"now"	TokenNameStringLiteral
,	TokenNameCOMMA
"nowhere"	TokenNameStringLiteral
,	TokenNameCOMMA
"of"	TokenNameStringLiteral
,	TokenNameCOMMA
"off"	TokenNameStringLiteral
,	TokenNameCOMMA
"often"	TokenNameStringLiteral
,	TokenNameCOMMA
"on"	TokenNameStringLiteral
,	TokenNameCOMMA
"once one"	TokenNameStringLiteral
,	TokenNameCOMMA
"only"	TokenNameStringLiteral
,	TokenNameCOMMA
"onto"	TokenNameStringLiteral
,	TokenNameCOMMA
"or"	TokenNameStringLiteral
,	TokenNameCOMMA
"other"	TokenNameStringLiteral
,	TokenNameCOMMA
"others"	TokenNameStringLiteral
,	TokenNameCOMMA
"otherwise"	TokenNameStringLiteral
,	TokenNameCOMMA
"our"	TokenNameStringLiteral
,	TokenNameCOMMA
"ours"	TokenNameStringLiteral
,	TokenNameCOMMA
"ourselves"	TokenNameStringLiteral
,	TokenNameCOMMA
"out"	TokenNameStringLiteral
,	TokenNameCOMMA
"over"	TokenNameStringLiteral
,	TokenNameCOMMA
"own"	TokenNameStringLiteral
,	TokenNameCOMMA
"per"	TokenNameStringLiteral
,	TokenNameCOMMA
"perhaps"	TokenNameStringLiteral
,	TokenNameCOMMA
"rather"	TokenNameStringLiteral
,	TokenNameCOMMA
"s"	TokenNameStringLiteral
,	TokenNameCOMMA
"same"	TokenNameStringLiteral
,	TokenNameCOMMA
"seem"	TokenNameStringLiteral
,	TokenNameCOMMA
"seemed"	TokenNameStringLiteral
,	TokenNameCOMMA
"seeming"	TokenNameStringLiteral
,	TokenNameCOMMA
"seems"	TokenNameStringLiteral
,	TokenNameCOMMA
"several"	TokenNameStringLiteral
,	TokenNameCOMMA
"she"	TokenNameStringLiteral
,	TokenNameCOMMA
"should"	TokenNameStringLiteral
,	TokenNameCOMMA
"since"	TokenNameStringLiteral
,	TokenNameCOMMA
"so"	TokenNameStringLiteral
,	TokenNameCOMMA
"some"	TokenNameStringLiteral
,	TokenNameCOMMA
"somehow"	TokenNameStringLiteral
,	TokenNameCOMMA
"someone"	TokenNameStringLiteral
,	TokenNameCOMMA
"something"	TokenNameStringLiteral
,	TokenNameCOMMA
"sometime"	TokenNameStringLiteral
,	TokenNameCOMMA
"sometimes"	TokenNameStringLiteral
,	TokenNameCOMMA
"somewhere"	TokenNameStringLiteral
,	TokenNameCOMMA
"still"	TokenNameStringLiteral
,	TokenNameCOMMA
"such"	TokenNameStringLiteral
,	TokenNameCOMMA
"t"	TokenNameStringLiteral
,	TokenNameCOMMA
"than"	TokenNameStringLiteral
,	TokenNameCOMMA
"that"	TokenNameStringLiteral
,	TokenNameCOMMA
"the"	TokenNameStringLiteral
,	TokenNameCOMMA
"their"	TokenNameStringLiteral
,	TokenNameCOMMA
"them"	TokenNameStringLiteral
,	TokenNameCOMMA
"themselves"	TokenNameStringLiteral
,	TokenNameCOMMA
"then"	TokenNameStringLiteral
,	TokenNameCOMMA
"thence"	TokenNameStringLiteral
,	TokenNameCOMMA
"there"	TokenNameStringLiteral
,	TokenNameCOMMA
"thereafter"	TokenNameStringLiteral
,	TokenNameCOMMA
"thereby"	TokenNameStringLiteral
,	TokenNameCOMMA
"therefor"	TokenNameStringLiteral
,	TokenNameCOMMA
"therein"	TokenNameStringLiteral
,	TokenNameCOMMA
"thereupon"	TokenNameStringLiteral
,	TokenNameCOMMA
"these"	TokenNameStringLiteral
,	TokenNameCOMMA
"they"	TokenNameStringLiteral
,	TokenNameCOMMA
"this"	TokenNameStringLiteral
,	TokenNameCOMMA
"those"	TokenNameStringLiteral
,	TokenNameCOMMA
"though"	TokenNameStringLiteral
,	TokenNameCOMMA
"through"	TokenNameStringLiteral
,	TokenNameCOMMA
"throughout"	TokenNameStringLiteral
,	TokenNameCOMMA
"thru"	TokenNameStringLiteral
,	TokenNameCOMMA
"thus"	TokenNameStringLiteral
,	TokenNameCOMMA
"to"	TokenNameStringLiteral
,	TokenNameCOMMA
"together"	TokenNameStringLiteral
,	TokenNameCOMMA
"too"	TokenNameStringLiteral
,	TokenNameCOMMA
"toward"	TokenNameStringLiteral
,	TokenNameCOMMA
"towards"	TokenNameStringLiteral
,	TokenNameCOMMA
"under"	TokenNameStringLiteral
,	TokenNameCOMMA
"until"	TokenNameStringLiteral
,	TokenNameCOMMA
"up"	TokenNameStringLiteral
,	TokenNameCOMMA
"upon"	TokenNameStringLiteral
,	TokenNameCOMMA
"us"	TokenNameStringLiteral
,	TokenNameCOMMA
"very"	TokenNameStringLiteral
,	TokenNameCOMMA
"via"	TokenNameStringLiteral
,	TokenNameCOMMA
"was"	TokenNameStringLiteral
,	TokenNameCOMMA
"we"	TokenNameStringLiteral
,	TokenNameCOMMA
"well"	TokenNameStringLiteral
,	TokenNameCOMMA
"were"	TokenNameStringLiteral
,	TokenNameCOMMA
"what"	TokenNameStringLiteral
,	TokenNameCOMMA
"whatever"	TokenNameStringLiteral
,	TokenNameCOMMA
"whatsoever"	TokenNameStringLiteral
,	TokenNameCOMMA
"when"	TokenNameStringLiteral
,	TokenNameCOMMA
"whence"	TokenNameStringLiteral
,	TokenNameCOMMA
"whenever"	TokenNameStringLiteral
,	TokenNameCOMMA
"whensoever"	TokenNameStringLiteral
,	TokenNameCOMMA
"where"	TokenNameStringLiteral
,	TokenNameCOMMA
"whereafter"	TokenNameStringLiteral
,	TokenNameCOMMA
"whereas"	TokenNameStringLiteral
,	TokenNameCOMMA
"whereat"	TokenNameStringLiteral
,	TokenNameCOMMA
"whereby"	TokenNameStringLiteral
,	TokenNameCOMMA
"wherefrom"	TokenNameStringLiteral
,	TokenNameCOMMA
"wherein"	TokenNameStringLiteral
,	TokenNameCOMMA
"whereinto"	TokenNameStringLiteral
,	TokenNameCOMMA
"whereof"	TokenNameStringLiteral
,	TokenNameCOMMA
"whereon"	TokenNameStringLiteral
,	TokenNameCOMMA
"whereto"	TokenNameStringLiteral
,	TokenNameCOMMA
"whereunto"	TokenNameStringLiteral
,	TokenNameCOMMA
"whereupon"	TokenNameStringLiteral
,	TokenNameCOMMA
"wherever"	TokenNameStringLiteral
,	TokenNameCOMMA
"wherewith"	TokenNameStringLiteral
,	TokenNameCOMMA
"whether"	TokenNameStringLiteral
,	TokenNameCOMMA
"which"	TokenNameStringLiteral
,	TokenNameCOMMA
"whichever"	TokenNameStringLiteral
,	TokenNameCOMMA
"whichsoever"	TokenNameStringLiteral
,	TokenNameCOMMA
"while"	TokenNameStringLiteral
,	TokenNameCOMMA
"whilst"	TokenNameStringLiteral
,	TokenNameCOMMA
"whither"	TokenNameStringLiteral
,	TokenNameCOMMA
"who"	TokenNameStringLiteral
,	TokenNameCOMMA
"whoever"	TokenNameStringLiteral
,	TokenNameCOMMA
"whole"	TokenNameStringLiteral
,	TokenNameCOMMA
"whom"	TokenNameStringLiteral
,	TokenNameCOMMA
"whomever"	TokenNameStringLiteral
,	TokenNameCOMMA
"whomsoever"	TokenNameStringLiteral
,	TokenNameCOMMA
"whose"	TokenNameStringLiteral
,	TokenNameCOMMA
"whosoever"	TokenNameStringLiteral
,	TokenNameCOMMA
"why"	TokenNameStringLiteral
,	TokenNameCOMMA
"will"	TokenNameStringLiteral
,	TokenNameCOMMA
"with"	TokenNameStringLiteral
,	TokenNameCOMMA
"within"	TokenNameStringLiteral
,	TokenNameCOMMA
"without"	TokenNameStringLiteral
,	TokenNameCOMMA
"would"	TokenNameStringLiteral
,	TokenNameCOMMA
"xsubj"	TokenNameStringLiteral
,	TokenNameCOMMA
"xcal"	TokenNameStringLiteral
,	TokenNameCOMMA
"xauthor"	TokenNameStringLiteral
,	TokenNameCOMMA
"xother "	TokenNameStringLiteral
,	TokenNameCOMMA
"xnote"	TokenNameStringLiteral
,	TokenNameCOMMA
"yet"	TokenNameStringLiteral
,	TokenNameCOMMA
"you"	TokenNameStringLiteral
,	TokenNameCOMMA
"your"	TokenNameStringLiteral
,	TokenNameCOMMA
"yours"	TokenNameStringLiteral
,	TokenNameCOMMA
"yourself"	TokenNameStringLiteral
,	TokenNameCOMMA
"yourselves"	TokenNameStringLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
true	TokenNametrue
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
PatternAnalyzer	TokenNameIdentifier
DEFAULT_ANALYZER	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PatternAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
NON_WORD_PATTERN	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
StopAnalyzer	TokenNameIdentifier
.	TokenNameDOT
ENGLISH_STOP_WORDS_SET	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
PatternAnalyzer	TokenNameIdentifier
EXTENDED_ANALYZER	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PatternAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
.	TokenNameDOT
LUCENE_CURRENT	TokenNameIdentifier
,	TokenNameCOMMA
NON_WORD_PATTERN	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
EXTENDED_ENGLISH_STOP_WORDS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Pattern	TokenNameIdentifier
pattern	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
toLowerCase	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
stopWords	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
PatternAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
Pattern	TokenNameIdentifier
pattern	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
toLowerCase	TokenNameIdentifier
,	TokenNameCOMMA
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
stopWords	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
pattern	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"pattern must not be null"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
eqPattern	TokenNameIdentifier
(	TokenNameLPAREN
NON_WORD_PATTERN	TokenNameIdentifier
,	TokenNameCOMMA
pattern	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
pattern	TokenNameIdentifier
=	TokenNameEQUAL
NON_WORD_PATTERN	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
eqPattern	TokenNameIdentifier
(	TokenNameLPAREN
WHITESPACE_PATTERN	TokenNameIdentifier
,	TokenNameCOMMA
pattern	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
pattern	TokenNameIdentifier
=	TokenNameEQUAL
WHITESPACE_PATTERN	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
stopWords	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
stopWords	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
stopWords	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
pattern	TokenNameIdentifier
=	TokenNameEQUAL
pattern	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
=	TokenNameEQUAL
toLowerCase	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
stopWords	TokenNameIdentifier
=	TokenNameEQUAL
stopWords	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
matchVersion	TokenNameIdentifier
=	TokenNameEQUAL
matchVersion	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
TokenStreamComponents	TokenNameIdentifier
createComponents	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
text	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
text	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"text must not be null"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
pattern	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
NON_WORD_PATTERN	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
FastStringTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
toLowerCase	TokenNameIdentifier
,	TokenNameCOMMA
stopWords	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
pattern	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
WHITESPACE_PATTERN	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
FastStringTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
toLowerCase	TokenNameIdentifier
,	TokenNameCOMMA
stopWords	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
Tokenizer	TokenNameIdentifier
tokenizer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
PatternTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
pattern	TokenNameIdentifier
,	TokenNameCOMMA
toLowerCase	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
TokenStream	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
stopWords	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
new	TokenNamenew
StopFilter	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
stopWords	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
tokenizer	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
TokenStreamComponents	TokenNameIdentifier
(	TokenNameLPAREN
tokenizer	TokenNameIdentifier
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
TokenStreamComponents	TokenNameIdentifier
createComponents	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
String	TokenNameIdentifier
text	TokenNameIdentifier
=	TokenNameEQUAL
toString	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
createComponents	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
reader	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
boolean	TokenNameboolean
equals	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
other	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
==	TokenNameEQUAL_EQUAL
other	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
==	TokenNameEQUAL_EQUAL
DEFAULT_ANALYZER	TokenNameIdentifier
&&	TokenNameAND_AND
other	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
EXTENDED_ANALYZER	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
other	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
DEFAULT_ANALYZER	TokenNameIdentifier
&&	TokenNameAND_AND
this	TokenNamethis
==	TokenNameEQUAL_EQUAL
EXTENDED_ANALYZER	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
other	TokenNameIdentifier
instanceof	TokenNameinstanceof
PatternAnalyzer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
PatternAnalyzer	TokenNameIdentifier
p2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
PatternAnalyzer	TokenNameIdentifier
)	TokenNameRPAREN
other	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
toLowerCase	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
&&	TokenNameAND_AND
eqPattern	TokenNameIdentifier
(	TokenNameLPAREN
pattern	TokenNameIdentifier
,	TokenNameCOMMA
p2	TokenNameIdentifier
.	TokenNameDOT
pattern	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
eq	TokenNameIdentifier
(	TokenNameLPAREN
stopWords	TokenNameIdentifier
,	TokenNameCOMMA
p2	TokenNameIdentifier
.	TokenNameDOT
stopWords	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
int	TokenNameint
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
==	TokenNameEQUAL_EQUAL
DEFAULT_ANALYZER	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
-	TokenNameMINUS
1218418418	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
==	TokenNameEQUAL_EQUAL
EXTENDED_ANALYZER	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
1303507063	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
31	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
h	TokenNameIdentifier
+	TokenNamePLUS
pattern	TokenNameIdentifier
.	TokenNameDOT
pattern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
31	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
h	TokenNameIdentifier
+	TokenNamePLUS
pattern	TokenNameIdentifier
.	TokenNameDOT
flags	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
31	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
h	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
toLowerCase	TokenNameIdentifier
?	TokenNameQUESTION
1231	TokenNameIntegerLiteral
:	TokenNameCOLON
1237	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
31	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
h	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
stopWords	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
stopWords	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
h	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
boolean	TokenNameboolean
eq	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
o1	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
o2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
o1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
o2	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
o1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
o1	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
o2	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
boolean	TokenNameboolean
eqPattern	TokenNameIdentifier
(	TokenNameLPAREN
Pattern	TokenNameIdentifier
p1	TokenNameIdentifier
,	TokenNameCOMMA
Pattern	TokenNameIdentifier
p2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
p1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
p2	TokenNameIdentifier
||	TokenNameOR_OR
(	TokenNameLPAREN
p1	TokenNameIdentifier
.	TokenNameDOT
flags	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
p2	TokenNameIdentifier
.	TokenNameDOT
flags	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
p1	TokenNameIdentifier
.	TokenNameDOT
pattern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
p2	TokenNameIdentifier
.	TokenNameDOT
pattern	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
Reader	TokenNameIdentifier
input	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
instanceof	TokenNameinstanceof
FastStringReader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
FastStringReader	TokenNameIdentifier
)	TokenNameRPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
try	TokenNametry
{	TokenNameLBRACE
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
256	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
len	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
output	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
len	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
len	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
n	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
n	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
len	TokenNameIdentifier
+	TokenNamePLUS
n	TokenNameIdentifier
>	TokenNameGREATER
output	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tmp	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
Math	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
len	TokenNameIdentifier
+	TokenNamePLUS
n	TokenNameIdentifier
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
tmp	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
,	TokenNameCOMMA
n	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buffer	TokenNameIdentifier
=	TokenNameEQUAL
output	TokenNameIdentifier
;	TokenNameSEMICOLON
output	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
output	TokenNameIdentifier
,	TokenNameCOMMA
len	TokenNameIdentifier
,	TokenNameCOMMA
n	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
len	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
n	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
input	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
PatternTokenizer	TokenNameIdentifier
extends	TokenNameextends
Tokenizer	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
Pattern	TokenNameIdentifier
pattern	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
str	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
toLowerCase	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Matcher	TokenNameIdentifier
matcher	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
pos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
=	TokenNameEQUAL
Locale	TokenNameIdentifier
.	TokenNameDOT
getDefault	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
CharTermAttribute	TokenNameIdentifier
termAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
CharTermAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
OffsetAttribute	TokenNameIdentifier
offsetAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
OffsetAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
PatternTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
Reader	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
str	TokenNameIdentifier
,	TokenNameCOMMA
Pattern	TokenNameIdentifier
pattern	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
toLowerCase	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
pattern	TokenNameIdentifier
=	TokenNameEQUAL
pattern	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
str	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
matcher	TokenNameIdentifier
=	TokenNameEQUAL
pattern	TokenNameIdentifier
.	TokenNameDOT
matcher	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
=	TokenNameEQUAL
toLowerCase	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
final	TokenNamefinal
boolean	TokenNameboolean
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
matcher	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
clearAttributes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
start	TokenNameIdentifier
=	TokenNameEQUAL
pos	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
end	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isMatch	TokenNameIdentifier
=	TokenNameEQUAL
matcher	TokenNameIdentifier
.	TokenNameDOT
find	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isMatch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
end	TokenNameIdentifier
=	TokenNameEQUAL
matcher	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pos	TokenNameIdentifier
=	TokenNameEQUAL
matcher	TokenNameIdentifier
.	TokenNameDOT
end	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
end	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
matcher	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
start	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
text	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
toLowerCase	TokenNameIdentifier
)	TokenNameRPAREN
text	TokenNameIdentifier
=	TokenNameEQUAL
text	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
termAtt	TokenNameIdentifier
.	TokenNameDOT
setEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
text	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
setOffset	TokenNameIdentifier
(	TokenNameLPAREN
correctOffset	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
correctOffset	TokenNameIdentifier
(	TokenNameLPAREN
end	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
isMatch	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
end	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
finalOffset	TokenNameIdentifier
=	TokenNameEQUAL
correctOffset	TokenNameIdentifier
(	TokenNameLPAREN
str	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
setOffset	TokenNameIdentifier
(	TokenNameLPAREN
finalOffset	TokenNameIdentifier
,	TokenNameCOMMA
finalOffset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
Reader	TokenNameIdentifier
input	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
str	TokenNameIdentifier
=	TokenNameEQUAL
PatternAnalyzer	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
matcher	TokenNameIdentifier
=	TokenNameEQUAL
pattern	TokenNameIdentifier
.	TokenNameDOT
matcher	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
str	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
pos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
FastStringTokenizer	TokenNameIdentifier
extends	TokenNameextends
Tokenizer	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
String	TokenNameIdentifier
str	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
pos	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
isLetter	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
boolean	TokenNameboolean
toLowerCase	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
stopWords	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
Locale	TokenNameIdentifier
locale	TokenNameIdentifier
=	TokenNameEQUAL
Locale	TokenNameIdentifier
.	TokenNameDOT
getDefault	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
CharTermAttribute	TokenNameIdentifier
termAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
CharTermAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
OffsetAttribute	TokenNameIdentifier
offsetAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
OffsetAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
FastStringTokenizer	TokenNameIdentifier
(	TokenNameLPAREN
Reader	TokenNameIdentifier
input	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
str	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
isLetter	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
toLowerCase	TokenNameIdentifier
,	TokenNameCOMMA
Set	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
stopWords	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
str	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
isLetter	TokenNameIdentifier
=	TokenNameEQUAL
isLetter	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
=	TokenNameEQUAL
toLowerCase	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
stopWords	TokenNameIdentifier
=	TokenNameEQUAL
stopWords	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
boolean	TokenNameboolean
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
clearAttributes	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
s	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
pos	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
letter	TokenNameIdentifier
=	TokenNameEQUAL
isLetter	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
start	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
String	TokenNameIdentifier
text	TokenNameIdentifier
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
text	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
&&	TokenNameAND_AND
!	TokenNameNOT
isTokenChar	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
letter	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
start	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
&&	TokenNameAND_AND
isTokenChar	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
letter	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
text	TokenNameIdentifier
=	TokenNameEQUAL
s	TokenNameIdentifier
.	TokenNameDOT
substring	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
,	TokenNameCOMMA
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
toLowerCase	TokenNameIdentifier
)	TokenNameRPAREN
text	TokenNameIdentifier
=	TokenNameEQUAL
text	TokenNameIdentifier
.	TokenNameDOT
toLowerCase	TokenNameIdentifier
(	TokenNameLPAREN
locale	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
text	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
isStopWord	TokenNameIdentifier
(	TokenNameLPAREN
text	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pos	TokenNameIdentifier
=	TokenNameEQUAL
i	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
text	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
termAtt	TokenNameIdentifier
.	TokenNameDOT
setEmpty	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
text	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
setOffset	TokenNameIdentifier
(	TokenNameLPAREN
correctOffset	TokenNameIdentifier
(	TokenNameLPAREN
start	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
correctOffset	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
end	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
finalOffset	TokenNameIdentifier
=	TokenNameEQUAL
str	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
offsetAtt	TokenNameIdentifier
.	TokenNameDOT
setOffset	TokenNameIdentifier
(	TokenNameLPAREN
correctOffset	TokenNameIdentifier
(	TokenNameLPAREN
finalOffset	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
correctOffset	TokenNameIdentifier
(	TokenNameLPAREN
finalOffset	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
isTokenChar	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
isLetter	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
isLetter	TokenNameIdentifier
?	TokenNameQUESTION
Character	TokenNameIdentifier
.	TokenNameDOT
isLetter	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
!	TokenNameNOT
Character	TokenNameIdentifier
.	TokenNameDOT
isWhitespace	TokenNameIdentifier
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
isStopWord	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
text	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
stopWords	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
stopWords	TokenNameIdentifier
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
text	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
Reader	TokenNameIdentifier
input	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
str	TokenNameIdentifier
=	TokenNameEQUAL
PatternAnalyzer	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
pos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
FastStringReader	TokenNameIdentifier
extends	TokenNameextends
StringReader	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
String	TokenNameIdentifier
s	TokenNameIdentifier
;	TokenNameSEMICOLON
FastStringReader	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
s	TokenNameIdentifier
=	TokenNameEQUAL
s	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
getString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
s	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
