package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
shingle	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Reader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
Analyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
TokenStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
standard	TokenNameIdentifier
.	TokenNameDOT
StandardAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Version	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
class	TokenNameclass
ShingleAnalyzerWrapper	TokenNameIdentifier
extends	TokenNameextends
Analyzer	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
Analyzer	TokenNameIdentifier
defaultAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
maxShingleSize	TokenNameIdentifier
=	TokenNameEQUAL
ShingleFilter	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MAX_SHINGLE_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
minShingleSize	TokenNameIdentifier
=	TokenNameEQUAL
ShingleFilter	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_SHINGLE_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
String	TokenNameIdentifier
tokenSeparator	TokenNameIdentifier
=	TokenNameEQUAL
ShingleFilter	TokenNameIdentifier
.	TokenNameDOT
TOKEN_SEPARATOR	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
outputUnigrams	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
outputUnigramsIfNoShingles	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
public	TokenNamepublic
ShingleAnalyzerWrapper	TokenNameIdentifier
(	TokenNameLPAREN
Analyzer	TokenNameIdentifier
defaultAnalyzer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
defaultAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
ShingleFilter	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MAX_SHINGLE_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ShingleAnalyzerWrapper	TokenNameIdentifier
(	TokenNameLPAREN
Analyzer	TokenNameIdentifier
defaultAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
defaultAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
ShingleFilter	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_SHINGLE_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
maxShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ShingleAnalyzerWrapper	TokenNameIdentifier
(	TokenNameLPAREN
Analyzer	TokenNameIdentifier
defaultAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minShingleSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
defaultAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
minShingleSize	TokenNameIdentifier
,	TokenNameCOMMA
maxShingleSize	TokenNameIdentifier
,	TokenNameCOMMA
ShingleFilter	TokenNameIdentifier
.	TokenNameDOT
TOKEN_SEPARATOR	TokenNameIdentifier
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ShingleAnalyzerWrapper	TokenNameIdentifier
(	TokenNameLPAREN
Analyzer	TokenNameIdentifier
defaultAnalyzer	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minShingleSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxShingleSize	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
tokenSeparator	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
outputUnigrams	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
outputUnigramsIfNoShingles	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
defaultAnalyzer	TokenNameIdentifier
=	TokenNameEQUAL
defaultAnalyzer	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
maxShingleSize	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Max shingle size must be >= 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
maxShingleSize	TokenNameIdentifier
=	TokenNameEQUAL
maxShingleSize	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
minShingleSize	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Min shingle size must be >= 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
minShingleSize	TokenNameIdentifier
>	TokenNameGREATER
maxShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Min shingle size must be <= max shingle size"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
minShingleSize	TokenNameIdentifier
=	TokenNameEQUAL
minShingleSize	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
tokenSeparator	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
tokenSeparator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
""	TokenNameStringLiteral
:	TokenNameCOLON
tokenSeparator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
outputUnigrams	TokenNameIdentifier
=	TokenNameEQUAL
outputUnigrams	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
outputUnigramsIfNoShingles	TokenNameIdentifier
=	TokenNameEQUAL
outputUnigramsIfNoShingles	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ShingleAnalyzerWrapper	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
ShingleFilter	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MIN_SHINGLE_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
ShingleFilter	TokenNameIdentifier
.	TokenNameDOT
DEFAULT_MAX_SHINGLE_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
ShingleAnalyzerWrapper	TokenNameIdentifier
(	TokenNameLPAREN
Version	TokenNameIdentifier
matchVersion	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minShingleSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
new	TokenNamenew
StandardAnalyzer	TokenNameIdentifier
(	TokenNameLPAREN
matchVersion	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
minShingleSize	TokenNameIdentifier
,	TokenNameCOMMA
maxShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getMaxShingleSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
maxShingleSize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setMaxShingleSize	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
maxShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
maxShingleSize	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Max shingle size must be >= 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
maxShingleSize	TokenNameIdentifier
=	TokenNameEQUAL
maxShingleSize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
getMinShingleSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
minShingleSize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setMinShingleSize	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
minShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
minShingleSize	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Min shingle size must be >= 2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
minShingleSize	TokenNameIdentifier
>	TokenNameGREATER
maxShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"Min shingle size must be <= max shingle size"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
this	TokenNamethis
.	TokenNameDOT
minShingleSize	TokenNameIdentifier
=	TokenNameEQUAL
minShingleSize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getTokenSeparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
tokenSeparator	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setTokenSeparator	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
tokenSeparator	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
tokenSeparator	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
tokenSeparator	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
""	TokenNameStringLiteral
:	TokenNameCOLON
tokenSeparator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isOutputUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
outputUnigrams	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setOutputUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
outputUnigrams	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
outputUnigrams	TokenNameIdentifier
=	TokenNameEQUAL
outputUnigrams	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
isOutputUnigramsIfNoShingles	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
outputUnigramsIfNoShingles	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
setOutputUnigramsIfNoShingles	TokenNameIdentifier
(	TokenNameLPAREN
boolean	TokenNameboolean
outputUnigramsIfNoShingles	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
outputUnigramsIfNoShingles	TokenNameIdentifier
=	TokenNameEQUAL
outputUnigramsIfNoShingles	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
TokenStream	TokenNameIdentifier
tokenStream	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
TokenStream	TokenNameIdentifier
wrapped	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
wrapped	TokenNameIdentifier
=	TokenNameEQUAL
defaultAnalyzer	TokenNameIdentifier
.	TokenNameDOT
reusableTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
reader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
wrapped	TokenNameIdentifier
=	TokenNameEQUAL
defaultAnalyzer	TokenNameIdentifier
.	TokenNameDOT
tokenStream	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
reader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ShingleFilter	TokenNameIdentifier
filter	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ShingleFilter	TokenNameIdentifier
(	TokenNameLPAREN
wrapped	TokenNameIdentifier
,	TokenNameCOMMA
minShingleSize	TokenNameIdentifier
,	TokenNameCOMMA
maxShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
filter	TokenNameIdentifier
.	TokenNameDOT
setMinShingleSize	TokenNameIdentifier
(	TokenNameLPAREN
minShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
filter	TokenNameIdentifier
.	TokenNameDOT
setMaxShingleSize	TokenNameIdentifier
(	TokenNameLPAREN
maxShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
filter	TokenNameIdentifier
.	TokenNameDOT
setTokenSeparator	TokenNameIdentifier
(	TokenNameLPAREN
tokenSeparator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
filter	TokenNameIdentifier
.	TokenNameDOT
setOutputUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
outputUnigrams	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
filter	TokenNameIdentifier
.	TokenNameDOT
setOutputUnigramsIfNoShingles	TokenNameIdentifier
(	TokenNameLPAREN
outputUnigramsIfNoShingles	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
filter	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
class	TokenNameclass
SavedStreams	TokenNameIdentifier
{	TokenNameLBRACE
TokenStream	TokenNameIdentifier
wrapped	TokenNameIdentifier
;	TokenNameSEMICOLON
ShingleFilter	TokenNameIdentifier
shingle	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
TokenStream	TokenNameIdentifier
reusableTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
Reader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
SavedStreams	TokenNameIdentifier
streams	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
SavedStreams	TokenNameIdentifier
)	TokenNameRPAREN
getPreviousTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
streams	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
streams	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
SavedStreams	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
streams	TokenNameIdentifier
.	TokenNameDOT
wrapped	TokenNameIdentifier
=	TokenNameEQUAL
defaultAnalyzer	TokenNameIdentifier
.	TokenNameDOT
reusableTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
reader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
streams	TokenNameIdentifier
.	TokenNameDOT
shingle	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ShingleFilter	TokenNameIdentifier
(	TokenNameLPAREN
streams	TokenNameIdentifier
.	TokenNameDOT
wrapped	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
setPreviousTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
streams	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
TokenStream	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
defaultAnalyzer	TokenNameIdentifier
.	TokenNameDOT
reusableTokenStream	TokenNameIdentifier
(	TokenNameLPAREN
fieldName	TokenNameIdentifier
,	TokenNameCOMMA
reader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
streams	TokenNameIdentifier
.	TokenNameDOT
wrapped	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
streams	TokenNameIdentifier
.	TokenNameDOT
wrapped	TokenNameIdentifier
=	TokenNameEQUAL
result	TokenNameIdentifier
;	TokenNameSEMICOLON
streams	TokenNameIdentifier
.	TokenNameDOT
shingle	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ShingleFilter	TokenNameIdentifier
(	TokenNameLPAREN
streams	TokenNameIdentifier
.	TokenNameDOT
wrapped	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
streams	TokenNameIdentifier
.	TokenNameDOT
shingle	TokenNameIdentifier
.	TokenNameDOT
setMaxShingleSize	TokenNameIdentifier
(	TokenNameLPAREN
maxShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
streams	TokenNameIdentifier
.	TokenNameDOT
shingle	TokenNameIdentifier
.	TokenNameDOT
setMinShingleSize	TokenNameIdentifier
(	TokenNameLPAREN
minShingleSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
streams	TokenNameIdentifier
.	TokenNameDOT
shingle	TokenNameIdentifier
.	TokenNameDOT
setTokenSeparator	TokenNameIdentifier
(	TokenNameLPAREN
tokenSeparator	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
streams	TokenNameIdentifier
.	TokenNameDOT
shingle	TokenNameIdentifier
.	TokenNameDOT
setOutputUnigrams	TokenNameIdentifier
(	TokenNameLPAREN
outputUnigrams	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
streams	TokenNameIdentifier
.	TokenNameDOT
shingle	TokenNameIdentifier
.	TokenNameDOT
setOutputUnigramsIfNoShingles	TokenNameIdentifier
(	TokenNameLPAREN
outputUnigramsIfNoShingles	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
streams	TokenNameIdentifier
.	TokenNameDOT
shingle	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
