package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
tartarus	TokenNameIdentifier
.	TokenNameDOT
snowball	TokenNameIdentifier
.	TokenNameDOT
ext	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
tartarus	TokenNameIdentifier
.	TokenNameDOT
snowball	TokenNameIdentifier
.	TokenNameDOT
SnowballProgram	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
tartarus	TokenNameIdentifier
.	TokenNameDOT
snowball	TokenNameIdentifier
.	TokenNameDOT
Among	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
SwedishStemmer	TokenNameIdentifier
extends	TokenNameextends
SnowballProgram	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
Among	TokenNameIdentifier
a_0	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"a"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"arna"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"erna"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"heterna"	TokenNameStringLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"orna"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"ad"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"e"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"ade"	TokenNameStringLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"ande"	TokenNameStringLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"arne"	TokenNameStringLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"are"	TokenNameStringLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"aste"	TokenNameStringLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"en"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"anden"	TokenNameStringLiteral
,	TokenNameCOMMA
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"aren"	TokenNameStringLiteral
,	TokenNameCOMMA
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"heten"	TokenNameStringLiteral
,	TokenNameCOMMA
12	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"ern"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"ar"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"er"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"heter"	TokenNameStringLiteral
,	TokenNameCOMMA
18	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"or"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"s"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"as"	TokenNameStringLiteral
,	TokenNameCOMMA
21	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"arnas"	TokenNameStringLiteral
,	TokenNameCOMMA
22	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"ernas"	TokenNameStringLiteral
,	TokenNameCOMMA
22	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"ornas"	TokenNameStringLiteral
,	TokenNameCOMMA
22	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"es"	TokenNameStringLiteral
,	TokenNameCOMMA
21	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"ades"	TokenNameStringLiteral
,	TokenNameCOMMA
26	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"andes"	TokenNameStringLiteral
,	TokenNameCOMMA
26	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"ens"	TokenNameStringLiteral
,	TokenNameCOMMA
21	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"arens"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"hetens"	TokenNameStringLiteral
,	TokenNameCOMMA
29	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"erns"	TokenNameStringLiteral
,	TokenNameCOMMA
21	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"at"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"andet"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"het"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"ast"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
Among	TokenNameIdentifier
a_1	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"dd"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"gd"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"nn"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"dt"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"gt"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"kt"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"tt"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
Among	TokenNameIdentifier
a_2	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"ig"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"lig"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"els"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"fullt"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
,	TokenNameCOMMA
new	TokenNamenew
Among	TokenNameIdentifier
(	TokenNameLPAREN
"löst"	TokenNameStringLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
""	TokenNameStringLiteral
,	TokenNameCOMMA
this	TokenNamethis
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
g_v	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
17	TokenNameIntegerLiteral
,	TokenNameCOMMA
65	TokenNameIntegerLiteral
,	TokenNameCOMMA
16	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
24	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
char	TokenNamechar
g_s_ending	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
=	TokenNameEQUAL
{	TokenNameLBRACE
119	TokenNameIntegerLiteral
,	TokenNameCOMMA
127	TokenNameIntegerLiteral
,	TokenNameCOMMA
149	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
I_x	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
I_p1	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
void	TokenNamevoid
copy_from	TokenNameIdentifier
(	TokenNameLPAREN
SwedishStemmer	TokenNameIdentifier
other	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
I_x	TokenNameIdentifier
=	TokenNameEQUAL
other	TokenNameIdentifier
.	TokenNameDOT
I_x	TokenNameIdentifier
;	TokenNameSEMICOLON
I_p1	TokenNameIdentifier
=	TokenNameEQUAL
other	TokenNameIdentifier
.	TokenNameDOT
I_p1	TokenNameIdentifier
;	TokenNameSEMICOLON
super	TokenNamesuper
.	TokenNameDOT
copy_from	TokenNameIdentifier
(	TokenNameLPAREN
other	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
r_mark_regions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
v_1	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
I_p1	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
;	TokenNameSEMICOLON
v_1	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
>	TokenNameGREATER
c	TokenNameIdentifier
||	TokenNameOR_OR
c	TokenNameIdentifier
>	TokenNameGREATER
limit	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
=	TokenNameEQUAL
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
I_x	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
v_1	TokenNameIdentifier
;	TokenNameSEMICOLON
golab0	TokenNameIdentifier
:	TokenNameCOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
v_2	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
lab1	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
in_grouping	TokenNameIdentifier
(	TokenNameLPAREN
g_v	TokenNameIdentifier
,	TokenNameCOMMA
97	TokenNameIntegerLiteral
,	TokenNameCOMMA
246	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
lab1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
=	TokenNameEQUAL
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
golab0	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
limit	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
golab2	TokenNameIdentifier
:	TokenNameCOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
lab3	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
out_grouping	TokenNameIdentifier
(	TokenNameLPAREN
g_v	TokenNameIdentifier
,	TokenNameCOMMA
97	TokenNameIntegerLiteral
,	TokenNameCOMMA
246	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
lab3	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
golab2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
limit	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
I_p1	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
lab4	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
I_p1	TokenNameIdentifier
<	TokenNameLESS
I_x	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
lab4	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
I_p1	TokenNameIdentifier
=	TokenNameEQUAL
I_x	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
r_main_suffix	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
among_var	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
v_1	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
v_1	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
<	TokenNameLESS
I_p1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
=	TokenNameEQUAL
I_p1	TokenNameIdentifier
;	TokenNameSEMICOLON
v_2	TokenNameIdentifier
=	TokenNameEQUAL
limit_backward	TokenNameIdentifier
;	TokenNameSEMICOLON
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
v_1	TokenNameIdentifier
;	TokenNameSEMICOLON
ket	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
among_var	TokenNameIdentifier
=	TokenNameEQUAL
find_among_b	TokenNameIdentifier
(	TokenNameLPAREN
a_0	TokenNameIdentifier
,	TokenNameCOMMA
37	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
among_var	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bra	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
among_var	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
0	TokenNameIntegerLiteral
:	TokenNameCOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
slice_del	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
in_grouping_b	TokenNameIdentifier
(	TokenNameLPAREN
g_s_ending	TokenNameIdentifier
,	TokenNameCOMMA
98	TokenNameIntegerLiteral
,	TokenNameCOMMA
121	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
slice_del	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
r_consonant_pair	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
v_1	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
v_3	TokenNameIdentifier
;	TokenNameSEMICOLON
v_1	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
<	TokenNameLESS
I_p1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
=	TokenNameEQUAL
I_p1	TokenNameIdentifier
;	TokenNameSEMICOLON
v_2	TokenNameIdentifier
=	TokenNameEQUAL
limit_backward	TokenNameIdentifier
;	TokenNameSEMICOLON
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
v_1	TokenNameIdentifier
;	TokenNameSEMICOLON
v_3	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
find_among_b	TokenNameIdentifier
(	TokenNameLPAREN
a_1	TokenNameIdentifier
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
v_3	TokenNameIdentifier
;	TokenNameSEMICOLON
ket	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
limit_backward	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
bra	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
slice_del	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
r_other_suffix	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
among_var	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
v_1	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
v_1	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cursor	TokenNameIdentifier
<	TokenNameLESS
I_p1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
cursor	TokenNameIdentifier
=	TokenNameEQUAL
I_p1	TokenNameIdentifier
;	TokenNameSEMICOLON
v_2	TokenNameIdentifier
=	TokenNameEQUAL
limit_backward	TokenNameIdentifier
;	TokenNameSEMICOLON
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
v_1	TokenNameIdentifier
;	TokenNameSEMICOLON
ket	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
among_var	TokenNameIdentifier
=	TokenNameEQUAL
find_among_b	TokenNameIdentifier
(	TokenNameLPAREN
a_2	TokenNameIdentifier
,	TokenNameCOMMA
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
among_var	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bra	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
among_var	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
0	TokenNameIntegerLiteral
:	TokenNameCOLON
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
slice_del	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
2	TokenNameIntegerLiteral
:	TokenNameCOLON
slice_from	TokenNameIdentifier
(	TokenNameLPAREN
"lös"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
3	TokenNameIntegerLiteral
:	TokenNameCOLON
slice_from	TokenNameIdentifier
(	TokenNameLPAREN
"full"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
stem	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
v_1	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
v_3	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
v_4	TokenNameIdentifier
;	TokenNameSEMICOLON
v_1	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
lab0	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
r_mark_regions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
lab0	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
v_1	TokenNameIdentifier
;	TokenNameSEMICOLON
limit_backward	TokenNameIdentifier
=	TokenNameEQUAL
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
;	TokenNameSEMICOLON
v_2	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
lab1	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
r_main_suffix	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
lab1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
v_2	TokenNameIdentifier
;	TokenNameSEMICOLON
v_3	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
lab2	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
r_consonant_pair	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
lab2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
v_3	TokenNameIdentifier
;	TokenNameSEMICOLON
v_4	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
cursor	TokenNameIdentifier
;	TokenNameSEMICOLON
lab3	TokenNameIdentifier
:	TokenNameCOLON
do	TokenNamedo
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
r_other_suffix	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
lab3	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
limit	TokenNameIdentifier
-	TokenNameMINUS
v_4	TokenNameIdentifier
;	TokenNameSEMICOLON
cursor	TokenNameIdentifier
=	TokenNameEQUAL
limit_backward	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
