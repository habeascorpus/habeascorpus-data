package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
cn	TokenNameIdentifier
.	TokenNameDOT
smart	TokenNameIdentifier
.	TokenNameDOT
hhmm	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
UnsupportedEncodingException	TokenNameIdentifier
;	TokenNameSEMICOLON
abstract	TokenNameabstract
class	TokenNameclass
AbstractDictionary	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
GB2312_FIRST_CHAR	TokenNameIdentifier
=	TokenNameEQUAL
1410	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
GB2312_CHAR_NUM	TokenNameIdentifier
=	TokenNameEQUAL
87	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
94	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
CHAR_NUM_IN_FILE	TokenNameIdentifier
=	TokenNameEQUAL
6768	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
String	TokenNameIdentifier
getCCByGB2312Id	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ccid	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ccid	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
ccid	TokenNameIdentifier
>	TokenNameGREATER
AbstractDictionary	TokenNameIdentifier
.	TokenNameDOT
GB2312_CHAR_NUM	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
int	TokenNameint
cc1	TokenNameIdentifier
=	TokenNameEQUAL
ccid	TokenNameIdentifier
/	TokenNameDIVIDE
94	TokenNameIntegerLiteral
+	TokenNamePLUS
161	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
cc2	TokenNameIdentifier
=	TokenNameEQUAL
ccid	TokenNameIdentifier
%	TokenNameREMAINDER
94	TokenNameIntegerLiteral
+	TokenNamePLUS
161	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
cc1	TokenNameIdentifier
;	TokenNameSEMICOLON
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
cc2	TokenNameIdentifier
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
String	TokenNameIdentifier
cchar	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
"GB2312"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
cchar	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
UnsupportedEncodingException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
short	TokenNameshort
getGB2312Id	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buffer	TokenNameIdentifier
=	TokenNameEQUAL
Character	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
getBytes	TokenNameIdentifier
(	TokenNameLPAREN
"GB2312"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
buffer	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
b0	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x0FF	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
161	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
b1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
0x0FF	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
161	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
b0	TokenNameIdentifier
*	TokenNameMULTIPLY
94	TokenNameIntegerLiteral
+	TokenNamePLUS
b1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
UnsupportedEncodingException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
e	TokenNameIdentifier
.	TokenNameDOT
printStackTrace	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
long	TokenNamelong
hash1	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
long	TokenNamelong
p	TokenNameIdentifier
=	TokenNameEQUAL
1099511628211L	TokenNameLongLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
hash	TokenNameIdentifier
=	TokenNameEQUAL
0xcbf29ce484222325L	TokenNameLongLiteral
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
hash	TokenNameIdentifier
^	TokenNameXOR
(	TokenNameLPAREN
c	TokenNameIdentifier
&	TokenNameAND
0x00FF	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
p	TokenNameIdentifier
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
hash	TokenNameIdentifier
^	TokenNameXOR
(	TokenNameLPAREN
c	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
p	TokenNameIdentifier
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
hash	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
13	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
^=	TokenNameXOR_EQUAL
hash	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
hash	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
^=	TokenNameXOR_EQUAL
hash	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
17	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
hash	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
5	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
hash	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
long	TokenNamelong
hash1	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
carray	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
long	TokenNamelong
p	TokenNameIdentifier
=	TokenNameEQUAL
1099511628211L	TokenNameLongLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
hash	TokenNameIdentifier
=	TokenNameEQUAL
0xcbf29ce484222325L	TokenNameLongLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
carray	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
d	TokenNameIdentifier
=	TokenNameEQUAL
carray	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
hash	TokenNameIdentifier
^	TokenNameXOR
(	TokenNameLPAREN
d	TokenNameIdentifier
&	TokenNameAND
0x00FF	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
p	TokenNameIdentifier
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
hash	TokenNameIdentifier
^	TokenNameXOR
(	TokenNameLPAREN
d	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
p	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
hash	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
hash2	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
hash	TokenNameIdentifier
=	TokenNameEQUAL
5381	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
hash	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
hash	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
c	TokenNameIdentifier
&	TokenNameAND
0x00FF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
hash	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
hash	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
c	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
hash	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
hash2	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
carray	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
hash	TokenNameIdentifier
=	TokenNameEQUAL
5381	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
carray	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
d	TokenNameIdentifier
=	TokenNameEQUAL
carray	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
hash	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
hash	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
d	TokenNameIdentifier
&	TokenNameAND
0x00FF	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
hash	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
hash	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
hash	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
d	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
hash	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
