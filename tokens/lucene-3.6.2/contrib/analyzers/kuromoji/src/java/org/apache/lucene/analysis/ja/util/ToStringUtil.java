package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
ja	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
ToStringUtil	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
posTranslations	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-一般"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-common"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-固有名詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-proper"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-固有名詞-一般"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-proper-misc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-固有名詞-人名"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-proper-person"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-固有名詞-人名-一般"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-proper-person-misc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-固有名詞-人名-姓"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-proper-person-surname"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-固有名詞-人名-名"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-proper-person-given_name"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-固有名詞-組織"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-proper-organization"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-固有名詞-地域"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-proper-place"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-固有名詞-地域-一般"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-proper-place-misc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-固有名詞-地域-国"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-proper-place-country"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-代名詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-pronoun"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-代名詞-一般"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-pronoun-misc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-代名詞-縮約"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-pronoun-contraction"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-副詞可能"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-adverbial"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-サ変接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-verbal"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-形容動詞語幹"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-adjective-base"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-数"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-numeric"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-非自立"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-affix"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-非自立-一般"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-affix-misc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-非自立-副詞可能"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-affix-adverbial"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-非自立-助動詞語幹"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-affix-aux"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-非自立-形容動詞語幹"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-affix-adjective-base"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-特殊"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-special"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-特殊-助動詞語幹"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-special-aux"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-接尾"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-suffix"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-接尾-一般"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-suffix-misc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-接尾-人名"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-suffix-person"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-接尾-地域"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-suffix-place"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-接尾-サ変接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-suffix-verbal"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-接尾-助動詞語幹"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-suffix-aux"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-接尾-形容動詞語幹"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-suffix-adjective-base"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-接尾-副詞可能"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-suffix-adverbial"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-接尾-助数詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-suffix-classifier"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-接尾-特殊"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-suffix-special"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-接続詞的"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-suffix-conjunctive"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-動詞非自立的"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-verbal_aux"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-引用文字列"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-quotation"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"名詞-ナイ形容詞語幹"	TokenNameStringLiteral
,	TokenNameCOMMA
"noun-nai_adjective"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"接頭詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"prefix"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"接頭詞-名詞接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"prefix-nominal"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"接頭詞-動詞接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"prefix-verbal"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"接頭詞-形容詞接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"prefix-adjectival"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"接頭詞-数接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"prefix-numerical"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"動詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"verb"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"動詞-自立"	TokenNameStringLiteral
,	TokenNameCOMMA
"verb-main"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"動詞-非自立"	TokenNameStringLiteral
,	TokenNameCOMMA
"verb-auxiliary"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"動詞-接尾"	TokenNameStringLiteral
,	TokenNameCOMMA
"verb-suffix"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"形容詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"adjective"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"形容詞-自立"	TokenNameStringLiteral
,	TokenNameCOMMA
"adjective-main"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"形容詞-非自立"	TokenNameStringLiteral
,	TokenNameCOMMA
"adjective-auxiliary"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"形容詞-接尾"	TokenNameStringLiteral
,	TokenNameCOMMA
"adjective-suffix"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"副詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"adverb"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"副詞-一般"	TokenNameStringLiteral
,	TokenNameCOMMA
"adverb-misc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"副詞-助詞類接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"adverb-particle_conjunction"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"連体詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"adnominal"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"接続詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"conjunction"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-格助詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-case"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-格助詞-一般"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-case-misc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-格助詞-引用"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-case-quote"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-格助詞-連語"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-case-compound"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-接続助詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-conjunctive"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-係助詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-dependency"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-副助詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-adverbial"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-間投助詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-interjective"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-並立助詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-coordinate"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-終助詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-final"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-副助詞／並立助詞／終助詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-adverbial/conjunctive/final"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-連体化"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-adnominalizer"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-副詞化"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-adnominalizer"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助詞-特殊"	TokenNameStringLiteral
,	TokenNameCOMMA
"particle-special"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"助動詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"auxiliary-verb"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"感動詞"	TokenNameStringLiteral
,	TokenNameCOMMA
"interjection"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"記号"	TokenNameStringLiteral
,	TokenNameCOMMA
"symbol"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"記号-一般"	TokenNameStringLiteral
,	TokenNameCOMMA
"symbol-misc"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"記号-句点"	TokenNameStringLiteral
,	TokenNameCOMMA
"symbol-period"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"記号-読点"	TokenNameStringLiteral
,	TokenNameCOMMA
"symbol-comma"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"記号-空白"	TokenNameStringLiteral
,	TokenNameCOMMA
"symbol-space"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"記号-括弧開"	TokenNameStringLiteral
,	TokenNameCOMMA
"symbol-open_bracket"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"記号-括弧閉"	TokenNameStringLiteral
,	TokenNameCOMMA
"symbol-close_bracket"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"記号-アルファベット"	TokenNameStringLiteral
,	TokenNameCOMMA
"symbol-alphabetic"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"その他"	TokenNameStringLiteral
,	TokenNameCOMMA
"other"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"その他-間投"	TokenNameStringLiteral
,	TokenNameCOMMA
"other-interjection"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"フィラー"	TokenNameStringLiteral
,	TokenNameCOMMA
"filler"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"非言語音"	TokenNameStringLiteral
,	TokenNameCOMMA
"non-verbal"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"語断片"	TokenNameStringLiteral
,	TokenNameCOMMA
"fragment"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
posTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"未知語"	TokenNameStringLiteral
,	TokenNameCOMMA
"unknown"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
getPOSTranslation	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
posTranslations	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
inflTypeTranslations	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"*"	TokenNameStringLiteral
,	TokenNameCOMMA
"*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"形容詞・アウオ段"	TokenNameStringLiteral
,	TokenNameCOMMA
"adj-group-a-o-u"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"形容詞・イ段"	TokenNameStringLiteral
,	TokenNameCOMMA
"adj-group-i"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"形容詞・イイ"	TokenNameStringLiteral
,	TokenNameCOMMA
"adj-group-ii"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"不変化型"	TokenNameStringLiteral
,	TokenNameCOMMA
"non-inflectional"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"特殊・タ"	TokenNameStringLiteral
,	TokenNameCOMMA
"special-da"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"特殊・ダ"	TokenNameStringLiteral
,	TokenNameCOMMA
"special-ta"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"文語・ゴトシ"	TokenNameStringLiteral
,	TokenNameCOMMA
"classical-gotoshi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"特殊・ジャ"	TokenNameStringLiteral
,	TokenNameCOMMA
"special-ja"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"特殊・ナイ"	TokenNameStringLiteral
,	TokenNameCOMMA
"special-nai"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・ラ行特殊"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-r-special"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"特殊・ヌ"	TokenNameStringLiteral
,	TokenNameCOMMA
"special-nu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"文語・キ"	TokenNameStringLiteral
,	TokenNameCOMMA
"classical-ki"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"特殊・タイ"	TokenNameStringLiteral
,	TokenNameCOMMA
"special-tai"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"文語・ベシ"	TokenNameStringLiteral
,	TokenNameCOMMA
"classical-beshi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"特殊・ヤ"	TokenNameStringLiteral
,	TokenNameCOMMA
"special-ya"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"文語・マジ"	TokenNameStringLiteral
,	TokenNameCOMMA
"classical-maji"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"下二・タ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"2-row-lower-cons-t"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"特殊・デス"	TokenNameStringLiteral
,	TokenNameCOMMA
"special-desu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"特殊・マス"	TokenNameStringLiteral
,	TokenNameCOMMA
"special-masu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・ラ行アル"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-aru"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"文語・ナリ"	TokenNameStringLiteral
,	TokenNameCOMMA
"classical-nari"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"文語・リ"	TokenNameStringLiteral
,	TokenNameCOMMA
"classical-ri"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"文語・ケリ"	TokenNameStringLiteral
,	TokenNameCOMMA
"classical-keri"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"文語・ル"	TokenNameStringLiteral
,	TokenNameCOMMA
"classical-ru"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・カ行イ音便"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-k-i-onbin"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・サ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-s"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"一段"	TokenNameStringLiteral
,	TokenNameCOMMA
"1-row"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・ワ行促音便"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-w-cons-onbin"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・マ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・タ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-t"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・ラ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-r"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"サ変・−スル"	TokenNameStringLiteral
,	TokenNameCOMMA
"irregular-suffix-suru"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・ガ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-g"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"サ変・−ズル"	TokenNameStringLiteral
,	TokenNameCOMMA
"irregular-suffix-zuru"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・バ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・ワ行ウ音便"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-w-u-onbin"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"下二・ダ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"2-row-lower-cons-d"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・カ行促音便ユク"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-k-cons-onbin-yuku"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"上二・ダ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"2-row-upper-cons-d"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・カ行促音便"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-k-cons-onbin"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"一段・得ル"	TokenNameStringLiteral
,	TokenNameCOMMA
"1-row-eru"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"四段・タ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"4-row-cons-t"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"五段・ナ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"5-row-cons-n"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"下二・ハ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"2-row-lower-cons-h"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"四段・ハ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"4-row-cons-h"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"四段・バ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"4-row-cons-b"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"サ変・スル"	TokenNameStringLiteral
,	TokenNameCOMMA
"irregular-suru"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"上二・ハ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"2-row-upper-cons-h"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"下二・マ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"2-row-lower-cons-m"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"四段・サ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"4-row-cons-s"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"下二・ガ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"2-row-lower-cons-g"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"カ変・来ル"	TokenNameStringLiteral
,	TokenNameCOMMA
"kuru-kanji"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"一段・クレル"	TokenNameStringLiteral
,	TokenNameCOMMA
"1-row-kureru"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"下二・得"	TokenNameStringLiteral
,	TokenNameCOMMA
"2-row-lower-u"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"カ変・クル"	TokenNameStringLiteral
,	TokenNameCOMMA
"kuru-kana"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"ラ変"	TokenNameStringLiteral
,	TokenNameCOMMA
"irregular-cons-r"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"下二・カ行"	TokenNameStringLiteral
,	TokenNameCOMMA
"2-row-lower-cons-k"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
getInflectionTypeTranslation	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
inflTypeTranslations	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
inflFormTranslations	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"*"	TokenNameStringLiteral
,	TokenNameCOMMA
"*"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"基本形"	TokenNameStringLiteral
,	TokenNameCOMMA
"base"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"文語基本形"	TokenNameStringLiteral
,	TokenNameCOMMA
"classical-base"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"未然ヌ接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"imperfective-nu-connection"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"未然ウ接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"imperfective-u-connection"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"連用タ接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"conjunctive-ta-connection"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"連用テ接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"conjunctive-te-connection"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"連用ゴザイ接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"conjunctive-gozai-connection"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"体言接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"uninflected-connection"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"仮定形"	TokenNameStringLiteral
,	TokenNameCOMMA
"subjunctive"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"命令ｅ"	TokenNameStringLiteral
,	TokenNameCOMMA
"imperative-e"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"仮定縮約１"	TokenNameStringLiteral
,	TokenNameCOMMA
"conditional-contracted-1"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"仮定縮約２"	TokenNameStringLiteral
,	TokenNameCOMMA
"conditional-contracted-2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"ガル接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"garu-connection"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"未然形"	TokenNameStringLiteral
,	TokenNameCOMMA
"imperfective"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"連用形"	TokenNameStringLiteral
,	TokenNameCOMMA
"conjunctive"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"音便基本形"	TokenNameStringLiteral
,	TokenNameCOMMA
"onbin-base"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"連用デ接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"conjunctive-de-connection"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"未然特殊"	TokenNameStringLiteral
,	TokenNameCOMMA
"imperfective-special"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"命令ｉ"	TokenNameStringLiteral
,	TokenNameCOMMA
"imperative-i"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"連用ニ接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"conjunctive-ni-connection"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"命令ｙｏ"	TokenNameStringLiteral
,	TokenNameCOMMA
"imperative-yo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"体言接続特殊"	TokenNameStringLiteral
,	TokenNameCOMMA
"adnominal-special"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"命令ｒｏ"	TokenNameStringLiteral
,	TokenNameCOMMA
"imperative-ro"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"体言接続特殊２"	TokenNameStringLiteral
,	TokenNameCOMMA
"uninflected-special-connection-2"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"未然レル接続"	TokenNameStringLiteral
,	TokenNameCOMMA
"imperfective-reru-connection"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"現代基本形"	TokenNameStringLiteral
,	TokenNameCOMMA
"modern-base"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
"基本形-促音便"	TokenNameStringLiteral
,	TokenNameCOMMA
"base-onbin"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
getInflectedFormTranslation	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
inflFormTranslations	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
getRomanization	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuilder	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuilder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
getRomanization	TokenNameIdentifier
(	TokenNameLPAREN
out	TokenNameIdentifier
,	TokenNameCOMMA
s	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
bogus	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
bogus	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
out	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
getRomanization	TokenNameIdentifier
(	TokenNameLPAREN
Appendable	TokenNameIdentifier
builder	TokenNameIdentifier
,	TokenNameCOMMA
CharSequence	TokenNameIdentifier
s	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
len	TokenNameIdentifier
=	TokenNameEQUAL
s	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
s	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
char	TokenNamechar
ch2	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
s	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
:	TokenNameCOLON
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
char	TokenNamechar
ch3	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
len	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
s	TokenNameIdentifier
.	TokenNameDOT
charAt	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
:	TokenNameCOLON
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
main	TokenNameIdentifier
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'ッ'	TokenNameCharacterLiteral
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
ch2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'カ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'キ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ク'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ケ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'コ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'k'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
main	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
'サ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'シ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ス'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'セ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ソ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
's'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
main	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
'タ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'チ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ツ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'テ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ト'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
't'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
main	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
'パ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ピ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'プ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ペ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ポ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'p'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
main	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ア'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'a'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'イ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ィ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"yi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ye"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'i'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ウ'	TokenNameCharacterLiteral
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
ch2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'ァ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"wa"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ィ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"wi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ゥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"wu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ェ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"we"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ォ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"wo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ュ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"wyu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'u'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'エ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'e'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'オ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'ō'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'o'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'カ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ka"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'キ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"kyō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"kyū"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ャ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"kya"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"kyo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"kyu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"kye"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ki"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ク'	TokenNameCharacterLiteral
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
ch2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'ァ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"kwa"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ィ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"kwi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ェ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"kwe"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ォ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"kwo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヮ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"kwa"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ku"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ケ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ke"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'コ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"kō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ko"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'サ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"sa"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'シ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"shō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"shū"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ャ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"sha"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"sho"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"shu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"she"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"shi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ス'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ィ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"si"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"su"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'セ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"se"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ソ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"sō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"so"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'タ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ta"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'チ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"chō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"chū"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ャ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"cha"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"cho"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"chu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"che"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"chi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ツ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ァ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"tsa"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ィ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"tsi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"tse"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ォ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"tso"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"tsyu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"tsu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'テ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ィ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ti"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ゥ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"tu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"tyu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"te"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ト'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"tō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"to"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ナ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"na"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ニ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"nyō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"nyū"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ャ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"nya"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"nyo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"nyu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"nye"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ni"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヌ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"nu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ネ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ne"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ノ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"nō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"no"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ハ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ha"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヒ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"hyō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"hyū"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ャ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"hya"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"hyo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"hyu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"hye"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"hi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'フ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ャ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"fya"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"fyu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ィ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"fye"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"fyo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ァ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"fa"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ィ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"fi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"fe"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ォ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"fo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"fu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヘ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"he"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ホ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"hō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ゥ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"hu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ho"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'マ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ma"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ミ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"myō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"myū"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ャ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"mya"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"myo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"myu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"mye"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"mi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ム'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"mu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'メ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"mi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'モ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"mō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"mo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヤ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ya"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ユ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"yu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヨ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"yō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"yo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ラ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ra"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'リ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ryō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ryū"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ャ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"rya"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ryo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ryu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"rye"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ri"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ル'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ru"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'レ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"re"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ロ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"rō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ro"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ワ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"wa"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヰ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"i"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"e"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヲ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"o"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ン'	TokenNameCharacterLiteral
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
ch2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'バ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ビ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ブ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ベ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ボ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'パ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ピ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'プ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ペ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ポ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'マ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ミ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ム'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'メ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'モ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'm'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
main	TokenNameIdentifier
;	TokenNameSEMICOLON
case	TokenNamecase
'ヤ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ユ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ヨ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ア'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'イ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ウ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'エ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'オ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"n'"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
main	TokenNameIdentifier
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"n"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
main	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
case	TokenNamecase
'ガ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ga"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ギ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gyō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gyū"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ャ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gya"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gyo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gyu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gye"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'グ'	TokenNameCharacterLiteral
:	TokenNameCOLON
switch	TokenNameswitch
(	TokenNameLPAREN
ch2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'ァ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gwa"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ィ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gwi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ェ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gwe"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ォ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gwo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヮ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gwa"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ゲ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ge"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ゴ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"gō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"go"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ザ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"za"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ジ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"jō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"jū"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ャ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ja"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"jo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ju"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"je"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ji"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ズ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ィ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"zi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"zu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ゼ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ze"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ゾ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"zō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"zo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ダ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"da"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヂ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ji"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"zu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'デ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ィ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"di"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"dyu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"de"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ド'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"dō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ゥ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"du"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"do"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'バ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ba"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ビ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"byō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"byū"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ャ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"bya"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"byo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"byu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"bye"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"bi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ブ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"bu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ベ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"be"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ボ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"bō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"bo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'パ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"pa"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ピ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"pyō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"pyū"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ャ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"pya"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ョ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"pyo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ュ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"pyu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"pye"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"pi"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'プ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"pu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ペ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"pe"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ポ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ウ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"pō"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"po"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヴ'	TokenNameCharacterLiteral
:	TokenNameCOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ィ'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
ch3	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
'ェ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"vye"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'v'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ァ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'a'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ィ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'i'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ゥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'u'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ェ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'e'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ォ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
'o'	TokenNameCharacterLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ヮ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"wa"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ャ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"ya"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ュ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"yu"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ョ'	TokenNameCharacterLiteral
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"yo"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ー'	TokenNameCharacterLiteral
:	TokenNameCOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
builder	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
ch	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
