package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
facet	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayList	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
List	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
PriorityQueue	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
facet	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
params	TokenNameIdentifier
.	TokenNameDOT
FacetRequest	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
facet	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
params	TokenNameIdentifier
.	TokenNameDOT
FacetRequest	TokenNameIdentifier
.	TokenNameDOT
SortOrder	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
facet	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
results	TokenNameIdentifier
.	TokenNameDOT
FacetResult	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
facet	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
results	TokenNameIdentifier
.	TokenNameDOT
FacetResultNode	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
facet	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
results	TokenNameIdentifier
.	TokenNameDOT
MutableFacetResultNode	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
facet	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
results	TokenNameIdentifier
.	TokenNameDOT
IntermediateFacetResult	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
facet	TokenNameIdentifier
.	TokenNameDOT
taxonomy	TokenNameIdentifier
.	TokenNameDOT
TaxonomyReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
facet	TokenNameIdentifier
.	TokenNameDOT
taxonomy	TokenNameIdentifier
.	TokenNameDOT
TaxonomyReader	TokenNameIdentifier
.	TokenNameDOT
ChildrenArrays	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
collections	TokenNameIdentifier
.	TokenNameDOT
IntIterator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
collections	TokenNameIdentifier
.	TokenNameDOT
IntToObjectMap	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TopKInEachNodeHandler	TokenNameIdentifier
extends	TokenNameextends
FacetResultsHandler	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
TopKInEachNodeHandler	TokenNameIdentifier
(	TokenNameLPAREN
TaxonomyReader	TokenNameIdentifier
taxonomyReader	TokenNameIdentifier
,	TokenNameCOMMA
FacetRequest	TokenNameIdentifier
facetRequest	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
taxonomyReader	TokenNameIdentifier
,	TokenNameCOMMA
facetRequest	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
IntermediateFacetResult	TokenNameIdentifier
fetchPartitionResult	TokenNameIdentifier
(	TokenNameLPAREN
FacetArrays	TokenNameIdentifier
arrays	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
offset	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
rootNode	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
taxonomyReader	TokenNameIdentifier
.	TokenNameDOT
getOrdinal	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getCategoryPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
rootNode	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TaxonomyReader	TokenNameIdentifier
.	TokenNameDOT
INVALID_ORDINAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
K	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
(	TokenNameLPAREN
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getNumResults	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
taxonomyReader	TokenNameIdentifier
.	TokenNameDOT
getSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IntToObjectMap	TokenNameIdentifier
<	TokenNameLESS
AACO	TokenNameIdentifier
>	TokenNameGREATER
AACOsOfOnePartition	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IntToObjectMap	TokenNameIdentifier
<	TokenNameLESS
AACO	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
partitionSize	TokenNameIdentifier
=	TokenNameEQUAL
arrays	TokenNameIdentifier
.	TokenNameDOT
getArraysLength	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
depth	TokenNameIdentifier
=	TokenNameEQUAL
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getDepth	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
depth	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
IntermediateFacetResultWithHash	TokenNameIdentifier
tempFRWH	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IntermediateFacetResultWithHash	TokenNameIdentifier
(	TokenNameLPAREN
facetRequest	TokenNameIdentifier
,	TokenNameCOMMA
AACOsOfOnePartition	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isSelfPartition	TokenNameIdentifier
(	TokenNameLPAREN
rootNode	TokenNameIdentifier
,	TokenNameCOMMA
arrays	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
tempFRWH	TokenNameIdentifier
.	TokenNameDOT
isRootNodeIncluded	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
tempFRWH	TokenNameIdentifier
.	TokenNameDOT
rootNodeValue	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getValueOf	TokenNameIdentifier
(	TokenNameLPAREN
arrays	TokenNameIdentifier
,	TokenNameCOMMA
rootNode	TokenNameIdentifier
%	TokenNameREMAINDER
partitionSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
tempFRWH	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
depth	TokenNameIdentifier
>	TokenNameGREATER
Short	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
-	TokenNameMINUS
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
depth	TokenNameIdentifier
=	TokenNameEQUAL
Short	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
-	TokenNameMINUS
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
endOffset	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
+	TokenNamePLUS
partitionSize	TokenNameIdentifier
;	TokenNameSEMICOLON
ChildrenArrays	TokenNameIdentifier
childrenArray	TokenNameIdentifier
=	TokenNameEQUAL
taxonomyReader	TokenNameIdentifier
.	TokenNameDOT
getChildrenArrays	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
youngestChild	TokenNameIdentifier
=	TokenNameEQUAL
childrenArray	TokenNameIdentifier
.	TokenNameDOT
getYoungestChildArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
olderSibling	TokenNameIdentifier
=	TokenNameEQUAL
childrenArray	TokenNameIdentifier
.	TokenNameDOT
getOlderSiblingArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
totalNumOfDescendantsConsidered	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
PriorityQueue	TokenNameIdentifier
<	TokenNameLESS
AggregatedCategory	TokenNameIdentifier
>	TokenNameGREATER
pq	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
AggregatedCategoryHeap	TokenNameIdentifier
(	TokenNameLPAREN
K	TokenNameIdentifier
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
getSuitableACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
AggregatedCategory	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
reusables	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
AggregatedCategory	TokenNameIdentifier
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
+	TokenNamePLUS
K	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
reusables	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
reusables	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
new	TokenNamenew
AggregatedCategory	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ordinalStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
depth	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ordinalStack	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
rootNode	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
localDepth	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bestSignlingsStack	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
depth	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
siblingExplored	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
depth	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
firstToTheLeftOfPartition	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
depth	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
tosOrdinal	TokenNameIdentifier
;	TokenNameSEMICOLON
ordinalStack	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
youngestChild	TokenNameIdentifier
[	TokenNameLBRACKET
rootNode	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
siblingExplored	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
siblingExplored	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
localDepth	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
tosOrdinal	TokenNameIdentifier
=	TokenNameEQUAL
ordinalStack	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tosOrdinal	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TaxonomyReader	TokenNameIdentifier
.	TokenNameDOT
INVALID_ORDINAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
localDepth	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
siblingExplored	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ordinalStack	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
olderSibling	TokenNameIdentifier
[	TokenNameLBRACKET
ordinalStack	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
siblingExplored	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
siblingExplored	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
ordinalStack	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
firstToTheLeftOfPartition	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ordinalStack	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
bestSignlingsStack	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
siblingExplored	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
siblingExplored	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
tosOrdinal	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tosOrdinal	TokenNameIdentifier
=	TokenNameEQUAL
olderSibling	TokenNameIdentifier
[	TokenNameLBRACKET
tosOrdinal	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
double	TokenNamedouble
residue	TokenNameIdentifier
=	TokenNameEQUAL
0f	TokenNameFloatingPointLiteral
;	TokenNameSEMICOLON
pq	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
tosReuslables	TokenNameIdentifier
=	TokenNameEQUAL
reusables	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
tosOrdinal	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
offset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
value	TokenNameIdentifier
=	TokenNameEQUAL
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getValueOf	TokenNameIdentifier
(	TokenNameLPAREN
arrays	TokenNameIdentifier
,	TokenNameCOMMA
tosOrdinal	TokenNameIdentifier
%	TokenNameREMAINDER
partitionSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
value	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
totalNumOfDescendantsConsidered	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
AggregatedCategory	TokenNameIdentifier
ac	TokenNameIdentifier
=	TokenNameEQUAL
reusables	TokenNameIdentifier
[	TokenNameLBRACKET
tosReuslables	TokenNameIdentifier
--	TokenNameMINUS_MINUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
ac	TokenNameIdentifier
.	TokenNameDOT
ordinal	TokenNameIdentifier
=	TokenNameEQUAL
tosOrdinal	TokenNameIdentifier
;	TokenNameSEMICOLON
ac	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
=	TokenNameEQUAL
value	TokenNameIdentifier
;	TokenNameSEMICOLON
ac	TokenNameIdentifier
=	TokenNameEQUAL
pq	TokenNameIdentifier
.	TokenNameDOT
insertWithOverflow	TokenNameIdentifier
(	TokenNameLPAREN
ac	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
!=	TokenNameNOT_EQUAL
ac	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
residue	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
ac	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
;	TokenNameSEMICOLON
totalNumOfDescendantsConsidered	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
totalNumOfDescendantsConsidered	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
countOnly	TokenNameIdentifier
(	TokenNameLPAREN
ac	TokenNameIdentifier
.	TokenNameDOT
ordinal	TokenNameIdentifier
,	TokenNameCOMMA
youngestChild	TokenNameIdentifier
,	TokenNameCOMMA
olderSibling	TokenNameIdentifier
,	TokenNameCOMMA
arrays	TokenNameIdentifier
,	TokenNameCOMMA
partitionSize	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
endOffset	TokenNameIdentifier
,	TokenNameCOMMA
localDepth	TokenNameIdentifier
,	TokenNameCOMMA
depth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
reusables	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
tosReuslables	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
ac	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
tosOrdinal	TokenNameIdentifier
=	TokenNameEQUAL
olderSibling	TokenNameIdentifier
[	TokenNameLBRACKET
tosOrdinal	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
firstToTheLeftOfPartition	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tosOrdinal	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
aaci	TokenNameIdentifier
=	TokenNameEQUAL
pq	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ords	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
aaci	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
vals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
aaci	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
aaci	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
AggregatedCategory	TokenNameIdentifier
ac	TokenNameIdentifier
=	TokenNameEQUAL
pq	TokenNameIdentifier
.	TokenNameDOT
pop	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ords	TokenNameIdentifier
[	TokenNameLBRACKET
--	TokenNameMINUS_MINUS
aaci	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
ac	TokenNameIdentifier
.	TokenNameDOT
ordinal	TokenNameIdentifier
;	TokenNameSEMICOLON
vals	TokenNameIdentifier
[	TokenNameLBRACKET
aaci	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
ac	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
;	TokenNameSEMICOLON
reusables	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
tosReuslables	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
ac	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
ords	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
AACOsOfOnePartition	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
ordinalStack	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
new	TokenNamenew
AACO	TokenNameIdentifier
(	TokenNameLPAREN
ords	TokenNameIdentifier
,	TokenNameCOMMA
vals	TokenNameIdentifier
,	TokenNameCOMMA
residue	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bestSignlingsStack	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
ords	TokenNameIdentifier
;	TokenNameSEMICOLON
siblingExplored	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
ords	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ordinalStack	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
ords	TokenNameIdentifier
[	TokenNameLBRACKET
ords	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ordinalStack	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tosOrdinal	TokenNameIdentifier
;	TokenNameSEMICOLON
siblingExplored	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
localDepth	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
depth	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ordinalStack	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
TaxonomyReader	TokenNameIdentifier
.	TokenNameDOT
INVALID_ORDINAL	TokenNameIdentifier
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
ordinalStack	TokenNameIdentifier
[	TokenNameLBRACKET
++	TokenNamePLUS_PLUS
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
youngestChild	TokenNameIdentifier
[	TokenNameLBRACKET
tosOrdinal	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
siblingExplored	TokenNameIdentifier
[	TokenNameLBRACKET
localDepth	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
IntermediateFacetResultWithHash	TokenNameIdentifier
tempFRWH	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
IntermediateFacetResultWithHash	TokenNameIdentifier
(	TokenNameLPAREN
facetRequest	TokenNameIdentifier
,	TokenNameCOMMA
AACOsOfOnePartition	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
isSelfPartition	TokenNameIdentifier
(	TokenNameLPAREN
rootNode	TokenNameIdentifier
,	TokenNameCOMMA
arrays	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
tempFRWH	TokenNameIdentifier
.	TokenNameDOT
isRootNodeIncluded	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
tempFRWH	TokenNameIdentifier
.	TokenNameDOT
rootNodeValue	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getValueOf	TokenNameIdentifier
(	TokenNameLPAREN
arrays	TokenNameIdentifier
,	TokenNameCOMMA
rootNode	TokenNameIdentifier
%	TokenNameREMAINDER
partitionSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tempFRWH	TokenNameIdentifier
.	TokenNameDOT
totalNumOfFacetsConsidered	TokenNameIdentifier
=	TokenNameEQUAL
totalNumOfDescendantsConsidered	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
tempFRWH	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
countOnly	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ordinal	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
youngestChild	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
olderSibling	TokenNameIdentifier
,	TokenNameCOMMA
FacetArrays	TokenNameIdentifier
arrays	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
partitionSize	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
offset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
endOffset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
currentDepth	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxDepth	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
ret	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
offset	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
ordinal	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
!=	TokenNameNOT_EQUAL
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getValueOf	TokenNameIdentifier
(	TokenNameLPAREN
arrays	TokenNameIdentifier
,	TokenNameCOMMA
ordinal	TokenNameIdentifier
%	TokenNameREMAINDER
partitionSize	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
currentDepth	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
maxDepth	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
yc	TokenNameIdentifier
=	TokenNameEQUAL
youngestChild	TokenNameIdentifier
[	TokenNameLBRACKET
ordinal	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
yc	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
endOffset	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
yc	TokenNameIdentifier
=	TokenNameEQUAL
olderSibling	TokenNameIdentifier
[	TokenNameLBRACKET
yc	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
yc	TokenNameIdentifier
>	TokenNameGREATER
TaxonomyReader	TokenNameIdentifier
.	TokenNameDOT
INVALID_ORDINAL	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ret	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
countOnly	TokenNameIdentifier
(	TokenNameLPAREN
yc	TokenNameIdentifier
,	TokenNameCOMMA
youngestChild	TokenNameIdentifier
,	TokenNameCOMMA
olderSibling	TokenNameIdentifier
,	TokenNameCOMMA
arrays	TokenNameIdentifier
,	TokenNameCOMMA
partitionSize	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
,	TokenNameCOMMA
endOffset	TokenNameIdentifier
,	TokenNameCOMMA
currentDepth	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
maxDepth	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
yc	TokenNameIdentifier
=	TokenNameEQUAL
olderSibling	TokenNameIdentifier
[	TokenNameLBRACKET
yc	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
ret	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
IntermediateFacetResult	TokenNameIdentifier
mergeResults	TokenNameIdentifier
(	TokenNameLPAREN
IntermediateFacetResult	TokenNameIdentifier
...	TokenNameELLIPSIS
tmpResults	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
ClassCastException	TokenNameIdentifier
,	TokenNameCOMMA
IllegalArgumentException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
tmpResults	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
tmpResults	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
(	TokenNameLPAREN
tmpResults	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
tmpResults	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
K	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getNumResults	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
IntermediateFacetResultWithHash	TokenNameIdentifier
tmpToReturn	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
IntermediateFacetResultWithHash	TokenNameIdentifier
)	TokenNameRPAREN
tmpResults	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
tmpResults	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
IntermediateFacetResultWithHash	TokenNameIdentifier
tfr	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
IntermediateFacetResultWithHash	TokenNameIdentifier
)	TokenNameRPAREN
tmpResults	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
tmpToReturn	TokenNameIdentifier
.	TokenNameDOT
totalNumOfFacetsConsidered	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tfr	TokenNameIdentifier
.	TokenNameDOT
totalNumOfFacetsConsidered	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tfr	TokenNameIdentifier
.	TokenNameDOT
isRootNodeIncluded	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tmpToReturn	TokenNameIdentifier
.	TokenNameDOT
isRootNodeIncluded	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
tmpToReturn	TokenNameIdentifier
.	TokenNameDOT
rootNodeValue	TokenNameIdentifier
=	TokenNameEQUAL
tfr	TokenNameIdentifier
.	TokenNameDOT
rootNodeValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
IntToObjectMap	TokenNameIdentifier
<	TokenNameLESS
AACO	TokenNameIdentifier
>	TokenNameGREATER
tmpToReturnMapToACCOs	TokenNameIdentifier
=	TokenNameEQUAL
tmpToReturn	TokenNameIdentifier
.	TokenNameDOT
mapToAACOs	TokenNameIdentifier
;	TokenNameSEMICOLON
IntToObjectMap	TokenNameIdentifier
<	TokenNameLESS
AACO	TokenNameIdentifier
>	TokenNameGREATER
tfrMapToACCOs	TokenNameIdentifier
=	TokenNameEQUAL
tfr	TokenNameIdentifier
.	TokenNameDOT
mapToAACOs	TokenNameIdentifier
;	TokenNameSEMICOLON
IntIterator	TokenNameIdentifier
tfrIntIterator	TokenNameIdentifier
=	TokenNameEQUAL
tfrMapToACCOs	TokenNameIdentifier
.	TokenNameDOT
keyIterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
tfrIntIterator	TokenNameIdentifier
.	TokenNameDOT
hasNext	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
tfrkey	TokenNameIdentifier
=	TokenNameEQUAL
tfrIntIterator	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
AACO	TokenNameIdentifier
tmpToReturnAACO	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
==	TokenNameEQUAL_EQUAL
(	TokenNameLPAREN
tmpToReturnAACO	TokenNameIdentifier
=	TokenNameEQUAL
tmpToReturnMapToACCOs	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
tfrkey	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
tmpToReturnMapToACCOs	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
tfrkey	TokenNameIdentifier
,	TokenNameCOMMA
tfrMapToACCOs	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
tfrkey	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
AACO	TokenNameIdentifier
tfrAACO	TokenNameIdentifier
=	TokenNameEQUAL
tfrMapToACCOs	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
tfrkey	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
resLength	TokenNameIdentifier
=	TokenNameEQUAL
tfrAACO	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
+	TokenNamePLUS
tmpToReturnAACO	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
K	TokenNameIdentifier
<	TokenNameLESS
resLength	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
resLength	TokenNameIdentifier
=	TokenNameEQUAL
K	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
resOrds	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
resLength	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
resVals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
resLength	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
double	TokenNamedouble
resResidue	TokenNameIdentifier
=	TokenNameEQUAL
tmpToReturnAACO	TokenNameIdentifier
.	TokenNameDOT
residue	TokenNameIdentifier
+	TokenNamePLUS
tfrAACO	TokenNameIdentifier
.	TokenNameDOT
residue	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
indexIntoTmpToReturn	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
indexIntoTFR	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ACComparator	TokenNameIdentifier
merger	TokenNameIdentifier
=	TokenNameEQUAL
getSuitableACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
indexIntoRes	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
indexIntoRes	TokenNameIdentifier
<	TokenNameLESS
resLength	TokenNameIdentifier
;	TokenNameSEMICOLON
indexIntoRes	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
indexIntoTmpToReturn	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
tmpToReturnAACO	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
resOrds	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoRes	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tfrAACO	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTFR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
resVals	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoRes	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tfrAACO	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTFR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
indexIntoTFR	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
indexIntoTFR	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
tfrAACO	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
resOrds	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoRes	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmpToReturnAACO	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTmpToReturn	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
resVals	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoRes	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmpToReturnAACO	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTmpToReturn	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
indexIntoTmpToReturn	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
merger	TokenNameIdentifier
.	TokenNameDOT
leftGoesNow	TokenNameIdentifier
(	TokenNameLPAREN
tmpToReturnAACO	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTmpToReturn	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
tmpToReturnAACO	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTmpToReturn	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
tfrAACO	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTFR	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
tfrAACO	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTFR	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
resOrds	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoRes	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmpToReturnAACO	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTmpToReturn	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
resVals	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoRes	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tmpToReturnAACO	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTmpToReturn	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
indexIntoTmpToReturn	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
resOrds	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoRes	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tfrAACO	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTFR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
resVals	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoRes	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
tfrAACO	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTFR	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
indexIntoTFR	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
indexIntoTmpToReturn	TokenNameIdentifier
<	TokenNameLESS
tmpToReturnAACO	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
resResidue	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tmpToReturnAACO	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTmpToReturn	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
indexIntoTFR	TokenNameIdentifier
<	TokenNameLESS
tfrAACO	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
resResidue	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
tfrAACO	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
[	TokenNameLBRACKET
indexIntoTFR	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tmpToReturnMapToACCOs	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
tfrkey	TokenNameIdentifier
,	TokenNameCOMMA
new	TokenNamenew
AACO	TokenNameIdentifier
(	TokenNameLPAREN
resOrds	TokenNameIdentifier
,	TokenNameCOMMA
resVals	TokenNameIdentifier
,	TokenNameCOMMA
resResidue	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
tmpToReturn	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
AggregatedCategoryHeap	TokenNameIdentifier
extends	TokenNameextends
PriorityQueue	TokenNameIdentifier
<	TokenNameLESS
AggregatedCategory	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
private	TokenNameprivate
ACComparator	TokenNameIdentifier
merger	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
AggregatedCategoryHeap	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
size	TokenNameIdentifier
,	TokenNameCOMMA
ACComparator	TokenNameIdentifier
merger	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
merger	TokenNameIdentifier
=	TokenNameEQUAL
merger	TokenNameIdentifier
;	TokenNameSEMICOLON
initialize	TokenNameIdentifier
(	TokenNameLPAREN
size	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
lessThan	TokenNameIdentifier
(	TokenNameLPAREN
AggregatedCategory	TokenNameIdentifier
arg1	TokenNameIdentifier
,	TokenNameCOMMA
AggregatedCategory	TokenNameIdentifier
arg2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
merger	TokenNameIdentifier
.	TokenNameDOT
leftGoesNow	TokenNameIdentifier
(	TokenNameLPAREN
arg2	TokenNameIdentifier
.	TokenNameDOT
ordinal	TokenNameIdentifier
,	TokenNameCOMMA
arg2	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
,	TokenNameCOMMA
arg1	TokenNameIdentifier
.	TokenNameDOT
ordinal	TokenNameIdentifier
,	TokenNameCOMMA
arg1	TokenNameIdentifier
.	TokenNameDOT
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
ResultNodeHeap	TokenNameIdentifier
extends	TokenNameextends
PriorityQueue	TokenNameIdentifier
<	TokenNameLESS
FacetResultNode	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
private	TokenNameprivate
ACComparator	TokenNameIdentifier
merger	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ResultNodeHeap	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
size	TokenNameIdentifier
,	TokenNameCOMMA
ACComparator	TokenNameIdentifier
merger	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
merger	TokenNameIdentifier
=	TokenNameEQUAL
merger	TokenNameIdentifier
;	TokenNameSEMICOLON
initialize	TokenNameIdentifier
(	TokenNameLPAREN
size	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
lessThan	TokenNameIdentifier
(	TokenNameLPAREN
FacetResultNode	TokenNameIdentifier
arg1	TokenNameIdentifier
,	TokenNameCOMMA
FacetResultNode	TokenNameIdentifier
arg2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
merger	TokenNameIdentifier
.	TokenNameDOT
leftGoesNow	TokenNameIdentifier
(	TokenNameLPAREN
arg2	TokenNameIdentifier
.	TokenNameDOT
getOrdinal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
arg2	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
arg1	TokenNameIdentifier
.	TokenNameDOT
getOrdinal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
arg1	TokenNameIdentifier
.	TokenNameDOT
getValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
ACComparator	TokenNameIdentifier
getSuitableACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getSortOrder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
SortOrder	TokenNameIdentifier
.	TokenNameDOT
ASCENDING	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getSortBy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
VALUE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
new	TokenNamenew
AscValueACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
ORDINAL	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
new	TokenNamenew
AscOrdACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getSortBy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
VALUE	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
new	TokenNamenew
DescValueACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
ORDINAL	TokenNameIdentifier
:	TokenNameCOLON
return	TokenNamereturn
new	TokenNamenew
DescOrdACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
abstract	TokenNameabstract
class	TokenNameclass
ACComparator	TokenNameIdentifier
{	TokenNameLBRACE
ACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
abstract	TokenNameabstract
boolean	TokenNameboolean
leftGoesNow	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ord1	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
val1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
ord2	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
val2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
AscValueACComparator	TokenNameIdentifier
extends	TokenNameextends
ACComparator	TokenNameIdentifier
{	TokenNameLBRACE
AscValueACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
leftGoesNow	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ord1	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
val1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
ord2	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
val2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
val1	TokenNameIdentifier
<	TokenNameLESS
val2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
DescValueACComparator	TokenNameIdentifier
extends	TokenNameextends
ACComparator	TokenNameIdentifier
{	TokenNameLBRACE
DescValueACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
leftGoesNow	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ord1	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
val1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
ord2	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
val2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
val1	TokenNameIdentifier
>	TokenNameGREATER
val2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
AscOrdACComparator	TokenNameIdentifier
extends	TokenNameextends
ACComparator	TokenNameIdentifier
{	TokenNameLBRACE
AscOrdACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
leftGoesNow	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ord1	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
val1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
ord2	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
val2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
ord1	TokenNameIdentifier
<	TokenNameLESS
ord2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
DescOrdACComparator	TokenNameIdentifier
extends	TokenNameextends
ACComparator	TokenNameIdentifier
{	TokenNameLBRACE
DescOrdACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
leftGoesNow	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ord1	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
val1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
ord2	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
val2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
ord1	TokenNameIdentifier
>	TokenNameGREATER
ord2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
IntermediateFacetResultWithHash	TokenNameIdentifier
implements	TokenNameimplements
IntermediateFacetResult	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
IntToObjectMap	TokenNameIdentifier
<	TokenNameLESS
AACO	TokenNameIdentifier
>	TokenNameGREATER
mapToAACOs	TokenNameIdentifier
;	TokenNameSEMICOLON
FacetRequest	TokenNameIdentifier
facetRequest	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
isRootNodeIncluded	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
rootNodeValue	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
totalNumOfFacetsConsidered	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
IntermediateFacetResultWithHash	TokenNameIdentifier
(	TokenNameLPAREN
FacetRequest	TokenNameIdentifier
facetReq	TokenNameIdentifier
,	TokenNameCOMMA
IntToObjectMap	TokenNameIdentifier
<	TokenNameLESS
AACO	TokenNameIdentifier
>	TokenNameGREATER
mapToAACOs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
mapToAACOs	TokenNameIdentifier
=	TokenNameEQUAL
mapToAACOs	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
facetRequest	TokenNameIdentifier
=	TokenNameEQUAL
facetReq	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
isRootNodeIncluded	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
rootNodeValue	TokenNameIdentifier
=	TokenNameEQUAL
0.0	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
totalNumOfFacetsConsidered	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
FacetRequest	TokenNameIdentifier
getFacetRequest	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
this	TokenNamethis
.	TokenNameDOT
facetRequest	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
AggregatedCategory	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
ordinal	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
value	TokenNameIdentifier
;	TokenNameSEMICOLON
AggregatedCategory	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ord	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
val	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
ordinal	TokenNameIdentifier
=	TokenNameEQUAL
ord	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
value	TokenNameIdentifier
=	TokenNameEQUAL
val	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
class	TokenNameclass
AACO	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ordinals	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
values	TokenNameIdentifier
;	TokenNameSEMICOLON
double	TokenNamedouble
residue	TokenNameIdentifier
;	TokenNameSEMICOLON
AACO	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ords	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
vals	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
r	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
ordinals	TokenNameIdentifier
=	TokenNameEQUAL
ords	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
values	TokenNameIdentifier
=	TokenNameEQUAL
vals	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
residue	TokenNameIdentifier
=	TokenNameEQUAL
r	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
labelResult	TokenNameIdentifier
(	TokenNameLPAREN
FacetResult	TokenNameIdentifier
facetResult	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
facetResult	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
FacetResultNode	TokenNameIdentifier
rootNode	TokenNameIdentifier
=	TokenNameEQUAL
facetResult	TokenNameIdentifier
.	TokenNameDOT
getFacetResultNode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
recursivelyLabel	TokenNameIdentifier
(	TokenNameLPAREN
rootNode	TokenNameIdentifier
,	TokenNameCOMMA
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getNumLabel	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
recursivelyLabel	TokenNameIdentifier
(	TokenNameLPAREN
FacetResultNode	TokenNameIdentifier
node	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numToLabel	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
node	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
node	TokenNameIdentifier
.	TokenNameDOT
getLabel	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
taxonomyReader	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
==	TokenNameEQUAL_EQUAL
node	TokenNameIdentifier
.	TokenNameDOT
getSubResults	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
numLabeled	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
FacetResultNode	TokenNameIdentifier
frn	TokenNameIdentifier
:	TokenNameCOLON
node	TokenNameIdentifier
.	TokenNameDOT
getSubResults	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
recursivelyLabel	TokenNameIdentifier
(	TokenNameLPAREN
frn	TokenNameIdentifier
,	TokenNameCOMMA
numToLabel	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
numLabeled	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
numToLabel	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
FacetResult	TokenNameIdentifier
rearrangeFacetResult	TokenNameIdentifier
(	TokenNameLPAREN
FacetResult	TokenNameIdentifier
facetResult	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
PriorityQueue	TokenNameIdentifier
<	TokenNameLESS
FacetResultNode	TokenNameIdentifier
>	TokenNameGREATER
nodesHeap	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ResultNodeHeap	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getNumResults	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
this	TokenNamethis
.	TokenNameDOT
getSuitableACComparator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
MutableFacetResultNode	TokenNameIdentifier
topFrn	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
MutableFacetResultNode	TokenNameIdentifier
)	TokenNameRPAREN
facetResult	TokenNameIdentifier
.	TokenNameDOT
getFacetResultNode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
rearrangeChilrenOfNode	TokenNameIdentifier
(	TokenNameLPAREN
topFrn	TokenNameIdentifier
,	TokenNameCOMMA
nodesHeap	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
facetResult	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
rearrangeChilrenOfNode	TokenNameIdentifier
(	TokenNameLPAREN
FacetResultNode	TokenNameIdentifier
node	TokenNameIdentifier
,	TokenNameCOMMA
PriorityQueue	TokenNameIdentifier
<	TokenNameLESS
FacetResultNode	TokenNameIdentifier
>	TokenNameGREATER
nodesHeap	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
nodesHeap	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
FacetResultNode	TokenNameIdentifier
frn	TokenNameIdentifier
:	TokenNameCOLON
node	TokenNameIdentifier
.	TokenNameDOT
getSubResults	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
nodesHeap	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
frn	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
nodesHeap	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ArrayList	TokenNameIdentifier
<	TokenNameLESS
FacetResultNode	TokenNameIdentifier
>	TokenNameGREATER
subResults	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
FacetResultNode	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
size	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
nodesHeap	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
subResults	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
nodesHeap	TokenNameIdentifier
.	TokenNameDOT
pop	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
MutableFacetResultNode	TokenNameIdentifier
)	TokenNameRPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setSubResults	TokenNameIdentifier
(	TokenNameLPAREN
subResults	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
FacetResultNode	TokenNameIdentifier
frn	TokenNameIdentifier
:	TokenNameCOLON
node	TokenNameIdentifier
.	TokenNameDOT
getSubResults	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
rearrangeChilrenOfNode	TokenNameIdentifier
(	TokenNameLPAREN
frn	TokenNameIdentifier
,	TokenNameCOMMA
nodesHeap	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
FacetResult	TokenNameIdentifier
renderFacetResult	TokenNameIdentifier
(	TokenNameLPAREN
IntermediateFacetResult	TokenNameIdentifier
tmpResult	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
IntermediateFacetResultWithHash	TokenNameIdentifier
tmp	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
IntermediateFacetResultWithHash	TokenNameIdentifier
)	TokenNameRPAREN
tmpResult	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
ordinal	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
taxonomyReader	TokenNameIdentifier
.	TokenNameDOT
getOrdinal	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
facetRequest	TokenNameIdentifier
.	TokenNameDOT
getCategoryPath	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
tmp	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
ordinal	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
TaxonomyReader	TokenNameIdentifier
.	TokenNameDOT
INVALID_ORDINAL	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
double	TokenNamedouble
value	TokenNameIdentifier
=	TokenNameEQUAL
Double	TokenNameIdentifier
.	TokenNameDOT
NaN	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
tmp	TokenNameIdentifier
.	TokenNameDOT
isRootNodeIncluded	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
value	TokenNameIdentifier
=	TokenNameEQUAL
tmp	TokenNameIdentifier
.	TokenNameDOT
rootNodeValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
MutableFacetResultNode	TokenNameIdentifier
root	TokenNameIdentifier
=	TokenNameEQUAL
generateNode	TokenNameIdentifier
(	TokenNameLPAREN
ordinal	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
.	TokenNameDOT
mapToAACOs	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
FacetResult	TokenNameIdentifier
(	TokenNameLPAREN
tmp	TokenNameIdentifier
.	TokenNameDOT
facetRequest	TokenNameIdentifier
,	TokenNameCOMMA
root	TokenNameIdentifier
,	TokenNameCOMMA
tmp	TokenNameIdentifier
.	TokenNameDOT
totalNumOfFacetsConsidered	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
MutableFacetResultNode	TokenNameIdentifier
generateNode	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
ordinal	TokenNameIdentifier
,	TokenNameCOMMA
double	TokenNamedouble
val	TokenNameIdentifier
,	TokenNameCOMMA
IntToObjectMap	TokenNameIdentifier
<	TokenNameLESS
AACO	TokenNameIdentifier
>	TokenNameGREATER
mapToAACOs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
MutableFacetResultNode	TokenNameIdentifier
node	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MutableFacetResultNode	TokenNameIdentifier
(	TokenNameLPAREN
ordinal	TokenNameIdentifier
,	TokenNameCOMMA
val	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
AACO	TokenNameIdentifier
aaco	TokenNameIdentifier
=	TokenNameEQUAL
mapToAACOs	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
ordinal	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
null	TokenNamenull
==	TokenNameEQUAL_EQUAL
aaco	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
List	TokenNameIdentifier
<	TokenNameLESS
FacetResultNode	TokenNameIdentifier
>	TokenNameGREATER
list	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ArrayList	TokenNameIdentifier
<	TokenNameLESS
FacetResultNode	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
aaco	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
list	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
generateNode	TokenNameIdentifier
(	TokenNameLPAREN
aaco	TokenNameIdentifier
.	TokenNameDOT
ordinals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
aaco	TokenNameIdentifier
.	TokenNameDOT
values	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
mapToAACOs	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
node	TokenNameIdentifier
.	TokenNameDOT
setSubResults	TokenNameIdentifier
(	TokenNameLPAREN
list	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
node	TokenNameIdentifier
.	TokenNameDOT
setResidue	TokenNameIdentifier
(	TokenNameLPAREN
aaco	TokenNameIdentifier
.	TokenNameDOT
residue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
