package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
facet	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
sampling	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
SamplingParams	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
double	TokenNamedouble
DEFAULT_OVERSAMPLE_FACTOR	TokenNameIdentifier
=	TokenNameEQUAL
2d	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
double	TokenNamedouble
DEFAULT_SAMPLE_RATIO	TokenNameIdentifier
=	TokenNameEQUAL
0.01	TokenNameDoubleLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DEFAULT_MAX_SAMPLE_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
10000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DEFAULT_MIN_SAMPLE_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
100	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
DEFAULT_SAMPLING_THRESHOLD	TokenNameIdentifier
=	TokenNameEQUAL
75000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
maxSampleSize	TokenNameIdentifier
=	TokenNameEQUAL
DEFAULT_MAX_SAMPLE_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
minSampleSize	TokenNameIdentifier
=	TokenNameEQUAL
DEFAULT_MIN_SAMPLE_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
sampleRatio	TokenNameIdentifier
=	TokenNameEQUAL
DEFAULT_SAMPLE_RATIO	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
samplingThreshold	TokenNameIdentifier
=	TokenNameEQUAL
DEFAULT_SAMPLING_THRESHOLD	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
double	TokenNamedouble
oversampleFactor	TokenNameIdentifier
=	TokenNameEQUAL
DEFAULT_OVERSAMPLE_FACTOR	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
int	TokenNameint
getMaxSampleSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
maxSampleSize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
int	TokenNameint
getMinSampleSize	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
minSampleSize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
double	TokenNamedouble
getSampleRatio	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
sampleRatio	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
int	TokenNameint
getSamplingThreshold	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
samplingThreshold	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setMaxSampleSize	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
maxSampleSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
maxSampleSize	TokenNameIdentifier
=	TokenNameEQUAL
maxSampleSize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setMinSampleSize	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
minSampleSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
minSampleSize	TokenNameIdentifier
=	TokenNameEQUAL
minSampleSize	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setSampleRatio	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
sampleRatio	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
sampleRatio	TokenNameIdentifier
=	TokenNameEQUAL
sampleRatio	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setSampingThreshold	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
sampingThreshold	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
samplingThreshold	TokenNameIdentifier
=	TokenNameEQUAL
sampingThreshold	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
validate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
samplingThreshold	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
maxSampleSize	TokenNameIdentifier
&&	TokenNameAND_AND
maxSampleSize	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
minSampleSize	TokenNameIdentifier
&&	TokenNameAND_AND
sampleRatio	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
sampleRatio	TokenNameIdentifier
<	TokenNameLESS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
double	TokenNamedouble
getOversampleFactor	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
oversampleFactor	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setOversampleFactor	TokenNameIdentifier
(	TokenNameLPAREN
double	TokenNamedouble
oversampleFactor	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
oversampleFactor	TokenNameIdentifier
=	TokenNameEQUAL
oversampleFactor	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
