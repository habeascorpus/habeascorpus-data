package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
class	TokenNameclass
BitUtil	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
BitUtil	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
pop	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
x	TokenNameIdentifier
=	TokenNameEQUAL
x	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
(	TokenNameLPAREN
x	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x5555555555555555L	TokenNameLongLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
x	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
x	TokenNameIdentifier
&	TokenNameAND
0x3333333333333333L	TokenNameLongLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
x	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0x3333333333333333L	TokenNameLongLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
x	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
x	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
x	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
&	TokenNameAND
0x0F0F0F0F0F0F0F0FL	TokenNameLongLiteral
;	TokenNameSEMICOLON
x	TokenNameIdentifier
=	TokenNameEQUAL
x	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
x	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
x	TokenNameIdentifier
=	TokenNameEQUAL
x	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
x	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
x	TokenNameIdentifier
=	TokenNameEQUAL
x	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
x	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
x	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
0x7F	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
long	TokenNamelong
pop_array	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
A	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
wordOffset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numWords	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
wordOffset	TokenNameIdentifier
+	TokenNamePLUS
numWords	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
tot	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
tot8	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
ones	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
twos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fours	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
wordOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
twosA	TokenNameIdentifier
,	TokenNameCOMMA
twosB	TokenNameIdentifier
,	TokenNameCOMMA
foursA	TokenNameIdentifier
,	TokenNameCOMMA
foursB	TokenNameIdentifier
,	TokenNameCOMMA
eights	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
eights	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
foursB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
foursB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
twosA	TokenNameIdentifier
,	TokenNameCOMMA
twosB	TokenNameIdentifier
,	TokenNameCOMMA
foursA	TokenNameIdentifier
,	TokenNameCOMMA
eights	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
eights	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
foursA	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
eights	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tot	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tot	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
pop	TokenNameIdentifier
(	TokenNameLPAREN
fours	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
pop	TokenNameIdentifier
(	TokenNameLPAREN
twos	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
pop	TokenNameIdentifier
(	TokenNameLPAREN
ones	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
tot8	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tot	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
long	TokenNamelong
pop_intersect	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
A	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
long	TokenNamelong
B	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
wordOffset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numWords	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
wordOffset	TokenNameIdentifier
+	TokenNamePLUS
numWords	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
tot	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
tot8	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
ones	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
twos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fours	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
wordOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
twosA	TokenNameIdentifier
,	TokenNameCOMMA
twosB	TokenNameIdentifier
,	TokenNameCOMMA
foursA	TokenNameIdentifier
,	TokenNameCOMMA
foursB	TokenNameIdentifier
,	TokenNameCOMMA
eights	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
eights	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
foursB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
foursB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
twosA	TokenNameIdentifier
,	TokenNameCOMMA
twosB	TokenNameIdentifier
,	TokenNameCOMMA
foursA	TokenNameIdentifier
,	TokenNameCOMMA
eights	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
eights	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
foursA	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
eights	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tot	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tot	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
pop	TokenNameIdentifier
(	TokenNameLPAREN
fours	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
pop	TokenNameIdentifier
(	TokenNameLPAREN
twos	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
pop	TokenNameIdentifier
(	TokenNameLPAREN
ones	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
tot8	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tot	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
long	TokenNamelong
pop_union	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
A	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
long	TokenNamelong
B	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
wordOffset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numWords	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
wordOffset	TokenNameIdentifier
+	TokenNamePLUS
numWords	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
tot	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
tot8	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
ones	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
twos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fours	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
wordOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
twosA	TokenNameIdentifier
,	TokenNameCOMMA
twosB	TokenNameIdentifier
,	TokenNameCOMMA
foursA	TokenNameIdentifier
,	TokenNameCOMMA
foursB	TokenNameIdentifier
,	TokenNameCOMMA
eights	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
eights	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
foursB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
foursB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
twosA	TokenNameIdentifier
,	TokenNameCOMMA
twosB	TokenNameIdentifier
,	TokenNameCOMMA
foursA	TokenNameIdentifier
,	TokenNameCOMMA
eights	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
eights	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
foursA	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
eights	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tot	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
|	TokenNameOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tot	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
pop	TokenNameIdentifier
(	TokenNameLPAREN
fours	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
pop	TokenNameIdentifier
(	TokenNameLPAREN
twos	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
pop	TokenNameIdentifier
(	TokenNameLPAREN
ones	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
tot8	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tot	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
long	TokenNamelong
pop_andnot	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
A	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
long	TokenNamelong
B	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
wordOffset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numWords	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
wordOffset	TokenNameIdentifier
+	TokenNamePLUS
numWords	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
tot	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
tot8	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
ones	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
twos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fours	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
wordOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
twosA	TokenNameIdentifier
,	TokenNameCOMMA
twosB	TokenNameIdentifier
,	TokenNameCOMMA
foursA	TokenNameIdentifier
,	TokenNameCOMMA
foursB	TokenNameIdentifier
,	TokenNameCOMMA
eights	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
eights	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
foursB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
foursB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
twosA	TokenNameIdentifier
,	TokenNameCOMMA
twosB	TokenNameIdentifier
,	TokenNameCOMMA
foursA	TokenNameIdentifier
,	TokenNameCOMMA
eights	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
eights	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
foursA	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
eights	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tot	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
~	TokenNameTWIDDLE
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tot	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
pop	TokenNameIdentifier
(	TokenNameLPAREN
fours	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
pop	TokenNameIdentifier
(	TokenNameLPAREN
twos	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
pop	TokenNameIdentifier
(	TokenNameLPAREN
ones	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
tot8	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tot	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
long	TokenNamelong
pop_xor	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
A	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
long	TokenNamelong
B	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
wordOffset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
numWords	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
wordOffset	TokenNameIdentifier
+	TokenNamePLUS
numWords	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
tot	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
tot8	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
ones	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
twos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
fours	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
i	TokenNameIdentifier
=	TokenNameEQUAL
wordOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
twosA	TokenNameIdentifier
,	TokenNameCOMMA
twosB	TokenNameIdentifier
,	TokenNameCOMMA
foursA	TokenNameIdentifier
,	TokenNameCOMMA
foursB	TokenNameIdentifier
,	TokenNameCOMMA
eights	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
4	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
5	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
6	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
7	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
eights	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
foursB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
foursB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
twosA	TokenNameIdentifier
,	TokenNameCOMMA
twosB	TokenNameIdentifier
,	TokenNameCOMMA
foursA	TokenNameIdentifier
,	TokenNameCOMMA
eights	TokenNameIdentifier
;	TokenNameSEMICOLON
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
twosB	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
{	TokenNameLBRACE
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
foursA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
twosB	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
twosB	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
eights	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
n	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
b	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
,	TokenNameCOMMA
c	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
u	TokenNameIdentifier
=	TokenNameEQUAL
ones	TokenNameIdentifier
^	TokenNameXOR
b	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
twosA	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
ones	TokenNameIdentifier
&	TokenNameAND
b	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
u	TokenNameIdentifier
&	TokenNameAND
c	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
ones	TokenNameIdentifier
=	TokenNameEQUAL
u	TokenNameIdentifier
^	TokenNameXOR
c	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
foursA	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
&	TokenNameAND
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
twos	TokenNameIdentifier
=	TokenNameEQUAL
twos	TokenNameIdentifier
^	TokenNameXOR
twosA	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
eights	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
&	TokenNameAND
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
fours	TokenNameIdentifier
=	TokenNameEQUAL
fours	TokenNameIdentifier
^	TokenNameXOR
foursA	TokenNameIdentifier
;	TokenNameSEMICOLON
tot8	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
eights	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
n	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
tot	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
pop	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
A	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
^	TokenNameXOR
B	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
tot	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
(	TokenNameLPAREN
pop	TokenNameIdentifier
(	TokenNameLPAREN
fours	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
pop	TokenNameIdentifier
(	TokenNameLPAREN
twos	TokenNameIdentifier
)	TokenNameRPAREN
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
pop	TokenNameIdentifier
(	TokenNameLPAREN
ones	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
tot8	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
tot	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ntzTable	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
ntz	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
val	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
lower	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
val	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
lowByte	TokenNameIdentifier
=	TokenNameEQUAL
lower	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowByte	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
lowByte	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lower	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
lowByte	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
lower	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowByte	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
lowByte	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
lowByte	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
lower	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowByte	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
lowByte	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
lower	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
upper	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
val	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
lowByte	TokenNameIdentifier
=	TokenNameEQUAL
upper	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowByte	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
lowByte	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
lowByte	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
upper	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowByte	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
lowByte	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
40	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
lowByte	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
upper	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowByte	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
lowByte	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
48	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
upper	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
56	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
ntz	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
val	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
lowByte	TokenNameIdentifier
=	TokenNameEQUAL
val	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowByte	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
lowByte	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
lowByte	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
val	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowByte	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
lowByte	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
lowByte	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
val	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
16	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowByte	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
return	TokenNamereturn
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
lowByte	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
val	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
]	TokenNameRBRACKET
+	TokenNamePLUS
24	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
ntz2	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
y	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
x	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
y	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
n	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
x	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
y	TokenNameIdentifier
&	TokenNameAND
0x0000FFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
n	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
>>>=	TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
y	TokenNameIdentifier
&	TokenNameAND
0x000000FF	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
n	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
>>>=	TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
(	TokenNameLPAREN
ntzTable	TokenNameIdentifier
[	TokenNameLBRACKET
y	TokenNameIdentifier
&	TokenNameAND
0xff	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
+	TokenNamePLUS
n	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
ntz3	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
y	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
x	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
y	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
n	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
x	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
y	TokenNameIdentifier
&	TokenNameAND
0x0000FFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
n	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
>>>=	TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
y	TokenNameIdentifier
&	TokenNameAND
0x000000FF	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
n	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
>>>=	TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
y	TokenNameIdentifier
&	TokenNameAND
0x0000000F	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
n	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
>>>=	TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
y	TokenNameIdentifier
&	TokenNameAND
0x00000003	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
n	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
>>>=	TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
n	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
y	TokenNameIdentifier
&	TokenNameAND
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
nlzTable	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
7	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
3	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
nlz	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
n	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
y	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
x	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
32	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
y	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
n	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
x	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
y	TokenNameIdentifier
&	TokenNameAND
0xFFFF0000	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
n	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
(	TokenNameLPAREN
y	TokenNameIdentifier
&	TokenNameAND
0xFF000000	TokenNameIntegerLiteral
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
n	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
y	TokenNameIdentifier
<<=	TokenNameLEFT_SHIFT_EQUAL
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
n	TokenNameIdentifier
+	TokenNamePLUS
nlzTable	TokenNameIdentifier
[	TokenNameLBRACKET
y	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
24	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isPowerOfTwo	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
v	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
v	TokenNameIdentifier
&	TokenNameAND
(	TokenNameLPAREN
v	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
isPowerOfTwo	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
v	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
v	TokenNameIdentifier
&	TokenNameAND
(	TokenNameLPAREN
v	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
nextHighestPowerOfTwo	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
v	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
v	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
v	TokenNameIdentifier
|=	TokenNameOR_EQUAL
v	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
v	TokenNameIdentifier
|=	TokenNameOR_EQUAL
v	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
v	TokenNameIdentifier
|=	TokenNameOR_EQUAL
v	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
v	TokenNameIdentifier
|=	TokenNameOR_EQUAL
v	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
v	TokenNameIdentifier
|=	TokenNameOR_EQUAL
v	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
v	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
v	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
long	TokenNamelong
nextHighestPowerOfTwo	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
v	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
v	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
v	TokenNameIdentifier
|=	TokenNameOR_EQUAL
v	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
v	TokenNameIdentifier
|=	TokenNameOR_EQUAL
v	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
v	TokenNameIdentifier
|=	TokenNameOR_EQUAL
v	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
v	TokenNameIdentifier
|=	TokenNameOR_EQUAL
v	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
v	TokenNameIdentifier
|=	TokenNameOR_EQUAL
v	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
16	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
v	TokenNameIdentifier
|=	TokenNameOR_EQUAL
v	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
v	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
return	TokenNamereturn
v	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
