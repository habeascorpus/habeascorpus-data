package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
concurrent	TokenNameIdentifier
.	TokenNameDOT
ConcurrentHashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
concurrent	TokenNameIdentifier
.	TokenNameDOT
atomic	TokenNameIdentifier
.	TokenNameDOT
AtomicInteger	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
public	TokenNamepublic
class	TokenNameclass
DoubleBarrelLRUCache	TokenNameIdentifier
<	TokenNameLESS
K	TokenNameIdentifier
extends	TokenNameextends
DoubleBarrelLRUCache	TokenNameIdentifier
.	TokenNameDOT
CloneableKey	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
abstract	TokenNameabstract
class	TokenNameclass
CloneableKey	TokenNameIdentifier
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
abstract	TokenNameabstract
public	TokenNamepublic
Object	TokenNameIdentifier
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
Map	TokenNameIdentifier
<	TokenNameLESS
K	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
>	TokenNameGREATER
cache1	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Map	TokenNameIdentifier
<	TokenNameLESS
K	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
>	TokenNameGREATER
cache2	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
AtomicInteger	TokenNameIdentifier
countdown	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
volatile	TokenNamevolatile
boolean	TokenNameboolean
swapped	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
int	TokenNameint
maxSize	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
DoubleBarrelLRUCache	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
maxSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
maxSize	TokenNameIdentifier
=	TokenNameEQUAL
maxSize	TokenNameIdentifier
;	TokenNameSEMICOLON
countdown	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
AtomicInteger	TokenNameIdentifier
(	TokenNameLPAREN
maxSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cache1	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ConcurrentHashMap	TokenNameIdentifier
<	TokenNameLESS
K	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
cache2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ConcurrentHashMap	TokenNameIdentifier
<	TokenNameLESS
K	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
SuppressWarnings	TokenNameIdentifier
(	TokenNameLPAREN
"unchecked"	TokenNameStringLiteral
)	TokenNameRPAREN
public	TokenNamepublic
V	TokenNameIdentifier
get	TokenNameIdentifier
(	TokenNameLPAREN
K	TokenNameIdentifier
key	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Map	TokenNameIdentifier
<	TokenNameLESS
K	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
>	TokenNameGREATER
primary	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Map	TokenNameIdentifier
<	TokenNameLESS
K	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
>	TokenNameGREATER
secondary	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
swapped	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
primary	TokenNameIdentifier
=	TokenNameEQUAL
cache2	TokenNameIdentifier
;	TokenNameSEMICOLON
secondary	TokenNameIdentifier
=	TokenNameEQUAL
cache1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
primary	TokenNameIdentifier
=	TokenNameEQUAL
cache1	TokenNameIdentifier
;	TokenNameSEMICOLON
secondary	TokenNameIdentifier
=	TokenNameEQUAL
cache2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
V	TokenNameIdentifier
result	TokenNameIdentifier
=	TokenNameEQUAL
primary	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
secondary	TokenNameIdentifier
.	TokenNameDOT
get	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
result	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
put	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
K	TokenNameIdentifier
)	TokenNameRPAREN
key	TokenNameIdentifier
.	TokenNameDOT
clone	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
result	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
put	TokenNameIdentifier
(	TokenNameLPAREN
K	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Map	TokenNameIdentifier
<	TokenNameLESS
K	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
>	TokenNameGREATER
primary	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
Map	TokenNameIdentifier
<	TokenNameLESS
K	TokenNameIdentifier
,	TokenNameCOMMA
V	TokenNameIdentifier
>	TokenNameGREATER
secondary	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
swapped	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
primary	TokenNameIdentifier
=	TokenNameEQUAL
cache2	TokenNameIdentifier
;	TokenNameSEMICOLON
secondary	TokenNameIdentifier
=	TokenNameEQUAL
cache1	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
primary	TokenNameIdentifier
=	TokenNameEQUAL
cache1	TokenNameIdentifier
;	TokenNameSEMICOLON
secondary	TokenNameIdentifier
=	TokenNameEQUAL
cache2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
primary	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
key	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
countdown	TokenNameIdentifier
.	TokenNameDOT
decrementAndGet	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
secondary	TokenNameIdentifier
.	TokenNameDOT
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
swapped	TokenNameIdentifier
=	TokenNameEQUAL
!	TokenNameNOT
swapped	TokenNameIdentifier
;	TokenNameSEMICOLON
countdown	TokenNameIdentifier
.	TokenNameDOT
set	TokenNameIdentifier
(	TokenNameLPAREN
maxSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
