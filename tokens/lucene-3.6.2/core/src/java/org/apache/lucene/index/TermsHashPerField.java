package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Arrays	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
tokenattributes	TokenNameIdentifier
.	TokenNameDOT
CharTermAttribute	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
document	TokenNameIdentifier
.	TokenNameDOT
Fieldable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
UnicodeUtil	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
RamUsageEstimator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
SorterTemplate	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
class	TokenNameclass
TermsHashPerField	TokenNameIdentifier
extends	TokenNameextends
InvertedDocConsumerPerField	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
TermsHashConsumerPerField	TokenNameIdentifier
consumer	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
TermsHashPerField	TokenNameIdentifier
nextPerField	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
TermsHashPerThread	TokenNameIdentifier
perThread	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
DocState	TokenNameIdentifier
docState	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
FieldInvertState	TokenNameIdentifier
fieldState	TokenNameIdentifier
;	TokenNameSEMICOLON
CharTermAttribute	TokenNameIdentifier
termAtt	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
CharBlockPool	TokenNameIdentifier
charPool	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
IntBlockPool	TokenNameIdentifier
intPool	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
ByteBlockPool	TokenNameIdentifier
bytePool	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
streamCount	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
numPostingInt	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
FieldInfo	TokenNameIdentifier
fieldInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
boolean	TokenNameboolean
postingsCompacted	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
numPostings	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
postingsHashSize	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
postingsHashHalfSize	TokenNameIdentifier
=	TokenNameEQUAL
postingsHashSize	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
postingsHashMask	TokenNameIdentifier
=	TokenNameEQUAL
postingsHashSize	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
postingsHash	TokenNameIdentifier
;	TokenNameSEMICOLON
ParallelPostingsArray	TokenNameIdentifier
postingsArray	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
TermsHashPerField	TokenNameIdentifier
(	TokenNameLPAREN
DocInverterPerField	TokenNameIdentifier
docInverterPerField	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
TermsHashPerThread	TokenNameIdentifier
perThread	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
TermsHashPerThread	TokenNameIdentifier
nextPerThread	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
FieldInfo	TokenNameIdentifier
fieldInfo	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
perThread	TokenNameIdentifier
=	TokenNameEQUAL
perThread	TokenNameIdentifier
;	TokenNameSEMICOLON
intPool	TokenNameIdentifier
=	TokenNameEQUAL
perThread	TokenNameIdentifier
.	TokenNameDOT
intPool	TokenNameIdentifier
;	TokenNameSEMICOLON
charPool	TokenNameIdentifier
=	TokenNameEQUAL
perThread	TokenNameIdentifier
.	TokenNameDOT
charPool	TokenNameIdentifier
;	TokenNameSEMICOLON
bytePool	TokenNameIdentifier
=	TokenNameEQUAL
perThread	TokenNameIdentifier
.	TokenNameDOT
bytePool	TokenNameIdentifier
;	TokenNameSEMICOLON
docState	TokenNameIdentifier
=	TokenNameEQUAL
perThread	TokenNameIdentifier
.	TokenNameDOT
docState	TokenNameIdentifier
;	TokenNameSEMICOLON
postingsHash	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
postingsHashSize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
Arrays	TokenNameIdentifier
.	TokenNameDOT
fill	TokenNameIdentifier
(	TokenNameLPAREN
postingsHash	TokenNameIdentifier
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bytesUsed	TokenNameIdentifier
(	TokenNameLPAREN
postingsHashSize	TokenNameIdentifier
*	TokenNameMULTIPLY
RamUsageEstimator	TokenNameIdentifier
.	TokenNameDOT
NUM_BYTES_INT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fieldState	TokenNameIdentifier
=	TokenNameEQUAL
docInverterPerField	TokenNameIdentifier
.	TokenNameDOT
fieldState	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
consumer	TokenNameIdentifier
=	TokenNameEQUAL
perThread	TokenNameIdentifier
.	TokenNameDOT
consumer	TokenNameIdentifier
.	TokenNameDOT
addField	TokenNameIdentifier
(	TokenNameLPAREN
this	TokenNamethis
,	TokenNameCOMMA
fieldInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
initPostingsArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
streamCount	TokenNameIdentifier
=	TokenNameEQUAL
consumer	TokenNameIdentifier
.	TokenNameDOT
getStreamCount	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
numPostingInt	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
streamCount	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
fieldInfo	TokenNameIdentifier
=	TokenNameEQUAL
fieldInfo	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextPerThread	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
nextPerField	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
TermsHashPerField	TokenNameIdentifier
)	TokenNameRPAREN
nextPerThread	TokenNameIdentifier
.	TokenNameDOT
addField	TokenNameIdentifier
(	TokenNameLPAREN
docInverterPerField	TokenNameIdentifier
,	TokenNameCOMMA
fieldInfo	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
else	TokenNameelse
nextPerField	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
perThread	TokenNameIdentifier
.	TokenNameDOT
termsHash	TokenNameIdentifier
.	TokenNameDOT
trackAllocations	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
postingsHash	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
bytesUsed	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
postingsHash	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
*	TokenNameMULTIPLY
RamUsageEstimator	TokenNameIdentifier
.	TokenNameDOT
NUM_BYTES_INT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
postingsHash	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
postingsArray	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
bytesUsed	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
postingsArray	TokenNameIdentifier
.	TokenNameDOT
bytesPerPosting	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
postingsArray	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
postingsArray	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nextPerField	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
nextPerField	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
initPostingsArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
postingsArray	TokenNameIdentifier
=	TokenNameEQUAL
consumer	TokenNameIdentifier
.	TokenNameDOT
createPostingsArray	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bytesUsed	TokenNameIdentifier
(	TokenNameLPAREN
postingsArray	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
*	TokenNameMULTIPLY
postingsArray	TokenNameIdentifier
.	TokenNameDOT
bytesPerPosting	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
bytesUsed	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
size	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
perThread	TokenNameIdentifier
.	TokenNameDOT
termsHash	TokenNameIdentifier
.	TokenNameDOT
trackAllocations	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
perThread	TokenNameIdentifier
.	TokenNameDOT
termsHash	TokenNameIdentifier
.	TokenNameDOT
docWriter	TokenNameIdentifier
.	TokenNameDOT
bytesUsed	TokenNameIdentifier
(	TokenNameLPAREN
size	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
shrinkHash	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
targetSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
postingsCompacted	TokenNameIdentifier
||	TokenNameOR_OR
numPostings	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
newSize	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
newSize	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
postingsHash	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
long	TokenNamelong
previousSize	TokenNameIdentifier
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
postingsHash	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
newSize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
bytesUsed	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
newSize	TokenNameIdentifier
-	TokenNameMINUS
previousSize	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
RamUsageEstimator	TokenNameIdentifier
.	TokenNameDOT
NUM_BYTES_INT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Arrays	TokenNameIdentifier
.	TokenNameDOT
fill	TokenNameIdentifier
(	TokenNameLPAREN
postingsHash	TokenNameIdentifier
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
postingsHashSize	TokenNameIdentifier
=	TokenNameEQUAL
newSize	TokenNameIdentifier
;	TokenNameSEMICOLON
postingsHashHalfSize	TokenNameIdentifier
=	TokenNameEQUAL
newSize	TokenNameIdentifier
/	TokenNameDIVIDE
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
postingsHashMask	TokenNameIdentifier
=	TokenNameEQUAL
newSize	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
postingsArray	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
bytesUsed	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
postingsArray	TokenNameIdentifier
.	TokenNameDOT
bytesPerPosting	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
postingsArray	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
postingsArray	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
postingsCompacted	TokenNameIdentifier
)	TokenNameRPAREN
compactPostings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
numPostings	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
postingsHash	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
numPostings	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
Arrays	TokenNameIdentifier
.	TokenNameDOT
fill	TokenNameIdentifier
(	TokenNameLPAREN
postingsHash	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numPostings	TokenNameIdentifier
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
numPostings	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
postingsCompacted	TokenNameIdentifier
=	TokenNameEQUAL
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextPerField	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
nextPerField	TokenNameIdentifier
.	TokenNameDOT
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
synchronized	TokenNamesynchronized
public	TokenNamepublic
void	TokenNamevoid
abort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
reset	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextPerField	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
nextPerField	TokenNameIdentifier
.	TokenNameDOT
abort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
final	TokenNamefinal
void	TokenNamevoid
growParallelPostingsArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
oldSize	TokenNameIdentifier
=	TokenNameEQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
postingsArray	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
postingsArray	TokenNameIdentifier
.	TokenNameDOT
grow	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bytesUsed	TokenNameIdentifier
(	TokenNameLPAREN
postingsArray	TokenNameIdentifier
.	TokenNameDOT
bytesPerPosting	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
*	TokenNameMULTIPLY
(	TokenNameLPAREN
postingsArray	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
-	TokenNameMINUS
oldSize	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
initReader	TokenNameIdentifier
(	TokenNameLPAREN
ByteSliceReader	TokenNameIdentifier
reader	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
termID	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
stream	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
stream	TokenNameIdentifier
<	TokenNameLESS
streamCount	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
intStart	TokenNameIdentifier
=	TokenNameEQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
intStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
ints	TokenNameIdentifier
=	TokenNameEQUAL
intPool	TokenNameIdentifier
.	TokenNameDOT
buffers	TokenNameIdentifier
[	TokenNameLBRACKET
intStart	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
INT_BLOCK_SHIFT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
upto	TokenNameIdentifier
=	TokenNameEQUAL
intStart	TokenNameIdentifier
&	TokenNameAND
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
INT_BLOCK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
reader	TokenNameIdentifier
.	TokenNameDOT
init	TokenNameIdentifier
(	TokenNameLPAREN
bytePool	TokenNameIdentifier
,	TokenNameCOMMA
postingsArray	TokenNameIdentifier
.	TokenNameDOT
byteStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
stream	TokenNameIdentifier
*	TokenNameMULTIPLY
ByteBlockPool	TokenNameIdentifier
.	TokenNameDOT
FIRST_LEVEL_SIZE	TokenNameIdentifier
,	TokenNameCOMMA
ints	TokenNameIdentifier
[	TokenNameLBRACKET
upto	TokenNameIdentifier
+	TokenNamePLUS
stream	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
compactPostings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
upto	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
postingsHashSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
upto	TokenNameIdentifier
<	TokenNameLESS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
upto	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
upto	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
assert	TokenNameassert
upto	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
numPostings	TokenNameIdentifier
:	TokenNameCOLON
"upto="	TokenNameStringLiteral
+	TokenNamePLUS
upto	TokenNameIdentifier
+	TokenNamePLUS
" numPostings="	TokenNameStringLiteral
+	TokenNamePLUS
numPostings	TokenNameIdentifier
;	TokenNameSEMICOLON
postingsCompacted	TokenNameIdentifier
=	TokenNameEQUAL
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sortPostings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
compactPostings	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
postingsHash	TokenNameIdentifier
=	TokenNameEQUAL
this	TokenNamethis
.	TokenNameDOT
postingsHash	TokenNameIdentifier
;	TokenNameSEMICOLON
new	TokenNamenew
SorterTemplate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
void	TokenNamevoid
swap	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
j	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
o	TokenNameIdentifier
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
o	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
int	TokenNameint
compare	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
j	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
term1	TokenNameIdentifier
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
term2	TokenNameIdentifier
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
term1	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
term2	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
textStart1	TokenNameIdentifier
=	TokenNameEQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
textStarts	TokenNameIdentifier
[	TokenNameLBRACKET
term1	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
textStart2	TokenNameIdentifier
=	TokenNameEQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
textStarts	TokenNameIdentifier
[	TokenNameLBRACKET
term2	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
text1	TokenNameIdentifier
=	TokenNameEQUAL
charPool	TokenNameIdentifier
.	TokenNameDOT
buffers	TokenNameIdentifier
[	TokenNameLBRACKET
textStart1	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_SHIFT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
pos1	TokenNameIdentifier
=	TokenNameEQUAL
textStart1	TokenNameIdentifier
&	TokenNameAND
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
text2	TokenNameIdentifier
=	TokenNameEQUAL
charPool	TokenNameIdentifier
.	TokenNameDOT
buffers	TokenNameIdentifier
[	TokenNameLBRACKET
textStart2	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_SHIFT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
pos2	TokenNameIdentifier
=	TokenNameEQUAL
textStart2	TokenNameIdentifier
&	TokenNameAND
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
comparePostings	TokenNameIdentifier
(	TokenNameLPAREN
text1	TokenNameIdentifier
,	TokenNameCOMMA
pos1	TokenNameIdentifier
,	TokenNameCOMMA
text2	TokenNameIdentifier
,	TokenNameCOMMA
pos2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
void	TokenNamevoid
setPivot	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
pivotTerm	TokenNameIdentifier
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
textStart	TokenNameIdentifier
=	TokenNameEQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
textStarts	TokenNameIdentifier
[	TokenNameLBRACKET
pivotTerm	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
pivotBuf	TokenNameIdentifier
=	TokenNameEQUAL
charPool	TokenNameIdentifier
.	TokenNameDOT
buffers	TokenNameIdentifier
[	TokenNameLBRACKET
textStart	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_SHIFT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
pivotBufPos	TokenNameIdentifier
=	TokenNameEQUAL
textStart	TokenNameIdentifier
&	TokenNameAND
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
int	TokenNameint
comparePivot	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
term	TokenNameIdentifier
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
j	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
pivotTerm	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
term	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
textStart	TokenNameIdentifier
=	TokenNameEQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
textStarts	TokenNameIdentifier
[	TokenNameLBRACKET
term	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
text	TokenNameIdentifier
=	TokenNameEQUAL
charPool	TokenNameIdentifier
.	TokenNameDOT
buffers	TokenNameIdentifier
[	TokenNameLBRACKET
textStart	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_SHIFT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
pos	TokenNameIdentifier
=	TokenNameEQUAL
textStart	TokenNameIdentifier
&	TokenNameAND
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
comparePostings	TokenNameIdentifier
(	TokenNameLPAREN
pivotBuf	TokenNameIdentifier
,	TokenNameCOMMA
pivotBufPos	TokenNameIdentifier
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
pos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
pivotTerm	TokenNameIdentifier
,	TokenNameCOMMA
pivotBufPos	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
pivotBuf	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
comparePostings	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
text1	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
pos1	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
text2	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
pos2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
text1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
text2	TokenNameIdentifier
||	TokenNameOR_OR
pos1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
pos2	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
char	TokenNamechar
c1	TokenNameIdentifier
=	TokenNameEQUAL
text1	TokenNameIdentifier
[	TokenNameLBRACKET
pos1	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
c2	TokenNameIdentifier
=	TokenNameEQUAL
text2	TokenNameIdentifier
[	TokenNameLBRACKET
pos2	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
c2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
0xffff	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
c2	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
0xffff	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
c1	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
else	TokenNameelse
return	TokenNamereturn
c1	TokenNameIdentifier
-	TokenNameMINUS
c2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
assert	TokenNameassert
c1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0xffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
.	TokenNameDOT
quickSort	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
numPostings	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
postingsHash	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
postingEquals	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
termID	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokenText	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
tokenTextLen	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
textStart	TokenNameIdentifier
=	TokenNameEQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
textStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
text	TokenNameIdentifier
=	TokenNameEQUAL
perThread	TokenNameIdentifier
.	TokenNameDOT
charPool	TokenNameIdentifier
.	TokenNameDOT
buffers	TokenNameIdentifier
[	TokenNameLBRACKET
textStart	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_SHIFT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
assert	TokenNameassert
text	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
pos	TokenNameIdentifier
=	TokenNameEQUAL
textStart	TokenNameIdentifier
&	TokenNameAND
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
tokenPos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
tokenPos	TokenNameIdentifier
<	TokenNameLESS
tokenTextLen	TokenNameIdentifier
;	TokenNameSEMICOLON
pos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
tokenPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
if	TokenNameif
(	TokenNameLPAREN
tokenText	TokenNameIdentifier
[	TokenNameLBRACKET
tokenPos	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
text	TokenNameIdentifier
[	TokenNameLBRACKET
pos	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
0xffff	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
text	TokenNameIdentifier
[	TokenNameLBRACKET
pos	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
doCall	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
boolean	TokenNameboolean
doNextCall	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Override	TokenNameIdentifier
void	TokenNamevoid
start	TokenNameIdentifier
(	TokenNameLPAREN
Fieldable	TokenNameIdentifier
f	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
termAtt	TokenNameIdentifier
=	TokenNameEQUAL
fieldState	TokenNameIdentifier
.	TokenNameDOT
attributeSource	TokenNameIdentifier
.	TokenNameDOT
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
CharTermAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
consumer	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
nextPerField	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
nextPerField	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
boolean	TokenNameboolean
start	TokenNameIdentifier
(	TokenNameLPAREN
Fieldable	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
fields	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
count	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
doCall	TokenNameIdentifier
=	TokenNameEQUAL
consumer	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
fields	TokenNameIdentifier
,	TokenNameCOMMA
count	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
postingsArray	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
initPostingsArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
nextPerField	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
doNextCall	TokenNameIdentifier
=	TokenNameEQUAL
nextPerField	TokenNameIdentifier
.	TokenNameDOT
start	TokenNameIdentifier
(	TokenNameLPAREN
fields	TokenNameIdentifier
,	TokenNameCOMMA
count	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
doCall	TokenNameIdentifier
||	TokenNameOR_OR
doNextCall	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
add	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
textStart	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
code	TokenNameIdentifier
=	TokenNameEQUAL
textStart	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
hashPos	TokenNameIdentifier
=	TokenNameEQUAL
code	TokenNameIdentifier
&	TokenNameAND
postingsHashMask	TokenNameIdentifier
;	TokenNameSEMICOLON
assert	TokenNameassert
!	TokenNameNOT
postingsCompacted	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
termID	TokenNameIdentifier
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
hashPos	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
termID	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
postingsArray	TokenNameIdentifier
.	TokenNameDOT
textStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
textStart	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
inc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
code	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
code	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
code	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
inc	TokenNameIdentifier
;	TokenNameSEMICOLON
hashPos	TokenNameIdentifier
=	TokenNameEQUAL
code	TokenNameIdentifier
&	TokenNameAND
postingsHashMask	TokenNameIdentifier
;	TokenNameSEMICOLON
termID	TokenNameIdentifier
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
hashPos	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
termID	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
postingsArray	TokenNameIdentifier
.	TokenNameDOT
textStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
textStart	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
termID	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
termID	TokenNameIdentifier
=	TokenNameEQUAL
numPostings	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
termID	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
growParallelPostingsArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
assert	TokenNameassert
termID	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
postingsArray	TokenNameIdentifier
.	TokenNameDOT
textStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
textStart	TokenNameIdentifier
;	TokenNameSEMICOLON
assert	TokenNameassert
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
hashPos	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
hashPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
termID	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
numPostings	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
postingsHashHalfSize	TokenNameIdentifier
)	TokenNameRPAREN
rehashPostings	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
postingsHashSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
numPostingInt	TokenNameIdentifier
+	TokenNamePLUS
intPool	TokenNameIdentifier
.	TokenNameDOT
intUpto	TokenNameIdentifier
>	TokenNameGREATER
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
INT_BLOCK_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
intPool	TokenNameIdentifier
.	TokenNameDOT
nextBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
BYTE_BLOCK_SIZE	TokenNameIdentifier
-	TokenNameMINUS
bytePool	TokenNameIdentifier
.	TokenNameDOT
byteUpto	TokenNameIdentifier
<	TokenNameLESS
numPostingInt	TokenNameIdentifier
*	TokenNameMULTIPLY
ByteBlockPool	TokenNameIdentifier
.	TokenNameDOT
FIRST_LEVEL_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
bytePool	TokenNameIdentifier
.	TokenNameDOT
nextBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
intUptos	TokenNameIdentifier
=	TokenNameEQUAL
intPool	TokenNameIdentifier
.	TokenNameDOT
buffer	TokenNameIdentifier
;	TokenNameSEMICOLON
intUptoStart	TokenNameIdentifier
=	TokenNameEQUAL
intPool	TokenNameIdentifier
.	TokenNameDOT
intUpto	TokenNameIdentifier
;	TokenNameSEMICOLON
intPool	TokenNameIdentifier
.	TokenNameDOT
intUpto	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
streamCount	TokenNameIdentifier
;	TokenNameSEMICOLON
postingsArray	TokenNameIdentifier
.	TokenNameDOT
intStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
intUptoStart	TokenNameIdentifier
+	TokenNamePLUS
intPool	TokenNameIdentifier
.	TokenNameDOT
intOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
streamCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
upto	TokenNameIdentifier
=	TokenNameEQUAL
bytePool	TokenNameIdentifier
.	TokenNameDOT
newSlice	TokenNameIdentifier
(	TokenNameLPAREN
ByteBlockPool	TokenNameIdentifier
.	TokenNameDOT
FIRST_LEVEL_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
intUptos	TokenNameIdentifier
[	TokenNameLBRACKET
intUptoStart	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
upto	TokenNameIdentifier
+	TokenNamePLUS
bytePool	TokenNameIdentifier
.	TokenNameDOT
byteOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
postingsArray	TokenNameIdentifier
.	TokenNameDOT
byteStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
intUptos	TokenNameIdentifier
[	TokenNameLBRACKET
intUptoStart	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
consumer	TokenNameIdentifier
.	TokenNameDOT
newTerm	TokenNameIdentifier
(	TokenNameLPAREN
termID	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
intStart	TokenNameIdentifier
=	TokenNameEQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
intStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
intUptos	TokenNameIdentifier
=	TokenNameEQUAL
intPool	TokenNameIdentifier
.	TokenNameDOT
buffers	TokenNameIdentifier
[	TokenNameLBRACKET
intStart	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
INT_BLOCK_SHIFT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
intUptoStart	TokenNameIdentifier
=	TokenNameEQUAL
intStart	TokenNameIdentifier
&	TokenNameAND
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
INT_BLOCK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
consumer	TokenNameIdentifier
.	TokenNameDOT
addTerm	TokenNameIdentifier
(	TokenNameLPAREN
termID	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
void	TokenNamevoid
add	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
assert	TokenNameassert
!	TokenNameNOT
postingsCompacted	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
tokenText	TokenNameIdentifier
=	TokenNameEQUAL
termAtt	TokenNameIdentifier
.	TokenNameDOT
buffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
tokenTextLen	TokenNameIdentifier
=	TokenNameEQUAL
termAtt	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
downto	TokenNameIdentifier
=	TokenNameEQUAL
tokenTextLen	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
code	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
downto	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
char	TokenNamechar
ch	TokenNameIdentifier
=	TokenNameEQUAL
tokenText	TokenNameIdentifier
[	TokenNameLBRACKET
--	TokenNameMINUS_MINUS
downto	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
UnicodeUtil	TokenNameIdentifier
.	TokenNameDOT
UNI_SUR_LOW_START	TokenNameIdentifier
&&	TokenNameAND_AND
ch	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
UnicodeUtil	TokenNameIdentifier
.	TokenNameDOT
UNI_SUR_LOW_END	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
downto	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
tokenText	TokenNameIdentifier
[	TokenNameLBRACKET
downto	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
UnicodeUtil	TokenNameIdentifier
.	TokenNameDOT
UNI_REPLACEMENT_CHAR	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
char	TokenNamechar
ch2	TokenNameIdentifier
=	TokenNameEQUAL
tokenText	TokenNameIdentifier
[	TokenNameLBRACKET
downto	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ch2	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
UnicodeUtil	TokenNameIdentifier
.	TokenNameDOT
UNI_SUR_HIGH_START	TokenNameIdentifier
&&	TokenNameAND_AND
ch2	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
UnicodeUtil	TokenNameIdentifier
.	TokenNameDOT
UNI_SUR_HIGH_END	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
code	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
code	TokenNameIdentifier
*	TokenNameMULTIPLY
31	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
ch	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
31	TokenNameIntegerLiteral
+	TokenNamePLUS
ch2	TokenNameIdentifier
;	TokenNameSEMICOLON
downto	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
continue	TokenNamecontinue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
tokenText	TokenNameIdentifier
[	TokenNameLBRACKET
downto	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
UnicodeUtil	TokenNameIdentifier
.	TokenNameDOT
UNI_REPLACEMENT_CHAR	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
ch	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
UnicodeUtil	TokenNameIdentifier
.	TokenNameDOT
UNI_SUR_HIGH_START	TokenNameIdentifier
&&	TokenNameAND_AND
(	TokenNameLPAREN
ch	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
UnicodeUtil	TokenNameIdentifier
.	TokenNameDOT
UNI_SUR_HIGH_END	TokenNameIdentifier
||	TokenNameOR_OR
ch	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ch	TokenNameIdentifier
=	TokenNameEQUAL
tokenText	TokenNameIdentifier
[	TokenNameLBRACKET
downto	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
UnicodeUtil	TokenNameIdentifier
.	TokenNameDOT
UNI_REPLACEMENT_CHAR	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
code	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
code	TokenNameIdentifier
*	TokenNameMULTIPLY
31	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
ch	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
hashPos	TokenNameIdentifier
=	TokenNameEQUAL
code	TokenNameIdentifier
&	TokenNameAND
postingsHashMask	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
termID	TokenNameIdentifier
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
hashPos	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
termID	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
!	TokenNameNOT
postingEquals	TokenNameIdentifier
(	TokenNameLPAREN
termID	TokenNameIdentifier
,	TokenNameCOMMA
tokenText	TokenNameIdentifier
,	TokenNameCOMMA
tokenTextLen	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
inc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
code	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
code	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
code	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
inc	TokenNameIdentifier
;	TokenNameSEMICOLON
hashPos	TokenNameIdentifier
=	TokenNameEQUAL
code	TokenNameIdentifier
&	TokenNameAND
postingsHashMask	TokenNameIdentifier
;	TokenNameSEMICOLON
termID	TokenNameIdentifier
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
hashPos	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
termID	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
!	TokenNameNOT
postingEquals	TokenNameIdentifier
(	TokenNameLPAREN
termID	TokenNameIdentifier
,	TokenNameCOMMA
tokenText	TokenNameIdentifier
,	TokenNameCOMMA
tokenTextLen	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
termID	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
textLen1	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
+	TokenNamePLUS
tokenTextLen	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
textLen1	TokenNameIdentifier
+	TokenNamePLUS
charPool	TokenNameIdentifier
.	TokenNameDOT
charUpto	TokenNameIdentifier
>	TokenNameGREATER
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
textLen1	TokenNameIdentifier
>	TokenNameGREATER
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
docState	TokenNameIdentifier
.	TokenNameDOT
maxTermPrefix	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
docState	TokenNameIdentifier
.	TokenNameDOT
maxTermPrefix	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
tokenText	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
30	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
consumer	TokenNameIdentifier
.	TokenNameDOT
skippingLongTerm	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
charPool	TokenNameIdentifier
.	TokenNameDOT
nextBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
termID	TokenNameIdentifier
=	TokenNameEQUAL
numPostings	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
termID	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
growParallelPostingsArray	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
assert	TokenNameassert
termID	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
text	TokenNameIdentifier
=	TokenNameEQUAL
charPool	TokenNameIdentifier
.	TokenNameDOT
buffer	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
textUpto	TokenNameIdentifier
=	TokenNameEQUAL
charPool	TokenNameIdentifier
.	TokenNameDOT
charUpto	TokenNameIdentifier
;	TokenNameSEMICOLON
postingsArray	TokenNameIdentifier
.	TokenNameDOT
textStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
textUpto	TokenNameIdentifier
+	TokenNamePLUS
charPool	TokenNameIdentifier
.	TokenNameDOT
charOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
charPool	TokenNameIdentifier
.	TokenNameDOT
charUpto	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
textLen1	TokenNameIdentifier
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
arraycopy	TokenNameIdentifier
(	TokenNameLPAREN
tokenText	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
text	TokenNameIdentifier
,	TokenNameCOMMA
textUpto	TokenNameIdentifier
,	TokenNameCOMMA
tokenTextLen	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
text	TokenNameIdentifier
[	TokenNameLBRACKET
textUpto	TokenNameIdentifier
+	TokenNamePLUS
tokenTextLen	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0xffff	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assert	TokenNameassert
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
hashPos	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
hashPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
termID	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
numPostings	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
postingsHashHalfSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
rehashPostings	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
postingsHashSize	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bytesUsed	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
numPostings	TokenNameIdentifier
*	TokenNameMULTIPLY
RamUsageEstimator	TokenNameIdentifier
.	TokenNameDOT
NUM_BYTES_INT	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
numPostingInt	TokenNameIdentifier
+	TokenNamePLUS
intPool	TokenNameIdentifier
.	TokenNameDOT
intUpto	TokenNameIdentifier
>	TokenNameGREATER
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
INT_BLOCK_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
intPool	TokenNameIdentifier
.	TokenNameDOT
nextBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
BYTE_BLOCK_SIZE	TokenNameIdentifier
-	TokenNameMINUS
bytePool	TokenNameIdentifier
.	TokenNameDOT
byteUpto	TokenNameIdentifier
<	TokenNameLESS
numPostingInt	TokenNameIdentifier
*	TokenNameMULTIPLY
ByteBlockPool	TokenNameIdentifier
.	TokenNameDOT
FIRST_LEVEL_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
bytePool	TokenNameIdentifier
.	TokenNameDOT
nextBuffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
intUptos	TokenNameIdentifier
=	TokenNameEQUAL
intPool	TokenNameIdentifier
.	TokenNameDOT
buffer	TokenNameIdentifier
;	TokenNameSEMICOLON
intUptoStart	TokenNameIdentifier
=	TokenNameEQUAL
intPool	TokenNameIdentifier
.	TokenNameDOT
intUpto	TokenNameIdentifier
;	TokenNameSEMICOLON
intPool	TokenNameIdentifier
.	TokenNameDOT
intUpto	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
streamCount	TokenNameIdentifier
;	TokenNameSEMICOLON
postingsArray	TokenNameIdentifier
.	TokenNameDOT
intStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
intUptoStart	TokenNameIdentifier
+	TokenNamePLUS
intPool	TokenNameIdentifier
.	TokenNameDOT
intOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
streamCount	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
upto	TokenNameIdentifier
=	TokenNameEQUAL
bytePool	TokenNameIdentifier
.	TokenNameDOT
newSlice	TokenNameIdentifier
(	TokenNameLPAREN
ByteBlockPool	TokenNameIdentifier
.	TokenNameDOT
FIRST_LEVEL_SIZE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
intUptos	TokenNameIdentifier
[	TokenNameLBRACKET
intUptoStart	TokenNameIdentifier
+	TokenNamePLUS
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
upto	TokenNameIdentifier
+	TokenNamePLUS
bytePool	TokenNameIdentifier
.	TokenNameDOT
byteOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
postingsArray	TokenNameIdentifier
.	TokenNameDOT
byteStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
intUptos	TokenNameIdentifier
[	TokenNameLBRACKET
intUptoStart	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
consumer	TokenNameIdentifier
.	TokenNameDOT
newTerm	TokenNameIdentifier
(	TokenNameLPAREN
termID	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
intStart	TokenNameIdentifier
=	TokenNameEQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
intStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
intUptos	TokenNameIdentifier
=	TokenNameEQUAL
intPool	TokenNameIdentifier
.	TokenNameDOT
buffers	TokenNameIdentifier
[	TokenNameLBRACKET
intStart	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
INT_BLOCK_SHIFT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
intUptoStart	TokenNameIdentifier
=	TokenNameEQUAL
intStart	TokenNameIdentifier
&	TokenNameAND
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
INT_BLOCK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
consumer	TokenNameIdentifier
.	TokenNameDOT
addTerm	TokenNameIdentifier
(	TokenNameLPAREN
termID	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
doNextCall	TokenNameIdentifier
)	TokenNameRPAREN
nextPerField	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
postingsArray	TokenNameIdentifier
.	TokenNameDOT
textStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
intUptos	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
intUptoStart	TokenNameIdentifier
;	TokenNameSEMICOLON
void	TokenNamevoid
writeByte	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
stream	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
b	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
upto	TokenNameIdentifier
=	TokenNameEQUAL
intUptos	TokenNameIdentifier
[	TokenNameLBRACKET
intUptoStart	TokenNameIdentifier
+	TokenNamePLUS
stream	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
bytes	TokenNameIdentifier
=	TokenNameEQUAL
bytePool	TokenNameIdentifier
.	TokenNameDOT
buffers	TokenNameIdentifier
[	TokenNameLBRACKET
upto	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
BYTE_BLOCK_SHIFT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
assert	TokenNameassert
bytes	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
int	TokenNameint
offset	TokenNameIdentifier
=	TokenNameEQUAL
upto	TokenNameIdentifier
&	TokenNameAND
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
BYTE_BLOCK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
bytes	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
offset	TokenNameIdentifier
=	TokenNameEQUAL
bytePool	TokenNameIdentifier
.	TokenNameDOT
allocSlice	TokenNameIdentifier
(	TokenNameLPAREN
bytes	TokenNameIdentifier
,	TokenNameCOMMA
offset	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bytes	TokenNameIdentifier
=	TokenNameEQUAL
bytePool	TokenNameIdentifier
.	TokenNameDOT
buffer	TokenNameIdentifier
;	TokenNameSEMICOLON
intUptos	TokenNameIdentifier
[	TokenNameLBRACKET
intUptoStart	TokenNameIdentifier
+	TokenNamePLUS
stream	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
offset	TokenNameIdentifier
+	TokenNamePLUS
bytePool	TokenNameIdentifier
.	TokenNameDOT
byteOffset	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
bytes	TokenNameIdentifier
[	TokenNameLBRACKET
offset	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
b	TokenNameIdentifier
;	TokenNameSEMICOLON
(	TokenNameLPAREN
intUptos	TokenNameIdentifier
[	TokenNameLBRACKET
intUptoStart	TokenNameIdentifier
+	TokenNamePLUS
stream	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
writeBytes	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
stream	TokenNameIdentifier
,	TokenNameCOMMA
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
b	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
offset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
len	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
+	TokenNamePLUS
len	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
writeByte	TokenNameIdentifier
(	TokenNameLPAREN
stream	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
void	TokenNamevoid
writeVInt	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
stream	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
stream	TokenNameIdentifier
<	TokenNameLESS
streamCount	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
~	TokenNameTWIDDLE
0x7F	TokenNameIntegerLiteral
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
writeByte	TokenNameIdentifier
(	TokenNameLPAREN
stream	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
i	TokenNameIdentifier
&	TokenNameAND
0x7f	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
0x80	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>>>=	TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL
7	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
writeByte	TokenNameIdentifier
(	TokenNameLPAREN
stream	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
void	TokenNamevoid
finish	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
consumer	TokenNameIdentifier
.	TokenNameDOT
finish	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
finally	TokenNamefinally
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
nextPerField	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
nextPerField	TokenNameIdentifier
.	TokenNameDOT
finish	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
void	TokenNamevoid
rehashPostings	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
newSize	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
newMask	TokenNameIdentifier
=	TokenNameEQUAL
newSize	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
newHash	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
newSize	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
Arrays	TokenNameIdentifier
.	TokenNameDOT
fill	TokenNameIdentifier
(	TokenNameLPAREN
newHash	TokenNameIdentifier
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
postingsHashSize	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
termID	TokenNameIdentifier
=	TokenNameEQUAL
postingsHash	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
termID	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
code	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
perThread	TokenNameIdentifier
.	TokenNameDOT
primary	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
textStart	TokenNameIdentifier
=	TokenNameEQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
textStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
start	TokenNameIdentifier
=	TokenNameEQUAL
textStart	TokenNameIdentifier
&	TokenNameAND
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_MASK	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
text	TokenNameIdentifier
=	TokenNameEQUAL
charPool	TokenNameIdentifier
.	TokenNameDOT
buffers	TokenNameIdentifier
[	TokenNameLBRACKET
textStart	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
DocumentsWriter	TokenNameIdentifier
.	TokenNameDOT
CHAR_BLOCK_SHIFT	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
pos	TokenNameIdentifier
=	TokenNameEQUAL
start	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
text	TokenNameIdentifier
[	TokenNameLBRACKET
pos	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
0xffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
pos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
code	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
pos	TokenNameIdentifier
>	TokenNameGREATER
start	TokenNameIdentifier
)	TokenNameRPAREN
code	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
code	TokenNameIdentifier
*	TokenNameMULTIPLY
31	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
text	TokenNameIdentifier
[	TokenNameLBRACKET
--	TokenNameMINUS_MINUS
pos	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
code	TokenNameIdentifier
=	TokenNameEQUAL
postingsArray	TokenNameIdentifier
.	TokenNameDOT
textStarts	TokenNameIdentifier
[	TokenNameLBRACKET
termID	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
hashPos	TokenNameIdentifier
=	TokenNameEQUAL
code	TokenNameIdentifier
&	TokenNameAND
newMask	TokenNameIdentifier
;	TokenNameSEMICOLON
assert	TokenNameassert
hashPos	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
newHash	TokenNameIdentifier
[	TokenNameLBRACKET
hashPos	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
inc	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
code	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
code	TokenNameIdentifier
)	TokenNameRPAREN
|	TokenNameOR
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
code	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
inc	TokenNameIdentifier
;	TokenNameSEMICOLON
hashPos	TokenNameIdentifier
=	TokenNameEQUAL
code	TokenNameIdentifier
&	TokenNameAND
newMask	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
newHash	TokenNameIdentifier
[	TokenNameLBRACKET
hashPos	TokenNameIdentifier
]	TokenNameRBRACKET
!=	TokenNameNOT_EQUAL
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
newHash	TokenNameIdentifier
[	TokenNameLBRACKET
hashPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
termID	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
postingsHashMask	TokenNameIdentifier
=	TokenNameEQUAL
newMask	TokenNameIdentifier
;	TokenNameSEMICOLON
postingsHash	TokenNameIdentifier
=	TokenNameEQUAL
newHash	TokenNameIdentifier
;	TokenNameSEMICOLON
postingsHashSize	TokenNameIdentifier
=	TokenNameEQUAL
newSize	TokenNameIdentifier
;	TokenNameSEMICOLON
postingsHashHalfSize	TokenNameIdentifier
=	TokenNameEQUAL
newSize	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
