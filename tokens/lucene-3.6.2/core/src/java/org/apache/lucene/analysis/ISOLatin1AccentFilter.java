package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
tokenattributes	TokenNameIdentifier
.	TokenNameDOT
CharTermAttribute	TokenNameIdentifier
;	TokenNameSEMICOLON
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
final	TokenNamefinal
class	TokenNameclass
ISOLatin1AccentFilter	TokenNameIdentifier
extends	TokenNameextends
TokenFilter	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
ISOLatin1AccentFilter	TokenNameIdentifier
(	TokenNameLPAREN
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
output	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
256	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
outputPos	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
CharTermAttribute	TokenNameIdentifier
termAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
CharTermAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
final	TokenNamefinal
boolean	TokenNameboolean
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buffer	TokenNameIdentifier
=	TokenNameEQUAL
termAtt	TokenNameIdentifier
.	TokenNameDOT
buffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
termAtt	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
'À'	TokenNameCharacterLiteral
&&	TokenNameAND_AND
c	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
'ﬆ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
removeAccents	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
termAtt	TokenNameIdentifier
.	TokenNameDOT
copyBuffer	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
outputPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
final	TokenNamefinal
void	TokenNamevoid
removeAccents	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
input	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
maxSizeNeeded	TokenNameIdentifier
=	TokenNameEQUAL
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
length	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
output	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
size	TokenNameIdentifier
<	TokenNameLESS
maxSizeNeeded	TokenNameIdentifier
)	TokenNameRPAREN
size	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
size	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
output	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
output	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
size	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
outputPos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
pos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
,	TokenNameCOMMA
pos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
[	TokenNameLBRACKET
pos	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
'À'	TokenNameCharacterLiteral
||	TokenNameOR_OR
c	TokenNameIdentifier
>	TokenNameGREATER
'ﬆ'	TokenNameCharacterLiteral
)	TokenNameRPAREN
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
c	TokenNameIdentifier
;	TokenNameSEMICOLON
else	TokenNameelse
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'À'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Á'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Â'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ã'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ä'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Å'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'A'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Æ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'A'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'E'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ç'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'C'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'È'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'É'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ê'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ë'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'E'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ì'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Í'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Î'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ï'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'I'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ĳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'I'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'J'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ð'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'D'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ñ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'N'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ò'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ó'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ô'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Õ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ö'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ø'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'O'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Œ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'O'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'E'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Þ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'T'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'H'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ù'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ú'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Û'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ü'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'U'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ý'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ÿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'Y'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'à'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'á'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'â'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ã'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ä'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'å'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'æ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'e'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ç'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'c'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'è'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'é'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ê'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ë'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'e'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ì'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'í'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'î'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ï'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'i'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ĳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'i'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'j'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ð'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'd'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ñ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'n'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ò'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ó'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ô'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'õ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ö'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ø'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'o'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'œ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'o'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'e'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ß'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
's'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
's'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'þ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
't'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'h'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ù'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ú'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'û'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ü'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'u'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ý'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ÿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'y'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ﬀ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ﬁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'i'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ﬂ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'l'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ﬅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
't'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ﬆ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
's'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
't'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
c	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
