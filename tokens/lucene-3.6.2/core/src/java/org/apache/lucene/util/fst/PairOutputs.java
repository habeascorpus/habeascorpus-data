package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
fst	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
store	TokenNameIdentifier
.	TokenNameDOT
DataInput	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
store	TokenNameIdentifier
.	TokenNameDOT
DataOutput	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
PairOutputs	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
extends	TokenNameextends
Outputs	TokenNameIdentifier
<	TokenNameLESS
PairOutputs	TokenNameIdentifier
.	TokenNameDOT
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
{	TokenNameLBRACE
private	TokenNameprivate
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
NO_OUTPUT	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Outputs	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
>	TokenNameGREATER
outputs1	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
Outputs	TokenNameIdentifier
<	TokenNameLESS
B	TokenNameIdentifier
>	TokenNameGREATER
outputs2	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
public	TokenNamepublic
final	TokenNamefinal
A	TokenNameIdentifier
output1	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
B	TokenNameIdentifier
output2	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
Pair	TokenNameIdentifier
(	TokenNameLPAREN
A	TokenNameIdentifier
output1	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
output2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
output1	TokenNameIdentifier
=	TokenNameEQUAL
output1	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
output2	TokenNameIdentifier
=	TokenNameEQUAL
output2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
@	TokenNameAT
SuppressWarnings	TokenNameIdentifier
(	TokenNameLPAREN
"rawtypes"	TokenNameStringLiteral
)	TokenNameRPAREN
public	TokenNamepublic
boolean	TokenNameboolean
equals	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
other	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
other	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
this	TokenNamethis
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
other	TokenNameIdentifier
instanceof	TokenNameinstanceof
Pair	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Pair	TokenNameIdentifier
pair	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Pair	TokenNameIdentifier
)	TokenNameRPAREN
other	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
output1	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
pair	TokenNameIdentifier
.	TokenNameDOT
output1	TokenNameIdentifier
)	TokenNameRPAREN
&&	TokenNameAND_AND
output2	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
pair	TokenNameIdentifier
.	TokenNameDOT
output2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
int	TokenNameint
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
output1	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
output2	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
PairOutputs	TokenNameIdentifier
(	TokenNameLPAREN
Outputs	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
>	TokenNameGREATER
outputs1	TokenNameIdentifier
,	TokenNameCOMMA
Outputs	TokenNameIdentifier
<	TokenNameLESS
B	TokenNameIdentifier
>	TokenNameGREATER
outputs2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
outputs1	TokenNameIdentifier
=	TokenNameEQUAL
outputs1	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
outputs2	TokenNameIdentifier
=	TokenNameEQUAL
outputs2	TokenNameIdentifier
;	TokenNameSEMICOLON
NO_OUTPUT	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
outputs1	TokenNameIdentifier
.	TokenNameDOT
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
outputs2	TokenNameIdentifier
.	TokenNameDOT
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
newPair	TokenNameIdentifier
(	TokenNameLPAREN
A	TokenNameIdentifier
a	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
b	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
a	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
outputs1	TokenNameIdentifier
.	TokenNameDOT
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
a	TokenNameIdentifier
=	TokenNameEQUAL
outputs1	TokenNameIdentifier
.	TokenNameDOT
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
b	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
outputs2	TokenNameIdentifier
.	TokenNameDOT
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
b	TokenNameIdentifier
=	TokenNameEQUAL
outputs2	TokenNameIdentifier
.	TokenNameDOT
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
a	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
outputs1	TokenNameIdentifier
.	TokenNameDOT
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
b	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
outputs2	TokenNameIdentifier
.	TokenNameDOT
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
NO_OUTPUT	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
final	TokenNamefinal
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
p	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
a	TokenNameIdentifier
,	TokenNameCOMMA
b	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
valid	TokenNameIdentifier
(	TokenNameLPAREN
p	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
p	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
valid	TokenNameIdentifier
(	TokenNameLPAREN
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
pair	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
boolean	TokenNameboolean
noOutput1	TokenNameIdentifier
=	TokenNameEQUAL
pair	TokenNameIdentifier
.	TokenNameDOT
output1	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
outputs1	TokenNameIdentifier
.	TokenNameDOT
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
boolean	TokenNameboolean
noOutput2	TokenNameIdentifier
=	TokenNameEQUAL
pair	TokenNameIdentifier
.	TokenNameDOT
output2	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
outputs2	TokenNameIdentifier
.	TokenNameDOT
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
noOutput1	TokenNameIdentifier
&&	TokenNameAND_AND
pair	TokenNameIdentifier
.	TokenNameDOT
output1	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
outputs1	TokenNameIdentifier
.	TokenNameDOT
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
noOutput2	TokenNameIdentifier
&&	TokenNameAND_AND
pair	TokenNameIdentifier
.	TokenNameDOT
output2	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
outputs2	TokenNameIdentifier
.	TokenNameDOT
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
noOutput1	TokenNameIdentifier
&&	TokenNameAND_AND
noOutput2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
pair	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
NO_OUTPUT	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
common	TokenNameIdentifier
(	TokenNameLPAREN
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
pair1	TokenNameIdentifier
,	TokenNameCOMMA
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
pair2	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
valid	TokenNameIdentifier
(	TokenNameLPAREN
pair1	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
valid	TokenNameIdentifier
(	TokenNameLPAREN
pair2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newPair	TokenNameIdentifier
(	TokenNameLPAREN
outputs1	TokenNameIdentifier
.	TokenNameDOT
common	TokenNameIdentifier
(	TokenNameLPAREN
pair1	TokenNameIdentifier
.	TokenNameDOT
output1	TokenNameIdentifier
,	TokenNameCOMMA
pair2	TokenNameIdentifier
.	TokenNameDOT
output1	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
outputs2	TokenNameIdentifier
.	TokenNameDOT
common	TokenNameIdentifier
(	TokenNameLPAREN
pair1	TokenNameIdentifier
.	TokenNameDOT
output2	TokenNameIdentifier
,	TokenNameCOMMA
pair2	TokenNameIdentifier
.	TokenNameDOT
output2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
subtract	TokenNameIdentifier
(	TokenNameLPAREN
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
output	TokenNameIdentifier
,	TokenNameCOMMA
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
inc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
valid	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
valid	TokenNameIdentifier
(	TokenNameLPAREN
inc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newPair	TokenNameIdentifier
(	TokenNameLPAREN
outputs1	TokenNameIdentifier
.	TokenNameDOT
subtract	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
.	TokenNameDOT
output1	TokenNameIdentifier
,	TokenNameCOMMA
inc	TokenNameIdentifier
.	TokenNameDOT
output1	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
outputs2	TokenNameIdentifier
.	TokenNameDOT
subtract	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
.	TokenNameDOT
output2	TokenNameIdentifier
,	TokenNameCOMMA
inc	TokenNameIdentifier
.	TokenNameDOT
output2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
add	TokenNameIdentifier
(	TokenNameLPAREN
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
prefix	TokenNameIdentifier
,	TokenNameCOMMA
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
output	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
valid	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
valid	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newPair	TokenNameIdentifier
(	TokenNameLPAREN
outputs1	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
.	TokenNameDOT
output1	TokenNameIdentifier
,	TokenNameCOMMA
output	TokenNameIdentifier
.	TokenNameDOT
output1	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
outputs2	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
.	TokenNameDOT
output2	TokenNameIdentifier
,	TokenNameCOMMA
output	TokenNameIdentifier
.	TokenNameDOT
output2	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
write	TokenNameIdentifier
(	TokenNameLPAREN
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
output	TokenNameIdentifier
,	TokenNameCOMMA
DataOutput	TokenNameIdentifier
writer	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
assert	TokenNameassert
valid	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outputs1	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
.	TokenNameDOT
output1	TokenNameIdentifier
,	TokenNameCOMMA
writer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
outputs2	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
.	TokenNameDOT
output2	TokenNameIdentifier
,	TokenNameCOMMA
writer	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
read	TokenNameIdentifier
(	TokenNameLPAREN
DataInput	TokenNameIdentifier
in	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
A	TokenNameIdentifier
output1	TokenNameIdentifier
=	TokenNameEQUAL
outputs1	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
in	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
B	TokenNameIdentifier
output2	TokenNameIdentifier
=	TokenNameEQUAL
outputs2	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
in	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
newPair	TokenNameIdentifier
(	TokenNameLPAREN
output1	TokenNameIdentifier
,	TokenNameCOMMA
output2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
getNoOutput	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
NO_OUTPUT	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
String	TokenNameIdentifier
outputToString	TokenNameIdentifier
(	TokenNameLPAREN
Pair	TokenNameIdentifier
<	TokenNameLESS
A	TokenNameIdentifier
,	TokenNameCOMMA
B	TokenNameIdentifier
>	TokenNameGREATER
output	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
valid	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
"<pair:"	TokenNameStringLiteral
+	TokenNamePLUS
outputs1	TokenNameIdentifier
.	TokenNameDOT
outputToString	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
.	TokenNameDOT
output1	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
outputs2	TokenNameIdentifier
.	TokenNameDOT
outputToString	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
.	TokenNameDOT
output2	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
">"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"PairOutputs<"	TokenNameStringLiteral
+	TokenNamePLUS
outputs1	TokenNameIdentifier
+	TokenNamePLUS
","	TokenNameStringLiteral
+	TokenNamePLUS
outputs2	TokenNameIdentifier
+	TokenNamePLUS
">"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
