package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
fst	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
class	TokenNameclass
NodeHash	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
table	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
count	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
mask	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
FST	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
fst	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
FST	TokenNameIdentifier
.	TokenNameDOT
Arc	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
scratchArc	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FST	TokenNameIdentifier
.	TokenNameDOT
Arc	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
public	TokenNamepublic
NodeHash	TokenNameIdentifier
(	TokenNameLPAREN
FST	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
fst	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
table	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
16	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
mask	TokenNameIdentifier
=	TokenNameEQUAL
15	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
fst	TokenNameIdentifier
=	TokenNameEQUAL
fst	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
boolean	TokenNameboolean
nodesEqual	TokenNameIdentifier
(	TokenNameLPAREN
Builder	TokenNameIdentifier
.	TokenNameDOT
UnCompiledNode	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
node	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
address	TokenNameIdentifier
,	TokenNameCOMMA
FST	TokenNameIdentifier
.	TokenNameDOT
BytesReader	TokenNameIdentifier
in	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
fst	TokenNameIdentifier
.	TokenNameDOT
readFirstRealTargetArc	TokenNameIdentifier
(	TokenNameLPAREN
address	TokenNameIdentifier
,	TokenNameCOMMA
scratchArc	TokenNameIdentifier
,	TokenNameCOMMA
in	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
scratchArc	TokenNameIdentifier
.	TokenNameDOT
bytesPerArc	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
node	TokenNameIdentifier
.	TokenNameDOT
numArcs	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
scratchArc	TokenNameIdentifier
.	TokenNameDOT
numArcs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
arcUpto	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
arcUpto	TokenNameIdentifier
<	TokenNameLESS
node	TokenNameIdentifier
.	TokenNameDOT
numArcs	TokenNameIdentifier
;	TokenNameSEMICOLON
arcUpto	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Builder	TokenNameIdentifier
.	TokenNameDOT
Arc	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
arc	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
.	TokenNameDOT
arcs	TokenNameIdentifier
[	TokenNameLBRACKET
arcUpto	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
arc	TokenNameIdentifier
.	TokenNameDOT
label	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
scratchArc	TokenNameIdentifier
.	TokenNameDOT
label	TokenNameIdentifier
||	TokenNameOR_OR
!	TokenNameNOT
arc	TokenNameIdentifier
.	TokenNameDOT
output	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
scratchArc	TokenNameIdentifier
.	TokenNameDOT
output	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
(	TokenNameLPAREN
(	TokenNameLPAREN
Builder	TokenNameIdentifier
.	TokenNameDOT
CompiledNode	TokenNameIdentifier
)	TokenNameRPAREN
arc	TokenNameIdentifier
.	TokenNameDOT
target	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
node	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
scratchArc	TokenNameIdentifier
.	TokenNameDOT
target	TokenNameIdentifier
||	TokenNameOR_OR
!	TokenNameNOT
arc	TokenNameIdentifier
.	TokenNameDOT
nextFinalOutput	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
scratchArc	TokenNameIdentifier
.	TokenNameDOT
nextFinalOutput	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
arc	TokenNameIdentifier
.	TokenNameDOT
isFinal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
scratchArc	TokenNameIdentifier
.	TokenNameDOT
isFinal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
scratchArc	TokenNameIdentifier
.	TokenNameDOT
isLast	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
arcUpto	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
node	TokenNameIdentifier
.	TokenNameDOT
numArcs	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
fst	TokenNameIdentifier
.	TokenNameDOT
readNextRealArc	TokenNameIdentifier
(	TokenNameLPAREN
scratchArc	TokenNameIdentifier
,	TokenNameCOMMA
in	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
hash	TokenNameIdentifier
(	TokenNameLPAREN
Builder	TokenNameIdentifier
.	TokenNameDOT
UnCompiledNode	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
node	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
PRIME	TokenNameIdentifier
=	TokenNameEQUAL
31	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
arcIdx	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
arcIdx	TokenNameIdentifier
<	TokenNameLESS
node	TokenNameIdentifier
.	TokenNameDOT
numArcs	TokenNameIdentifier
;	TokenNameSEMICOLON
arcIdx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Builder	TokenNameIdentifier
.	TokenNameDOT
Arc	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
arc	TokenNameIdentifier
=	TokenNameEQUAL
node	TokenNameIdentifier
.	TokenNameDOT
arcs	TokenNameIdentifier
[	TokenNameLBRACKET
arcIdx	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
PRIME	TokenNameIdentifier
*	TokenNameMULTIPLY
h	TokenNameIdentifier
+	TokenNamePLUS
arc	TokenNameIdentifier
.	TokenNameDOT
label	TokenNameIdentifier
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
PRIME	TokenNameIdentifier
*	TokenNameMULTIPLY
h	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
Builder	TokenNameIdentifier
.	TokenNameDOT
CompiledNode	TokenNameIdentifier
)	TokenNameRPAREN
arc	TokenNameIdentifier
.	TokenNameDOT
target	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
node	TokenNameIdentifier
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
PRIME	TokenNameIdentifier
*	TokenNameMULTIPLY
h	TokenNameIdentifier
+	TokenNamePLUS
arc	TokenNameIdentifier
.	TokenNameDOT
output	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
PRIME	TokenNameIdentifier
*	TokenNameMULTIPLY
h	TokenNameIdentifier
+	TokenNamePLUS
arc	TokenNameIdentifier
.	TokenNameDOT
nextFinalOutput	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
arc	TokenNameIdentifier
.	TokenNameDOT
isFinal	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
h	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
17	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
h	TokenNameIdentifier
&	TokenNameAND
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
int	TokenNameint
hash	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
node	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
PRIME	TokenNameIdentifier
=	TokenNameEQUAL
31	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
FST	TokenNameIdentifier
.	TokenNameDOT
BytesReader	TokenNameIdentifier
in	TokenNameIdentifier
=	TokenNameEQUAL
fst	TokenNameIdentifier
.	TokenNameDOT
getBytesReader	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
fst	TokenNameIdentifier
.	TokenNameDOT
readFirstRealTargetArc	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
,	TokenNameCOMMA
scratchArc	TokenNameIdentifier
,	TokenNameCOMMA
in	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
h	TokenNameIdentifier
=	TokenNameEQUAL
PRIME	TokenNameIdentifier
*	TokenNameMULTIPLY
h	TokenNameIdentifier
+	TokenNamePLUS
scratchArc	TokenNameIdentifier
.	TokenNameDOT
label	TokenNameIdentifier
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
PRIME	TokenNameIdentifier
*	TokenNameMULTIPLY
h	TokenNameIdentifier
+	TokenNamePLUS
scratchArc	TokenNameIdentifier
.	TokenNameDOT
target	TokenNameIdentifier
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
PRIME	TokenNameIdentifier
*	TokenNameMULTIPLY
h	TokenNameIdentifier
+	TokenNamePLUS
scratchArc	TokenNameIdentifier
.	TokenNameDOT
output	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
PRIME	TokenNameIdentifier
*	TokenNameMULTIPLY
h	TokenNameIdentifier
+	TokenNamePLUS
scratchArc	TokenNameIdentifier
.	TokenNameDOT
nextFinalOutput	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
scratchArc	TokenNameIdentifier
.	TokenNameDOT
isFinal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
h	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
17	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
scratchArc	TokenNameIdentifier
.	TokenNameDOT
isLast	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
fst	TokenNameIdentifier
.	TokenNameDOT
readNextRealArc	TokenNameIdentifier
(	TokenNameLPAREN
scratchArc	TokenNameIdentifier
,	TokenNameCOMMA
in	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
h	TokenNameIdentifier
&	TokenNameAND
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
add	TokenNameIdentifier
(	TokenNameLPAREN
Builder	TokenNameIdentifier
.	TokenNameDOT
UnCompiledNode	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
nodeIn	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
FST	TokenNameIdentifier
.	TokenNameDOT
BytesReader	TokenNameIdentifier
in	TokenNameIdentifier
=	TokenNameEQUAL
fst	TokenNameIdentifier
.	TokenNameDOT
getBytesReader	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
hash	TokenNameIdentifier
(	TokenNameLPAREN
nodeIn	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
pos	TokenNameIdentifier
=	TokenNameEQUAL
h	TokenNameIdentifier
&	TokenNameAND
mask	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
v	TokenNameIdentifier
=	TokenNameEQUAL
table	TokenNameIdentifier
[	TokenNameLBRACKET
pos	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
v	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
node	TokenNameIdentifier
=	TokenNameEQUAL
fst	TokenNameIdentifier
.	TokenNameDOT
addNode	TokenNameIdentifier
(	TokenNameLPAREN
nodeIn	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
hash	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
h	TokenNameIdentifier
:	TokenNameCOLON
"frozenHash="	TokenNameStringLiteral
+	TokenNamePLUS
hash	TokenNameIdentifier
(	TokenNameLPAREN
node	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
" vs h="	TokenNameStringLiteral
+	TokenNamePLUS
h	TokenNameIdentifier
;	TokenNameSEMICOLON
count	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
table	TokenNameIdentifier
[	TokenNameLBRACKET
pos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
node	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
table	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<	TokenNameLESS
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
count	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
rehash	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
node	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
nodesEqual	TokenNameIdentifier
(	TokenNameLPAREN
nodeIn	TokenNameIdentifier
,	TokenNameCOMMA
v	TokenNameIdentifier
,	TokenNameCOMMA
in	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
v	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pos	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pos	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
c	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
&	TokenNameAND
mask	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
addNew	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
address	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
pos	TokenNameIdentifier
=	TokenNameEQUAL
hash	TokenNameIdentifier
(	TokenNameLPAREN
address	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
mask	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
c	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
table	TokenNameIdentifier
[	TokenNameLBRACKET
pos	TokenNameIdentifier
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
table	TokenNameIdentifier
[	TokenNameLBRACKET
pos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
address	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
pos	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
pos	TokenNameIdentifier
+	TokenNamePLUS
(	TokenNameLPAREN
++	TokenNamePLUS_PLUS
c	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
&	TokenNameAND
mask	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
rehash	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
oldTable	TokenNameIdentifier
=	TokenNameEQUAL
table	TokenNameIdentifier
;	TokenNameSEMICOLON
table	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
2	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
table	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
mask	TokenNameIdentifier
=	TokenNameEQUAL
table	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
idx	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
idx	TokenNameIdentifier
<	TokenNameLESS
oldTable	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
idx	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
address	TokenNameIdentifier
=	TokenNameEQUAL
oldTable	TokenNameIdentifier
[	TokenNameLBRACKET
idx	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
address	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
addNew	TokenNameIdentifier
(	TokenNameLPAREN
address	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
int	TokenNameint
count	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
count	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
