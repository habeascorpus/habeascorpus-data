package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
analysis	TokenNameIdentifier
.	TokenNameDOT
tokenattributes	TokenNameIdentifier
.	TokenNameDOT
CharTermAttribute	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
ArrayUtil	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
RamUsageEstimator	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
final	TokenNamefinal
class	TokenNameclass
ASCIIFoldingFilter	TokenNameIdentifier
extends	TokenNameextends
TokenFilter	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
ASCIIFoldingFilter	TokenNameIdentifier
(	TokenNameLPAREN
TokenStream	TokenNameIdentifier
input	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
input	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
output	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
512	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
outputPos	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
CharTermAttribute	TokenNameIdentifier
termAtt	TokenNameIdentifier
=	TokenNameEQUAL
addAttribute	TokenNameIdentifier
(	TokenNameLPAREN
CharTermAttribute	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
boolean	TokenNameboolean
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
input	TokenNameIdentifier
.	TokenNameDOT
incrementToken	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buffer	TokenNameIdentifier
=	TokenNameEQUAL
termAtt	TokenNameIdentifier
.	TokenNameDOT
buffer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
length	TokenNameIdentifier
=	TokenNameEQUAL
termAtt	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
length	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
i	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
''	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
foldToASCII	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
termAtt	TokenNameIdentifier
.	TokenNameDOT
copyBuffer	TokenNameIdentifier
(	TokenNameLPAREN
output	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
outputPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
foldToASCII	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
input	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
maxSizeNeeded	TokenNameIdentifier
=	TokenNameEQUAL
4	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
length	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
output	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
<	TokenNameLESS
maxSizeNeeded	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
ArrayUtil	TokenNameIdentifier
.	TokenNameDOT
oversize	TokenNameIdentifier
(	TokenNameLPAREN
maxSizeNeeded	TokenNameIdentifier
,	TokenNameCOMMA
RamUsageEstimator	TokenNameIdentifier
.	TokenNameDOT
NUM_BYTES_CHAR	TokenNameIdentifier
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
}	TokenNameRBRACE
outputPos	TokenNameIdentifier
=	TokenNameEQUAL
foldToASCII	TokenNameIdentifier
(	TokenNameLPAREN
input	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
output	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
foldToASCII	TokenNameIdentifier
(	TokenNameLPAREN
char	TokenNamechar
input	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
inputPos	TokenNameIdentifier
,	TokenNameCOMMA
char	TokenNamechar
output	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
outputPos	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
inputPos	TokenNameIdentifier
+	TokenNamePLUS
length	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
pos	TokenNameIdentifier
=	TokenNameEQUAL
inputPos	TokenNameIdentifier
;	TokenNameSEMICOLON
pos	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
++	TokenNamePLUS_PLUS
pos	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
char	TokenNamechar
c	TokenNameIdentifier
=	TokenNameEQUAL
input	TokenNameIdentifier
[	TokenNameLBRACKET
pos	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
c	TokenNameIdentifier
<	TokenNameLESS
''	TokenNameCharacterLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
c	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
c	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
'À'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Á'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Â'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ã'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ä'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Å'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ā'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ă'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ą'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ə'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǎ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⱥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴀ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ạ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ả'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ấ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ầ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ậ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ắ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ằ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ặ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓐ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ａ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'A'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'à'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'á'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'â'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ã'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ä'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'å'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ā'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ă'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ą'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǎ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɐ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ə'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɚ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẚ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ạ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ả'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ấ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ầ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ậ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ắ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ằ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ặ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ₐ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ₔ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓐ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɐ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ａ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ꜳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'A'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'A'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Æ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'A'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'E'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ꜵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'A'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'O'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ꜷ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'A'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'U'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ꜹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꜻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'A'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'V'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ꜽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'A'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'Y'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒜'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ꜳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'æ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴂ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'e'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ꜵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'o'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ꜷ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'u'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ꜹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꜻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'v'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ꜽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'a'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'y'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ɓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ƃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ƀ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｂ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'B'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ƀ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ƃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵬ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶀ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｂ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'b'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒝'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'b'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ç'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ć'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ĉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ċ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Č'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ƈ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȼ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴄ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓒ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'C'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ç'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ć'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ĉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ċ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'č'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ƈ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȼ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ↄ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓒ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꜿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꜿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'c'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒞'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'c'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ð'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ď'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Đ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɖ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ƌ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴆ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝺ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｄ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'D'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ð'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ď'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'đ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ƌ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɖ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝺ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｄ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'd'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ǆ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'D'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'Z'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ǅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǲ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'D'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'z'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒟'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'd'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ȸ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'd'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'b'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ǆ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'd'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'z'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'È'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'É'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ê'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ë'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ē'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ĕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ė'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ę'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ě'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ế'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ề'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ể'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ễ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ệ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓔ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'E'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'è'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'é'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ê'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ë'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ē'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ĕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ė'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ę'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ě'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɘ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɜ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɞ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʚ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴈ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶒ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶔ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ế'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ề'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ể'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ễ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ệ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ₑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓔ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱸ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'e'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒠'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'e'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ƒ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꜰ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝼ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꟻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｆ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'F'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ƒ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵮ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶂ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝼ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｆ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒡'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ﬀ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ﬃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'i'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ﬄ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'l'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ﬁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'i'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ﬂ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'f'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'l'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ĝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ğ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ġ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ģ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɠ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɢ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓖ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ᵹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'G'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ĝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ğ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ġ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ģ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɠ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵷ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓖ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'g'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒢'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'g'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ĥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ħ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʜ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⱨ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⱶ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｈ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'H'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ĥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ħ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɦ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʮ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʯ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẖ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱨ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱶ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｈ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'h'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ƕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'H'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'V'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒣'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'h'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ƕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'h'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'v'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ì'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Í'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Î'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ï'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ĩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ī'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ĭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Į'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'İ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɨ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǐ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɪ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḯ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ỉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ị'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓘ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꟾ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'I'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ì'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'í'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'î'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ï'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ĩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ī'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ĭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'į'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ı'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǐ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɨ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵢ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵼ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶖ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḯ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ỉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ị'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⁱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓘ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'i'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ĳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'I'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'J'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒤'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'i'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ĳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'i'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'j'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ĵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴊ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｊ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'J'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ĵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǰ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȷ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʄ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱼ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｊ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'j'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒥'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'j'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ķ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ƙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓚ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⱪ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'K'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ķ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ƙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʞ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶄ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓚ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱪ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'k'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒦'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'k'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ĺ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ļ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ľ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ŀ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ł'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ƚ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴌ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḷ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⱡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꞁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｌ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'L'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ĺ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ļ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ľ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ŀ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ł'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ƚ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȴ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɬ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḷ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꞁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｌ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'l'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ǉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'L'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'J'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ỻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'L'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'L'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ǈ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'L'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'j'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒧'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'l'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ǉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'l'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'j'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ỻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'l'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'l'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ʪ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'l'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
's'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ʫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'l'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'z'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ɯ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ḿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓜ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꟽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꟿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'M'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ɯ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɰ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵯ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶆ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ḿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓜ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'm'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒨'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'm'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ñ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ń'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ņ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ň'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ŋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɲ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ƞ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɴ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴎ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｎ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'N'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ñ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ń'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ņ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ň'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ŉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ŋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ƞ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɲ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵰ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⁿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｎ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'n'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ǌ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'N'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'J'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ǋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'N'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'j'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒩'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'n'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ǌ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'n'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'j'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ò'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ó'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ô'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Õ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ö'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ø'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ō'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ŏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ő'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɔ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ơ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǒ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȯ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴐ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ọ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ỏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ố'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ồ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ổ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ỗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ộ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ớ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ờ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ở'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ỡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ợ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓞ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'O'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ò'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ó'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ô'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'õ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ö'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ø'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ō'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ŏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ő'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ơ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǒ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȯ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɔ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴖ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ọ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ỏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ố'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ồ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ổ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ỗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ộ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ớ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ờ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ở'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ỡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ợ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ₒ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓞ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱺ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'o'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Œ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɶ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'O'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'E'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ꝏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'O'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'O'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ȣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'O'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'U'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒪'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'o'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'œ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴔ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'o'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'e'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ꝏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'o'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'o'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ȣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'o'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'u'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ƥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴘ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ᵽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｐ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'P'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ƥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶈ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꟼ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｐ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'p'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒫'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'p'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ɋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓠ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'Q'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ĸ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʠ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓠ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'q'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒬'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'q'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ȹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'q'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'p'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ŕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ŗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ř'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʀ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴚ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꞃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｒ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'R'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ŕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ŗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ř'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɼ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɾ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵲ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꞃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｒ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'r'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒭'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'r'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ś'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ŝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ş'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Š'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ș'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓢ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꜱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꞅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'S'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ś'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ŝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ş'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'š'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ſ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ș'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʂ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵴ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶊ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẜ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓢ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꞅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
's'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ẞ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'S'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'S'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒮'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
's'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ß'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
's'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
's'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ﬆ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
's'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
't'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ţ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ť'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ŧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ƭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ʈ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ț'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⱦ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴛ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṯ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꞇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｔ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'T'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ţ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ť'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ŧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ƫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ƭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ț'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȶ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʈ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṯ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱦ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｔ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
't'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Þ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'T'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'H'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ꜩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'T'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'Z'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒯'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
't'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ʨ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
't'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'c'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'þ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵺ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
't'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'h'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ʦ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
't'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
's'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ꜩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
't'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'z'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ù'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ú'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Û'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ü'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ũ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ū'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ŭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ů'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ű'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ų'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ư'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǔ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǖ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǘ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǚ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ǜ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ʉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴜ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵾ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṷ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ụ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ủ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ứ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ừ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ử'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ữ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ự'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓤ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'U'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ù'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ú'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'û'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ü'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ũ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ū'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ŭ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ů'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ű'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ų'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ư'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǔ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǖ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǘ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǚ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ǜ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵤ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṷ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṻ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ụ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ủ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ứ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ừ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ử'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ữ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ự'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓤ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'u'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒰'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'u'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ᵫ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'u'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'e'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ʋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ʌ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴠ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ṿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ỽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｖ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'V'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ʋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʌ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶌ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṽ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ṿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱱ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱴ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝟ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｖ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'v'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ꝡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'V'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'Y'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒱'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'v'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ꝡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'v'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'y'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ŵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ƿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴡ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓦ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⱳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'W'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ŵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ƿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẁ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẃ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẅ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẇ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẉ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẘ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓦ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｗ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'w'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒲'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'w'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ẋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｘ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'X'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ᶍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẋ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẍ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ₓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓧ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｘ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'x'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒳'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'x'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ý'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ŷ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ÿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ƴ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ɏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ỳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ỵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ỷ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ỹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ỿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓨ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'Y'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ý'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ÿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ŷ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ƴ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʎ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẏ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ỳ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ỵ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ỷ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ỹ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ỿ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓨ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｙ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'y'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒴'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'y'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'Ź'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ż'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ž'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ƶ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ȥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᴢ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ẕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⓩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ⱬ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ꝣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'Ｚ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'Z'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'ź'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ż'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ž'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ƶ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȝ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ȥ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ɀ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʐ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ʑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᵶ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ᶎ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẑ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẓ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ẕ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⓩ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ⱬ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ꝣ'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'ｚ'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'z'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒵'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'z'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁰'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₀'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓪'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓿'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'０'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'0'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'¹'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₁'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'①'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓵'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❶'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➀'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➊'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'１'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒈'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑴'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'²'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₂'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'②'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓶'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❷'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➁'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➋'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'２'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'2'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒉'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'2'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑵'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'2'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'³'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₃'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'③'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓷'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❸'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➂'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➌'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'３'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'3'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒊'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'3'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑶'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'3'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁴'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₄'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'④'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓸'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❹'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➃'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➍'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'４'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'4'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒋'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'4'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑷'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'4'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁵'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₅'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⑤'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓹'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❺'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➄'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➎'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'５'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'5'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒌'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'5'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑸'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'5'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁶'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₆'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⑥'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓺'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❻'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➅'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➏'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'６'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'6'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒍'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'6'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑹'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'6'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁷'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₇'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⑦'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓻'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❼'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➆'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➐'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'７'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'7'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒎'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'7'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑺'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'7'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁸'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₈'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⑧'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓼'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❽'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➇'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➑'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'８'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'8'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒏'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'8'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑻'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'8'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁹'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₉'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⑨'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓽'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❾'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➈'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➒'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'９'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'9'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒐'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'9'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑼'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'9'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑩'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓾'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❿'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➉'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'➓'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'0'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒑'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'0'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑽'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'0'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑪'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓫'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒒'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑾'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑫'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓬'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'2'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒓'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'2'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑿'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'2'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑬'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓭'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'3'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒔'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'3'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒀'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'3'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑭'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓮'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'4'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒕'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'4'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒁'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'4'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑮'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓯'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'5'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒖'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'5'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒂'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'5'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑯'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓰'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'6'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒗'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'6'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒃'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'6'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑰'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓱'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'7'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒘'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'7'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒄'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'7'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑱'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓲'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'8'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒙'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'8'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒅'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'8'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑲'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓳'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'9'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒚'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'9'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒆'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'1'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'9'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⑳'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⓴'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'2'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'0'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒛'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'2'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'0'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⒇'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'2'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'0'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'«'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'»'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'“'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'”'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'„'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'″'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'‶'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❝'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❞'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❮'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❯'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'＂'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'"'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'‘'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'’'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'‚'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'‛'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'′'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'‵'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'‹'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'›'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❛'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❜'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'＇'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'\''	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'‐'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'‑'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'‒'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'–'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'—'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'⁻'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₋'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'－'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'-'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁅'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❲'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'［'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'['	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁆'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❳'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'］'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
']'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁽'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₍'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❨'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❪'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'（'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⸨'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'('	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁾'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₎'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❩'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❫'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'）'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⸩'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
')'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'❬'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❰'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'＜'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'<'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'❭'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'❱'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'＞'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'>'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'❴'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'｛'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'{'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'❵'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'｝'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'}'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁺'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₊'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'＋'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'+'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁼'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'₌'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'＝'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'='	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'！'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'!'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'‼'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'!'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'!'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁉'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'!'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'?'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'＃'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'#'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'＄'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'$'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁒'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'％'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'%'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'＆'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'&'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁎'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'＊'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'*'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'，'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
','	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'．'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'.'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁄'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'／'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'/'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'：'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
':'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁏'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'；'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
';'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'？'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'?'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁇'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'?'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'?'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁈'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'?'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'!'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'＠'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'@'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'＼'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'\\'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'‸'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'＾'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'^'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'＿'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'_'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
'⁓'	TokenNameCharacterLiteral
:	TokenNameCOLON
case	TokenNamecase
'～'	TokenNameCharacterLiteral
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
'~'	TokenNameCharacterLiteral
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
output	TokenNameIdentifier
[	TokenNameLBRACKET
outputPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
c	TokenNameIdentifier
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
outputPos	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
