package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
packed	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
store	TokenNameIdentifier
.	TokenNameDOT
DataInput	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
RamUsageEstimator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Arrays	TokenNameIdentifier
;	TokenNameSEMICOLON
class	TokenNameclass
Packed64	TokenNameIdentifier
extends	TokenNameextends
PackedInts	TokenNameIdentifier
.	TokenNameDOT
ReaderImpl	TokenNameIdentifier
implements	TokenNameimplements
PackedInts	TokenNameIdentifier
.	TokenNameDOT
Mutable	TokenNameIdentifier
{	TokenNameLBRACE
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
BLOCK_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
64	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
BLOCK_BITS	TokenNameIdentifier
=	TokenNameEQUAL
6	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
MOD_MASK	TokenNameIdentifier
=	TokenNameEQUAL
BLOCK_SIZE	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
ENTRY_SIZE	TokenNameIdentifier
=	TokenNameEQUAL
BLOCK_SIZE	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
FAC_BITPOS	TokenNameIdentifier
=	TokenNameEQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
SHIFTS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
ENTRY_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
ENTRY_SIZE	TokenNameIdentifier
*	TokenNameMULTIPLY
FAC_BITPOS	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
MASKS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
ENTRY_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
ENTRY_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
elementBits	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
elementBits	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
BLOCK_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
elementBits	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
bitPos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bitPos	TokenNameIdentifier
<	TokenNameLESS
BLOCK_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
bitPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
currentShifts	TokenNameIdentifier
=	TokenNameEQUAL
SHIFTS	TokenNameIdentifier
[	TokenNameLBRACKET
elementBits	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
base	TokenNameIdentifier
=	TokenNameEQUAL
bitPos	TokenNameIdentifier
*	TokenNameMULTIPLY
FAC_BITPOS	TokenNameIdentifier
;	TokenNameSEMICOLON
currentShifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
bitPos	TokenNameIdentifier
;	TokenNameSEMICOLON
currentShifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
BLOCK_SIZE	TokenNameIdentifier
-	TokenNameMINUS
elementBits	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
bitPos	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
BLOCK_SIZE	TokenNameIdentifier
-	TokenNameMINUS
elementBits	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
currentShifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
MASKS	TokenNameIdentifier
[	TokenNameLBRACKET
elementBits	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
bitPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
int	TokenNameint
rBits	TokenNameIdentifier
=	TokenNameEQUAL
elementBits	TokenNameIdentifier
-	TokenNameMINUS
(	TokenNameLPAREN
BLOCK_SIZE	TokenNameIdentifier
-	TokenNameMINUS
bitPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentShifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
BLOCK_SIZE	TokenNameIdentifier
-	TokenNameMINUS
rBits	TokenNameIdentifier
;	TokenNameSEMICOLON
MASKS	TokenNameIdentifier
[	TokenNameLBRACKET
elementBits	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
bitPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
~	TokenNameTWIDDLE
(	TokenNameLPAREN
~	TokenNameTWIDDLE
0L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
rBits	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
WRITE_MASKS	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
ENTRY_SIZE	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
ENTRY_SIZE	TokenNameIdentifier
*	TokenNameMULTIPLY
FAC_BITPOS	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
static	TokenNamestatic
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
elementBits	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
elementBits	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
BLOCK_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
elementBits	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
elementPosMask	TokenNameIdentifier
=	TokenNameEQUAL
~	TokenNameTWIDDLE
(	TokenNameLPAREN
~	TokenNameTWIDDLE
0L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
elementBits	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
currentShifts	TokenNameIdentifier
=	TokenNameEQUAL
SHIFTS	TokenNameIdentifier
[	TokenNameLBRACKET
elementBits	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
currentMasks	TokenNameIdentifier
=	TokenNameEQUAL
WRITE_MASKS	TokenNameIdentifier
[	TokenNameLBRACKET
elementBits	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
bitPos	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
bitPos	TokenNameIdentifier
<	TokenNameLESS
BLOCK_SIZE	TokenNameIdentifier
;	TokenNameSEMICOLON
bitPos	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
base	TokenNameIdentifier
=	TokenNameEQUAL
bitPos	TokenNameIdentifier
*	TokenNameMULTIPLY
FAC_BITPOS	TokenNameIdentifier
;	TokenNameSEMICOLON
currentMasks	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
~	TokenNameTWIDDLE
(	TokenNameLPAREN
(	TokenNameLPAREN
elementPosMask	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
currentShifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
currentShifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
bitPos	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
BLOCK_SIZE	TokenNameIdentifier
-	TokenNameMINUS
elementBits	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
currentMasks	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
~	TokenNameTWIDDLE
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
currentMasks	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
currentMasks	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
~	TokenNameTWIDDLE
(	TokenNameLPAREN
elementPosMask	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
currentShifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
currentMasks	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
currentShifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
~	TokenNameTWIDDLE
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
blocks	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
maxPos	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
shifts	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
readMasks	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
writeMasks	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
Packed64	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
valueCount	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
valueCount	TokenNameIdentifier
*	TokenNameMULTIPLY
bitsPerValue	TokenNameIdentifier
/	TokenNameDIVIDE
BLOCK_SIZE	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
]	TokenNameRBRACKET
,	TokenNameCOMMA
valueCount	TokenNameIdentifier
,	TokenNameCOMMA
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Packed64	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
blocks	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
valueCount	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
valueCount	TokenNameIdentifier
,	TokenNameCOMMA
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
blocks	TokenNameIdentifier
=	TokenNameEQUAL
blocks	TokenNameIdentifier
;	TokenNameSEMICOLON
updateCached	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
Packed64	TokenNameIdentifier
(	TokenNameLPAREN
DataInput	TokenNameIdentifier
in	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
valueCount	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
valueCount	TokenNameIdentifier
,	TokenNameCOMMA
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
size	TokenNameIdentifier
=	TokenNameEQUAL
size	TokenNameIdentifier
(	TokenNameLPAREN
valueCount	TokenNameIdentifier
,	TokenNameCOMMA
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
blocks	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
size	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
blocks	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
in	TokenNameIdentifier
.	TokenNameDOT
readLong	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
updateCached	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
size	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
valueCount	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
long	TokenNamelong
totBitCount	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
valueCount	TokenNameIdentifier
*	TokenNameMULTIPLY
bitsPerValue	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
totBitCount	TokenNameIdentifier
/	TokenNameDIVIDE
64	TokenNameIntegerLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
(	TokenNameLPAREN
totBitCount	TokenNameIdentifier
%	TokenNameREMAINDER
64	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
?	TokenNameQUESTION
0	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
updateCached	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
readMasks	TokenNameIdentifier
=	TokenNameEQUAL
MASKS	TokenNameIdentifier
[	TokenNameLBRACKET
bitsPerValue	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
shifts	TokenNameIdentifier
=	TokenNameEQUAL
SHIFTS	TokenNameIdentifier
[	TokenNameLBRACKET
bitsPerValue	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
writeMasks	TokenNameIdentifier
=	TokenNameEQUAL
WRITE_MASKS	TokenNameIdentifier
[	TokenNameLBRACKET
bitsPerValue	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
maxPos	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
blocks	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
*	TokenNameMULTIPLY
BLOCK_SIZE	TokenNameIdentifier
/	TokenNameDIVIDE
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
long	TokenNamelong
get	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
index	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
index	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
index	TokenNameIdentifier
<	TokenNameLESS
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
long	TokenNamelong
majorBitPos	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
index	TokenNameIdentifier
*	TokenNameMULTIPLY
bitsPerValue	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
elementPos	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
majorBitPos	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
BLOCK_BITS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
bitPos	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
majorBitPos	TokenNameIdentifier
&	TokenNameAND
MOD_MASK	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
base	TokenNameIdentifier
=	TokenNameEQUAL
bitPos	TokenNameIdentifier
*	TokenNameMULTIPLY
FAC_BITPOS	TokenNameIdentifier
;	TokenNameSEMICOLON
assert	TokenNameassert
elementPos	TokenNameIdentifier
<	TokenNameLESS
blocks	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
:	TokenNameCOLON
"elementPos: "	TokenNameStringLiteral
+	TokenNamePLUS
elementPos	TokenNameIdentifier
+	TokenNamePLUS
"; blocks.len: "	TokenNameStringLiteral
+	TokenNamePLUS
blocks	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
(	TokenNameLPAREN
(	TokenNameLPAREN
blocks	TokenNameIdentifier
[	TokenNameLBRACKET
elementPos	TokenNameIdentifier
]	TokenNameRBRACKET
<<	TokenNameLEFT_SHIFT
shifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
shifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
blocks	TokenNameIdentifier
[	TokenNameLBRACKET
elementPos	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
shifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
&	TokenNameAND
readMasks	TokenNameIdentifier
[	TokenNameLBRACKET
bitPos	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
set	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
index	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
long	TokenNamelong
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
long	TokenNamelong
majorBitPos	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
index	TokenNameIdentifier
*	TokenNameMULTIPLY
bitsPerValue	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
elementPos	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
majorBitPos	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
BLOCK_BITS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
bitPos	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
majorBitPos	TokenNameIdentifier
&	TokenNameAND
MOD_MASK	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
base	TokenNameIdentifier
=	TokenNameEQUAL
bitPos	TokenNameIdentifier
*	TokenNameMULTIPLY
FAC_BITPOS	TokenNameIdentifier
;	TokenNameSEMICOLON
blocks	TokenNameIdentifier
[	TokenNameLBRACKET
elementPos	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
blocks	TokenNameIdentifier
[	TokenNameLBRACKET
elementPos	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
writeMasks	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
value	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
shifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
shifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
blocks	TokenNameIdentifier
[	TokenNameLBRACKET
elementPos	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
blocks	TokenNameIdentifier
[	TokenNameLBRACKET
elementPos	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
&	TokenNameAND
writeMasks	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
(	TokenNameLPAREN
value	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
shifts	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
&	TokenNameAND
writeMasks	TokenNameIdentifier
[	TokenNameLBRACKET
base	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"Packed64(bitsPerValue="	TokenNameStringLiteral
+	TokenNamePLUS
bitsPerValue	TokenNameIdentifier
+	TokenNamePLUS
", size="	TokenNameStringLiteral
+	TokenNamePLUS
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
", maxPos="	TokenNameStringLiteral
+	TokenNamePLUS
maxPos	TokenNameIdentifier
+	TokenNamePLUS
", elements.length="	TokenNameStringLiteral
+	TokenNamePLUS
blocks	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
long	TokenNamelong
ramBytesUsed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
RamUsageEstimator	TokenNameIdentifier
.	TokenNameDOT
sizeOf	TokenNameIdentifier
(	TokenNameLPAREN
blocks	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
clear	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Arrays	TokenNameIdentifier
.	TokenNameDOT
fill	TokenNameIdentifier
(	TokenNameLPAREN
blocks	TokenNameIdentifier
,	TokenNameCOMMA
0L	TokenNameLongLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
