package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
packed	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
store	TokenNameIdentifier
.	TokenNameDOT
DataOutput	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
class	TokenNameclass
PackedWriter	TokenNameIdentifier
extends	TokenNameextends
PackedInts	TokenNameIdentifier
.	TokenNameDOT
Writer	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
long	TokenNamelong
pending	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
pendingBitPos	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
final	TokenNamefinal
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
masks	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
int	TokenNameint
written	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
public	TokenNamepublic
PackedWriter	TokenNameIdentifier
(	TokenNameLPAREN
DataOutput	TokenNameIdentifier
out	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
valueCount	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
out	TokenNameIdentifier
,	TokenNameCOMMA
valueCount	TokenNameIdentifier
,	TokenNameCOMMA
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pendingBitPos	TokenNameIdentifier
=	TokenNameEQUAL
64	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
masks	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
bitsPerValue	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
long	TokenNamelong
v	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
bitsPerValue	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
v	TokenNameIdentifier
*=	TokenNameMULTIPLY_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
masks	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
v	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
add	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
v	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
assert	TokenNameassert
v	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
PackedInts	TokenNameIdentifier
.	TokenNameDOT
maxValue	TokenNameIdentifier
(	TokenNameLPAREN
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
"v="	TokenNameStringLiteral
+	TokenNamePLUS
v	TokenNameIdentifier
+	TokenNamePLUS
" maxValue="	TokenNameStringLiteral
+	TokenNamePLUS
PackedInts	TokenNameIdentifier
.	TokenNameDOT
maxValue	TokenNameIdentifier
(	TokenNameLPAREN
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assert	TokenNameassert
v	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
pendingBitPos	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
pending	TokenNameIdentifier
|=	TokenNameOR_EQUAL
v	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
pendingBitPos	TokenNameIdentifier
-	TokenNameMINUS
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
pendingBitPos	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
bitsPerValue	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
pending	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pending	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
pendingBitPos	TokenNameIdentifier
=	TokenNameEQUAL
64	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
pendingBitPos	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
bitsPerValue	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
pending	TokenNameIdentifier
|=	TokenNameOR_EQUAL
(	TokenNameLPAREN
v	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
(	TokenNameLPAREN
bitsPerValue	TokenNameIdentifier
-	TokenNameMINUS
pendingBitPos	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
&	TokenNameAND
masks	TokenNameIdentifier
[	TokenNameLBRACKET
pendingBitPos	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
out	TokenNameIdentifier
.	TokenNameDOT
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
pending	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
pendingBitPos	TokenNameIdentifier
=	TokenNameEQUAL
64	TokenNameIntegerLiteral
-	TokenNameMINUS
bitsPerValue	TokenNameIdentifier
+	TokenNamePLUS
pendingBitPos	TokenNameIdentifier
;	TokenNameSEMICOLON
pending	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
v	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
pendingBitPos	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
written	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
finish	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
while	TokenNamewhile
(	TokenNameLPAREN
written	TokenNameIdentifier
<	TokenNameLESS
valueCount	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
add	TokenNameIdentifier
(	TokenNameLPAREN
0L	TokenNameLongLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
pendingBitPos	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
64	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
writeLong	TokenNameIdentifier
(	TokenNameLPAREN
pending	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"PackedWriter(written "	TokenNameStringLiteral
+	TokenNamePLUS
written	TokenNameIdentifier
+	TokenNamePLUS
"/"	TokenNameStringLiteral
+	TokenNamePLUS
valueCount	TokenNameIdentifier
+	TokenNamePLUS
" with "	TokenNameStringLiteral
+	TokenNamePLUS
bitsPerValue	TokenNameIdentifier
+	TokenNamePLUS
" bits/value)"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
