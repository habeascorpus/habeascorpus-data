package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
IndexReader	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
NumericUtils	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
document	TokenNameIdentifier
.	TokenNameDOT
NumericField	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
abstract	TokenNameabstract
class	TokenNameclass
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
extends	TokenNameextends
Filter	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
String	TokenNameIdentifier
field	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
FieldCache	TokenNameIdentifier
.	TokenNameDOT
Parser	TokenNameIdentifier
parser	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
T	TokenNameIdentifier
lowerVal	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
T	TokenNameIdentifier
upperVal	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
FieldCacheRangeFilter	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
FieldCache	TokenNameIdentifier
.	TokenNameDOT
Parser	TokenNameIdentifier
parser	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
field	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
parser	TokenNameIdentifier
=	TokenNameEQUAL
parser	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
lowerVal	TokenNameIdentifier
=	TokenNameEQUAL
lowerVal	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
upperVal	TokenNameIdentifier
=	TokenNameEQUAL
upperVal	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
includeLower	TokenNameIdentifier
=	TokenNameEQUAL
includeLower	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
includeUpper	TokenNameIdentifier
=	TokenNameEQUAL
includeUpper	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
abstract	TokenNameabstract
DocIdSet	TokenNameIdentifier
getDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
newStringRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
DocIdSet	TokenNameIdentifier
getDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
FieldCache	TokenNameIdentifier
.	TokenNameDOT
StringIndex	TokenNameIdentifier
fcsi	TokenNameIdentifier
=	TokenNameEQUAL
FieldCache	TokenNameIdentifier
.	TokenNameDOT
DEFAULT	TokenNameIdentifier
.	TokenNameDOT
getStringIndex	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
lowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
fcsi	TokenNameIdentifier
.	TokenNameDOT
binarySearchLookup	TokenNameIdentifier
(	TokenNameLPAREN
lowerVal	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
upperPoint	TokenNameIdentifier
=	TokenNameEQUAL
fcsi	TokenNameIdentifier
.	TokenNameDOT
binarySearchLookup	TokenNameIdentifier
(	TokenNameLPAREN
upperVal	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
inclusiveLowerPoint	TokenNameIdentifier
,	TokenNameCOMMA
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowerPoint	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
lowerVal	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
includeLower	TokenNameIdentifier
&&	TokenNameAND_AND
lowerPoint	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
lowerPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
lowerPoint	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
lowerPoint	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
lowerPoint	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
upperPoint	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
upperVal	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
includeUpper	TokenNameIdentifier
&&	TokenNameAND_AND
upperPoint	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
upperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
upperPoint	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
upperPoint	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
upperPoint	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
inclusiveUpperPoint	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
0	TokenNameIntegerLiteral
||	TokenNameOR_OR
inclusiveLowerPoint	TokenNameIdentifier
>	TokenNameGREATER
inclusiveUpperPoint	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
assert	TokenNameassert
inclusiveLowerPoint	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
&&	TokenNameAND_AND
inclusiveUpperPoint	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
FieldCacheDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
final	TokenNamefinal
boolean	TokenNameboolean
matchDoc	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
doc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
fcsi	TokenNameIdentifier
.	TokenNameDOT
order	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
>=	TokenNameGREATER_EQUAL
inclusiveLowerPoint	TokenNameIdentifier
&&	TokenNameAND_AND
fcsi	TokenNameIdentifier
.	TokenNameDOT
order	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
<=	TokenNameLESS_EQUAL
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Byte	TokenNameIdentifier
>	TokenNameGREATER
newByteRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
Byte	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
Byte	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
newByteRange	TokenNameIdentifier
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Byte	TokenNameIdentifier
>	TokenNameGREATER
newByteRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
FieldCache	TokenNameIdentifier
.	TokenNameDOT
ByteParser	TokenNameIdentifier
parser	TokenNameIdentifier
,	TokenNameCOMMA
Byte	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
Byte	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Byte	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
parser	TokenNameIdentifier
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
DocIdSet	TokenNameIdentifier
getDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
byte	TokenNamebyte
inclusiveLowerPoint	TokenNameIdentifier
,	TokenNameCOMMA
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowerVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
byte	TokenNamebyte
i	TokenNameIdentifier
=	TokenNameEQUAL
lowerVal	TokenNameIdentifier
.	TokenNameDOT
byteValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
includeLower	TokenNameIdentifier
&&	TokenNameAND_AND
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Byte	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
includeLower	TokenNameIdentifier
?	TokenNameQUESTION
i	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
Byte	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
upperVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
byte	TokenNamebyte
i	TokenNameIdentifier
=	TokenNameEQUAL
upperVal	TokenNameIdentifier
.	TokenNameDOT
byteValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
includeUpper	TokenNameIdentifier
&&	TokenNameAND_AND
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Byte	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
byte	TokenNamebyte
)	TokenNameRPAREN
(	TokenNameLPAREN
includeUpper	TokenNameIdentifier
?	TokenNameQUESTION
i	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
Byte	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
inclusiveLowerPoint	TokenNameIdentifier
>	TokenNameGREATER
inclusiveUpperPoint	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
values	TokenNameIdentifier
=	TokenNameEQUAL
FieldCache	TokenNameIdentifier
.	TokenNameDOT
DEFAULT	TokenNameIdentifier
.	TokenNameDOT
getBytes	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
FieldCache	TokenNameIdentifier
.	TokenNameDOT
ByteParser	TokenNameIdentifier
)	TokenNameRPAREN
parser	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
FieldCacheDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
matchDoc	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
doc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
values	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
>=	TokenNameGREATER_EQUAL
inclusiveLowerPoint	TokenNameIdentifier
&&	TokenNameAND_AND
values	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
<=	TokenNameLESS_EQUAL
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Short	TokenNameIdentifier
>	TokenNameGREATER
newShortRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
Short	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
Short	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
newShortRange	TokenNameIdentifier
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Short	TokenNameIdentifier
>	TokenNameGREATER
newShortRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
FieldCache	TokenNameIdentifier
.	TokenNameDOT
ShortParser	TokenNameIdentifier
parser	TokenNameIdentifier
,	TokenNameCOMMA
Short	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
Short	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Short	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
parser	TokenNameIdentifier
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
DocIdSet	TokenNameIdentifier
getDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
short	TokenNameshort
inclusiveLowerPoint	TokenNameIdentifier
,	TokenNameCOMMA
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowerVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
short	TokenNameshort
i	TokenNameIdentifier
=	TokenNameEQUAL
lowerVal	TokenNameIdentifier
.	TokenNameDOT
shortValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
includeLower	TokenNameIdentifier
&&	TokenNameAND_AND
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Short	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
includeLower	TokenNameIdentifier
?	TokenNameQUESTION
i	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
Short	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
upperVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
short	TokenNameshort
i	TokenNameIdentifier
=	TokenNameEQUAL
upperVal	TokenNameIdentifier
.	TokenNameDOT
shortValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
includeUpper	TokenNameIdentifier
&&	TokenNameAND_AND
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Short	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
short	TokenNameshort
)	TokenNameRPAREN
(	TokenNameLPAREN
includeUpper	TokenNameIdentifier
?	TokenNameQUESTION
i	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
Short	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
inclusiveLowerPoint	TokenNameIdentifier
>	TokenNameGREATER
inclusiveUpperPoint	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
short	TokenNameshort
[	TokenNameLBRACKET
]	TokenNameRBRACKET
values	TokenNameIdentifier
=	TokenNameEQUAL
FieldCache	TokenNameIdentifier
.	TokenNameDOT
DEFAULT	TokenNameIdentifier
.	TokenNameDOT
getShorts	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
FieldCache	TokenNameIdentifier
.	TokenNameDOT
ShortParser	TokenNameIdentifier
)	TokenNameRPAREN
parser	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
FieldCacheDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
matchDoc	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
doc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
values	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
>=	TokenNameGREATER_EQUAL
inclusiveLowerPoint	TokenNameIdentifier
&&	TokenNameAND_AND
values	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
<=	TokenNameLESS_EQUAL
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
newIntRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
newIntRange	TokenNameIdentifier
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
newIntRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
FieldCache	TokenNameIdentifier
.	TokenNameDOT
IntParser	TokenNameIdentifier
parser	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
parser	TokenNameIdentifier
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
DocIdSet	TokenNameIdentifier
getDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
inclusiveLowerPoint	TokenNameIdentifier
,	TokenNameCOMMA
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowerVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
lowerVal	TokenNameIdentifier
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
includeLower	TokenNameIdentifier
&&	TokenNameAND_AND
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
includeLower	TokenNameIdentifier
?	TokenNameQUESTION
i	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
upperVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
upperVal	TokenNameIdentifier
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
includeUpper	TokenNameIdentifier
&&	TokenNameAND_AND
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
includeUpper	TokenNameIdentifier
?	TokenNameQUESTION
i	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
inclusiveLowerPoint	TokenNameIdentifier
>	TokenNameGREATER
inclusiveUpperPoint	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
values	TokenNameIdentifier
=	TokenNameEQUAL
FieldCache	TokenNameIdentifier
.	TokenNameDOT
DEFAULT	TokenNameIdentifier
.	TokenNameDOT
getInts	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
FieldCache	TokenNameIdentifier
.	TokenNameDOT
IntParser	TokenNameIdentifier
)	TokenNameRPAREN
parser	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
FieldCacheDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
matchDoc	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
doc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
values	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
>=	TokenNameGREATER_EQUAL
inclusiveLowerPoint	TokenNameIdentifier
&&	TokenNameAND_AND
values	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
<=	TokenNameLESS_EQUAL
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Long	TokenNameIdentifier
>	TokenNameGREATER
newLongRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
newLongRange	TokenNameIdentifier
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Long	TokenNameIdentifier
>	TokenNameGREATER
newLongRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
FieldCache	TokenNameIdentifier
.	TokenNameDOT
LongParser	TokenNameIdentifier
parser	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Long	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
parser	TokenNameIdentifier
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
DocIdSet	TokenNameIdentifier
getDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
long	TokenNamelong
inclusiveLowerPoint	TokenNameIdentifier
,	TokenNameCOMMA
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowerVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
i	TokenNameIdentifier
=	TokenNameEQUAL
lowerVal	TokenNameIdentifier
.	TokenNameDOT
longValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
includeLower	TokenNameIdentifier
&&	TokenNameAND_AND
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
includeLower	TokenNameIdentifier
?	TokenNameQUESTION
i	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1L	TokenNameLongLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
upperVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
i	TokenNameIdentifier
=	TokenNameEQUAL
upperVal	TokenNameIdentifier
.	TokenNameDOT
longValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
includeUpper	TokenNameIdentifier
&&	TokenNameAND_AND
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
includeUpper	TokenNameIdentifier
?	TokenNameQUESTION
i	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
-	TokenNameMINUS
1L	TokenNameLongLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
inclusiveLowerPoint	TokenNameIdentifier
>	TokenNameGREATER
inclusiveUpperPoint	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
values	TokenNameIdentifier
=	TokenNameEQUAL
FieldCache	TokenNameIdentifier
.	TokenNameDOT
DEFAULT	TokenNameIdentifier
.	TokenNameDOT
getLongs	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
FieldCache	TokenNameIdentifier
.	TokenNameDOT
LongParser	TokenNameIdentifier
)	TokenNameRPAREN
parser	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
FieldCacheDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
matchDoc	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
doc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
values	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
>=	TokenNameGREATER_EQUAL
inclusiveLowerPoint	TokenNameIdentifier
&&	TokenNameAND_AND
values	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
<=	TokenNameLESS_EQUAL
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Float	TokenNameIdentifier
>	TokenNameGREATER
newFloatRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
newFloatRange	TokenNameIdentifier
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Float	TokenNameIdentifier
>	TokenNameGREATER
newFloatRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
FieldCache	TokenNameIdentifier
.	TokenNameDOT
FloatParser	TokenNameIdentifier
parser	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Float	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
parser	TokenNameIdentifier
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
DocIdSet	TokenNameIdentifier
getDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
float	TokenNamefloat
inclusiveLowerPoint	TokenNameIdentifier
,	TokenNameCOMMA
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowerVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
float	TokenNamefloat
f	TokenNameIdentifier
=	TokenNameEQUAL
lowerVal	TokenNameIdentifier
.	TokenNameDOT
floatValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
includeUpper	TokenNameIdentifier
&&	TokenNameAND_AND
f	TokenNameIdentifier
>	TokenNameGREATER
0.0f	TokenNameFloatingPointLiteral
&&	TokenNameAND_AND
Float	TokenNameIdentifier
.	TokenNameDOT
isInfinite	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
floatToSortableInt	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
sortableIntToFloat	TokenNameIdentifier
(	TokenNameLPAREN
includeLower	TokenNameIdentifier
?	TokenNameQUESTION
i	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
Float	TokenNameIdentifier
.	TokenNameDOT
NEGATIVE_INFINITY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
upperVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
float	TokenNamefloat
f	TokenNameIdentifier
=	TokenNameEQUAL
upperVal	TokenNameIdentifier
.	TokenNameDOT
floatValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
includeUpper	TokenNameIdentifier
&&	TokenNameAND_AND
f	TokenNameIdentifier
<	TokenNameLESS
0.0f	TokenNameFloatingPointLiteral
&&	TokenNameAND_AND
Float	TokenNameIdentifier
.	TokenNameDOT
isInfinite	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
floatToSortableInt	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
sortableIntToFloat	TokenNameIdentifier
(	TokenNameLPAREN
includeUpper	TokenNameIdentifier
?	TokenNameQUESTION
i	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
Float	TokenNameIdentifier
.	TokenNameDOT
POSITIVE_INFINITY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
inclusiveLowerPoint	TokenNameIdentifier
>	TokenNameGREATER
inclusiveUpperPoint	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
values	TokenNameIdentifier
=	TokenNameEQUAL
FieldCache	TokenNameIdentifier
.	TokenNameDOT
DEFAULT	TokenNameIdentifier
.	TokenNameDOT
getFloats	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
FieldCache	TokenNameIdentifier
.	TokenNameDOT
FloatParser	TokenNameIdentifier
)	TokenNameRPAREN
parser	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
FieldCacheDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
matchDoc	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
doc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
values	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
>=	TokenNameGREATER_EQUAL
inclusiveLowerPoint	TokenNameIdentifier
&&	TokenNameAND_AND
values	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
<=	TokenNameLESS_EQUAL
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Double	TokenNameIdentifier
>	TokenNameGREATER
newDoubleRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
Double	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
Double	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
newDoubleRange	TokenNameIdentifier
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Double	TokenNameIdentifier
>	TokenNameGREATER
newDoubleRange	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
field	TokenNameIdentifier
,	TokenNameCOMMA
FieldCache	TokenNameIdentifier
.	TokenNameDOT
DoubleParser	TokenNameIdentifier
parser	TokenNameIdentifier
,	TokenNameCOMMA
Double	TokenNameIdentifier
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
Double	TokenNameIdentifier
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
FieldCacheRangeFilter	TokenNameIdentifier
<	TokenNameLESS
Double	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
field	TokenNameIdentifier
,	TokenNameCOMMA
parser	TokenNameIdentifier
,	TokenNameCOMMA
lowerVal	TokenNameIdentifier
,	TokenNameCOMMA
upperVal	TokenNameIdentifier
,	TokenNameCOMMA
includeLower	TokenNameIdentifier
,	TokenNameCOMMA
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
DocIdSet	TokenNameIdentifier
getDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
IndexReader	TokenNameIdentifier
reader	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
double	TokenNamedouble
inclusiveLowerPoint	TokenNameIdentifier
,	TokenNameCOMMA
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
lowerVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
f	TokenNameIdentifier
=	TokenNameEQUAL
lowerVal	TokenNameIdentifier
.	TokenNameDOT
doubleValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
includeUpper	TokenNameIdentifier
&&	TokenNameAND_AND
f	TokenNameIdentifier
>	TokenNameGREATER
0.0	TokenNameDoubleLiteral
&&	TokenNameAND_AND
Double	TokenNameIdentifier
.	TokenNameDOT
isInfinite	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
i	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
doubleToSortableLong	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
sortableLongToDouble	TokenNameIdentifier
(	TokenNameLPAREN
includeLower	TokenNameIdentifier
?	TokenNameQUESTION
i	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
+	TokenNamePLUS
1L	TokenNameLongLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveLowerPoint	TokenNameIdentifier
=	TokenNameEQUAL
Double	TokenNameIdentifier
.	TokenNameDOT
NEGATIVE_INFINITY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
upperVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
double	TokenNamedouble
f	TokenNameIdentifier
=	TokenNameEQUAL
upperVal	TokenNameIdentifier
.	TokenNameDOT
doubleValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
includeUpper	TokenNameIdentifier
&&	TokenNameAND_AND
f	TokenNameIdentifier
<	TokenNameLESS
0.0	TokenNameDoubleLiteral
&&	TokenNameAND_AND
Double	TokenNameIdentifier
.	TokenNameDOT
isInfinite	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
i	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
doubleToSortableLong	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
sortableLongToDouble	TokenNameIdentifier
(	TokenNameLPAREN
includeUpper	TokenNameIdentifier
?	TokenNameQUESTION
i	TokenNameIdentifier
:	TokenNameCOLON
(	TokenNameLPAREN
i	TokenNameIdentifier
-	TokenNameMINUS
1L	TokenNameLongLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
inclusiveUpperPoint	TokenNameIdentifier
=	TokenNameEQUAL
Double	TokenNameIdentifier
.	TokenNameDOT
POSITIVE_INFINITY	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
inclusiveLowerPoint	TokenNameIdentifier
>	TokenNameGREATER
inclusiveUpperPoint	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
DocIdSet	TokenNameIdentifier
.	TokenNameDOT
EMPTY_DOCIDSET	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
values	TokenNameIdentifier
=	TokenNameEQUAL
FieldCache	TokenNameIdentifier
.	TokenNameDOT
DEFAULT	TokenNameIdentifier
.	TokenNameDOT
getDoubles	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
,	TokenNameCOMMA
field	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
FieldCache	TokenNameIdentifier
.	TokenNameDOT
DoubleParser	TokenNameIdentifier
)	TokenNameRPAREN
parser	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
FieldCacheDocIdSet	TokenNameIdentifier
(	TokenNameLPAREN
reader	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
protected	TokenNameprotected
boolean	TokenNameboolean
matchDoc	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
doc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
values	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
>=	TokenNameGREATER_EQUAL
inclusiveLowerPoint	TokenNameIdentifier
&&	TokenNameAND_AND
values	TokenNameIdentifier
[	TokenNameLBRACKET
doc	TokenNameIdentifier
]	TokenNameRBRACKET
<=	TokenNameLESS_EQUAL
inclusiveUpperPoint	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
final	TokenNamefinal
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
StringBuilder	TokenNameIdentifier
sb	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuilder	TokenNameIdentifier
(	TokenNameLPAREN
field	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
":"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
sb	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
includeLower	TokenNameIdentifier
?	TokenNameQUESTION
'['	TokenNameCharacterLiteral
:	TokenNameCOLON
'{'	TokenNameCharacterLiteral
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
lowerVal	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
"*"	TokenNameStringLiteral
:	TokenNameCOLON
lowerVal	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
" TO "	TokenNameStringLiteral
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
upperVal	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
"*"	TokenNameStringLiteral
:	TokenNameCOLON
upperVal	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
includeUpper	TokenNameIdentifier
?	TokenNameQUESTION
']'	TokenNameCharacterLiteral
:	TokenNameCOLON
'}'	TokenNameCharacterLiteral
)	TokenNameRPAREN
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
@	TokenNameAT
SuppressWarnings	TokenNameIdentifier
(	TokenNameLPAREN
{	TokenNameLBRACE
"unchecked"	TokenNameStringLiteral
,	TokenNameCOMMA
"rawtypes"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
public	TokenNamepublic
final	TokenNamefinal
boolean	TokenNameboolean
equals	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
o	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
==	TokenNameEQUAL_EQUAL
o	TokenNameIdentifier
)	TokenNameRPAREN
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
o	TokenNameIdentifier
instanceof	TokenNameinstanceof
FieldCacheRangeFilter	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
FieldCacheRangeFilter	TokenNameIdentifier
other	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
FieldCacheRangeFilter	TokenNameIdentifier
)	TokenNameRPAREN
o	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
this	TokenNamethis
.	TokenNameDOT
field	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
other	TokenNameIdentifier
.	TokenNameDOT
field	TokenNameIdentifier
)	TokenNameRPAREN
||	TokenNameOR_OR
this	TokenNamethis
.	TokenNameDOT
includeLower	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
other	TokenNameIdentifier
.	TokenNameDOT
includeLower	TokenNameIdentifier
||	TokenNameOR_OR
this	TokenNamethis
.	TokenNameDOT
includeUpper	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
other	TokenNameIdentifier
.	TokenNameDOT
includeUpper	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
lowerVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
!	TokenNameNOT
this	TokenNamethis
.	TokenNameDOT
lowerVal	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
other	TokenNameIdentifier
.	TokenNameDOT
lowerVal	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
other	TokenNameIdentifier
.	TokenNameDOT
lowerVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
upperVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
!	TokenNameNOT
this	TokenNamethis
.	TokenNameDOT
upperVal	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
other	TokenNameIdentifier
.	TokenNameDOT
upperVal	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
other	TokenNameIdentifier
.	TokenNameDOT
upperVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
this	TokenNamethis
.	TokenNameDOT
parser	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
!	TokenNameNOT
this	TokenNamethis
.	TokenNameDOT
parser	TokenNameIdentifier
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
other	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
other	TokenNameIdentifier
.	TokenNameDOT
parser	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
final	TokenNamefinal
int	TokenNameint
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
h	TokenNameIdentifier
=	TokenNameEQUAL
field	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
h	TokenNameIdentifier
^=	TokenNameXOR_EQUAL
(	TokenNameLPAREN
lowerVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
lowerVal	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
550356204	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
h	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
h	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
|	TokenNameOR
(	TokenNameLPAREN
h	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
31	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
h	TokenNameIdentifier
^=	TokenNameXOR_EQUAL
(	TokenNameLPAREN
upperVal	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
upperVal	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
-	TokenNameMINUS
1674416163	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
h	TokenNameIdentifier
^=	TokenNameXOR_EQUAL
(	TokenNameLPAREN
parser	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
parser	TokenNameIdentifier
.	TokenNameDOT
hashCode	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
:	TokenNameCOLON
-	TokenNameMINUS
1572457324	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
h	TokenNameIdentifier
^=	TokenNameXOR_EQUAL
(	TokenNameLPAREN
includeLower	TokenNameIdentifier
?	TokenNameQUESTION
1549299360	TokenNameIntegerLiteral
:	TokenNameCOLON
-	TokenNameMINUS
365038026	TokenNameIntegerLiteral
)	TokenNameRPAREN
^	TokenNameXOR
(	TokenNameLPAREN
includeUpper	TokenNameIdentifier
?	TokenNameQUESTION
1721088258	TokenNameIntegerLiteral
:	TokenNameCOLON
1948649653	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
h	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
String	TokenNameIdentifier
getField	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
field	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
includesLower	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
includeLower	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
includesUpper	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
includeUpper	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
T	TokenNameIdentifier
getLowerVal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
lowerVal	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
T	TokenNameIdentifier
getUpperVal	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
upperVal	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
FieldCache	TokenNameIdentifier
.	TokenNameDOT
Parser	TokenNameIdentifier
getParser	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
parser	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
