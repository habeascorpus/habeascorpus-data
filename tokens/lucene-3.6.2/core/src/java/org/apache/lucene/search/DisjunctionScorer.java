package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
;	TokenNameSEMICOLON
abstract	TokenNameabstract
class	TokenNameclass
DisjunctionScorer	TokenNameIdentifier
extends	TokenNameextends
Scorer	TokenNameIdentifier
{	TokenNameLBRACE
protected	TokenNameprotected
final	TokenNamefinal
Scorer	TokenNameIdentifier
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
protected	TokenNameprotected
int	TokenNameint
numScorers	TokenNameIdentifier
;	TokenNameSEMICOLON
protected	TokenNameprotected
DisjunctionScorer	TokenNameIdentifier
(	TokenNameLPAREN
Similarity	TokenNameIdentifier
similarity	TokenNameIdentifier
,	TokenNameCOMMA
Weight	TokenNameIdentifier
weight	TokenNameIdentifier
,	TokenNameCOMMA
Scorer	TokenNameIdentifier
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
,	TokenNameCOMMA
int	TokenNameint
numScorers	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
similarity	TokenNameIdentifier
,	TokenNameCOMMA
weight	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
subScorers	TokenNameIdentifier
=	TokenNameEQUAL
subScorers	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
numScorers	TokenNameIdentifier
=	TokenNameEQUAL
numScorers	TokenNameIdentifier
;	TokenNameSEMICOLON
heapify	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
void	TokenNamevoid
heapify	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
numScorers	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
--	TokenNameMINUS_MINUS
)	TokenNameRPAREN
{	TokenNameLBRACE
heapAdjust	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
void	TokenNamevoid
heapAdjust	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
root	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Scorer	TokenNameIdentifier
scorer	TokenNameIdentifier
=	TokenNameEQUAL
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
root	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
doc	TokenNameIdentifier
=	TokenNameEQUAL
scorer	TokenNameIdentifier
.	TokenNameDOT
docID	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
root	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
(	TokenNameLPAREN
numScorers	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
lchild	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
i	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
Scorer	TokenNameIdentifier
lscorer	TokenNameIdentifier
=	TokenNameEQUAL
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
lchild	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
ldoc	TokenNameIdentifier
=	TokenNameEQUAL
lscorer	TokenNameIdentifier
.	TokenNameDOT
docID	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
rdoc	TokenNameIdentifier
=	TokenNameEQUAL
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
rchild	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
i	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
Scorer	TokenNameIdentifier
rscorer	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
rchild	TokenNameIdentifier
<	TokenNameLESS
numScorers	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
rscorer	TokenNameIdentifier
=	TokenNameEQUAL
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
rchild	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
rdoc	TokenNameIdentifier
=	TokenNameEQUAL
rscorer	TokenNameIdentifier
.	TokenNameDOT
docID	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
ldoc	TokenNameIdentifier
<	TokenNameLESS
doc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
rdoc	TokenNameIdentifier
<	TokenNameLESS
ldoc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
rscorer	TokenNameIdentifier
;	TokenNameSEMICOLON
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
rchild	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
scorer	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
rchild	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
lscorer	TokenNameIdentifier
;	TokenNameSEMICOLON
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
lchild	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
scorer	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
lchild	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
rdoc	TokenNameIdentifier
<	TokenNameLESS
doc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
rscorer	TokenNameIdentifier
;	TokenNameSEMICOLON
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
rchild	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
scorer	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
=	TokenNameEQUAL
rchild	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
protected	TokenNameprotected
final	TokenNamefinal
void	TokenNamevoid
heapRemoveRoot	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
numScorers	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
numScorers	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
numScorers	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
subScorers	TokenNameIdentifier
[	TokenNameLBRACKET
numScorers	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
--	TokenNameMINUS_MINUS
numScorers	TokenNameIdentifier
;	TokenNameSEMICOLON
heapAdjust	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
