package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
PriorityQueue	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TopDocs	TokenNameIdentifier
implements	TokenNameimplements
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
Serializable	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
int	TokenNameint
totalHits	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ScoreDoc	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
scoreDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
private	TokenNameprivate
float	TokenNamefloat
maxScore	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
float	TokenNamefloat
getMaxScore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
maxScore	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
setMaxScore	TokenNameIdentifier
(	TokenNameLPAREN
float	TokenNamefloat
maxScore	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
maxScore	TokenNameIdentifier
=	TokenNameEQUAL
maxScore	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
TopDocs	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
totalHits	TokenNameIdentifier
,	TokenNameCOMMA
ScoreDoc	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
scoreDocs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
(	TokenNameLPAREN
totalHits	TokenNameIdentifier
,	TokenNameCOMMA
scoreDocs	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
.	TokenNameDOT
NaN	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
TopDocs	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
totalHits	TokenNameIdentifier
,	TokenNameCOMMA
ScoreDoc	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
scoreDocs	TokenNameIdentifier
,	TokenNameCOMMA
float	TokenNamefloat
maxScore	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
totalHits	TokenNameIdentifier
=	TokenNameEQUAL
totalHits	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
=	TokenNameEQUAL
scoreDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
maxScore	TokenNameIdentifier
=	TokenNameEQUAL
maxScore	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
ShardRef	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
shardIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
hitIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ShardRef	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
shardIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shardIndex	TokenNameIdentifier
=	TokenNameEQUAL
shardIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
String	TokenNameIdentifier
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
"ShardRef(shardIndex="	TokenNameStringLiteral
+	TokenNamePLUS
shardIndex	TokenNameIdentifier
+	TokenNamePLUS
" hitIndex="	TokenNameStringLiteral
+	TokenNamePLUS
hitIndex	TokenNameIdentifier
+	TokenNamePLUS
")"	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
ScoreMergeSortQueue	TokenNameIdentifier
extends	TokenNameextends
PriorityQueue	TokenNameIdentifier
<	TokenNameLESS
ShardRef	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
final	TokenNamefinal
ScoreDoc	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
shardHits	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
ScoreMergeSortQueue	TokenNameIdentifier
(	TokenNameLPAREN
TopDocs	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
shardHits	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
initialize	TokenNameIdentifier
(	TokenNameLPAREN
shardHits	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
shardHits	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ScoreDoc	TokenNameIdentifier
[	TokenNameLBRACKET
shardHits	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
shardIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
shardIDX	TokenNameIdentifier
<	TokenNameLESS
shardHits	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
shardIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shardHits	TokenNameIdentifier
[	TokenNameLBRACKET
shardIDX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
shardHits	TokenNameIdentifier
[	TokenNameLBRACKET
shardIDX	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
boolean	TokenNameboolean
lessThan	TokenNameIdentifier
(	TokenNameLPAREN
ShardRef	TokenNameIdentifier
first	TokenNameIdentifier
,	TokenNameCOMMA
ShardRef	TokenNameIdentifier
second	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
first	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
second	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
float	TokenNamefloat
firstScore	TokenNameIdentifier
=	TokenNameEQUAL
shardHits	TokenNameIdentifier
[	TokenNameLBRACKET
first	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
first	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
score	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
float	TokenNamefloat
secondScore	TokenNameIdentifier
=	TokenNameEQUAL
shardHits	TokenNameIdentifier
[	TokenNameLBRACKET
second	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
second	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
score	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
firstScore	TokenNameIdentifier
<	TokenNameLESS
secondScore	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
firstScore	TokenNameIdentifier
>	TokenNameGREATER
secondScore	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
first	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
<	TokenNameLESS
second	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
first	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
>	TokenNameGREATER
second	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
assert	TokenNameassert
first	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
second	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
first	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
<	TokenNameLESS
second	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
SuppressWarnings	TokenNameIdentifier
(	TokenNameLPAREN
{	TokenNameLBRACE
"rawtypes"	TokenNameStringLiteral
,	TokenNameCOMMA
"unchecked"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
MergeSortQueue	TokenNameIdentifier
extends	TokenNameextends
PriorityQueue	TokenNameIdentifier
<	TokenNameLESS
ShardRef	TokenNameIdentifier
>	TokenNameGREATER
{	TokenNameLBRACE
final	TokenNamefinal
ScoreDoc	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
shardHits	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
FieldComparator	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
[	TokenNameLBRACKET
]	TokenNameRBRACKET
comparators	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
reverseMul	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
MergeSortQueue	TokenNameIdentifier
(	TokenNameLPAREN
Sort	TokenNameIdentifier
sort	TokenNameIdentifier
,	TokenNameCOMMA
TopDocs	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
shardHits	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
initialize	TokenNameIdentifier
(	TokenNameLPAREN
shardHits	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
this	TokenNamethis
.	TokenNameDOT
shardHits	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ScoreDoc	TokenNameIdentifier
[	TokenNameLBRACKET
shardHits	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
shardIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
shardIDX	TokenNameIdentifier
<	TokenNameLESS
shardHits	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
shardIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
ScoreDoc	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
shard	TokenNameIdentifier
=	TokenNameEQUAL
shardHits	TokenNameIdentifier
[	TokenNameLBRACKET
shardIDX	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
shard	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
this	TokenNamethis
.	TokenNameDOT
shardHits	TokenNameIdentifier
[	TokenNameLBRACKET
shardIDX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
shard	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
hitIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
hitIDX	TokenNameIdentifier
<	TokenNameLESS
shard	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
hitIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
ScoreDoc	TokenNameIdentifier
sd	TokenNameIdentifier
=	TokenNameEQUAL
shard	TokenNameIdentifier
[	TokenNameLBRACKET
hitIDX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
(	TokenNameLPAREN
sd	TokenNameIdentifier
instanceof	TokenNameinstanceof
FieldDoc	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"shard "	TokenNameStringLiteral
+	TokenNamePLUS
shardIDX	TokenNameIdentifier
+	TokenNamePLUS
" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
FieldDoc	TokenNameIdentifier
fd	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
FieldDoc	TokenNameIdentifier
)	TokenNameRPAREN
sd	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
fd	TokenNameIdentifier
.	TokenNameDOT
fields	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"shard "	TokenNameStringLiteral
+	TokenNamePLUS
shardIDX	TokenNameIdentifier
+	TokenNamePLUS
" did not set sort field values (FieldDoc.fields is null); you must pass fillFields=true to IndexSearcher.search on each shard"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
final	TokenNamefinal
SortField	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
sortFields	TokenNameIdentifier
=	TokenNameEQUAL
sort	TokenNameIdentifier
.	TokenNameDOT
getSort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
comparators	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
FieldComparator	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
>	TokenNameGREATER
[	TokenNameLBRACKET
sortFields	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
reverseMul	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
sortFields	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
compIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
compIDX	TokenNameIdentifier
<	TokenNameLESS
sortFields	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
compIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
SortField	TokenNameIdentifier
sortField	TokenNameIdentifier
=	TokenNameEQUAL
sortFields	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
sortField	TokenNameIdentifier
.	TokenNameDOT
getComparator	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
compIDX	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
reverseMul	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
sortField	TokenNameIdentifier
.	TokenNameDOT
getReverse	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
-	TokenNameMINUS
1	TokenNameIntegerLiteral
:	TokenNameCOLON
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
SuppressWarnings	TokenNameIdentifier
(	TokenNameLPAREN
{	TokenNameLBRACE
"unchecked"	TokenNameStringLiteral
,	TokenNameCOMMA
"rawtypes"	TokenNameStringLiteral
}	TokenNameRBRACE
)	TokenNameRPAREN
public	TokenNamepublic
boolean	TokenNameboolean
lessThan	TokenNameIdentifier
(	TokenNameLPAREN
ShardRef	TokenNameIdentifier
first	TokenNameIdentifier
,	TokenNameCOMMA
ShardRef	TokenNameIdentifier
second	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
first	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
second	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
FieldDoc	TokenNameIdentifier
firstFD	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
FieldDoc	TokenNameIdentifier
)	TokenNameRPAREN
shardHits	TokenNameIdentifier
[	TokenNameLBRACKET
first	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
first	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
FieldDoc	TokenNameIdentifier
secondFD	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
FieldDoc	TokenNameIdentifier
)	TokenNameRPAREN
shardHits	TokenNameIdentifier
[	TokenNameLBRACKET
second	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
]	TokenNameRBRACKET
[	TokenNameLBRACKET
second	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
compIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
compIDX	TokenNameIdentifier
<	TokenNameLESS
comparators	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
compIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
FieldComparator	TokenNameIdentifier
comp	TokenNameIdentifier
=	TokenNameEQUAL
comparators	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
cmp	TokenNameIdentifier
=	TokenNameEQUAL
reverseMul	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
*	TokenNameMULTIPLY
comp	TokenNameIdentifier
.	TokenNameDOT
compareValues	TokenNameIdentifier
(	TokenNameLPAREN
firstFD	TokenNameIdentifier
.	TokenNameDOT
fields	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
secondFD	TokenNameIdentifier
.	TokenNameDOT
fields	TokenNameIdentifier
[	TokenNameLBRACKET
compIDX	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
cmp	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
cmp	TokenNameIdentifier
<	TokenNameLESS
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
first	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
<	TokenNameLESS
second	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
first	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
>	TokenNameGREATER
second	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
assert	TokenNameassert
first	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
second	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
return	TokenNamereturn
first	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
<	TokenNameLESS
second	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
TopDocs	TokenNameIdentifier
merge	TokenNameIdentifier
(	TokenNameLPAREN
Sort	TokenNameIdentifier
sort	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
topN	TokenNameIdentifier
,	TokenNameCOMMA
TopDocs	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
shardHits	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
PriorityQueue	TokenNameIdentifier
<	TokenNameLESS
ShardRef	TokenNameIdentifier
>	TokenNameGREATER
queue	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
sort	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
queue	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ScoreMergeSortQueue	TokenNameIdentifier
(	TokenNameLPAREN
shardHits	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
queue	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
MergeSortQueue	TokenNameIdentifier
(	TokenNameLPAREN
sort	TokenNameIdentifier
,	TokenNameCOMMA
shardHits	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
int	TokenNameint
totalHitCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
availHitCount	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
float	TokenNamefloat
maxScore	TokenNameIdentifier
=	TokenNameEQUAL
Float	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
shardIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
shardIDX	TokenNameIdentifier
<	TokenNameLESS
shardHits	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
shardIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
TopDocs	TokenNameIdentifier
shard	TokenNameIdentifier
=	TokenNameEQUAL
shardHits	TokenNameIdentifier
[	TokenNameLBRACKET
shardIDX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
totalHitCount	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
shard	TokenNameIdentifier
.	TokenNameDOT
totalHits	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
shard	TokenNameIdentifier
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
&&	TokenNameAND_AND
shard	TokenNameIdentifier
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
availHitCount	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
shard	TokenNameIdentifier
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
queue	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
ShardRef	TokenNameIdentifier
(	TokenNameLPAREN
shardIDX	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
maxScore	TokenNameIdentifier
=	TokenNameEQUAL
Math	TokenNameIdentifier
.	TokenNameDOT
max	TokenNameIdentifier
(	TokenNameLPAREN
maxScore	TokenNameIdentifier
,	TokenNameCOMMA
shard	TokenNameIdentifier
.	TokenNameDOT
getMaxScore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
availHitCount	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
maxScore	TokenNameIdentifier
=	TokenNameEQUAL
Float	TokenNameIdentifier
.	TokenNameDOT
NaN	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
ScoreDoc	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
hits	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ScoreDoc	TokenNameIdentifier
[	TokenNameLBRACKET
Math	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
(	TokenNameLPAREN
topN	TokenNameIdentifier
,	TokenNameCOMMA
availHitCount	TokenNameIdentifier
)	TokenNameRPAREN
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
hitUpto	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
hitUpto	TokenNameIdentifier
<	TokenNameLESS
hits	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assert	TokenNameassert
queue	TokenNameIdentifier
.	TokenNameDOT
size	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
>	TokenNameGREATER
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
ShardRef	TokenNameIdentifier
ref	TokenNameIdentifier
=	TokenNameEQUAL
queue	TokenNameIdentifier
.	TokenNameDOT
pop	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
ScoreDoc	TokenNameIdentifier
hit	TokenNameIdentifier
=	TokenNameEQUAL
shardHits	TokenNameIdentifier
[	TokenNameLBRACKET
ref	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
[	TokenNameLBRACKET
ref	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
hit	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
=	TokenNameEQUAL
ref	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
hits	TokenNameIdentifier
[	TokenNameLBRACKET
hitUpto	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
hit	TokenNameIdentifier
;	TokenNameSEMICOLON
hitUpto	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ref	TokenNameIdentifier
.	TokenNameDOT
hitIndex	TokenNameIdentifier
<	TokenNameLESS
shardHits	TokenNameIdentifier
[	TokenNameLBRACKET
ref	TokenNameIdentifier
.	TokenNameDOT
shardIndex	TokenNameIdentifier
]	TokenNameRBRACKET
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
queue	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
ref	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
sort	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
TopDocs	TokenNameIdentifier
(	TokenNameLPAREN
totalHitCount	TokenNameIdentifier
,	TokenNameCOMMA
hits	TokenNameIdentifier
,	TokenNameCOMMA
maxScore	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
TopFieldDocs	TokenNameIdentifier
(	TokenNameLPAREN
totalHitCount	TokenNameIdentifier
,	TokenNameCOMMA
hits	TokenNameIdentifier
,	TokenNameCOMMA
sort	TokenNameIdentifier
.	TokenNameDOT
getSort	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
maxScore	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
