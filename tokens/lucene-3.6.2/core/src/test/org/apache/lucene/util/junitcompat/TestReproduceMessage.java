package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
junitcompat	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Arrays	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
LuceneTestCase	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
After	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
AfterClass	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
Assert	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
Before	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
BeforeClass	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
Ignore	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
Rule	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
Test	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
rules	TokenNameIdentifier
.	TokenNameDOT
TestRule	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
runner	TokenNameIdentifier
.	TokenNameDOT
Description	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
runner	TokenNameIdentifier
.	TokenNameDOT
JUnitCore	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
runners	TokenNameIdentifier
.	TokenNameDOT
model	TokenNameIdentifier
.	TokenNameDOT
Statement	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TestReproduceMessage	TokenNameIdentifier
extends	TokenNameextends
WithNestedTests	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
SorePoint	TokenNameIdentifier
where	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
SoreType	TokenNameIdentifier
type	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
class	TokenNameclass
Nested	TokenNameIdentifier
extends	TokenNameextends
AbstractNestedTest	TokenNameIdentifier
{	TokenNameLBRACE
@	TokenNameAT
BeforeClass	TokenNameIdentifier
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
beforeClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
isRunningNested	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
triggerOn	TokenNameIdentifier
(	TokenNameLPAREN
SorePoint	TokenNameIdentifier
.	TokenNameDOT
BEFORE_CLASS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Rule	TokenNameIdentifier
public	TokenNamepublic
TestRule	TokenNameIdentifier
rule	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TestRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
Statement	TokenNameIdentifier
apply	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
Statement	TokenNameIdentifier
base	TokenNameIdentifier
,	TokenNameCOMMA
Description	TokenNameIdentifier
description	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
new	TokenNamenew
Statement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
evaluate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Throwable	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
isRunningNested	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
triggerOn	TokenNameIdentifier
(	TokenNameLPAREN
SorePoint	TokenNameIdentifier
.	TokenNameDOT
RULE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
base	TokenNameIdentifier
.	TokenNameDOT
evaluate	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
Nested	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
triggerOn	TokenNameIdentifier
(	TokenNameLPAREN
SorePoint	TokenNameIdentifier
.	TokenNameDOT
INITIALIZER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Before	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
before	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
isRunningNested	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
triggerOn	TokenNameIdentifier
(	TokenNameLPAREN
SorePoint	TokenNameIdentifier
.	TokenNameDOT
BEFORE	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
test	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
triggerOn	TokenNameIdentifier
(	TokenNameLPAREN
SorePoint	TokenNameIdentifier
.	TokenNameDOT
TEST	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
After	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
after	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
isRunningNested	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
triggerOn	TokenNameIdentifier
(	TokenNameLPAREN
SorePoint	TokenNameIdentifier
.	TokenNameDOT
AFTER	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
AfterClass	TokenNameIdentifier
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
afterClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
isRunningNested	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
triggerOn	TokenNameIdentifier
(	TokenNameLPAREN
SorePoint	TokenNameIdentifier
.	TokenNameDOT
AFTER_CLASS	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
void	TokenNamevoid
triggerOn	TokenNameIdentifier
(	TokenNameLPAREN
SorePoint	TokenNameIdentifier
pt	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
pt	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
where	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
switch	TokenNameswitch
(	TokenNameLPAREN
type	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
ASSUMPTION	TokenNameIdentifier
:	TokenNameCOLON
LuceneTestCase	TokenNameIdentifier
.	TokenNameDOT
assumeTrue	TokenNameIdentifier
(	TokenNameLPAREN
pt	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"unreachable"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
ERROR	TokenNameIdentifier
:	TokenNameCOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
pt	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
case	TokenNamecase
FAILURE	TokenNameIdentifier
:	TokenNameCOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
pt	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
false	TokenNamefalse
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"unreachable"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
TestReproduceMessage	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
super	TokenNamesuper
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
@	TokenNameAT
Ignore	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testAssumeBeforeClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ASSUMPTION	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
BEFORE_CLASS	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: Assume failed in"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
@	TokenNameAT
Ignore	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testAssumeInitializer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ASSUMPTION	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
INITIALIZER	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: Assume failed in"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testAssumeRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ASSUMPTION	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
RULE	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: Assume failed in"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testAssumeBefore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ASSUMPTION	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
BEFORE	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: Assume failed in"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testAssumeTest	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ASSUMPTION	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
TEST	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: Assume failed in"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testAssumeAfter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ASSUMPTION	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
AFTER	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: Assume failed in"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
@	TokenNameAT
Ignore	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testAssumeAfterClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ASSUMPTION	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
AFTER_CLASS	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: Assume failed in"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
@	TokenNameAT
Ignore	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testFailureBeforeClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
FAILURE	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
BEFORE_CLASS	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
@	TokenNameAT
Ignore	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testFailureInitializer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
FAILURE	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
INITIALIZER	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testFailureRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
FAILURE	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
RULE	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"\s"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"-Dtestmethod=test"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testFailureBefore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
FAILURE	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
BEFORE	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"\s"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"-Dtestmethod=test"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testFailureTest	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
FAILURE	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
TEST	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"\s"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"-Dtestmethod=test"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testFailureAfter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
FAILURE	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
AFTER	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"\s"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"-Dtestmethod=test"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
@	TokenNameAT
Ignore	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testFailureAfterClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
FAILURE	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
AFTER_CLASS	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
@	TokenNameAT
Ignore	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testErrorBeforeClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
BEFORE_CLASS	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
@	TokenNameAT
Ignore	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testErrorInitializer	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
INITIALIZER	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testErrorRule	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
RULE	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"\s"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"-Dtestmethod=test"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testErrorBefore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
BEFORE	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"\s"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"-Dtestmethod=test"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testErrorTest	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
TEST	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"\s"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"-Dtestmethod=test"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testErrorAfter	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
AFTER	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
split	TokenNameIdentifier
(	TokenNameLPAREN
"\s"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"-Dtestmethod=test"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
@	TokenNameAT
Test	TokenNameIdentifier
@	TokenNameAT
Ignore	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
testErrorAfterClass	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
type	TokenNameIdentifier
=	TokenNameEQUAL
SoreType	TokenNameIdentifier
.	TokenNameDOT
ERROR	TokenNameIdentifier
;	TokenNameSEMICOLON
where	TokenNameIdentifier
=	TokenNameEQUAL
SorePoint	TokenNameIdentifier
.	TokenNameDOT
AFTER_CLASS	TokenNameIdentifier
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
contains	TokenNameIdentifier
(	TokenNameLPAREN
"NOTE: reproduce with:"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
String	TokenNameIdentifier
runAndReturnSyserr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
JUnitCore	TokenNameIdentifier
.	TokenNameDOT
runClasses	TokenNameIdentifier
(	TokenNameLPAREN
Nested	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
)	TokenNameRPAREN
;	TokenNameSEMICOLON
String	TokenNameIdentifier
err	TokenNameIdentifier
=	TokenNameEQUAL
getSysErr	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
err	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
