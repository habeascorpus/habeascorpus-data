package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TestBitUtil	TokenNameIdentifier
extends	TokenNameextends
LuceneTestCase	TokenNameIdentifier
{	TokenNameLBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
slowNlz	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
x	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0L	TokenNameLongLiteral
)	TokenNameRPAREN
return	TokenNamereturn
64	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
nlz	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
x	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
nlz	TokenNameIdentifier
)	TokenNameRPAREN
&	TokenNameAND
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
63	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
nlz	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
nlz	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
checkNlz	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
x	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
slowNlz	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
BitUtil	TokenNameIdentifier
.	TokenNameDOT
nlz	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
numberOfLeadingZeros	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
)	TokenNameRPAREN
,	TokenNameCOMMA
BitUtil	TokenNameIdentifier
.	TokenNameDOT
nlz	TokenNameIdentifier
(	TokenNameLPAREN
x	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testNlz	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
checkNlz	TokenNameIdentifier
(	TokenNameLPAREN
0L	TokenNameLongLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkNlz	TokenNameIdentifier
(	TokenNameLPAREN
1L	TokenNameLongLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkNlz	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
1L	TokenNameLongLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
63	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
checkNlz	TokenNameIdentifier
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checkNlz	TokenNameIdentifier
(	TokenNameLPAREN
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
i	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
i	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testBitUtils	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
num	TokenNameIdentifier
=	TokenNameEQUAL
100000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
BitUtil	TokenNameIdentifier
.	TokenNameDOT
ntz	TokenNameIdentifier
(	TokenNameLPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
BitUtil	TokenNameIdentifier
.	TokenNameDOT
ntz2	TokenNameIdentifier
(	TokenNameLPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
BitUtil	TokenNameIdentifier
.	TokenNameDOT
ntz3	TokenNameIdentifier
(	TokenNameLPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
num	TokenNameIdentifier
=	TokenNameEQUAL
10	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
BitUtil	TokenNameIdentifier
.	TokenNameDOT
ntz	TokenNameIdentifier
(	TokenNameLPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
BitUtil	TokenNameIdentifier
.	TokenNameDOT
ntz2	TokenNameIdentifier
(	TokenNameLPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
BitUtil	TokenNameIdentifier
.	TokenNameDOT
ntz3	TokenNameIdentifier
(	TokenNameLPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
64	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
num	TokenNameIdentifier
=	TokenNameEQUAL
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
i	TokenNameIdentifier
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
,	TokenNameCOMMA
BitUtil	TokenNameIdentifier
.	TokenNameDOT
ntz	TokenNameIdentifier
(	TokenNameLPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
,	TokenNameCOMMA
BitUtil	TokenNameIdentifier
.	TokenNameDOT
ntz2	TokenNameIdentifier
(	TokenNameLPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
,	TokenNameCOMMA
BitUtil	TokenNameIdentifier
.	TokenNameDOT
ntz3	TokenNameIdentifier
(	TokenNameLPAREN
num	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
long	TokenNamelong
testArg	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
shift	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
shift	TokenNameIdentifier
)	TokenNameRPAREN
+	TokenNamePLUS
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
shift	TokenNameIdentifier
>>	TokenNameRIGHT_SHIFT
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
long	TokenNamelong
nlzBitUtilBasicLoop	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
iters	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
sumRes	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
iters	TokenNameIdentifier
--	TokenNameMINUS_MINUS
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
63	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
a	TokenNameIdentifier
=	TokenNameEQUAL
testArg	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumRes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
BitUtil	TokenNameIdentifier
.	TokenNameDOT
nlz	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumRes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
BitUtil	TokenNameIdentifier
.	TokenNameDOT
nlz	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumRes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
BitUtil	TokenNameIdentifier
.	TokenNameDOT
nlz	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumRes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
BitUtil	TokenNameIdentifier
.	TokenNameDOT
nlz	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
+	TokenNamePLUS
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumRes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
BitUtil	TokenNameIdentifier
.	TokenNameDOT
nlz	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
-	TokenNameMINUS
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
sumRes	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
long	TokenNamelong
nlzLongBasicLoop	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
iters	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
sumRes	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
iters	TokenNameIdentifier
--	TokenNameMINUS_MINUS
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
63	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
a	TokenNameIdentifier
=	TokenNameEQUAL
testArg	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumRes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
Long	TokenNameIdentifier
.	TokenNameDOT
numberOfLeadingZeros	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumRes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
Long	TokenNameIdentifier
.	TokenNameDOT
numberOfLeadingZeros	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumRes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
Long	TokenNameIdentifier
.	TokenNameDOT
numberOfLeadingZeros	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumRes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
Long	TokenNameIdentifier
.	TokenNameDOT
numberOfLeadingZeros	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
+	TokenNamePLUS
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
sumRes	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
Long	TokenNameIdentifier
.	TokenNameDOT
numberOfLeadingZeros	TokenNameIdentifier
(	TokenNameLPAREN
a	TokenNameIdentifier
-	TokenNameMINUS
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
sumRes	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
tstPerfNlz	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
long	TokenNamelong
measureMilliSecs	TokenNameIdentifier
=	TokenNameEQUAL
2000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
basicIters	TokenNameIdentifier
=	TokenNameEQUAL
100000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
long	TokenNamelong
startTime	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
endTime	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
curTime	TokenNameIdentifier
;	TokenNameSEMICOLON
long	TokenNamelong
dummy	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
dummy	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
bitUtilLoops	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
startTime	TokenNameIdentifier
=	TokenNameEQUAL
System	TokenNameIdentifier
.	TokenNameDOT
currentTimeMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endTime	TokenNameIdentifier
=	TokenNameEQUAL
startTime	TokenNameIdentifier
+	TokenNamePLUS
measureMilliSecs	TokenNameIdentifier
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
dummy	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
nlzBitUtilBasicLoop	TokenNameIdentifier
(	TokenNameLPAREN
basicIters	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bitUtilLoops	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
curTime	TokenNameIdentifier
=	TokenNameEQUAL
System	TokenNameIdentifier
.	TokenNameDOT
currentTimeMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
curTime	TokenNameIdentifier
<	TokenNameLESS
endTime	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
bitUtilPsTime	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
1000000000	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
(	TokenNameLPAREN
curTime	TokenNameIdentifier
-	TokenNameMINUS
startTime	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
basicIters	TokenNameIdentifier
*	TokenNameMULTIPLY
5	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
63	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
bitUtilLoops	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"BitUtil nlz time: "	TokenNameStringLiteral
+	TokenNamePLUS
(	TokenNameLPAREN
bitUtilPsTime	TokenNameIdentifier
/	TokenNameDIVIDE
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
" picosec/call, dummy: "	TokenNameStringLiteral
+	TokenNamePLUS
dummy	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
dummy	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
int	TokenNameint
longLoops	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
startTime	TokenNameIdentifier
=	TokenNameEQUAL
System	TokenNameIdentifier
.	TokenNameDOT
currentTimeMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
endTime	TokenNameIdentifier
=	TokenNameEQUAL
startTime	TokenNameIdentifier
+	TokenNamePLUS
measureMilliSecs	TokenNameIdentifier
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
dummy	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
nlzLongBasicLoop	TokenNameIdentifier
(	TokenNameLPAREN
basicIters	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
longLoops	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
curTime	TokenNameIdentifier
=	TokenNameEQUAL
System	TokenNameIdentifier
.	TokenNameDOT
currentTimeMillis	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
curTime	TokenNameIdentifier
<	TokenNameLESS
endTime	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
longPsTime	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
int	TokenNameint
)	TokenNameRPAREN
(	TokenNameLPAREN
1000000000	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
(	TokenNameLPAREN
curTime	TokenNameIdentifier
-	TokenNameMINUS
startTime	TokenNameIdentifier
)	TokenNameRPAREN
/	TokenNameDIVIDE
(	TokenNameLPAREN
basicIters	TokenNameIdentifier
*	TokenNameMULTIPLY
5	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
63	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
(	TokenNameLPAREN
float	TokenNamefloat
)	TokenNameRPAREN
longLoops	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"Long    nlz time: "	TokenNameStringLiteral
+	TokenNamePLUS
longPsTime	TokenNameIdentifier
+	TokenNamePLUS
" picosec/call, dummy: "	TokenNameStringLiteral
+	TokenNamePLUS
dummy	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
