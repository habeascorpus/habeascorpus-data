package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
BufferedOutputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
ByteArrayOutputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
File	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
FileOutputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
IOException	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
InputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
OutputStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
io	TokenNameIdentifier
.	TokenNameDOT
PrintStream	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
lang	TokenNameIdentifier
.	TokenNameDOT
reflect	TokenNameIdentifier
.	TokenNameDOT
Method	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Enumeration	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
HashMap	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Map	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Random	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
zip	TokenNameIdentifier
.	TokenNameDOT
ZipEntry	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
zip	TokenNameIdentifier
.	TokenNameDOT
ZipFile	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
junit	TokenNameIdentifier
.	TokenNameDOT
Assert	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
document	TokenNameIdentifier
.	TokenNameDOT
Document	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
document	TokenNameIdentifier
.	TokenNameDOT
Field	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
document	TokenNameIdentifier
.	TokenNameDOT
Fieldable	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
CheckIndex	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
ConcurrentMergeScheduler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
IndexWriter	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
LogMergePolicy	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
MergePolicy	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
MergeScheduler	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
index	TokenNameIdentifier
.	TokenNameDOT
TieredMergePolicy	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
FieldDoc	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
ScoreDoc	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
search	TokenNameIdentifier
.	TokenNameDOT
TopDocs	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
store	TokenNameIdentifier
.	TokenNameDOT
Directory	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
_TestUtil	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
static	TokenNamestatic
File	TokenNameIdentifier
getTempDir	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
desc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
File	TokenNameIdentifier
f	TokenNameIdentifier
=	TokenNameEQUAL
createTempFile	TokenNameIdentifier
(	TokenNameLPAREN
desc	TokenNameIdentifier
,	TokenNameCOMMA
"tmp"	TokenNameStringLiteral
,	TokenNameCOMMA
LuceneTestCase	TokenNameIdentifier
.	TokenNameDOT
TEMP_DIR	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
f	TokenNameIdentifier
.	TokenNameDOT
delete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LuceneTestCase	TokenNameIdentifier
.	TokenNameDOT
registerTempDir	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
f	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
IOException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
rmDir	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
dir	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
exists	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
dir	TokenNameIdentifier
.	TokenNameDOT
isFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
&&	TokenNameAND_AND
!	TokenNameNOT
dir	TokenNameIdentifier
.	TokenNameDOT
delete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"could not delete "	TokenNameStringLiteral
+	TokenNamePLUS
dir	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
File	TokenNameIdentifier
f	TokenNameIdentifier
:	TokenNameCOLON
dir	TokenNameIdentifier
.	TokenNameDOT
listFiles	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
f	TokenNameIdentifier
.	TokenNameDOT
isDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
rmDir	TokenNameIdentifier
(	TokenNameLPAREN
f	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
f	TokenNameIdentifier
.	TokenNameDOT
delete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"could not delete "	TokenNameStringLiteral
+	TokenNamePLUS
f	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
!	TokenNameNOT
dir	TokenNameIdentifier
.	TokenNameDOT
delete	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IOException	TokenNameIdentifier
(	TokenNameLPAREN
"could not delete "	TokenNameStringLiteral
+	TokenNamePLUS
dir	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
unzip	TokenNameIdentifier
(	TokenNameLPAREN
File	TokenNameIdentifier
zipName	TokenNameIdentifier
,	TokenNameCOMMA
File	TokenNameIdentifier
destDir	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
ZipFile	TokenNameIdentifier
zipFile	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ZipFile	TokenNameIdentifier
(	TokenNameLPAREN
zipName	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Enumeration	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
extends	TokenNameextends
ZipEntry	TokenNameIdentifier
>	TokenNameGREATER
entries	TokenNameIdentifier
=	TokenNameEQUAL
zipFile	TokenNameIdentifier
.	TokenNameDOT
entries	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
rmDir	TokenNameIdentifier
(	TokenNameLPAREN
destDir	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
destDir	TokenNameIdentifier
.	TokenNameDOT
mkdir	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
LuceneTestCase	TokenNameIdentifier
.	TokenNameDOT
registerTempDir	TokenNameIdentifier
(	TokenNameLPAREN
destDir	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
entries	TokenNameIdentifier
.	TokenNameDOT
hasMoreElements	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
ZipEntry	TokenNameIdentifier
entry	TokenNameIdentifier
=	TokenNameEQUAL
entries	TokenNameIdentifier
.	TokenNameDOT
nextElement	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
InputStream	TokenNameIdentifier
in	TokenNameIdentifier
=	TokenNameEQUAL
zipFile	TokenNameIdentifier
.	TokenNameDOT
getInputStream	TokenNameIdentifier
(	TokenNameLPAREN
entry	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
File	TokenNameIdentifier
targetFile	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
destDir	TokenNameIdentifier
,	TokenNameCOMMA
entry	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
entry	TokenNameIdentifier
.	TokenNameDOT
isDirectory	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
targetFile	TokenNameIdentifier
.	TokenNameDOT
mkdirs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
targetFile	TokenNameIdentifier
.	TokenNameDOT
getParentFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
targetFile	TokenNameIdentifier
.	TokenNameDOT
getParentFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
mkdirs	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
OutputStream	TokenNameIdentifier
out	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
BufferedOutputStream	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
FileOutputStream	TokenNameIdentifier
(	TokenNameLPAREN
targetFile	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
byte	TokenNamebyte
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
byte	TokenNamebyte
[	TokenNameLBRACKET
8192	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
len	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
(	TokenNameLPAREN
len	TokenNameIdentifier
=	TokenNameEQUAL
in	TokenNameIdentifier
.	TokenNameDOT
read	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
>=	TokenNameGREATER_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
out	TokenNameIdentifier
.	TokenNameDOT
write	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
len	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
in	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
out	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
zipFile	TokenNameIdentifier
.	TokenNameDOT
close	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
syncConcurrentMerges	TokenNameIdentifier
(	TokenNameLPAREN
IndexWriter	TokenNameIdentifier
writer	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
syncConcurrentMerges	TokenNameIdentifier
(	TokenNameLPAREN
writer	TokenNameIdentifier
.	TokenNameDOT
getConfig	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getMergeScheduler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
syncConcurrentMerges	TokenNameIdentifier
(	TokenNameLPAREN
MergeScheduler	TokenNameIdentifier
ms	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
ms	TokenNameIdentifier
instanceof	TokenNameinstanceof
ConcurrentMergeScheduler	TokenNameIdentifier
)	TokenNameRPAREN
(	TokenNameLPAREN
(	TokenNameLPAREN
ConcurrentMergeScheduler	TokenNameIdentifier
)	TokenNameRPAREN
ms	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
sync	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
CheckIndex	TokenNameIdentifier
.	TokenNameDOT
Status	TokenNameIdentifier
checkIndex	TokenNameIdentifier
(	TokenNameLPAREN
Directory	TokenNameIdentifier
dir	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
ByteArrayOutputStream	TokenNameIdentifier
bos	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
ByteArrayOutputStream	TokenNameIdentifier
(	TokenNameLPAREN
1024	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
CheckIndex	TokenNameIdentifier
checker	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
CheckIndex	TokenNameIdentifier
(	TokenNameLPAREN
dir	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
checker	TokenNameIdentifier
.	TokenNameDOT
setInfoStream	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
PrintStream	TokenNameIdentifier
(	TokenNameLPAREN
bos	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
CheckIndex	TokenNameIdentifier
.	TokenNameDOT
Status	TokenNameIdentifier
indexStatus	TokenNameIdentifier
=	TokenNameEQUAL
checker	TokenNameIdentifier
.	TokenNameDOT
checkIndex	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
indexStatus	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
indexStatus	TokenNameIdentifier
.	TokenNameDOT
clean	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
false	TokenNamefalse
)	TokenNameRPAREN
{	TokenNameLBRACE
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
"CheckIndex failed"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
System	TokenNameIdentifier
.	TokenNameDOT
out	TokenNameIdentifier
.	TokenNameDOT
println	TokenNameIdentifier
(	TokenNameLPAREN
bos	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
"CheckIndex failed"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
indexStatus	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
arrayToString	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
array	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuilder	TokenNameIdentifier
buf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuilder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"["	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
array	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
" "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
array	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
buf	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
int	TokenNameint
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
Random	TokenNameIdentifier
r	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
start	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
start	TokenNameIdentifier
+	TokenNamePLUS
r	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
end	TokenNameIdentifier
-	TokenNameMINUS
start	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
setUseCompoundFile	TokenNameIdentifier
(	TokenNameLPAREN
MergePolicy	TokenNameIdentifier
mp	TokenNameIdentifier
,	TokenNameCOMMA
boolean	TokenNameboolean
v	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
mp	TokenNameIdentifier
instanceof	TokenNameinstanceof
TieredMergePolicy	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
TieredMergePolicy	TokenNameIdentifier
)	TokenNameRPAREN
mp	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setUseCompoundFile	TokenNameIdentifier
(	TokenNameLPAREN
v	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
mp	TokenNameIdentifier
instanceof	TokenNameinstanceof
LogMergePolicy	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
LogMergePolicy	TokenNameIdentifier
)	TokenNameRPAREN
mp	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setUseCompoundFile	TokenNameIdentifier
(	TokenNameLPAREN
v	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
@	TokenNameAT
Deprecated	TokenNameIdentifier
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
arrayToString	TokenNameIdentifier
(	TokenNameLPAREN
Object	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
array	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
StringBuilder	TokenNameIdentifier
buf	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuilder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"["	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
array	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
>	TokenNameGREATER
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
" "	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
array	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
buf	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
"]"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
buf	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
randomSimpleString	TokenNameIdentifier
(	TokenNameLPAREN
Random	TokenNameIdentifier
r	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
r	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
end	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
end	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
_TestUtil	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
97	TokenNameIntegerLiteral
,	TokenNameCOMMA
102	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
randomUnicodeString	TokenNameIdentifier
(	TokenNameLPAREN
Random	TokenNameIdentifier
r	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
randomUnicodeString	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
randomUnicodeString	TokenNameIdentifier
(	TokenNameLPAREN
Random	TokenNameIdentifier
r	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxLength	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
r	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
maxLength	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
end	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
""	TokenNameStringLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
end	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
randomFixedLengthUnicodeString	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
buffer	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
buffer	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
end	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
randomFixedLengthUnicodeString	TokenNameIdentifier
(	TokenNameLPAREN
Random	TokenNameIdentifier
random	TokenNameIdentifier
,	TokenNameCOMMA
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
chars	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
offset	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
offset	TokenNameIdentifier
+	TokenNamePLUS
length	TokenNameIdentifier
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
i	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
t	TokenNameIdentifier
=	TokenNameEQUAL
random	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
t	TokenNameIdentifier
&&	TokenNameAND_AND
i	TokenNameIdentifier
<	TokenNameLESS
length	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
chars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
0xd800	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xdbff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
chars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
0xdc00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xdfff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
chars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
random	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
0x80	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
chars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
0x80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
chars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
0x800	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xd7ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
chars	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
,	TokenNameCOMMA
0xe000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xfffe	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
blockStarts	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0x0000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0080	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0100	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0180	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0250	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x02B0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0300	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0370	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0400	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0500	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0530	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0590	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0600	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0700	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0750	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0780	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x07C0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0800	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0900	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0980	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0F00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10A0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1100	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1200	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1380	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x13A0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1400	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1680	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x16A0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1700	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1720	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1740	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1760	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1780	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1800	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x18B0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1900	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1950	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1980	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x19E0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1A00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1A20	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1B00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1B80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1C00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1C50	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1CD0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1DC0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1E00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2070	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x20A0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x20D0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2100	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2150	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2190	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2200	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2300	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2400	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2440	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2460	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2500	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2580	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x25A0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2600	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2700	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x27C0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x27F0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2800	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2900	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2980	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2A00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2B00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2C00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2C60	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2C80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2D00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2D30	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2D80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2DE0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2E00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2E80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2F00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2FF0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3040	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x30A0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3100	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3130	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3190	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x31A0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x31C0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x31F0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3200	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3300	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3400	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x4DC0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x4E00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA490	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA4D0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA500	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA640	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA6A0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA700	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA720	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA800	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA830	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA840	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA880	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA8E0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA900	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA930	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA960	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA980	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xAA00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xAA60	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xAA80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xABC0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xAC00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xD7B0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xE000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xF900	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFB00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFB50	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFE00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFE10	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFE20	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFE30	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFE50	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFE70	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFF00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFFF0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10080	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10100	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10140	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10190	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x101D0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10280	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x102A0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10300	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10330	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10380	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x103A0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10400	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10450	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10480	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10800	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10840	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10900	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10920	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10A00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10A60	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10B00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10B40	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10B60	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10C00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10E60	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11080	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x12000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x12400	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x13000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D100	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D200	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D300	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D360	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D400	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F030	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F100	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F200	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x20000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2A700	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2F800	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xE0000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xE0100	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xF0000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x100000	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
final	TokenNamefinal
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
blockEnds	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
0x007F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x00FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x017F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x024F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x02AF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x02FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x036F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x03FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x04FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x052F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x058F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x05FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x06FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x074F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x077F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x07BF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x07FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x083F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x097F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x09FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0A7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0AFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0B7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0BFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0C7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0CFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0D7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0DFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0E7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0EFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x0FFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x109F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x11FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x137F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x139F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x13FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x167F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x169F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x16FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x171F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x173F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x175F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x177F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x17FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x18AF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x18FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x194F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x197F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x19DF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x19FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1A1F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1AAF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1B7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1BBF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1C4F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1C7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1CFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1DBF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1DFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1EFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1FFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x206F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x209F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x20CF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x20FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x214F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x218F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x21FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x22FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x23FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x243F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x245F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x24FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x257F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x259F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x25FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x26FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x27BF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x27EF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x27FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x28FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x297F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x29FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2AFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2BFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2C5F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2C7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2CFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2D2F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2D7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2DDF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2DFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2E7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2EFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2FDF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2FFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x303F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x309F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x30FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x312F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x318F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x319F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x31BF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x31EF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x31FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x32FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x33FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x4DBF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x4DFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x9FFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA48F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA4CF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA4FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA63F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA69F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA6FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA71F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA7FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA82F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA83F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA87F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA8DF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA8FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA92F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA95F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA97F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xA9DF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xAA5F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xAA7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xAADF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xABFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xD7AF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xD7FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xF8FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFAFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFB4F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFDFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFE0F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFE1F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFE2F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFE4F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFE6F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFEFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFFEF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFFFE	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1007F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x100FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1013F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1018F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x101CF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x101FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1029F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x102DF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1032F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1034F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1039F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x103DF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1044F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1047F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x104AF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1083F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1085F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1091F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1093F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10A5F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10A7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10B3F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10B5F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10B7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10C4F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10E7F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x110CF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x123FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1247F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1342F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D0FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D1FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D24F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D35F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D37F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1D7FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F02F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F09F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F1FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1F2FF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2A6DF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2B73F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x2FA1F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xE007F	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xE01EF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xFFFFF	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x10FFFF	TokenNameIntegerLiteral
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
randomRealisticUnicodeString	TokenNameIdentifier
(	TokenNameLPAREN
Random	TokenNameIdentifier
r	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
randomRealisticUnicodeString	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
randomRealisticUnicodeString	TokenNameIdentifier
(	TokenNameLPAREN
Random	TokenNameIdentifier
r	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxLength	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
randomRealisticUnicodeString	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
20	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
randomRealisticUnicodeString	TokenNameIdentifier
(	TokenNameLPAREN
Random	TokenNameIdentifier
r	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
minLength	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
maxLength	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
end	TokenNameIdentifier
=	TokenNameEQUAL
minLength	TokenNameIdentifier
+	TokenNamePLUS
r	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
maxLength	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
block	TokenNameIdentifier
=	TokenNameEQUAL
r	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
blockStarts	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
StringBuilder	TokenNameIdentifier
sb	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuilder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
end	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
sb	TokenNameIdentifier
.	TokenNameDOT
appendCodePoint	TokenNameIdentifier
(	TokenNameLPAREN
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
blockStarts	TokenNameIdentifier
[	TokenNameLBRACKET
block	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
blockEnds	TokenNameIdentifier
[	TokenNameLBRACKET
block	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
sb	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
String	TokenNameIdentifier
randomFixedByteLengthUnicodeString	TokenNameIdentifier
(	TokenNameLPAREN
Random	TokenNameIdentifier
r	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
length	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
char	TokenNamechar
[	TokenNameLBRACKET
]	TokenNameRBRACKET
buffer	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
char	TokenNamechar
[	TokenNameLBRACKET
length	TokenNameIdentifier
*	TokenNameMULTIPLY
3	TokenNameIntegerLiteral
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
int	TokenNameint
bytes	TokenNameIdentifier
=	TokenNameEQUAL
length	TokenNameIdentifier
;	TokenNameSEMICOLON
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
buffer	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
&&	TokenNameAND_AND
bytes	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
t	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
bytes	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
r	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
bytes	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
r	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
bytes	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
r	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
t	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
t	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
r	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
0x80	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bytes	TokenNameIdentifier
--	TokenNameMINUS_MINUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
0x80	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bytes	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
0x800	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xd7ff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bytes	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
0xe000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xfffe	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bytes	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
3	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
==	TokenNameEQUAL_EQUAL
t	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
0xd800	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xdbff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
buffer	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
(	TokenNameLPAREN
char	TokenNamechar
)	TokenNameRPAREN
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
r	TokenNameIdentifier
,	TokenNameCOMMA
0xdc00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xdfff	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
bytes	TokenNameIdentifier
-=	TokenNameMINUS_EQUAL
4	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
return	TokenNamereturn
new	TokenNamenew
String	TokenNameIdentifier
(	TokenNameLPAREN
buffer	TokenNameIdentifier
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
boolean	TokenNameboolean
anyFilesExceptWriteLock	TokenNameIdentifier
(	TokenNameLPAREN
Directory	TokenNameIdentifier
dir	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
files	TokenNameIdentifier
=	TokenNameEQUAL
dir	TokenNameIdentifier
.	TokenNameDOT
listAll	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
files	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
>	TokenNameGREATER
1	TokenNameIntegerLiteral
||	TokenNameOR_OR
(	TokenNameLPAREN
files	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
1	TokenNameIntegerLiteral
&&	TokenNameAND_AND
!	TokenNameNOT
files	TokenNameIdentifier
[	TokenNameLBRACKET
0	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
equals	TokenNameIdentifier
(	TokenNameLPAREN
"write.lock"	TokenNameStringLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
return	TokenNamereturn
true	TokenNametrue
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
return	TokenNamereturn
false	TokenNamefalse
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
reduceOpenFiles	TokenNameIdentifier
(	TokenNameLPAREN
IndexWriter	TokenNameIdentifier
w	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
MergePolicy	TokenNameIdentifier
mp	TokenNameIdentifier
=	TokenNameEQUAL
w	TokenNameIdentifier
.	TokenNameDOT
getConfig	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getMergePolicy	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
mp	TokenNameIdentifier
instanceof	TokenNameinstanceof
LogMergePolicy	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
LogMergePolicy	TokenNameIdentifier
lmp	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
LogMergePolicy	TokenNameIdentifier
)	TokenNameRPAREN
mp	TokenNameIdentifier
;	TokenNameSEMICOLON
lmp	TokenNameIdentifier
.	TokenNameDOT
setMergeFactor	TokenNameIdentifier
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
lmp	TokenNameIdentifier
.	TokenNameDOT
getMergeFactor	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
if	TokenNameif
(	TokenNameLPAREN
mp	TokenNameIdentifier
instanceof	TokenNameinstanceof
TieredMergePolicy	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
TieredMergePolicy	TokenNameIdentifier
tmp	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
TieredMergePolicy	TokenNameIdentifier
)	TokenNameRPAREN
mp	TokenNameIdentifier
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
.	TokenNameDOT
setMaxMergeAtOnce	TokenNameIdentifier
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
tmp	TokenNameIdentifier
.	TokenNameDOT
getMaxMergeAtOnce	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
tmp	TokenNameIdentifier
.	TokenNameDOT
setSegmentsPerTier	TokenNameIdentifier
(	TokenNameLPAREN
Math	TokenNameIdentifier
.	TokenNameDOT
min	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
,	TokenNameCOMMA
tmp	TokenNameIdentifier
.	TokenNameDOT
getSegmentsPerTier	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
MergeScheduler	TokenNameIdentifier
ms	TokenNameIdentifier
=	TokenNameEQUAL
w	TokenNameIdentifier
.	TokenNameDOT
getConfig	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
getMergeScheduler	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
ms	TokenNameIdentifier
instanceof	TokenNameinstanceof
ConcurrentMergeScheduler	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
(	TokenNameLPAREN
(	TokenNameLPAREN
ConcurrentMergeScheduler	TokenNameIdentifier
)	TokenNameRPAREN
ms	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setMaxThreadCount	TokenNameIdentifier
(	TokenNameLPAREN
2	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
(	TokenNameLPAREN
(	TokenNameLPAREN
ConcurrentMergeScheduler	TokenNameIdentifier
)	TokenNameRPAREN
ms	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
setMaxMergeCount	TokenNameIdentifier
(	TokenNameLPAREN
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
<	TokenNameLESS
T	TokenNameIdentifier
>	TokenNameGREATER
void	TokenNamevoid
assertAttributeReflection	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
AttributeImpl	TokenNameIdentifier
att	TokenNameIdentifier
,	TokenNameCOMMA
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
T	TokenNameIdentifier
>	TokenNameGREATER
reflectedValues	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Map	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
>	TokenNameGREATER
map	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
HashMap	TokenNameIdentifier
<	TokenNameLESS
String	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
>	TokenNameGREATER
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
att	TokenNameIdentifier
.	TokenNameDOT
reflectWith	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
AttributeReflector	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
reflect	TokenNameIdentifier
(	TokenNameLPAREN
Class	TokenNameIdentifier
<	TokenNameLESS
?	TokenNameQUESTION
extends	TokenNameextends
Attribute	TokenNameIdentifier
>	TokenNameGREATER
attClass	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
key	TokenNameIdentifier
,	TokenNameCOMMA
Object	TokenNameIdentifier
value	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
map	TokenNameIdentifier
.	TokenNameDOT
put	TokenNameIdentifier
(	TokenNameLPAREN
attClass	TokenNameIdentifier
.	TokenNameDOT
getName	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
+	TokenNamePLUS
'#'	TokenNameCharacterLiteral
+	TokenNamePLUS
key	TokenNameIdentifier
,	TokenNameCOMMA
value	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"Reflection does not produce same map"	TokenNameStringLiteral
,	TokenNameCOMMA
reflectedValues	TokenNameIdentifier
,	TokenNameCOMMA
map	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
keepFullyDeletedSegments	TokenNameIdentifier
(	TokenNameLPAREN
IndexWriter	TokenNameIdentifier
w	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
try	TokenNametry
{	TokenNameLBRACE
Method	TokenNameIdentifier
m	TokenNameIdentifier
=	TokenNameEQUAL
IndexWriter	TokenNameIdentifier
.	TokenNameDOT
class	TokenNameclass
.	TokenNameDOT
getDeclaredMethod	TokenNameIdentifier
(	TokenNameLPAREN
"keepFullyDeletedSegments"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m	TokenNameIdentifier
.	TokenNameDOT
setAccessible	TokenNameIdentifier
(	TokenNameLPAREN
true	TokenNametrue
)	TokenNameRPAREN
;	TokenNameSEMICOLON
m	TokenNameIdentifier
.	TokenNameDOT
invoke	TokenNameIdentifier
(	TokenNameLPAREN
w	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
Exception	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
RuntimeException	TokenNameIdentifier
(	TokenNameLPAREN
e	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
File	TokenNameIdentifier
createTempFile	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
prefix	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
suffix	TokenNameIdentifier
,	TokenNameCOMMA
File	TokenNameIdentifier
directory	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
IOException	TokenNameIdentifier
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
prefix	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
<	TokenNameLESS
3	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
throw	TokenNamethrow
new	TokenNamenew
IllegalArgumentException	TokenNameIdentifier
(	TokenNameLPAREN
"prefix must be 3"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
String	TokenNameIdentifier
newSuffix	TokenNameIdentifier
=	TokenNameEQUAL
suffix	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
?	TokenNameQUESTION
".tmp"	TokenNameStringLiteral
:	TokenNameCOLON
suffix	TokenNameIdentifier
;	TokenNameSEMICOLON
File	TokenNameIdentifier
result	TokenNameIdentifier
;	TokenNameSEMICOLON
do	TokenNamedo
{	TokenNameLBRACE
result	TokenNameIdentifier
=	TokenNameEQUAL
genTempFile	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
,	TokenNameCOMMA
newSuffix	TokenNameIdentifier
,	TokenNameCOMMA
directory	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
while	TokenNamewhile
(	TokenNameLPAREN
!	TokenNameNOT
result	TokenNameIdentifier
.	TokenNameDOT
createNewFile	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
result	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
counter	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
int	TokenNameint
counterBase	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
class	TokenNameclass
TempFileLocker	TokenNameIdentifier
{	TokenNameLBRACE
}	TokenNameRBRACE
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
TempFileLocker	TokenNameIdentifier
tempFileLocker	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
TempFileLocker	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
private	TokenNameprivate
static	TokenNamestatic
File	TokenNameIdentifier
genTempFile	TokenNameIdentifier
(	TokenNameLPAREN
String	TokenNameIdentifier
prefix	TokenNameIdentifier
,	TokenNameCOMMA
String	TokenNameIdentifier
suffix	TokenNameIdentifier
,	TokenNameCOMMA
File	TokenNameIdentifier
directory	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
identify	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
synchronized	TokenNamesynchronized
(	TokenNameLPAREN
tempFileLocker	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
counter	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
newInt	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Random	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
counter	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
(	TokenNameLPAREN
newInt	TokenNameIdentifier
/	TokenNameDIVIDE
65535	TokenNameIntegerLiteral
)	TokenNameRPAREN
&	TokenNameAND
0xFFFF	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
0x2710	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
counterBase	TokenNameIdentifier
=	TokenNameEQUAL
counter	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
identify	TokenNameIdentifier
=	TokenNameEQUAL
counter	TokenNameIdentifier
++	TokenNamePLUS_PLUS
;	TokenNameSEMICOLON
}	TokenNameRBRACE
StringBuilder	TokenNameIdentifier
newName	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
StringBuilder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newName	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
prefix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newName	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
counterBase	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newName	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
identify	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
newName	TokenNameIdentifier
.	TokenNameDOT
append	TokenNameIdentifier
(	TokenNameLPAREN
suffix	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
return	TokenNamereturn
new	TokenNamenew
File	TokenNameIdentifier
(	TokenNameLPAREN
directory	TokenNameIdentifier
,	TokenNameCOMMA
newName	TokenNameIdentifier
.	TokenNameDOT
toString	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
void	TokenNamevoid
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
TopDocs	TokenNameIdentifier
expected	TokenNameIdentifier
,	TokenNameCOMMA
TopDocs	TokenNameIdentifier
actual	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Assert	TokenNameIdentifier
.	TokenNameDOT
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong total hits"	TokenNameStringLiteral
,	TokenNameCOMMA
expected	TokenNameIdentifier
.	TokenNameDOT
totalHits	TokenNameIdentifier
,	TokenNameCOMMA
actual	TokenNameIdentifier
.	TokenNameDOT
totalHits	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong maxScore"	TokenNameStringLiteral
,	TokenNameCOMMA
expected	TokenNameIdentifier
.	TokenNameDOT
getMaxScore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
actual	TokenNameIdentifier
.	TokenNameDOT
getMaxScore	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
0.0	TokenNameDoubleLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong hit count"	TokenNameStringLiteral
,	TokenNameCOMMA
expected	TokenNameIdentifier
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
,	TokenNameCOMMA
actual	TokenNameIdentifier
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
hitIDX	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
hitIDX	TokenNameIdentifier
<	TokenNameLESS
expected	TokenNameIdentifier
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
hitIDX	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
ScoreDoc	TokenNameIdentifier
expectedSD	TokenNameIdentifier
=	TokenNameEQUAL
expected	TokenNameIdentifier
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
[	TokenNameLBRACKET
hitIDX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
final	TokenNamefinal
ScoreDoc	TokenNameIdentifier
actualSD	TokenNameIdentifier
=	TokenNameEQUAL
actual	TokenNameIdentifier
.	TokenNameDOT
scoreDocs	TokenNameIdentifier
[	TokenNameLBRACKET
hitIDX	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong hit docID"	TokenNameStringLiteral
,	TokenNameCOMMA
expectedSD	TokenNameIdentifier
.	TokenNameDOT
doc	TokenNameIdentifier
,	TokenNameCOMMA
actualSD	TokenNameIdentifier
.	TokenNameDOT
doc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong hit score"	TokenNameStringLiteral
,	TokenNameCOMMA
expectedSD	TokenNameIdentifier
.	TokenNameDOT
score	TokenNameIdentifier
,	TokenNameCOMMA
actualSD	TokenNameIdentifier
.	TokenNameDOT
score	TokenNameIdentifier
,	TokenNameCOMMA
0.0	TokenNameDoubleLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
expectedSD	TokenNameIdentifier
instanceof	TokenNameinstanceof
FieldDoc	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
Assert	TokenNameIdentifier
.	TokenNameDOT
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
actualSD	TokenNameIdentifier
instanceof	TokenNameinstanceof
FieldDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
Assert	TokenNameIdentifier
.	TokenNameDOT
assertArrayEquals	TokenNameIdentifier
(	TokenNameLPAREN
"wrong sort field values"	TokenNameStringLiteral
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
FieldDoc	TokenNameIdentifier
)	TokenNameRPAREN
expectedSD	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
fields	TokenNameIdentifier
,	TokenNameCOMMA
(	TokenNameLPAREN
(	TokenNameLPAREN
FieldDoc	TokenNameIdentifier
)	TokenNameRPAREN
actualSD	TokenNameIdentifier
)	TokenNameRPAREN
.	TokenNameDOT
fields	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
else	TokenNameelse
{	TokenNameLBRACE
Assert	TokenNameIdentifier
.	TokenNameDOT
assertFalse	TokenNameIdentifier
(	TokenNameLPAREN
actualSD	TokenNameIdentifier
instanceof	TokenNameinstanceof
FieldDoc	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
Document	TokenNameIdentifier
cloneDocument	TokenNameIdentifier
(	TokenNameLPAREN
Document	TokenNameIdentifier
doc1	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
Document	TokenNameIdentifier
doc2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Document	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
Fieldable	TokenNameIdentifier
f	TokenNameIdentifier
:	TokenNameCOLON
doc1	TokenNameIdentifier
.	TokenNameDOT
getFields	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
Field	TokenNameIdentifier
field1	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
Field	TokenNameIdentifier
)	TokenNameRPAREN
f	TokenNameIdentifier
;	TokenNameSEMICOLON
Field	TokenNameIdentifier
field2	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
Field	TokenNameIdentifier
(	TokenNameLPAREN
field1	TokenNameIdentifier
.	TokenNameDOT
name	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
field1	TokenNameIdentifier
.	TokenNameDOT
stringValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
field1	TokenNameIdentifier
.	TokenNameDOT
isStored	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
Field	TokenNameIdentifier
.	TokenNameDOT
Store	TokenNameIdentifier
.	TokenNameDOT
YES	TokenNameIdentifier
:	TokenNameCOLON
Field	TokenNameIdentifier
.	TokenNameDOT
Store	TokenNameIdentifier
.	TokenNameDOT
NO	TokenNameIdentifier
,	TokenNameCOMMA
field1	TokenNameIdentifier
.	TokenNameDOT
isIndexed	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
(	TokenNameLPAREN
field1	TokenNameIdentifier
.	TokenNameDOT
isTokenized	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
?	TokenNameQUESTION
Field	TokenNameIdentifier
.	TokenNameDOT
Index	TokenNameIdentifier
.	TokenNameDOT
ANALYZED	TokenNameIdentifier
:	TokenNameCOLON
Field	TokenNameIdentifier
.	TokenNameDOT
Index	TokenNameIdentifier
.	TokenNameDOT
NOT_ANALYZED	TokenNameIdentifier
)	TokenNameRPAREN
:	TokenNameCOLON
Field	TokenNameIdentifier
.	TokenNameDOT
Index	TokenNameIdentifier
.	TokenNameDOT
NO	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
field2	TokenNameIdentifier
.	TokenNameDOT
setOmitNorms	TokenNameIdentifier
(	TokenNameLPAREN
field1	TokenNameIdentifier
.	TokenNameDOT
getOmitNorms	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
field2	TokenNameIdentifier
.	TokenNameDOT
setIndexOptions	TokenNameIdentifier
(	TokenNameLPAREN
field1	TokenNameIdentifier
.	TokenNameDOT
getIndexOptions	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
doc2	TokenNameIdentifier
.	TokenNameDOT
add	TokenNameIdentifier
(	TokenNameLPAREN
field2	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
doc2	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
