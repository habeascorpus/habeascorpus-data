package	TokenNamepackage
org	TokenNameIdentifier
.	TokenNameDOT
apache	TokenNameIdentifier
.	TokenNameDOT
lucene	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Arrays	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Collections	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Iterator	TokenNameIdentifier
;	TokenNameSEMICOLON
import	TokenNameimport
java	TokenNameIdentifier
.	TokenNameDOT
util	TokenNameIdentifier
.	TokenNameDOT
Random	TokenNameIdentifier
;	TokenNameSEMICOLON
public	TokenNamepublic
class	TokenNameclass
TestNumericUtils	TokenNameIdentifier
extends	TokenNameextends
LuceneTestCase	TokenNameIdentifier
{	TokenNameLBRACE
public	TokenNamepublic
void	TokenNamevoid
testLongConversionAndOrdering	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
last	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
long	TokenNamelong
l	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
100000L	TokenNameLongLiteral
;	TokenNameSEMICOLON
l	TokenNameIdentifier
<	TokenNameLESS
100000L	TokenNameLongLiteral
;	TokenNameSEMICOLON
l	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
act	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
longToPrefixCoded	TokenNameIdentifier
(	TokenNameLPAREN
l	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
last	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"actual bigger than last"	TokenNameStringLiteral
,	TokenNameCOMMA
last	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
act	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"forward and back conversion should generate same long"	TokenNameStringLiteral
,	TokenNameCOMMA
l	TokenNameIdentifier
,	TokenNameCOMMA
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
prefixCodedToLong	TokenNameIdentifier
(	TokenNameLPAREN
act	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
last	TokenNameIdentifier
=	TokenNameEQUAL
act	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIntConversionAndOrdering	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
String	TokenNameIdentifier
last	TokenNameIdentifier
=	TokenNameEQUAL
null	TokenNamenull
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
100000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
100000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
String	TokenNameIdentifier
act	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
intToPrefixCoded	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
last	TokenNameIdentifier
!=	TokenNameNOT_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"actual bigger than last"	TokenNameStringLiteral
,	TokenNameCOMMA
last	TokenNameIdentifier
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
act	TokenNameIdentifier
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"forward and back conversion should generate same int"	TokenNameStringLiteral
,	TokenNameCOMMA
i	TokenNameIdentifier
,	TokenNameCOMMA
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
prefixCodedToInt	TokenNameIdentifier
(	TokenNameLPAREN
act	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
last	TokenNameIdentifier
=	TokenNameEQUAL
act	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testLongSpecialValues	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
vals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
5003400000000L	TokenNameLongLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
4000L	TokenNameLongLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
3000L	TokenNameLongLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
2000L	TokenNameLongLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1000L	TokenNameLongLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1L	TokenNameLongLiteral
,	TokenNameCOMMA
0L	TokenNameLongLiteral
,	TokenNameCOMMA
1L	TokenNameLongLiteral
,	TokenNameCOMMA
10L	TokenNameLongLiteral
,	TokenNameCOMMA
300L	TokenNameLongLiteral
,	TokenNameCOMMA
50006789999999999L	TokenNameLongLiteral
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
prefixVals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
vals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
vals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
prefixVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
longToPrefixCoded	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"forward and back conversion should generate same long"	TokenNameStringLiteral
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
prefixCodedToLong	TokenNameIdentifier
(	TokenNameLPAREN
prefixVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
prefixCodedToInt	TokenNameIdentifier
(	TokenNameLPAREN
prefixVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fail	TokenNameIdentifier
(	TokenNameLPAREN
"decoding a prefix coded long value as int should fail"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NumberFormatException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
prefixVals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"check sort order"	TokenNameStringLiteral
,	TokenNameCOMMA
prefixVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
prefixVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
vals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
64	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
prefixVal	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
prefixCodedToLong	TokenNameIdentifier
(	TokenNameLPAREN
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
longToPrefixCoded	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
j	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
mask	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
j	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
1L	TokenNameLongLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"difference between prefix val and original value for "	TokenNameStringLiteral
+	TokenNamePLUS
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
" with shift="	TokenNameStringLiteral
+	TokenNamePLUS
j	TokenNameIdentifier
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
mask	TokenNameIdentifier
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
-	TokenNameMINUS
prefixVal	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testIntSpecialValues	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
vals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
+	TokenNamePLUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
64765767	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
4000	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
3000	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
2000	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1000	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
10	TokenNameIntegerLiteral
,	TokenNameCOMMA
300	TokenNameIntegerLiteral
,	TokenNameCOMMA
765878989	TokenNameIntegerLiteral
,	TokenNameCOMMA
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
-	TokenNameMINUS
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
String	TokenNameIdentifier
[	TokenNameLBRACKET
]	TokenNameRBRACKET
prefixVals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
String	TokenNameIdentifier
[	TokenNameLBRACKET
vals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
vals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
prefixVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
intToPrefixCoded	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"forward and back conversion should generate same int"	TokenNameStringLiteral
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
prefixCodedToInt	TokenNameIdentifier
(	TokenNameLPAREN
prefixVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
try	TokenNametry
{	TokenNameLBRACE
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
prefixCodedToLong	TokenNameIdentifier
(	TokenNameLPAREN
prefixVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
fail	TokenNameIdentifier
(	TokenNameLPAREN
"decoding a prefix coded int value as long should fail"	TokenNameStringLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
catch	TokenNamecatch
(	TokenNameLPAREN
NumberFormatException	TokenNameIdentifier
e	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
prefixVals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"check sort order"	TokenNameStringLiteral
,	TokenNameCOMMA
prefixVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
.	TokenNameDOT
compareTo	TokenNameIdentifier
(	TokenNameLPAREN
prefixVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
<	TokenNameLESS
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
vals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
j	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
<	TokenNameLESS
32	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
j	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
int	TokenNameint
prefixVal	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
prefixCodedToInt	TokenNameIdentifier
(	TokenNameLPAREN
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
intToPrefixCoded	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
j	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
int	TokenNameint
mask	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
1	TokenNameIntegerLiteral
<<	TokenNameLEFT_SHIFT
j	TokenNameIdentifier
)	TokenNameRPAREN
-	TokenNameMINUS
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"difference between prefix val and original value for "	TokenNameStringLiteral
+	TokenNamePLUS
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
+	TokenNamePLUS
" with shift="	TokenNameStringLiteral
+	TokenNamePLUS
j	TokenNameIdentifier
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
&	TokenNameAND
mask	TokenNameIdentifier
,	TokenNameCOMMA
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
-	TokenNameMINUS
prefixVal	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testDoubles	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
vals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
Double	TokenNameIdentifier
.	TokenNameDOT
NEGATIVE_INFINITY	TokenNameIdentifier
,	TokenNameCOMMA
-	TokenNameMINUS
2.3E25	TokenNameDoubleLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1.0E15	TokenNameDoubleLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1.0	TokenNameDoubleLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1.0E-1	TokenNameDoubleLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1.0E-2	TokenNameDoubleLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
0.0	TokenNameDoubleLiteral
,	TokenNameCOMMA
+	TokenNamePLUS
0.0	TokenNameDoubleLiteral
,	TokenNameCOMMA
1.0E-2	TokenNameDoubleLiteral
,	TokenNameCOMMA
1.0E-1	TokenNameDoubleLiteral
,	TokenNameCOMMA
1.0	TokenNameDoubleLiteral
,	TokenNameCOMMA
1.0E15	TokenNameDoubleLiteral
,	TokenNameCOMMA
2.3E25	TokenNameDoubleLiteral
,	TokenNameCOMMA
Double	TokenNameIdentifier
.	TokenNameDOT
POSITIVE_INFINITY	TokenNameIdentifier
,	TokenNameCOMMA
Double	TokenNameIdentifier
.	TokenNameDOT
NaN	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
long	TokenNamelong
[	TokenNameLBRACKET
]	TokenNameRBRACKET
longVals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
long	TokenNamelong
[	TokenNameLBRACKET
vals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
vals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
longVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
doubleToSortableLong	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"forward and back conversion should generate same double"	TokenNameStringLiteral
,	TokenNameCOMMA
Double	TokenNameIdentifier
.	TokenNameDOT
compare	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
sortableLongToDouble	TokenNameIdentifier
(	TokenNameLPAREN
longVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
longVals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"check sort order"	TokenNameStringLiteral
,	TokenNameCOMMA
longVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
longVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
double	TokenNamedouble
[	TokenNameLBRACKET
]	TokenNameRBRACKET
DOUBLE_NANs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
Double	TokenNameIdentifier
.	TokenNameDOT
NaN	TokenNameIdentifier
,	TokenNameCOMMA
Double	TokenNameIdentifier
.	TokenNameDOT
longBitsToDouble	TokenNameIdentifier
(	TokenNameLPAREN
0x7ff0000000000001L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Double	TokenNameIdentifier
.	TokenNameDOT
longBitsToDouble	TokenNameIdentifier
(	TokenNameLPAREN
0x7fffffffffffffffL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Double	TokenNameIdentifier
.	TokenNameDOT
longBitsToDouble	TokenNameIdentifier
(	TokenNameLPAREN
0xfff0000000000001L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Double	TokenNameIdentifier
.	TokenNameDOT
longBitsToDouble	TokenNameIdentifier
(	TokenNameLPAREN
0xffffffffffffffffL	TokenNameLongLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
testSortableDoubleNaN	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
long	TokenNamelong
plusInf	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
doubleToSortableLong	TokenNameIdentifier
(	TokenNameLPAREN
Double	TokenNameIdentifier
.	TokenNameDOT
POSITIVE_INFINITY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
double	TokenNamedouble
nan	TokenNameIdentifier
:	TokenNameCOLON
DOUBLE_NANs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
Double	TokenNameIdentifier
.	TokenNameDOT
isNaN	TokenNameIdentifier
(	TokenNameLPAREN
nan	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
long	TokenNamelong
sortable	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
doubleToSortableLong	TokenNameIdentifier
(	TokenNameLPAREN
nan	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"Double not sorted correctly: "	TokenNameStringLiteral
+	TokenNamePLUS
nan	TokenNameIdentifier
+	TokenNamePLUS
", long repr: "	TokenNameStringLiteral
+	TokenNamePLUS
sortable	TokenNameIdentifier
+	TokenNamePLUS
", positive inf.: "	TokenNameStringLiteral
+	TokenNamePLUS
plusInf	TokenNameIdentifier
,	TokenNameCOMMA
sortable	TokenNameIdentifier
>	TokenNameGREATER
plusInf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testFloats	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
vals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
{	TokenNameLBRACE
Float	TokenNameIdentifier
.	TokenNameDOT
NEGATIVE_INFINITY	TokenNameIdentifier
,	TokenNameCOMMA
-	TokenNameMINUS
2.3E25f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1.0E15f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1.0f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1.0E-1f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
1.0E-2f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
0.0f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
+	TokenNamePLUS
0.0f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
1.0E-2f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
1.0E-1f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
1.0f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
1.0E15f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
2.3E25f	TokenNameFloatingPointLiteral
,	TokenNameCOMMA
Float	TokenNameIdentifier
.	TokenNameDOT
POSITIVE_INFINITY	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
.	TokenNameDOT
NaN	TokenNameIdentifier
}	TokenNameRBRACE
;	TokenNameSEMICOLON
int	TokenNameint
[	TokenNameLBRACKET
]	TokenNameRBRACKET
intVals	TokenNameIdentifier
=	TokenNameEQUAL
new	TokenNamenew
int	TokenNameint
[	TokenNameLBRACKET
vals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
]	TokenNameRBRACKET
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
vals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
intVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
floatToSortableInt	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"forward and back conversion should generate same double"	TokenNameStringLiteral
,	TokenNameCOMMA
Float	TokenNameIdentifier
.	TokenNameDOT
compare	TokenNameIdentifier
(	TokenNameLPAREN
vals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
,	TokenNameCOMMA
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
sortableIntToFloat	TokenNameIdentifier
(	TokenNameLPAREN
intVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
)	TokenNameRPAREN
==	TokenNameEQUAL_EQUAL
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
intVals	TokenNameIdentifier
.	TokenNameDOT
length	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"check sort order"	TokenNameStringLiteral
,	TokenNameCOMMA
intVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
-	TokenNameMINUS
1	TokenNameIntegerLiteral
]	TokenNameRBRACKET
<	TokenNameLESS
intVals	TokenNameIdentifier
[	TokenNameLBRACKET
i	TokenNameIdentifier
]	TokenNameRBRACKET
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
static	TokenNamestatic
final	TokenNamefinal
float	TokenNamefloat
[	TokenNameLBRACKET
]	TokenNameRBRACKET
FLOAT_NANs	TokenNameIdentifier
=	TokenNameEQUAL
{	TokenNameLBRACE
Float	TokenNameIdentifier
.	TokenNameDOT
NaN	TokenNameIdentifier
,	TokenNameCOMMA
Float	TokenNameIdentifier
.	TokenNameDOT
intBitsToFloat	TokenNameIdentifier
(	TokenNameLPAREN
0x7f800001	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Float	TokenNameIdentifier
.	TokenNameDOT
intBitsToFloat	TokenNameIdentifier
(	TokenNameLPAREN
0x7fffffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Float	TokenNameIdentifier
.	TokenNameDOT
intBitsToFloat	TokenNameIdentifier
(	TokenNameLPAREN
0xff800001	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Float	TokenNameIdentifier
.	TokenNameDOT
intBitsToFloat	TokenNameIdentifier
(	TokenNameLPAREN
0xffffffff	TokenNameIntegerLiteral
)	TokenNameRPAREN
}	TokenNameRBRACE
;	TokenNameSEMICOLON
public	TokenNamepublic
void	TokenNamevoid
testSortableFloatNaN	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
final	TokenNamefinal
int	TokenNameint
plusInf	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
floatToSortableInt	TokenNameIdentifier
(	TokenNameLPAREN
Float	TokenNameIdentifier
.	TokenNameDOT
POSITIVE_INFINITY	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
float	TokenNamefloat
nan	TokenNameIdentifier
:	TokenNameCOLON
FLOAT_NANs	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
Float	TokenNameIdentifier
.	TokenNameDOT
isNaN	TokenNameIdentifier
(	TokenNameLPAREN
nan	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
int	TokenNameint
sortable	TokenNameIdentifier
=	TokenNameEQUAL
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
floatToSortableInt	TokenNameIdentifier
(	TokenNameLPAREN
nan	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"Float not sorted correctly: "	TokenNameStringLiteral
+	TokenNamePLUS
nan	TokenNameIdentifier
+	TokenNamePLUS
", int repr: "	TokenNameStringLiteral
+	TokenNamePLUS
sortable	TokenNameIdentifier
+	TokenNamePLUS
", positive inf.: "	TokenNameStringLiteral
+	TokenNamePLUS
plusInf	TokenNameIdentifier
,	TokenNameCOMMA
sortable	TokenNameIdentifier
>	TokenNameGREATER
plusInf	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
long	TokenNamelong
lower	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
long	TokenNamelong
upper	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
precisionStep	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
boolean	TokenNameboolean
useBitSet	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
Iterable	TokenNameIdentifier
<	TokenNameLESS
Long	TokenNameIdentifier
>	TokenNameGREATER
expectedBounds	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
Iterable	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
expectedShifts	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
OpenBitSet	TokenNameIdentifier
bits	TokenNameIdentifier
=	TokenNameEQUAL
useBitSet	TokenNameIdentifier
?	TokenNameQUESTION
new	TokenNamenew
OpenBitSet	TokenNameIdentifier
(	TokenNameLPAREN
upper	TokenNameIdentifier
-	TokenNameMINUS
lower	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
final	TokenNamefinal
Iterator	TokenNameIdentifier
<	TokenNameLESS
Long	TokenNameIdentifier
>	TokenNameGREATER
neededBounds	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
expectedBounds	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
expectedBounds	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
Iterator	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
neededShifts	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
expectedShifts	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
expectedShifts	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
splitLongRange	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
LongRangeBuilder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
addRange	TokenNameIdentifier
(	TokenNameLPAREN
long	TokenNamelong
min	TokenNameIdentifier
,	TokenNameCOMMA
long	TokenNamelong
max	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
shift	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"min, max should be inside bounds"	TokenNameStringLiteral
,	TokenNameCOMMA
min	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
lower	TokenNameIdentifier
&&	TokenNameAND_AND
min	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
upper	TokenNameIdentifier
&&	TokenNameAND_AND
max	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
lower	TokenNameIdentifier
&&	TokenNameAND_AND
max	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
upper	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
useBitSet	TokenNameIdentifier
)	TokenNameRPAREN
for	TokenNamefor
(	TokenNameLPAREN
long	TokenNamelong
l	TokenNameIdentifier
=	TokenNameEQUAL
min	TokenNameIdentifier
;	TokenNameSEMICOLON
l	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
max	TokenNameIdentifier
;	TokenNameSEMICOLON
l	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
assertFalse	TokenNameIdentifier
(	TokenNameLPAREN
"ranges should not overlap"	TokenNameStringLiteral
,	TokenNameCOMMA
bits	TokenNameIdentifier
.	TokenNameDOT
getAndSet	TokenNameIdentifier
(	TokenNameLPAREN
l	TokenNameIdentifier
-	TokenNameMINUS
lower	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
l	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
max	TokenNameIdentifier
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
neededBounds	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
||	TokenNameOR_OR
neededShifts	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
min	TokenNameIdentifier
^=	TokenNameXOR_EQUAL
0x8000000000000000L	TokenNameLongLiteral
;	TokenNameSEMICOLON
max	TokenNameIdentifier
^=	TokenNameXOR_EQUAL
0x8000000000000000L	TokenNameLongLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"shift"	TokenNameStringLiteral
,	TokenNameCOMMA
neededShifts	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
shift	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"inner min bound"	TokenNameStringLiteral
,	TokenNameCOMMA
neededBounds	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
longValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
min	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
shift	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"inner max bound"	TokenNameStringLiteral
,	TokenNameCOMMA
neededBounds	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
longValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
max	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
shift	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
,	TokenNameCOMMA
precisionStep	TokenNameIdentifier
,	TokenNameCOMMA
lower	TokenNameIdentifier
,	TokenNameCOMMA
upper	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
useBitSet	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bits	TokenNameIdentifier
.	TokenNameDOT
flip	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
upper	TokenNameIdentifier
-	TokenNameMINUS
lower	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"The sub-range concenated should match the whole range"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
bits	TokenNameIdentifier
.	TokenNameDOT
cardinality	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testLongExtremeValues	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0xffffffffffffffffL	TokenNameLongLiteral
,	TokenNameCOMMA
0xffffffffffffffffL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0xffffffffffffffffL	TokenNameLongLiteral
,	TokenNameCOMMA
0xffffffffffffffffL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0xffffffffffffffffL	TokenNameLongLiteral
,	TokenNameCOMMA
0xffffffffffffffffL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0xffffffffffffffffL	TokenNameLongLiteral
,	TokenNameCOMMA
0xffffffffffffffffL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0xffffffffffffffffL	TokenNameLongLiteral
,	TokenNameCOMMA
0xffffffffffffffffL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
64	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0xffffffffffffffffL	TokenNameLongLiteral
,	TokenNameCOMMA
0xffffffffffffffffL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
-	TokenNameMINUS
0xfL	TokenNameLongLiteral
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0xfffffffffffffffL	TokenNameLongLiteral
,	TokenNameCOMMA
0xfffffffffffffffL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
-	TokenNameMINUS
0x10L	TokenNameLongLiteral
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0xffffffffffffffefL	TokenNameLongLiteral
,	TokenNameCOMMA
0xffffffffffffffefL	TokenNameLongLiteral
,	TokenNameCOMMA
0xfffffffffffffffL	TokenNameLongLiteral
,	TokenNameCOMMA
0xfffffffffffffffL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000000000L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000000000L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000000000L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
6	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000000000L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000000000L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
64	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000000000L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
+	TokenNamePLUS
0xfL	TokenNameLongLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x000000000000000L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
+	TokenNamePLUS
0x10L	TokenNameLongLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0000000000000010L	TokenNameLongLiteral
,	TokenNameCOMMA
0x0000000000000010L	TokenNameLongLiteral
,	TokenNameCOMMA
0x000000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x000000000000000L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testRandomSplit	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
long	TokenNamelong
num	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
long	TokenNamelong
)	TokenNameRPAREN
atLeast	TokenNameIdentifier
(	TokenNameLPAREN
10	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
for	TokenNamefor
(	TokenNameLPAREN
long	TokenNamelong
i	TokenNameIdentifier
=	TokenNameEQUAL
0	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<	TokenNameLESS
num	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
executeOneRandomSplit	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
executeOneRandomSplit	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
Random	TokenNameIdentifier
random	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
long	TokenNamelong
lower	TokenNameIdentifier
=	TokenNameEQUAL
randomLong	TokenNameIdentifier
(	TokenNameLPAREN
random	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
long	TokenNamelong
len	TokenNameIdentifier
=	TokenNameEQUAL
random	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
16384	TokenNameIntegerLiteral
*	TokenNameMULTIPLY
1024	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
while	TokenNamewhile
(	TokenNameLPAREN
lower	TokenNameIdentifier
+	TokenNamePLUS
len	TokenNameIdentifier
<	TokenNameLESS
lower	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
lower	TokenNameIdentifier
>>=	TokenNameRIGHT_SHIFT_EQUAL
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
lower	TokenNameIdentifier
,	TokenNameCOMMA
lower	TokenNameIdentifier
+	TokenNamePLUS
len	TokenNameIdentifier
,	TokenNameCOMMA
random	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
64	TokenNameIntegerLiteral
)	TokenNameRPAREN
+	TokenNamePLUS
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
null	TokenNamenull
,	TokenNameCOMMA
null	TokenNamenull
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
long	TokenNamelong
randomLong	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
Random	TokenNameIdentifier
random	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
long	TokenNamelong
val	TokenNameIdentifier
;	TokenNameSEMICOLON
switch	TokenNameswitch
(	TokenNameLPAREN
random	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
case	TokenNamecase
0	TokenNameIntegerLiteral
:	TokenNameCOLON
val	TokenNameIdentifier
=	TokenNameEQUAL
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
random	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
63	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
case	TokenNamecase
1	TokenNameIntegerLiteral
:	TokenNameCOLON
val	TokenNameIdentifier
=	TokenNameEQUAL
-	TokenNameMINUS
1L	TokenNameLongLiteral
<<	TokenNameLEFT_SHIFT
(	TokenNameLPAREN
random	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
63	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
break	TokenNamebreak
;	TokenNameSEMICOLON
default	TokenNamedefault
:	TokenNameCOLON
val	TokenNameIdentifier
=	TokenNameEQUAL
random	TokenNameIdentifier
.	TokenNameDOT
nextLong	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
val	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
random	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
5	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
2	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
random	TokenNameIdentifier
.	TokenNameDOT
nextBoolean	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
if	TokenNameif
(	TokenNameLPAREN
random	TokenNameIdentifier
.	TokenNameDOT
nextBoolean	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
val	TokenNameIdentifier
+=	TokenNamePLUS_EQUAL
random	TokenNameIdentifier
.	TokenNameDOT
nextInt	TokenNameIdentifier
(	TokenNameLPAREN
100	TokenNameIntegerLiteral
)	TokenNameRPAREN
-	TokenNameMINUS
50	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
random	TokenNameIdentifier
.	TokenNameDOT
nextBoolean	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
val	TokenNameIdentifier
=	TokenNameEQUAL
~	TokenNameTWIDDLE
val	TokenNameIdentifier
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
random	TokenNameIdentifier
.	TokenNameDOT
nextBoolean	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
val	TokenNameIdentifier
=	TokenNameEQUAL
val	TokenNameIdentifier
<<	TokenNameLEFT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
random	TokenNameIdentifier
.	TokenNameDOT
nextBoolean	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
val	TokenNameIdentifier
=	TokenNameEQUAL
val	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
1	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
}	TokenNameRBRACE
return	TokenNamereturn
val	TokenNameIdentifier
;	TokenNameSEMICOLON
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testSplitLongRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
5000L	TokenNameLongLiteral
,	TokenNameCOMMA
9500L	TokenNameLongLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x7fffffffffffec78L	TokenNameLongLiteral
,	TokenNameCOMMA
0x7fffffffffffec7fL	TokenNameLongLiteral
,	TokenNameCOMMA
0x8000000000002510L	TokenNameLongLiteral
,	TokenNameCOMMA
0x800000000000251cL	TokenNameLongLiteral
,	TokenNameCOMMA
0x7fffffffffffec8L	TokenNameLongLiteral
,	TokenNameCOMMA
0x7fffffffffffecfL	TokenNameLongLiteral
,	TokenNameCOMMA
0x800000000000250L	TokenNameLongLiteral
,	TokenNameCOMMA
0x800000000000250L	TokenNameLongLiteral
,	TokenNameCOMMA
0x7fffffffffffedL	TokenNameLongLiteral
,	TokenNameCOMMA
0x7fffffffffffefL	TokenNameLongLiteral
,	TokenNameCOMMA
0x80000000000020L	TokenNameLongLiteral
,	TokenNameCOMMA
0x80000000000024L	TokenNameLongLiteral
,	TokenNameCOMMA
0x7ffffffffffffL	TokenNameLongLiteral
,	TokenNameCOMMA
0x8000000000001L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
5000L	TokenNameLongLiteral
,	TokenNameCOMMA
9500L	TokenNameLongLiteral
,	TokenNameCOMMA
64	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x7fffffffffffec78L	TokenNameLongLiteral
,	TokenNameCOMMA
0x800000000000251cL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
0L	TokenNameLongLiteral
,	TokenNameCOMMA
1024L	TokenNameLongLiteral
+	TokenNamePLUS
63L	TokenNameLongLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x800000000000040L	TokenNameLongLiteral
,	TokenNameCOMMA
0x800000000000043L	TokenNameLongLiteral
,	TokenNameCOMMA
0x80000000000000L	TokenNameLongLiteral
,	TokenNameCOMMA
0x80000000000003L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x00L	TokenNameLongLiteral
,	TokenNameCOMMA
0xffL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
56	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0L	TokenNameLongLiteral
,	TokenNameCOMMA
0xfL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
60	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0L	TokenNameLongLiteral
,	TokenNameCOMMA
0x3L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
62	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Long	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Long	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0L	TokenNameLongLiteral
,	TokenNameCOMMA
0x1L	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
63	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
9500L	TokenNameLongLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
5000L	TokenNameLongLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Collections	TokenNameIdentifier
.	TokenNameDOT
<	TokenNameLESS
Long	TokenNameIdentifier
>	TokenNameGREATER
emptyList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
Collections	TokenNameIdentifier
.	TokenNameDOT
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
emptyList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertLongRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
9500L	TokenNameLongLiteral
,	TokenNameCOMMA
9500L	TokenNameLongLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x800000000000251cL	TokenNameLongLiteral
,	TokenNameCOMMA
0x800000000000251cL	TokenNameLongLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
private	TokenNameprivate
void	TokenNamevoid
assertIntRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
final	TokenNamefinal
int	TokenNameint
lower	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
int	TokenNameint
upper	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
precisionStep	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
boolean	TokenNameboolean
useBitSet	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
Iterable	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
expectedBounds	TokenNameIdentifier
,	TokenNameCOMMA
final	TokenNamefinal
Iterable	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
expectedShifts	TokenNameIdentifier
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
final	TokenNamefinal
FixedBitSet	TokenNameIdentifier
bits	TokenNameIdentifier
=	TokenNameEQUAL
useBitSet	TokenNameIdentifier
?	TokenNameQUESTION
new	TokenNamenew
FixedBitSet	TokenNameIdentifier
(	TokenNameLPAREN
upper	TokenNameIdentifier
-	TokenNameMINUS
lower	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
:	TokenNameCOLON
null	TokenNamenull
;	TokenNameSEMICOLON
final	TokenNamefinal
Iterator	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
neededBounds	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
expectedBounds	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
expectedBounds	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
final	TokenNamefinal
Iterator	TokenNameIdentifier
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
neededShifts	TokenNameIdentifier
=	TokenNameEQUAL
(	TokenNameLPAREN
expectedShifts	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
?	TokenNameQUESTION
null	TokenNamenull
:	TokenNameCOLON
expectedShifts	TokenNameIdentifier
.	TokenNameDOT
iterator	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
splitIntRange	TokenNameIdentifier
(	TokenNameLPAREN
new	TokenNamenew
NumericUtils	TokenNameIdentifier
.	TokenNameDOT
IntRangeBuilder	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
{	TokenNameLBRACE
@	TokenNameAT
Override	TokenNameIdentifier
public	TokenNamepublic
void	TokenNamevoid
addRange	TokenNameIdentifier
(	TokenNameLPAREN
int	TokenNameint
min	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
max	TokenNameIdentifier
,	TokenNameCOMMA
int	TokenNameint
shift	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
assertTrue	TokenNameIdentifier
(	TokenNameLPAREN
"min, max should be inside bounds"	TokenNameStringLiteral
,	TokenNameCOMMA
min	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
lower	TokenNameIdentifier
&&	TokenNameAND_AND
min	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
upper	TokenNameIdentifier
&&	TokenNameAND_AND
max	TokenNameIdentifier
>=	TokenNameGREATER_EQUAL
lower	TokenNameIdentifier
&&	TokenNameAND_AND
max	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
upper	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
useBitSet	TokenNameIdentifier
)	TokenNameRPAREN
for	TokenNamefor
(	TokenNameLPAREN
int	TokenNameint
i	TokenNameIdentifier
=	TokenNameEQUAL
min	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
<=	TokenNameLESS_EQUAL
max	TokenNameIdentifier
;	TokenNameSEMICOLON
i	TokenNameIdentifier
++	TokenNamePLUS_PLUS
)	TokenNameRPAREN
{	TokenNameLBRACE
assertFalse	TokenNameIdentifier
(	TokenNameLPAREN
"ranges should not overlap"	TokenNameStringLiteral
,	TokenNameCOMMA
bits	TokenNameIdentifier
.	TokenNameDOT
getAndSet	TokenNameIdentifier
(	TokenNameLPAREN
i	TokenNameIdentifier
-	TokenNameMINUS
lower	TokenNameIdentifier
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
i	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
max	TokenNameIdentifier
)	TokenNameRPAREN
break	TokenNamebreak
;	TokenNameSEMICOLON
}	TokenNameRBRACE
if	TokenNameif
(	TokenNameLPAREN
neededBounds	TokenNameIdentifier
==	TokenNameEQUAL_EQUAL
null	TokenNamenull
)	TokenNameRPAREN
return	TokenNamereturn
;	TokenNameSEMICOLON
min	TokenNameIdentifier
^=	TokenNameXOR_EQUAL
0x80000000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
max	TokenNameIdentifier
^=	TokenNameXOR_EQUAL
0x80000000	TokenNameIntegerLiteral
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"shift"	TokenNameStringLiteral
,	TokenNameCOMMA
neededShifts	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
shift	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"inner min bound"	TokenNameStringLiteral
,	TokenNameCOMMA
neededBounds	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
min	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
shift	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"inner max bound"	TokenNameStringLiteral
,	TokenNameCOMMA
neededBounds	TokenNameIdentifier
.	TokenNameDOT
next	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
.	TokenNameDOT
intValue	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
max	TokenNameIdentifier
>>>	TokenNameUNSIGNED_RIGHT_SHIFT
shift	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
,	TokenNameCOMMA
precisionStep	TokenNameIdentifier
,	TokenNameCOMMA
lower	TokenNameIdentifier
,	TokenNameCOMMA
upper	TokenNameIdentifier
)	TokenNameRPAREN
;	TokenNameSEMICOLON
if	TokenNameif
(	TokenNameLPAREN
useBitSet	TokenNameIdentifier
)	TokenNameRPAREN
{	TokenNameLBRACE
bits	TokenNameIdentifier
.	TokenNameDOT
flip	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
upper	TokenNameIdentifier
-	TokenNameMINUS
lower	TokenNameIdentifier
+	TokenNamePLUS
1	TokenNameIntegerLiteral
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertEquals	TokenNameIdentifier
(	TokenNameLPAREN
"The sub-range concenated should match the whole range"	TokenNameStringLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
bits	TokenNameIdentifier
.	TokenNameDOT
cardinality	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
public	TokenNamepublic
void	TokenNamevoid
testSplitIntRange	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
throws	TokenNamethrows
Exception	TokenNameIdentifier
{	TokenNameLBRACE
assertIntRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
5000	TokenNameIntegerLiteral
,	TokenNameCOMMA
9500	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x7fffec78	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7fffec7f	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x80002510	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x8000251c	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7fffec8	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7fffecf	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x8000250	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x8000250	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7fffed	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7fffef	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x800020	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x800024	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x7ffff	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x80001	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
12	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertIntRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
-	TokenNameMINUS
5000	TokenNameIntegerLiteral
,	TokenNameCOMMA
9500	TokenNameIntegerLiteral
,	TokenNameCOMMA
32	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x7fffec78	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x8000251c	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertIntRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
,	TokenNameCOMMA
1024	TokenNameIntegerLiteral
+	TokenNamePLUS
63	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
true	TokenNametrue
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x8000040	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x8000043	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x800000	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x800003	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertIntRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
8	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x00	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xff	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
24	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertIntRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0xf	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
28	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertIntRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
2	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x3	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
30	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertIntRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
Integer	TokenNameIdentifier
.	TokenNameDOT
MIN_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
Integer	TokenNameIdentifier
.	TokenNameDOT
MAX_VALUE	TokenNameIdentifier
,	TokenNameCOMMA
1	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x0	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x1	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
31	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertIntRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
9500	TokenNameIntegerLiteral
,	TokenNameCOMMA
-	TokenNameMINUS
5000	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Collections	TokenNameIdentifier
.	TokenNameDOT
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
emptyList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
,	TokenNameCOMMA
Collections	TokenNameIdentifier
.	TokenNameDOT
<	TokenNameLESS
Integer	TokenNameIdentifier
>	TokenNameGREATER
emptyList	TokenNameIdentifier
(	TokenNameLPAREN
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
assertIntRangeSplit	TokenNameIdentifier
(	TokenNameLPAREN
9500	TokenNameIntegerLiteral
,	TokenNameCOMMA
9500	TokenNameIntegerLiteral
,	TokenNameCOMMA
4	TokenNameIntegerLiteral
,	TokenNameCOMMA
false	TokenNamefalse
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0x8000251c	TokenNameIntegerLiteral
,	TokenNameCOMMA
0x8000251c	TokenNameIntegerLiteral
)	TokenNameRPAREN
,	TokenNameCOMMA
Arrays	TokenNameIdentifier
.	TokenNameDOT
asList	TokenNameIdentifier
(	TokenNameLPAREN
0	TokenNameIntegerLiteral
)	TokenNameRPAREN
)	TokenNameRPAREN
;	TokenNameSEMICOLON
}	TokenNameRBRACE
}	TokenNameRBRACE
